{"version":3,"file":"lib_index_js.5b717e8908bd644bc806.js","mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACuD;AACmB;AAC5B;AAC9C;AAC4F;AACzB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,kEAAM,eAAe,aAAa;AAC1C,QAAQ,qEAAS,uBAAuB,aAAa;AACrD;AACA;AACA,QAAQ,oEAAQ,eAAe,aAAa;AAC5C,QAAQ,qEAAS,uBAAuB,aAAa;AACrD;AACA;AACA;AACA,QAAQ,kEAAM,oBAAoB,aAAa;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,uDAAQ;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAe;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB,EAAE,8BAA8B;AACtF;AACA;AACA;AACA;AACA;AACA,QAAQ,oEAAQ;AAChB;AACA;AACA;AACA,QAAQ,oEAAQ;AAChB;AACA,uBAAuB,kEAAM;AAC7B;AACA,QAAQ,oEAAQ;AAChB;AACA,sBAAsB,kEAAM;AAC5B,sEAAsE;AACtE,QAAQ,oEAAQ;AAChB;AACA,6BAA6B,kEAAM;AACnC;AACA,QAAQ,oEAAQ;AAChB;AACA;AACA;AACA,QAAQ,kEAAM;AACd,QAAQ,qEAAS;AACjB;AACA;AACA,QAAQ,qEAAS;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,iEAAe,EAAE,kEAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D,qCAAqC,yDAAyD;AAC9F;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D,qCAAqC,wDAAwD;AAC7F;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D,qCAAqC,yDAAyD;AAC9F;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D,qCAAqC,wDAAwD;AAC7F;AACA;AACA,iEAAiE,OAAO;AACxE,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D,qCAAqC,wDAAwD;AAC7F;AACA;AACA,iEAAiE,OAAO;AACxE,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D,qCAAqC,yDAAyD;AAC9F;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D,qCAAqC,wDAAwD;AAC7F;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D,qCAAqC,yDAAyD;AAC9F;AACA,4BAA4B,WAAW;AACvC,mDAAmD,MAAM;AACzD;AACA,4DAA4D,MAAM;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,8BAA8B,kCAAkC;AAChE,yCAAyC,wBAAwB,MAAM,8BAA8B;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D;AACA,qCAAqC,wEAAwE;AAC7G,qCAAqC,qFAAqF;AAC1H;AACA,qCAAqC,4FAA4F;AACjI,qCAAqC,8FAA8F;AACnI;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK;AAChE,SAAS;AACT,0BAA0B,kCAAkC;AAC5D,qCAAqC,wDAAwD;AAC7F;AACA;AACA;AACA,2BAA2B,0EAAc,kBAAkB,6DAAK,qBAAqB,qEAAS;AAC9F,SAAS;AACT,0BAA0B,kCAAkC;AAC5D,qCAAqC,yDAAyD;AAC9F;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab-tpt/./lib/index.js"],"sourcesContent":["/*\n * for attaching keybindings later on, see\n * https://towardsdatascience.com/how-to-customize-jupyterlab-keyboard-shortcuts-72321f73753d\n */\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { INotebookTracker, NotebookActions, } from '@jupyterlab/notebook';\nimport { CodeCell, } from '@jupyterlab/cells';\n// md_clean may be broken\nimport { md_get, md_set, md_unset, md_insert, md_remove } from 'jupyterlab-celltagsclasses';\nimport { Scope, apply_on_cells } from 'jupyterlab-celltagsclasses';\n/*\nin order to have consistent behaviour between\nclassic notebook (with the hide-input extension enabled)\nand jupyter book, we manage consistently\n* the metadata.hide_input attribute\n* the 'hide-input' tag\n*/\nconst _set_hide = (cell, hidden, input_output) => {\n    if (hidden) {\n        md_set(cell, `hide_${input_output}`, true);\n        md_insert(cell, 'tags', `hide-${input_output}`);\n    }\n    else {\n        md_unset(cell, `hide_${input_output}`);\n        md_remove(cell, 'tags', `hide-${input_output}`);\n    }\n};\nconst _toggle_hide = (cell, input_output) => {\n    if (md_get(cell, `tags.hide-${input_output}`)) {\n        _set_hide(cell, false, input_output);\n    }\n    else {\n        _set_hide(cell, true, input_output);\n    }\n};\nconst set_hide_input = (cell, hidden) => _set_hide(cell, hidden, 'input');\nconst set_hide_output = (cell, hidden) => _set_hide(cell, hidden, 'output');\nconst toggle_hide_input = (cell) => _toggle_hide(cell, 'input');\nconst toggle_hide_output = (cell) => _toggle_hide(cell, 'output');\n// this is specific to the web course, where we use a toolset with functions\n// that have this in their name\nconst NEEDLE = 'tools.sample_from';\nconst set_hide_input_needle = (cell, hidden) => {\n    // ignore text cells\n    if (cell instanceof CodeCell) {\n        // need to access the cell model\n        const model = cell.model;\n        if (model.sharedModel.getSource().toLowerCase().indexOf(NEEDLE) !== -1) {\n            set_hide_input(cell, hidden);\n        }\n    }\n};\n// use depth=0 to remove\nconst make_text_and_insert_section = (notebook, depth) => {\n    // console.log(\"make_text_and_insert_section\", depth)\n    NotebookActions.changeCellType(notebook, 'markdown');\n    const activeCell = notebook === null || notebook === void 0 ? void 0 : notebook.activeCell;\n    if (activeCell === undefined) {\n        return;\n    }\n    const model = activeCell === null || activeCell === void 0 ? void 0 : activeCell.model;\n    if (model === undefined) {\n        return;\n    }\n    // remove starting #'s if any\n    for (let i = 4; i > 0; i--) {\n        model.sharedModel.setSource(model.sharedModel.getSource().replace('#'.repeat(i) + ' ', ''));\n    }\n    if (depth === 0) {\n        return;\n    }\n    model.sharedModel.setSource(`${'#'.repeat(depth)} ${model.sharedModel.getSource()}`);\n};\nconst clean_cell_metadata = (cell) => {\n    console.log(\"Cleaning metadata for cell\", cell);\n    const editable = cell.model.getMetadata('editable');\n    if (editable === true) {\n        md_unset(cell, 'editable');\n    }\n    const tags = cell.model.getMetadata('tags');\n    if ((tags === null || tags === void 0 ? void 0 : tags.length) === 0) {\n        md_unset(cell, 'tags');\n    }\n    const slide_type = md_get(cell, 'slideshow.slide_type');\n    if (slide_type === '') {\n        md_unset(cell, 'slideshow.slide_type');\n    }\n    const slideshow = md_get(cell, 'slideshow');\n    if ((slideshow !== undefined) && (JSON.stringify(slideshow) == '{}')) {\n        md_unset(cell, 'slideshow');\n    }\n    const user_expressions = md_get(cell, 'user_expressions');\n    if ((user_expressions === null || user_expressions === void 0 ? void 0 : user_expressions.length) === 0) {\n        md_unset(cell, 'user_expressions');\n    }\n};\nconst toggle_tag = (cell, tag) => {\n    if (md_get(cell, 'tags', tag)) {\n        md_remove(cell, 'tags', tag);\n    }\n    else {\n        md_insert(cell, 'tags', tag);\n    }\n};\n/**\n * Initialization data for the jupyterlab-tpt extension.\n */\nconst plugin = {\n    id: 'jupyterlab-tpt:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, INotebookTracker],\n    activate: (app, palette, notebookTracker) => {\n        console.log('extension jupyterlab-tpt is activating');\n        // console.log('ICommandPalette', palette)\n        // console.log('INotebookTracker', notebookTracker)\n        // the addCommand would accept the following\n        // isEnabled: () => true,\n        // isVisible: () => true,\n        // iconClass: 'some-css-icon-class',\n        // also we could pass args to execute, but in the hide-input case\n        // it does not work well as we need distinct labels depending on the args\n        // https://lumino.readthedocs.io/en/1.x/api/commands/interfaces/commandregistry.ikeybindingoptions.html\n        // The supported modifiers are: Accel, Alt, Cmd, Ctrl, and Shift. The Accel\n        // modifier is translated to Cmd on Mac and Ctrl on all other platforms. The\n        // Cmd modifier is ignored on non-Mac platforms.\n        // Alt is option on mac\n        let command;\n        // Option-Command-9 = toggle (hide-input) on all selected cells\n        // Ctrl-Alt-9 = show (wrt hide-input) on all selected cells\n        command = 'convenience:hide-input';\n        app.commands.addCommand(command, {\n            label: 'hide input for all selected cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, (cell) => set_hide_input(cell, true))\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        command = 'convenience:show-input';\n        app.commands.addCommand(command, {\n            label: 'show input for all selected cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, (cell) => set_hide_input(cell, false))\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        app.commands.addKeyBinding({ command, keys: ['Ctrl Alt 9'], selector: '.jp-Notebook' });\n        command = 'convenience:toggle-show-input';\n        app.commands.addCommand(command, {\n            label: 'toggle show input for all selected cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, (cell) => toggle_hide_input(cell))\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        app.commands.addKeyBinding({ command, keys: ['Alt Cmd 9'], selector: '.jp-Notebook' });\n        command = 'convenience:hide-output';\n        app.commands.addCommand(command, {\n            label: 'hide output for all selected cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, (cell) => set_hide_output(cell, true))\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        command = 'convenience:show-output';\n        app.commands.addCommand(command, {\n            label: 'show output for all selected cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, (cell) => set_hide_output(cell, false))\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        app.commands.addKeyBinding({ command, keys: ['Ctrl Alt 0'], selector: '.jp-Notebook' });\n        command = 'convenience:toggle-show-output';\n        app.commands.addCommand(command, {\n            label: 'toggle show output for all selected cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, (cell) => toggle_hide_output(cell))\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        app.commands.addKeyBinding({ command, keys: ['Alt Cmd 0'], selector: '.jp-Notebook' });\n        command = 'convenience:hide-input-all-samples';\n        app.commands.addCommand(command, {\n            label: `hide input for all code cells that contain ${NEEDLE}`,\n            execute: () => apply_on_cells(notebookTracker, Scope.All, (cell) => set_hide_input_needle(cell, true))\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        app.commands.addKeyBinding({ command, keys: ['Alt Cmd 8'], selector: '.jp-Notebook' });\n        command = 'convenience:show-input-all-samples';\n        app.commands.addCommand(command, {\n            label: `show input for all code cells that contain ${NEEDLE}`,\n            execute: () => apply_on_cells(notebookTracker, Scope.All, (cell) => set_hide_input_needle(cell, false))\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        app.commands.addKeyBinding({ command, keys: ['Ctrl Alt 8'], selector: '.jp-Notebook' });\n        command = 'convenience:metadata-clean-selected';\n        app.commands.addCommand(command, {\n            label: `clean metadata for all selected cells`,\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, clean_cell_metadata)\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        app.commands.addKeyBinding({ command, keys: ['Alt Cmd 7'], selector: '.jp-Notebook' });\n        command = 'convenience:metadata-clean-all';\n        app.commands.addCommand(command, {\n            label: `clean metadata for all cells`,\n            execute: () => apply_on_cells(notebookTracker, Scope.All, clean_cell_metadata)\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        app.commands.addKeyBinding({ command, keys: ['Ctrl Alt 7'], selector: '.jp-Notebook' });\n        // Ctrl-0 to Ctrl-4 to set markdown sections\n        for (let depth = 0; depth < 5; depth++) {\n            command = `convenience:section-level-${depth}`;\n            app.commands.addCommand(command, {\n                label: `active cell becomes section level ${depth}`,\n                execute: () => {\n                    var _a;\n                    const notebook = (_a = notebookTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                    if (notebook === undefined) {\n                        return;\n                    }\n                    make_text_and_insert_section(notebook, depth);\n                }\n            });\n            palette.addItem({ command, category: 'Convenience' });\n            app.commands.addKeyBinding({ command, keys: [`Ctrl ${depth}`], selector: '.jp-Notebook' });\n        }\n        // render-all-cells - unrender-all-cells (markdown actually)\n        const unrender_markdown = (cell) => {\n            if (cell.model.type !== 'markdown') {\n                return;\n            }\n            cell.rendered = false;\n        };\n        command = 'notebook:unrender-all-markdown';\n        app.commands.addCommand(command, {\n            label: 'unrender all markdown cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.All, unrender_markdown)\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        // control-e means end of ine if in edit mode\n        app.commands.addKeyBinding({ command, keys: ['Ctrl E'], selector: '.jp-Notebook.jp-mod-commandMode' });\n        app.commands.addKeyBinding({ command: 'notebook:render-all-markdown', keys: ['Ctrl W'], selector: '.jp-Notebook' });\n        // this is actually lowercase u and d, would need an explicit Shift otherwise\n        app.commands.addKeyBinding({ command: 'notebook:move-cell-up', keys: ['U'], selector: '.jp-Notebook.jp-mod-commandMode' });\n        app.commands.addKeyBinding({ command: 'notebook:move-cell-down', keys: ['D'], selector: '.jp-Notebook.jp-mod-commandMode' });\n        command = 'convenience:toggle-raises-exception';\n        app.commands.addCommand(command, {\n            label: 'toggle raises-exception for all selected cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, (cell) => toggle_tag(cell, 'raises-exception')),\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        app.commands.addKeyBinding({ command, keys: ['Alt Cmd 6'], selector: '.jp-Notebook' });\n        command = 'convenience:set-raises-exception';\n        app.commands.addCommand(command, {\n            label: 'set raises-exception for all selected cells',\n            execute: () => apply_on_cells(notebookTracker, Scope.Multiple, (cell) => md_insert(cell, 'tags', 'raises-exception')),\n        });\n        palette.addItem({ command, category: 'Convenience' });\n        app.commands.addKeyBinding({ command, keys: ['Ctrl Alt 6'], selector: '.jp-Notebook' });\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}