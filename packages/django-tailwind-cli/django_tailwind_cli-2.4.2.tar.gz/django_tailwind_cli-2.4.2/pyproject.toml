[tool.poetry]
name = "django-tailwind-cli"
version = "2.4.2"
description = "Django and Tailwind integration based on the prebuilt Tailwind CSS CLI."
authors = ["Oliver Andrich <oliver@andrich.me>"]
readme = "README.md"
license = "MIT"
homepage = "https://django-tailwind-cli.andrich.me/"
repository = "https://github.com/oliverandrich/django-tailwind-cli"
documentation = "https://django-tailwind-cli.andrich.me/"
keywords = ["django", "tailwind", "css"]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent",
  "Topic :: Software Development :: Libraries",
  "Topic :: Utilities",
  "Environment :: Web Environment",
  "Framework :: Django :: 3.2",
  "Framework :: Django :: 4.1",
  "Framework :: Django :: 4.2",
]
packages = [{ include = "django_tailwind_cli", from = "src" }]

[tool.poetry.dependencies]
python = "^3.8.1"
django = ">=3.2,<5.0"
certifi = "^2023.7.22"
django-extensions = { version = "^3.2.1", optional = true }
werkzeug = { version = "^3.0.0", optional = true }


[tool.poetry.extras]
"django-extensions" = ["django-extensions", "werkzeug"]


[tool.poetry.group.dev.dependencies]
django-types = ">=0.17,<0.19"
pytest = "^7.4.2"
pytest-mock = "^3.11.1"
pytest-django = "^4.5.2"
pytest-cov = "^4.1.0"
pytest-randomly = "^3.15.0"
syrupy = "^4.5.0"
mkdocs-material = "^9.3.1"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# pytest
[tool.pytest.ini_options]
DJANGO_SETTINGS_MODULE = "tests.settings"
pythonpath = [".", "src"]
django_find_project = false
markers = ["mock_network_and_subprocess"]

# Black
[tool.black]
target-version = ["py38"]
line-length = 120
skip-string-normalization = true

# Pyright
[tool.pyright]
typeCheckingMode = "strict"
venvPath = ".venv"
venv = "."

# Ruff
[tool.ruff]
target-version = "py38"
line-length = 120
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DJ",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105",
  "S106",
  "S107",
  # Ignore complexity
  "C901",
  "PLR0911",
  "PLR0912",
  "PLR0913",
  "PLR0915",
]
unfixable = [
  # Don't touch unused imports
  "F401",
  # Don't touch unused variables
  "F841",
]

[tool.ruff.isort]
known-first-party = ["django_tailwind_cli"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"tests/**/*" = ["PLR2004", "S101", "TID252"]

# Coverage
[tool.coverage.run]
source_pkgs = ["django_tailwind_cli"]
branch = true
parallel = true
omit = ["src/django_tailwind_cli/__version__.py"]

[tool.coverage.paths]
django_tailwind_cli = ["src/django_tailwind_cli"]
tests = ["tests"]

[tool.coverage.report]
exclude_lines = ["no cov", "if __name__ == .__main__.:", "if TYPE_CHECKING:"]
