# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: placeHolderApiVersion
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iqs_client.configuration import Configuration


class ExecuteQueryOneOffRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'query_language': 'QueryLanguage',
        'query_name': 'str',
        'query_definitions': 'list[str]',
        'model_compartment': 'ModelCompartment',
        'parameter_binding': 'list[Argument]',
        'use_osmc_links_for_elements': 'bool',
        'query_mode': 'str',
        'return_element_details': 'bool',
        'query_timeout': 'int'
    }

    attribute_map = {
        'query_language': 'queryLanguage',
        'query_name': 'queryName',
        'query_definitions': 'queryDefinitions',
        'model_compartment': 'modelCompartment',
        'parameter_binding': 'parameterBinding',
        'use_osmc_links_for_elements': 'useOSMCLinksForElements',
        'query_mode': 'queryMode',
        'return_element_details': 'returnElementDetails',
        'query_timeout': 'queryTimeout'
    }

    def __init__(self, query_language=None, query_name=None, query_definitions=None, model_compartment=None, parameter_binding=None, use_osmc_links_for_elements=None, query_mode=None, return_element_details=False, query_timeout=-1, local_vars_configuration=None):  # noqa: E501
        """ExecuteQueryOneOffRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._query_language = None
        self._query_name = None
        self._query_definitions = None
        self._model_compartment = None
        self._parameter_binding = None
        self._use_osmc_links_for_elements = None
        self._query_mode = None
        self._return_element_details = None
        self._query_timeout = None
        self.discriminator = None

        self.query_language = query_language
        if query_name is not None:
            self.query_name = query_name
        self.query_definitions = query_definitions
        self.model_compartment = model_compartment
        if parameter_binding is not None:
            self.parameter_binding = parameter_binding
        if use_osmc_links_for_elements is not None:
            self.use_osmc_links_for_elements = use_osmc_links_for_elements
        if query_mode is not None:
            self.query_mode = query_mode
        if return_element_details is not None:
            self.return_element_details = return_element_details
        if query_timeout is not None:
            self.query_timeout = query_timeout

    @property
    def query_language(self):
        """Gets the query_language of this ExecuteQueryOneOffRequest.  # noqa: E501


        :return: The query_language of this ExecuteQueryOneOffRequest.  # noqa: E501
        :rtype: QueryLanguage
        """
        return self._query_language

    @query_language.setter
    def query_language(self, query_language):
        """Sets the query_language of this ExecuteQueryOneOffRequest.


        :param query_language: The query_language of this ExecuteQueryOneOffRequest.  # noqa: E501
        :type: QueryLanguage
        """
        if self.local_vars_configuration.client_side_validation and query_language is None:  # noqa: E501
            raise ValueError("Invalid value for `query_language`, must not be `None`")  # noqa: E501

        self._query_language = query_language

    @property
    def query_name(self):
        """Gets the query_name of this ExecuteQueryOneOffRequest.  # noqa: E501

        Identifies (by name) the main query from the provided query definitions (the rest are helpers). Mandatory for viatra queries. * cannot contain dot (.)   # noqa: E501

        :return: The query_name of this ExecuteQueryOneOffRequest.  # noqa: E501
        :rtype: str
        """
        return self._query_name

    @query_name.setter
    def query_name(self, query_name):
        """Sets the query_name of this ExecuteQueryOneOffRequest.

        Identifies (by name) the main query from the provided query definitions (the rest are helpers). Mandatory for viatra queries. * cannot contain dot (.)   # noqa: E501

        :param query_name: The query_name of this ExecuteQueryOneOffRequest.  # noqa: E501
        :type: str
        """

        self._query_name = query_name

    @property
    def query_definitions(self):
        """Gets the query_definitions of this ExecuteQueryOneOffRequest.  # noqa: E501


        :return: The query_definitions of this ExecuteQueryOneOffRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._query_definitions

    @query_definitions.setter
    def query_definitions(self, query_definitions):
        """Sets the query_definitions of this ExecuteQueryOneOffRequest.


        :param query_definitions: The query_definitions of this ExecuteQueryOneOffRequest.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and query_definitions is None:  # noqa: E501
            raise ValueError("Invalid value for `query_definitions`, must not be `None`")  # noqa: E501

        self._query_definitions = query_definitions

    @property
    def model_compartment(self):
        """Gets the model_compartment of this ExecuteQueryOneOffRequest.  # noqa: E501


        :return: The model_compartment of this ExecuteQueryOneOffRequest.  # noqa: E501
        :rtype: ModelCompartment
        """
        return self._model_compartment

    @model_compartment.setter
    def model_compartment(self, model_compartment):
        """Sets the model_compartment of this ExecuteQueryOneOffRequest.


        :param model_compartment: The model_compartment of this ExecuteQueryOneOffRequest.  # noqa: E501
        :type: ModelCompartment
        """
        if self.local_vars_configuration.client_side_validation and model_compartment is None:  # noqa: E501
            raise ValueError("Invalid value for `model_compartment`, must not be `None`")  # noqa: E501

        self._model_compartment = model_compartment

    @property
    def parameter_binding(self):
        """Gets the parameter_binding of this ExecuteQueryOneOffRequest.  # noqa: E501


        :return: The parameter_binding of this ExecuteQueryOneOffRequest.  # noqa: E501
        :rtype: list[Argument]
        """
        return self._parameter_binding

    @parameter_binding.setter
    def parameter_binding(self, parameter_binding):
        """Sets the parameter_binding of this ExecuteQueryOneOffRequest.


        :param parameter_binding: The parameter_binding of this ExecuteQueryOneOffRequest.  # noqa: E501
        :type: list[Argument]
        """

        self._parameter_binding = parameter_binding

    @property
    def use_osmc_links_for_elements(self):
        """Gets the use_osmc_links_for_elements of this ExecuteQueryOneOffRequest.  # noqa: E501


        :return: The use_osmc_links_for_elements of this ExecuteQueryOneOffRequest.  # noqa: E501
        :rtype: bool
        """
        return self._use_osmc_links_for_elements

    @use_osmc_links_for_elements.setter
    def use_osmc_links_for_elements(self, use_osmc_links_for_elements):
        """Sets the use_osmc_links_for_elements of this ExecuteQueryOneOffRequest.


        :param use_osmc_links_for_elements: The use_osmc_links_for_elements of this ExecuteQueryOneOffRequest.  # noqa: E501
        :type: bool
        """

        self._use_osmc_links_for_elements = use_osmc_links_for_elements

    @property
    def query_mode(self):
        """Gets the query_mode of this ExecuteQueryOneOffRequest.  # noqa: E501


        :return: The query_mode of this ExecuteQueryOneOffRequest.  # noqa: E501
        :rtype: str
        """
        return self._query_mode

    @query_mode.setter
    def query_mode(self, query_mode):
        """Sets the query_mode of this ExecuteQueryOneOffRequest.


        :param query_mode: The query_mode of this ExecuteQueryOneOffRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["searchBased", "standing"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and query_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `query_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(query_mode, allowed_values)
            )

        self._query_mode = query_mode

    @property
    def return_element_details(self):
        """Gets the return_element_details of this ExecuteQueryOneOffRequest.  # noqa: E501


        :return: The return_element_details of this ExecuteQueryOneOffRequest.  # noqa: E501
        :rtype: bool
        """
        return self._return_element_details

    @return_element_details.setter
    def return_element_details(self, return_element_details):
        """Sets the return_element_details of this ExecuteQueryOneOffRequest.


        :param return_element_details: The return_element_details of this ExecuteQueryOneOffRequest.  # noqa: E501
        :type: bool
        """

        self._return_element_details = return_element_details

    @property
    def query_timeout(self):
        """Gets the query_timeout of this ExecuteQueryOneOffRequest.  # noqa: E501


        :return: The query_timeout of this ExecuteQueryOneOffRequest.  # noqa: E501
        :rtype: int
        """
        return self._query_timeout

    @query_timeout.setter
    def query_timeout(self, query_timeout):
        """Sets the query_timeout of this ExecuteQueryOneOffRequest.


        :param query_timeout: The query_timeout of this ExecuteQueryOneOffRequest.  # noqa: E501
        :type: int
        """

        self._query_timeout = query_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExecuteQueryOneOffRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExecuteQueryOneOffRequest):
            return True

        return self.to_dict() != other.to_dict()
