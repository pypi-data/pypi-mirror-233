# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: placeHolderApiVersion
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iqs_client.configuration import Configuration


class RepositoryStructureResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'message': 'str',
        'updated': 'bool',
        'last_updated': 'str',
        'twc': 'list[TWCRepositoryStructure]',
        'mms': 'list[MMSRepositoryStructure]',
        'jama': 'list[JamaRepositoryStructure]',
        'modelon_impact': 'list[ModelonImpactRepositoryStructure]',
        'jira': 'list[JiraRepositoryStructure]',
        'confluence': 'list[ConfluenceRepositoryStructure]'
    }

    attribute_map = {
        'message': 'message',
        'updated': 'updated',
        'last_updated': 'lastUpdated',
        'twc': 'twc',
        'mms': 'mms',
        'jama': 'jama',
        'modelon_impact': 'modelon-impact',
        'jira': 'jira',
        'confluence': 'confluence'
    }

    def __init__(self, message=None, updated=None, last_updated=None, twc=None, mms=None, jama=None, modelon_impact=None, jira=None, confluence=None, local_vars_configuration=None):  # noqa: E501
        """RepositoryStructureResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._message = None
        self._updated = None
        self._last_updated = None
        self._twc = None
        self._mms = None
        self._jama = None
        self._modelon_impact = None
        self._jira = None
        self._confluence = None
        self.discriminator = None

        if message is not None:
            self.message = message
        if updated is not None:
            self.updated = updated
        if last_updated is not None:
            self.last_updated = last_updated
        if twc is not None:
            self.twc = twc
        if mms is not None:
            self.mms = mms
        if jama is not None:
            self.jama = jama
        if modelon_impact is not None:
            self.modelon_impact = modelon_impact
        if jira is not None:
            self.jira = jira
        if confluence is not None:
            self.confluence = confluence

    @property
    def message(self):
        """Gets the message of this RepositoryStructureResponse.  # noqa: E501


        :return: The message of this RepositoryStructureResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this RepositoryStructureResponse.


        :param message: The message of this RepositoryStructureResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def updated(self):
        """Gets the updated of this RepositoryStructureResponse.  # noqa: E501


        :return: The updated of this RepositoryStructureResponse.  # noqa: E501
        :rtype: bool
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this RepositoryStructureResponse.


        :param updated: The updated of this RepositoryStructureResponse.  # noqa: E501
        :type: bool
        """

        self._updated = updated

    @property
    def last_updated(self):
        """Gets the last_updated of this RepositoryStructureResponse.  # noqa: E501


        :return: The last_updated of this RepositoryStructureResponse.  # noqa: E501
        :rtype: str
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this RepositoryStructureResponse.


        :param last_updated: The last_updated of this RepositoryStructureResponse.  # noqa: E501
        :type: str
        """

        self._last_updated = last_updated

    @property
    def twc(self):
        """Gets the twc of this RepositoryStructureResponse.  # noqa: E501


        :return: The twc of this RepositoryStructureResponse.  # noqa: E501
        :rtype: list[TWCRepositoryStructure]
        """
        return self._twc

    @twc.setter
    def twc(self, twc):
        """Sets the twc of this RepositoryStructureResponse.


        :param twc: The twc of this RepositoryStructureResponse.  # noqa: E501
        :type: list[TWCRepositoryStructure]
        """

        self._twc = twc

    @property
    def mms(self):
        """Gets the mms of this RepositoryStructureResponse.  # noqa: E501


        :return: The mms of this RepositoryStructureResponse.  # noqa: E501
        :rtype: list[MMSRepositoryStructure]
        """
        return self._mms

    @mms.setter
    def mms(self, mms):
        """Sets the mms of this RepositoryStructureResponse.


        :param mms: The mms of this RepositoryStructureResponse.  # noqa: E501
        :type: list[MMSRepositoryStructure]
        """

        self._mms = mms

    @property
    def jama(self):
        """Gets the jama of this RepositoryStructureResponse.  # noqa: E501


        :return: The jama of this RepositoryStructureResponse.  # noqa: E501
        :rtype: list[JamaRepositoryStructure]
        """
        return self._jama

    @jama.setter
    def jama(self, jama):
        """Sets the jama of this RepositoryStructureResponse.


        :param jama: The jama of this RepositoryStructureResponse.  # noqa: E501
        :type: list[JamaRepositoryStructure]
        """

        self._jama = jama

    @property
    def modelon_impact(self):
        """Gets the modelon_impact of this RepositoryStructureResponse.  # noqa: E501


        :return: The modelon_impact of this RepositoryStructureResponse.  # noqa: E501
        :rtype: list[ModelonImpactRepositoryStructure]
        """
        return self._modelon_impact

    @modelon_impact.setter
    def modelon_impact(self, modelon_impact):
        """Sets the modelon_impact of this RepositoryStructureResponse.


        :param modelon_impact: The modelon_impact of this RepositoryStructureResponse.  # noqa: E501
        :type: list[ModelonImpactRepositoryStructure]
        """

        self._modelon_impact = modelon_impact

    @property
    def jira(self):
        """Gets the jira of this RepositoryStructureResponse.  # noqa: E501


        :return: The jira of this RepositoryStructureResponse.  # noqa: E501
        :rtype: list[JiraRepositoryStructure]
        """
        return self._jira

    @jira.setter
    def jira(self, jira):
        """Sets the jira of this RepositoryStructureResponse.


        :param jira: The jira of this RepositoryStructureResponse.  # noqa: E501
        :type: list[JiraRepositoryStructure]
        """

        self._jira = jira

    @property
    def confluence(self):
        """Gets the confluence of this RepositoryStructureResponse.  # noqa: E501


        :return: The confluence of this RepositoryStructureResponse.  # noqa: E501
        :rtype: list[ConfluenceRepositoryStructure]
        """
        return self._confluence

    @confluence.setter
    def confluence(self, confluence):
        """Sets the confluence of this RepositoryStructureResponse.


        :param confluence: The confluence of this RepositoryStructureResponse.  # noqa: E501
        :type: list[ConfluenceRepositoryStructure]
        """

        self._confluence = confluence

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryStructureResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RepositoryStructureResponse):
            return True

        return self.to_dict() != other.to_dict()
