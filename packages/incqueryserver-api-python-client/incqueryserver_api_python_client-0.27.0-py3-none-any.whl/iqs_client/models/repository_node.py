# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: placeHolderApiVersion
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iqs_client.configuration import Configuration


class RepositoryNode(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'list[str]',
        'name': 'str',
        'path': 'list[PathSegment]',
        'group_name': 'str',
        'node_type': 'str',
        'candidate_uri': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'path': 'path',
        'group_name': 'groupName',
        'node_type': 'nodeType',
        'candidate_uri': 'candidateUri'
    }

    def __init__(self, id=None, name=None, path=None, group_name=None, node_type=None, candidate_uri=None, local_vars_configuration=None):  # noqa: E501
        """RepositoryNode - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._path = None
        self._group_name = None
        self._node_type = None
        self._candidate_uri = None
        self.discriminator = None

        self.id = id
        self.name = name
        self.path = path
        self.group_name = group_name
        self.node_type = node_type
        self.candidate_uri = candidate_uri

    @property
    def id(self):
        """Gets the id of this RepositoryNode.  # noqa: E501


        :return: The id of this RepositoryNode.  # noqa: E501
        :rtype: list[str]
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RepositoryNode.


        :param id: The id of this RepositoryNode.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and id is None:  # noqa: E501
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this RepositoryNode.  # noqa: E501


        :return: The name of this RepositoryNode.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RepositoryNode.


        :param name: The name of this RepositoryNode.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and name is None:  # noqa: E501
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self):
        """Gets the path of this RepositoryNode.  # noqa: E501


        :return: The path of this RepositoryNode.  # noqa: E501
        :rtype: list[PathSegment]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this RepositoryNode.


        :param path: The path of this RepositoryNode.  # noqa: E501
        :type: list[PathSegment]
        """
        if self.local_vars_configuration.client_side_validation and path is None:  # noqa: E501
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def group_name(self):
        """Gets the group_name of this RepositoryNode.  # noqa: E501


        :return: The group_name of this RepositoryNode.  # noqa: E501
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """Sets the group_name of this RepositoryNode.


        :param group_name: The group_name of this RepositoryNode.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and group_name is None:  # noqa: E501
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    @property
    def node_type(self):
        """Gets the node_type of this RepositoryNode.  # noqa: E501


        :return: The node_type of this RepositoryNode.  # noqa: E501
        :rtype: str
        """
        return self._node_type

    @node_type.setter
    def node_type(self, node_type):
        """Sets the node_type of this RepositoryNode.


        :param node_type: The node_type of this RepositoryNode.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and node_type is None:  # noqa: E501
            raise ValueError("Invalid value for `node_type`, must not be `None`")  # noqa: E501
        allowed_values = ["inode", "leaf"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and node_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `node_type` ({0}), must be one of {1}"  # noqa: E501
                .format(node_type, allowed_values)
            )

        self._node_type = node_type

    @property
    def candidate_uri(self):
        """Gets the candidate_uri of this RepositoryNode.  # noqa: E501


        :return: The candidate_uri of this RepositoryNode.  # noqa: E501
        :rtype: str
        """
        return self._candidate_uri

    @candidate_uri.setter
    def candidate_uri(self, candidate_uri):
        """Sets the candidate_uri of this RepositoryNode.


        :param candidate_uri: The candidate_uri of this RepositoryNode.  # noqa: E501
        :type: str
        """

        self._candidate_uri = candidate_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RepositoryNode):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RepositoryNode):
            return True

        return self.to_dict() != other.to_dict()
