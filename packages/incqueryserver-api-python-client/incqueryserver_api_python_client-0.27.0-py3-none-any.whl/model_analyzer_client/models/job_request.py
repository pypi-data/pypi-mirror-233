# coding: utf-8

"""
    IncQuery Server Model Analyzer

    Model Analyzer jobs can be executed on indexed compartments.  # noqa: E501

    The version of the OpenAPI document: placeHolderApiVersion
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from model_analyzer_client.configuration import Configuration


class JobRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'job_type_id': 'str',
        'artifact_name': 'str',
        'arguments': 'dict(str, object)',
        'git_branch_name': 'str'
    }

    attribute_map = {
        'job_type_id': 'jobTypeId',
        'artifact_name': 'artifactName',
        'arguments': 'arguments',
        'git_branch_name': 'gitBranchName'
    }

    def __init__(self, job_type_id=None, artifact_name=None, arguments=None, git_branch_name=None, local_vars_configuration=None):  # noqa: E501
        """JobRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._job_type_id = None
        self._artifact_name = None
        self._arguments = None
        self._git_branch_name = None
        self.discriminator = None

        self.job_type_id = job_type_id
        if artifact_name is not None:
            self.artifact_name = artifact_name
        if arguments is not None:
            self.arguments = arguments
        if git_branch_name is not None:
            self.git_branch_name = git_branch_name

    @property
    def job_type_id(self):
        """Gets the job_type_id of this JobRequest.  # noqa: E501

        The path to the Jupyter notebook, which performs an analysis. When the notebook is fetched from Git, use the relative path to your repository root.  # noqa: E501

        :return: The job_type_id of this JobRequest.  # noqa: E501
        :rtype: str
        """
        return self._job_type_id

    @job_type_id.setter
    def job_type_id(self, job_type_id):
        """Sets the job_type_id of this JobRequest.

        The path to the Jupyter notebook, which performs an analysis. When the notebook is fetched from Git, use the relative path to your repository root.  # noqa: E501

        :param job_type_id: The job_type_id of this JobRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and job_type_id is None:  # noqa: E501
            raise ValueError("Invalid value for `job_type_id`, must not be `None`")  # noqa: E501

        self._job_type_id = job_type_id

    @property
    def artifact_name(self):
        """Gets the artifact_name of this JobRequest.  # noqa: E501

        The name of the zip file, which contains the artifacts of this analysis.  # noqa: E501

        :return: The artifact_name of this JobRequest.  # noqa: E501
        :rtype: str
        """
        return self._artifact_name

    @artifact_name.setter
    def artifact_name(self, artifact_name):
        """Sets the artifact_name of this JobRequest.

        The name of the zip file, which contains the artifacts of this analysis.  # noqa: E501

        :param artifact_name: The artifact_name of this JobRequest.  # noqa: E501
        :type: str
        """

        self._artifact_name = artifact_name

    @property
    def arguments(self):
        """Gets the arguments of this JobRequest.  # noqa: E501

        Input parameters of the Jupyter notebook as key-value pairs.  # noqa: E501

        :return: The arguments of this JobRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments):
        """Sets the arguments of this JobRequest.

        Input parameters of the Jupyter notebook as key-value pairs.  # noqa: E501

        :param arguments: The arguments of this JobRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._arguments = arguments

    @property
    def git_branch_name(self):
        """Gets the git_branch_name of this JobRequest.  # noqa: E501

        Name of the git branch, where the user-defined Jupyter notebooks are stored. If this parameter is set, built-in notebooks can't be executed.  # noqa: E501

        :return: The git_branch_name of this JobRequest.  # noqa: E501
        :rtype: str
        """
        return self._git_branch_name

    @git_branch_name.setter
    def git_branch_name(self, git_branch_name):
        """Sets the git_branch_name of this JobRequest.

        Name of the git branch, where the user-defined Jupyter notebooks are stored. If this parameter is set, built-in notebooks can't be executed.  # noqa: E501

        :param git_branch_name: The git_branch_name of this JobRequest.  # noqa: E501
        :type: str
        """

        self._git_branch_name = git_branch_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobRequest):
            return True

        return self.to_dict() != other.to_dict()
