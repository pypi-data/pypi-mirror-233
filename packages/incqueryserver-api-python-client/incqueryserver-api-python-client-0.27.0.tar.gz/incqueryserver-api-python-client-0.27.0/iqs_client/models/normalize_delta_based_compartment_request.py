# coding: utf-8

"""
    IncQuery Server Web API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: placeHolderApiVersion
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from iqs_client.configuration import Configuration


class NormalizeDeltaBasedCompartmentRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'compartment_uri': 'str',
        'remove_history': 'bool',
        'keep_baseline': 'bool'
    }

    attribute_map = {
        'compartment_uri': 'compartmentURI',
        'remove_history': 'removeHistory',
        'keep_baseline': 'keepBaseline'
    }

    def __init__(self, compartment_uri=None, remove_history=False, keep_baseline=False, local_vars_configuration=None):  # noqa: E501
        """NormalizeDeltaBasedCompartmentRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._compartment_uri = None
        self._remove_history = None
        self._keep_baseline = None
        self.discriminator = None

        self.compartment_uri = compartment_uri
        if remove_history is not None:
            self.remove_history = remove_history
        if keep_baseline is not None:
            self.keep_baseline = keep_baseline

    @property
    def compartment_uri(self):
        """Gets the compartment_uri of this NormalizeDeltaBasedCompartmentRequest.  # noqa: E501

        Defines the unique resource identifier of the model compartment.   # noqa: E501

        :return: The compartment_uri of this NormalizeDeltaBasedCompartmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._compartment_uri

    @compartment_uri.setter
    def compartment_uri(self, compartment_uri):
        """Sets the compartment_uri of this NormalizeDeltaBasedCompartmentRequest.

        Defines the unique resource identifier of the model compartment.   # noqa: E501

        :param compartment_uri: The compartment_uri of this NormalizeDeltaBasedCompartmentRequest.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and compartment_uri is None:  # noqa: E501
            raise ValueError("Invalid value for `compartment_uri`, must not be `None`")  # noqa: E501

        self._compartment_uri = compartment_uri

    @property
    def remove_history(self):
        """Gets the remove_history of this NormalizeDeltaBasedCompartmentRequest.  # noqa: E501

        Remove the history (delta-chain) which is normalized.  It might be possible that some model compartments of the history cannot be removed, because there are other compartments, which have a dependency on them. In this case the response will not contain an error. The compartment normalization could still succeed in this case.   # noqa: E501

        :return: The remove_history of this NormalizeDeltaBasedCompartmentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._remove_history

    @remove_history.setter
    def remove_history(self, remove_history):
        """Sets the remove_history of this NormalizeDeltaBasedCompartmentRequest.

        Remove the history (delta-chain) which is normalized.  It might be possible that some model compartments of the history cannot be removed, because there are other compartments, which have a dependency on them. In this case the response will not contain an error. The compartment normalization could still succeed in this case.   # noqa: E501

        :param remove_history: The remove_history of this NormalizeDeltaBasedCompartmentRequest.  # noqa: E501
        :type: bool
        """

        self._remove_history = remove_history

    @property
    def keep_baseline(self):
        """Gets the keep_baseline of this NormalizeDeltaBasedCompartmentRequest.  # noqa: E501

        Only applicable if removeHistory is set.   # noqa: E501

        :return: The keep_baseline of this NormalizeDeltaBasedCompartmentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._keep_baseline

    @keep_baseline.setter
    def keep_baseline(self, keep_baseline):
        """Sets the keep_baseline of this NormalizeDeltaBasedCompartmentRequest.

        Only applicable if removeHistory is set.   # noqa: E501

        :param keep_baseline: The keep_baseline of this NormalizeDeltaBasedCompartmentRequest.  # noqa: E501
        :type: bool
        """

        self._keep_baseline = keep_baseline

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NormalizeDeltaBasedCompartmentRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NormalizeDeltaBasedCompartmentRequest):
            return True

        return self.to_dict() != other.to_dict()
