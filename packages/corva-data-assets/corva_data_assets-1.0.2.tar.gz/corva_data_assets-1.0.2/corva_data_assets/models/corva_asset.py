# coding: utf-8

"""
    Corva Data API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr
from corva_data_assets.models.corva_asset_program import CorvaAssetProgram
from corva_data_assets.models.corva_asset_rig import CorvaAssetRig
from corva_data_assets.models.corva_asset_stats import CorvaAssetStats
from corva_data_assets.models.corva_asset_top_hole import CorvaAssetTopHole

class CorvaAsset(BaseModel):
    """
    CorvaAsset
    """
    id: Optional[StrictStr] = Field(None, alias="_id", description="MongoDB ObjectId.")
    asset_id: Optional[StrictInt] = None
    api_number: Optional[StrictStr] = None
    basin: Optional[StrictStr] = None
    company_id: Optional[StrictInt] = None
    contractor_name: Optional[StrictStr] = None
    county: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    directional_driller: Optional[StrictStr] = None
    last_active_at: Optional[datetime] = None
    mud_company: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    program: Optional[CorvaAssetProgram] = None
    rig: Optional[CorvaAssetRig] = None
    stats: Optional[CorvaAssetStats] = None
    status: Optional[StrictStr] = None
    timezone: Optional[StrictStr] = None
    top_hole: Optional[CorvaAssetTopHole] = None
    type: Optional[StrictStr] = None
    day_shift_start_time: Optional[StrictStr] = None
    string_design: Optional[StrictStr] = None
    target_formation: Optional[StrictStr] = None
    __properties = ["_id", "asset_id", "api_number", "basin", "company_id", "contractor_name", "county", "created_at", "directional_driller", "last_active_at", "mud_company", "name", "program", "rig", "stats", "status", "timezone", "top_hole", "type", "day_shift_start_time", "string_design", "target_formation"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CorvaAsset:
        """Create an instance of CorvaAsset from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of program
        if self.program:
            _dict['program'] = self.program.to_dict()
        # override the default output from pydantic by calling `to_dict()` of rig
        if self.rig:
            _dict['rig'] = self.rig.to_dict()
        # override the default output from pydantic by calling `to_dict()` of stats
        if self.stats:
            _dict['stats'] = self.stats.to_dict()
        # override the default output from pydantic by calling `to_dict()` of top_hole
        if self.top_hole:
            _dict['top_hole'] = self.top_hole.to_dict()
        # set to None if api_number (nullable) is None
        # and __fields_set__ contains the field
        if self.api_number is None and "api_number" in self.__fields_set__:
            _dict['api_number'] = None

        # set to None if basin (nullable) is None
        # and __fields_set__ contains the field
        if self.basin is None and "basin" in self.__fields_set__:
            _dict['basin'] = None

        # set to None if company_id (nullable) is None
        # and __fields_set__ contains the field
        if self.company_id is None and "company_id" in self.__fields_set__:
            _dict['company_id'] = None

        # set to None if contractor_name (nullable) is None
        # and __fields_set__ contains the field
        if self.contractor_name is None and "contractor_name" in self.__fields_set__:
            _dict['contractor_name'] = None

        # set to None if county (nullable) is None
        # and __fields_set__ contains the field
        if self.county is None and "county" in self.__fields_set__:
            _dict['county'] = None

        # set to None if created_at (nullable) is None
        # and __fields_set__ contains the field
        if self.created_at is None and "created_at" in self.__fields_set__:
            _dict['created_at'] = None

        # set to None if last_active_at (nullable) is None
        # and __fields_set__ contains the field
        if self.last_active_at is None and "last_active_at" in self.__fields_set__:
            _dict['last_active_at'] = None

        # set to None if mud_company (nullable) is None
        # and __fields_set__ contains the field
        if self.mud_company is None and "mud_company" in self.__fields_set__:
            _dict['mud_company'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if program (nullable) is None
        # and __fields_set__ contains the field
        if self.program is None and "program" in self.__fields_set__:
            _dict['program'] = None

        # set to None if rig (nullable) is None
        # and __fields_set__ contains the field
        if self.rig is None and "rig" in self.__fields_set__:
            _dict['rig'] = None

        # set to None if stats (nullable) is None
        # and __fields_set__ contains the field
        if self.stats is None and "stats" in self.__fields_set__:
            _dict['stats'] = None

        # set to None if status (nullable) is None
        # and __fields_set__ contains the field
        if self.status is None and "status" in self.__fields_set__:
            _dict['status'] = None

        # set to None if timezone (nullable) is None
        # and __fields_set__ contains the field
        if self.timezone is None and "timezone" in self.__fields_set__:
            _dict['timezone'] = None

        # set to None if top_hole (nullable) is None
        # and __fields_set__ contains the field
        if self.top_hole is None and "top_hole" in self.__fields_set__:
            _dict['top_hole'] = None

        # set to None if type (nullable) is None
        # and __fields_set__ contains the field
        if self.type is None and "type" in self.__fields_set__:
            _dict['type'] = None

        # set to None if day_shift_start_time (nullable) is None
        # and __fields_set__ contains the field
        if self.day_shift_start_time is None and "day_shift_start_time" in self.__fields_set__:
            _dict['day_shift_start_time'] = None

        # set to None if string_design (nullable) is None
        # and __fields_set__ contains the field
        if self.string_design is None and "string_design" in self.__fields_set__:
            _dict['string_design'] = None

        # set to None if target_formation (nullable) is None
        # and __fields_set__ contains the field
        if self.target_formation is None and "target_formation" in self.__fields_set__:
            _dict['target_formation'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CorvaAsset:
        """Create an instance of CorvaAsset from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CorvaAsset.parse_obj(obj)

        _obj = CorvaAsset.parse_obj({
            "id": obj.get("_id"),
            "asset_id": obj.get("asset_id"),
            "api_number": obj.get("api_number"),
            "basin": obj.get("basin"),
            "company_id": obj.get("company_id"),
            "contractor_name": obj.get("contractor_name"),
            "county": obj.get("county"),
            "created_at": obj.get("created_at"),
            "directional_driller": obj.get("directional_driller"),
            "last_active_at": obj.get("last_active_at"),
            "mud_company": obj.get("mud_company"),
            "name": obj.get("name"),
            "program": CorvaAssetProgram.from_dict(obj.get("program")) if obj.get("program") is not None else None,
            "rig": CorvaAssetRig.from_dict(obj.get("rig")) if obj.get("rig") is not None else None,
            "stats": CorvaAssetStats.from_dict(obj.get("stats")) if obj.get("stats") is not None else None,
            "status": obj.get("status"),
            "timezone": obj.get("timezone"),
            "top_hole": CorvaAssetTopHole.from_dict(obj.get("top_hole")) if obj.get("top_hole") is not None else None,
            "type": obj.get("type"),
            "day_shift_start_time": obj.get("day_shift_start_time"),
            "string_design": obj.get("string_design"),
            "target_formation": obj.get("target_formation")
        })
        return _obj


