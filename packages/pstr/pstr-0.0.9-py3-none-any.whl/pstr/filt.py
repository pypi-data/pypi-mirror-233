# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_filt.ipynb.

# %% auto 0
__all__ = ['just', 'justabc', 'justnum', 'justpunc', 'droppunc', 'dropquote', 'splitget', 'prepart', 'midpart', 'endpart']

# %% ../nbs/09_filt.ipynb 4
import string
from typing import Callable, Optional
from .nstr import NIL, SPACE, SUNDER
from .chck import isquote

# %% ../nbs/09_filt.ipynb 6
def just(s: str, flag: Callable[[str], bool]) -> str:
    '''Filters a string for just the specified characters'''
    return ''.join(list(filter(flag, s)))

def justabc(s: str) -> str:
    '''Filters a string for just alpha values'''
    return just(s, str.isalpha)

def justnum(s: str) -> str:
    '''Filters a string for just numeric values'''
    return just(s, str.isnumeric)

def justpunc(s: str) -> str:
    '''Filters a string for just punctuation values'''
    return just(s, string.punctuation)
    
def droppunc(s: str) -> str:
    return s.translate(str.maketrans(NIL, NIL, string.punctuation))

def dropquote(s: str) -> str:
    return just(s, lambda c: not isquote(c))

def splitget(s: str, sep: str = SUNDER, idx: int = 0) -> str:
    parts = s.split(sep)
    return parts[idx]    

def prepart(s:str, sep: Optional[str] = SPACE) -> str:
    pre, *_ = s.partition(sep)
    return pre

def midpart(s:str, sep: Optional[str] = SPACE) -> str:
    _, mid, _ = s.partition(sep)
    return mid

def endpart(s:str, sep: Optional[str] = SPACE) -> str:
    *_, end = s.partition(sep)
    return end
