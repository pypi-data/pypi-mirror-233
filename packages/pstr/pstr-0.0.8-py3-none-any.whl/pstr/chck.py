# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/09_chck.ipynb.

# %% auto 0
__all__ = ['isdunder', 'isnilstr', 'isstar', 'iselps', 'ispunct', 'isupper', 'islower', 'ischars', 'isuniq']

# %% ../nbs/09_chck.ipynb 4
import string
from typing import Callable, Optional, TypeGuard, Literal
from .nstr import STAR, ELLIPSE, NIL

# %% ../nbs/09_chck.ipynb 6
def isdunder(s: str) -> TypeGuard[str]:
    return isinstance(s, str) and s.startswith('__') and s.endswith('__') and len(s) > 4

def isnilstr(s: str) -> TypeGuard[str]:
    return isinstance(s, str) and len(s) == 0

# %% ../nbs/09_chck.ipynb 7
def isstar(s: str) -> TypeGuard[str]:
    return isinstance(s, str) and s == STAR

def iselps(s: str) -> TypeGuard[str]:
    return isinstance(s, str) and s == ELLIPSE

# %% ../nbs/09_chck.ipynb 8
def ispunct(s: str) -> TypeGuard[str]:
    return isinstance(s, str) and s in string.punctuation

def isupper(s: str) -> TypeGuard[str]:
    return  isinstance(s, str) and s in string.ascii_uppercase

def islower(s: str) -> TypeGuard[str]:
    return  isinstance(s, str) and s in string.ascii_lowercase

# %% ../nbs/09_chck.ipynb 9
def ischars(s: str, chars: str = string.punctuation) -> bool: # isvalid
    '''Checks if a string only contains characters from a set of valid characters.'''
    return all(c in chars for c in s)

def isuniq(s: str) -> bool: # isuniq
    '''Checks if a string only contains unique characters.'''
    return len(set(s)) == len(s)
