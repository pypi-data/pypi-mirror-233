{"version":3,"file":"lib_index_js.4ba74505f9cf64c19f08.js","mappings":";;;;;;;;;;;;;;;;;;;;AAA+B;AACgC;AACd;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,gDAAmB,CAAC,2DAAQ,IAAI,WAAW,aAAa,aAAa,YAAY,GAAG;AAC/F;AACO,gCAAgC,8DAAY;AACnD;AACA;AACA;AACA;AACA,kBAAkB,2DAAS;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,gDAAmB,+BAA+B,oDAAoD;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAe,iBAAiB,EAAC;;;;;;;;;;;;;;;;;;;;;;;;ACrCjC;AACA;AACmD;AACK;AACL;AACC;AAClB;AAClC;AACA;AACA;AACO;AACP;AACA;AACA,qBAAqB,wEAAqB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,0DAAiB;AAC1D;AACA;AACA,SAAS;AACT,qCAAqC,sDAAuB;AAC5D;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,8EAA4B;AAC3C;AACA;AACA,8BAA8B,gFAA8B;AAC5D,iBAAiB;AACjB;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,sDAAuB;AAC/B,eAAe,6DAAU;AACzB;AACA;AACA,iEAAe,0BAA0B,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACnGS;AACF;AACS;AACY;AAClB;AACM;AACxB;AAClC;AACA;AACA;AACA,IAAI,mFAAkC;AACtC;AACA;AACA,IAAI,uEAA4B;AAChC;AACA;AACA,IAAI,iEAAyB;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,8CAAe;AACvB,eAAe,2DAAS,EAAE,oEAAgB,EAAE,6DAAU;AACtD;AACA;AACA,iEAAe,YAAY,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7B5B;AACA;AACuC;AACmB;AACT;AACS;AACF;AACL;AACV;AACP;AAClC;AACA;AACA;AACO;AACP;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACO;AACP;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,mBAAmB;AACnB,0BAA0B,iDAAI;AAC9B;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,2BAA2B,mDAAM;AACjC;AACA,gBAAgB,iCAAiC;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,qEAAmB,IAAI,iEAAe,GAAG,iBAAiB;AAC5E;AACA,WAAW,gEAAU;AACrB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,+EAA6B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,WAAW,8EAA4B;AACvC;AACA;AACA,0BAA0B,gFAA8B;AACxD,aAAa;AACb;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,SAAS;AACT,yBAAyB,wEAAqB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,6CAAc;AACtB,eAAe,2DAAS,EAAE,oEAAgB;AAC1C;AACA;AACA,iEAAe,iBAAiB,EAAC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,0BAA0B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1K3B;AACA;AAC0D;AACT;AACS;AACP;AACK;AACf;AACP;AAClC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AACjC;AACA;AACA;AACO;AACP;AACA;AACA,YAAY,WAAW;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,UAAU,8BAA8B;AACxC,UAAU,8BAA8B;AACxC,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wEAAqB;AAC1C;AACA;AACA;AACA;AACA,WAAW,8EAA4B;AACvC;AACA;AACA;AACA,IAAI,uDAAI;AACR;AACA;AACA;AACA,4DAA4D,eAAe;AAC3E;AACA;AACA;AACA,wDAAwD,eAAe;AACvE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,kBAAkB,iEAAe,GAAG,kBAAkB;AACtD;AACA,WAAW,gEAAU;AACrB;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,gDAAiB;AACzB,eAAe,2DAAS,EAAE,oEAAgB;AAC1C;AACA;AACA,iEAAe,oBAAoB,EAAC;;;;;;;;;;;;;;;;;;;ACtIpC;AACA;AACA;AACA,WAAW,QAAQ,yBAAyB;AACrC;AACA,qBAAqB,GAAG;AACxB,6BAA6B,GAAG;AAChC,uBAAuB,GAAG;AAC1B,oBAAoB,GAAG","sources":["webpack://rsp-jupyter-extensions/./lib/DisplayLabVersion.js","webpack://rsp-jupyter-extensions/./lib/displayversion.js","webpack://rsp-jupyter-extensions/./lib/index.js","webpack://rsp-jupyter-extensions/./lib/query.js","webpack://rsp-jupyter-extensions/./lib/savequit.js","webpack://rsp-jupyter-extensions/./lib/tokens.js"],"sourcesContent":["import * as React from 'react';\nimport { VDomModel, VDomRenderer } from '@jupyterlab/apputils';\nimport { TextItem } from '@jupyterlab/statusbar';\n/**\n * A pure function for rendering the displayversion information.\n *\n * @param props: the props for rendering the component.\n *\n * @returns a tsx component for displaying version information.\n */\nfunction DisplayLabVersionComponent(props) {\n    return React.createElement(TextItem, { source: `${props.source}`, title: `${props.title}` });\n}\nexport class DisplayLabVersion extends VDomRenderer {\n    /**\n     * Create a new DisplayLabVersion widget.\n     */\n    constructor(props) {\n        super(new VDomModel());\n        this.props = props;\n    }\n    /**\n     * Render the display Lab version widget.\n     */\n    render() {\n        if (!this.props) {\n            return null;\n        }\n        return (React.createElement(DisplayLabVersionComponent, { source: this.props.source, title: this.props.title }));\n    }\n    /**\n     * Dispose of the item.\n     */\n    dispose() {\n        super.dispose();\n    }\n}\nexport default DisplayLabVersion;\n","// Copyright (c) LSST DM/SQuaRE\n// Distributed under the terms of the MIT License.\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { IStatusBar } from '@jupyterlab/statusbar';\nimport DisplayLabVersion from './DisplayLabVersion';\nimport * as token from './tokens';\n/**\n * Activate the extension.\n */\nexport function activateRSPDisplayVersionExtension(app, statusBar) {\n    console.log('RSP DisplayVersion extension: loading...');\n    const svcManager = app.serviceManager;\n    const endpoint = PageConfig.getBaseUrl() + 'rubin/environment';\n    const init = {\n        method: 'GET'\n    };\n    const settings = svcManager.serverSettings;\n    apiRequest(endpoint, init, settings).then(res => {\n        const image_description = res.IMAGE_DESCRIPTION || '';\n        const image_digest = res.IMAGE_DIGEST;\n        const image_spec = res.JUPYTER_IMAGE_SPEC;\n        const instance_url = new URL(res.EXTERNAL_INSTANCE_URL || '');\n        const hostname = ' ' + instance_url.hostname;\n        const container_size = res.CONTAINER_SIZE || '';\n        let size = '';\n        if (container_size === '') {\n            size = ' (' + res.CPU_LIMIT + ' CPU, ' + res.MEM_LIMIT + ' B)';\n        }\n        else {\n            size = ' ' + container_size;\n        }\n        let digest_str = '';\n        let imagename = '';\n        if (image_spec) {\n            /* First try to get digest out of image spec (nublado v3) */\n            const imagearr = image_spec.split('/');\n            const pullname = imagearr[imagearr.length - 1];\n            const partsarr = pullname.split('@');\n            if (partsarr.length === 2) {\n                /* Split name and sha; \"sha256:\" is seven characters */\n                digest_str = ' [' + partsarr[1].substring(7, 7 + 8) + '...]';\n                imagename = ' (' + partsarr[0] + ')';\n            }\n            else {\n                /* Nothing to split; image name is the name we pulled by */\n                imagename = ' (' + pullname + ')';\n            }\n            if (digest_str === '' && image_digest) {\n                /* No digest in spec?  Well, did we set IMAGE_DIGEST?\n                   Yes, if we are nubladov2. */\n                digest_str = ' [' + image_digest.substring(0, 8) + '...]';\n            }\n        }\n        const label = image_description + digest_str + imagename + size + hostname;\n        const displayVersionWidget = new DisplayLabVersion({\n            source: label,\n            title: image_description\n        });\n        statusBar.registerStatusItem(token.DISPLAYVERSION_ID, {\n            item: displayVersionWidget,\n            align: 'left',\n            rank: 80,\n            isActive: () => true\n        });\n    });\n    function apiRequest(url, init, settings) {\n        /**\n         * Make a request to our endpoint to get the version\n         *\n         * @param url - the path for the displayversion extension\n         *\n         * @param init - The GET for the extension\n         *\n         * @param settings - the settings for the current notebook server\n         *\n         * @returns a Promise resolved with the JSON response\n         */\n        // Fake out URL check in makeRequest\n        return ServerConnection.makeRequest(url, init, settings).then(response => {\n            if (response.status !== 200) {\n                return response.json().then(data => {\n                    throw new ServerConnection.ResponseError(response, data.message);\n                });\n            }\n            return response.json();\n        });\n    }\n    console.log('RSP DisplayVersion extension: ... loaded');\n}\n/**\n * Initialization data for the RSPdisplayversionextension extension.\n */\nconst rspDisplayVersionExtension = {\n    activate: activateRSPDisplayVersionExtension,\n    id: token.DISPLAYVERSION_ID,\n    requires: [IStatusBar],\n    autoStart: false\n};\nexport default rspDisplayVersionExtension;\n","import { IStatusBar } from '@jupyterlab/statusbar';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { activateRSPDisplayVersionExtension } from './displayversion';\nimport { activateRSPQueryExtension } from './query';\nimport { activateRSPSavequitExtension } from './savequit';\nimport * as token from './tokens';\nfunction activateRSPExtension(app, mainMenu, docManager, statusBar) {\n    console.log('rsp-lab-extension: loading...');\n    console.log('...activating displayversion extension...');\n    activateRSPDisplayVersionExtension(app, statusBar);\n    console.log('...activated...');\n    console.log('...activating savequit extension...');\n    activateRSPSavequitExtension(app, mainMenu, docManager);\n    console.log('...activated...');\n    console.log('...activating query extension...');\n    activateRSPQueryExtension(app, mainMenu, docManager);\n    console.log('...activated...');\n    console.log('...loaded rsp-lab-extension.');\n}\n/**\n * Initialization data for the rspExtensions.\n */\nconst rspExtension = {\n    activate: activateRSPExtension,\n    id: token.PLUGIN_ID,\n    requires: [IMainMenu, IDocumentManager, IStatusBar],\n    autoStart: true\n};\nexport default rspExtension;\n","// Copyright (c) LSST DM/SQuaRE\n// Distributed under the terms of the MIT License.\nimport { Menu } from '@lumino/widgets';\nimport { showDialog, Dialog } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { Widget } from '@lumino/widgets';\nimport * as token from './tokens';\n/**\n * The command IDs used by the plugin.\n */\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.rubinquery = 'rubinquery';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Activate the extension.\n */\nexport function activateRSPQueryExtension(app, mainMenu, docManager) {\n    console.log('rsp-query...loading');\n    const svcManager = app.serviceManager;\n    const { commands } = app;\n    commands.addCommand(CommandIDs.rubinquery, {\n        label: 'Open from portal query URL...',\n        caption: 'Open notebook from supplied portal query URL',\n        execute: () => {\n            rubinportalquery(app, docManager, svcManager);\n        }\n    });\n    // Add commands and menu itmes.\n    const menu = { command: CommandIDs.rubinquery };\n    const rubinmenu = new Menu({\n        commands\n    });\n    rubinmenu.title.label = 'Rubin';\n    rubinmenu.insertItem(0, menu);\n    mainMenu.addMenu(rubinmenu);\n    console.log('rsp-query...loaded');\n}\nclass QueryHandler extends Widget {\n    constructor() {\n        super({ node: Private.createQueryNode() });\n        this.addClass('rubin-qh');\n    }\n    get inputNode() {\n        return this.node.getElementsByTagName('input')[0];\n    }\n    getValue() {\n        return this.inputNode.value;\n    }\n}\nfunction queryDialog(manager) {\n    const options = {\n        title: 'Query Value',\n        body: new QueryHandler(),\n        focusNodeSelector: 'input',\n        buttons: [Dialog.cancelButton(), Dialog.okButton({ label: 'CREATE' })]\n    };\n    return showDialog(options).then(result => {\n        if (!result) {\n            console.log('No result from queryDialog');\n            return new Promise((res, rej) => {\n                /* Nothing */\n            });\n        }\n        console.log('Result from queryDialog: ', result);\n        if (!result.value) {\n            console.log('No result.value from queryDialog');\n            return new Promise((res, rej) => {\n                /* Nothing */\n            });\n        }\n        if (result.button.label === 'CREATE') {\n            console.log('Got result ', result.value, ' from queryDialog: CREATE');\n            return Promise.resolve(result.value);\n        }\n        console.log('Did not get queryDialog: CREATE');\n        return new Promise((res, rej) => {\n            /* Nothing */\n        });\n    });\n}\nfunction apiRequest(url, init, settings) {\n    /**\n     * Make a request to our endpoint to get a pointer to a templated\n     *  notebook for a given query\n     *\n     * @param url - the path for the query extension\n     *\n     * @param init - The POST + body for the extension\n     *\n     * @param settings - the settings for the current notebook server.\n     *\n     * @returns a Promise resolved with the JSON response\n     */\n    // Fake out URL check in makeRequest\n    const newSettings = ServerConnection.makeSettings({\n        baseUrl: settings.baseUrl,\n        appUrl: settings.appUrl,\n        wsUrl: settings.wsUrl,\n        init: settings.init,\n        token: settings.token,\n        Request: settings.Request,\n        Headers: settings.Headers,\n        WebSocket: settings.WebSocket\n    });\n    return ServerConnection.makeRequest(url, init, newSettings).then(response => {\n        if (response.status !== 200) {\n            return response.json().then(data => {\n                throw new ServerConnection.ResponseError(response, data.message);\n            });\n        }\n        return response.json();\n    });\n}\nfunction rubinportalquery(app, docManager, svcManager) {\n    queryDialog(docManager).then(url => {\n        console.log('Query URL is', url);\n        if (!url) {\n            console.log('Query URL was null');\n            return new Promise((res, rej) => {\n                /* Nothing */\n            });\n        }\n        const body = JSON.stringify({\n            type: 'portal',\n            value: url\n        });\n        const endpoint = PageConfig.getBaseUrl() + 'rubin/query';\n        const init = {\n            method: 'POST',\n            body: body\n        };\n        const settings = svcManager.serverSettings;\n        apiRequest(endpoint, init, settings).then(res => {\n            const path = res.path;\n            docManager.open(path);\n        });\n        return new Promise((res, rej) => {\n            /* Nothing */\n        });\n    });\n}\n/**\n * Initialization data for the jupyterlab-lsstquery extension.\n */\nconst rspQueryExtension = {\n    activate: activateRSPQueryExtension,\n    id: token.QUERY_ID,\n    requires: [IMainMenu, IDocumentManager],\n    autoStart: false\n};\nexport default rspQueryExtension;\nvar Private;\n(function (Private) {\n    /**\n     * Create node for query handler.\n     */\n    function createQueryNode() {\n        const body = document.createElement('div');\n        const qidLabel = document.createElement('label');\n        qidLabel.textContent = 'Enter Query Value';\n        const name = document.createElement('input');\n        body.appendChild(qidLabel);\n        body.appendChild(name);\n        return body;\n    }\n    Private.createQueryNode = createQueryNode;\n})(Private || (Private = {}));\n","// Copyright (c) LSST DM/SQuaRE\n// Distributed under the terms of the MIT License.\nimport { showDialog, Dialog } from '@jupyterlab/apputils';\nimport { IMainMenu } from '@jupyterlab/mainmenu';\nimport { IDocumentManager } from '@jupyterlab/docmanager';\nimport { PageConfig } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { each } from '@lumino/algorithm';\nimport * as token from './tokens';\n/**\n * The command IDs used by the plugin.\n */\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.justQuit = 'justquit:justquit';\n    CommandIDs.saveQuit = 'savequit:savequit';\n    CommandIDs.saveLogout = 'savelogout:savelogout';\n})(CommandIDs || (CommandIDs = {}));\n/**\n * Activate the jupyterhub extension.\n */\nexport function activateRSPSavequitExtension(app, mainMenu, docManager) {\n    console.log('rsp-savequit: loading...');\n    const svcManager = app.serviceManager;\n    const { commands } = app;\n    commands.addCommand(CommandIDs.justQuit, {\n        label: 'Exit Without Saving',\n        caption: 'Destroy container',\n        execute: () => {\n            justQuit(app, docManager, svcManager, false);\n        }\n    });\n    commands.addCommand(CommandIDs.saveQuit, {\n        label: 'Save All and Exit',\n        caption: 'Save open notebooks and destroy container',\n        execute: () => {\n            saveAndQuit(app, docManager, svcManager, false);\n        }\n    });\n    commands.addCommand(CommandIDs.saveLogout, {\n        label: 'Save All, Exit, and Log Out',\n        caption: 'Save open notebooks, destroy container, and log out',\n        execute: () => {\n            saveAndQuit(app, docManager, svcManager, true);\n        }\n    });\n    // Add commands and menu itmes.\n    const menu = [\n        { command: CommandIDs.justQuit },\n        { command: CommandIDs.saveQuit },\n        { command: CommandIDs.saveLogout }\n    ];\n    // Put it at the bottom of file menu\n    const rank = 150;\n    mainMenu.fileMenu.addGroup(menu, rank);\n    console.log('rsp-savequit: ...loaded.');\n}\nfunction hubDeleteRequest(app) {\n    const svcManager = app.serviceManager;\n    const settings = svcManager.serverSettings;\n    const endpoint = PageConfig.getBaseUrl() + 'rubin/hub';\n    const init = {\n        method: 'DELETE'\n    };\n    console.log('hubRequest: URL: ', endpoint, ' | Settings:', settings);\n    return ServerConnection.makeRequest(endpoint, init, settings);\n}\nfunction saveAll(app, docManager, svcManager) {\n    const promises = [];\n    each(app.shell.widgets('main'), widget => {\n        if (widget) {\n            const context = docManager.contextForWidget(widget);\n            if (context) {\n                console.log('Saving context for widget:', { id: widget.id });\n                promises.push(context.save());\n            }\n            else {\n                console.log('No context for widget:', { id: widget.id });\n            }\n        }\n    });\n    console.log('Waiting for all save-document promises to resolve.');\n    let r = Promise.resolve(1);\n    if (promises) {\n        Promise.all(promises);\n        r = promises[0];\n    }\n    return r;\n}\nfunction saveAndQuit(app, docManager, svcManager, logout) {\n    infoDialog();\n    const retval = Promise.resolve(saveAll(app, docManager, svcManager));\n    retval.then(res => {\n        return justQuit(app, docManager, svcManager, logout);\n    });\n    retval.catch(err => {\n        console.log('saveAll failed: ', err.message);\n    });\n    console.log('Save and Quit complete.');\n    return retval;\n}\nfunction justQuit(app, docManager, svcManager, logout) {\n    infoDialog();\n    let targetEndpoint = '/';\n    if (logout) {\n        targetEndpoint = '/logout';\n    }\n    return Promise.resolve(hubDeleteRequest(app)\n        .then(() => {\n        console.log('Quit complete.');\n    })\n        .then(() => {\n        window.location.replace(targetEndpoint);\n    }));\n}\nfunction infoDialog() {\n    const options = {\n        title: 'Redirecting to landing page',\n        body: 'JupyterLab cleaning up and redirecting to landing page.',\n        buttons: [Dialog.okButton({ label: 'Got it!' })]\n    };\n    return showDialog(options).then(() => {\n        console.log('Info dialog panel displayed');\n    });\n}\n/**\n * Initialization data for the rspSavequit extension.\n */\nconst rspSavequitExtension = {\n    activate: activateRSPSavequitExtension,\n    id: token.SAVEQUIT_ID,\n    requires: [IMainMenu, IDocumentManager],\n    autoStart: false\n};\nexport default rspSavequitExtension;\n","/**\n * Namespace for everything\n */\n/*import { Token } from '@lumino/coreutils';*/\nexport const NS = 'rsp-jupyterlab';\nexport const PLUGIN_ID = `${NS}:plugin`;\nexport const DISPLAYVERSION_ID = `${NS}:displayversion`;\nexport const SAVEQUIT_ID = `${NS}:savequit`;\nexport const QUERY_ID = `${NS}:query`;\n"],"names":[],"sourceRoot":""}