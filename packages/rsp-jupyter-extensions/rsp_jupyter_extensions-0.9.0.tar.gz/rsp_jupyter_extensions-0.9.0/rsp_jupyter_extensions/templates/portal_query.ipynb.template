{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Auto-generated Query Notebook for {{QUERYNAME}}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "query_url=\"{{QUERYURL}}\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from lsst.rsp import retrieve_query\n",
    "retrieved_job = retrieve_query(query_url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "retrieved_job.wait()  # Defaults to 600 seconds"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "if retrieved_job.phase == \"COMPLETED\":\n",
    "    results = retrieved_job.fetch_result()\n",
    "    table = results.to_table()  # Put it into astropy table format\n",
    "    if len(table) < 500:\n",
    "        output = table.show_in_notebook()\n",
    "    else:\n",
    "        print(f\"Table is large ({len(table)} rows).  Not displaying as HTML\")\n",
    "        output = \"Use 'print(table)' to display\"\n",
    "else:\n",
    "    print(f\"Job is in {retrieved_job.phase} phase: no results will be returned.\")\n",
    "    output= \"No output.\"\n",
    "output\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for p in retrieved_job._job.parameters:\n",
    "    if p._id.lower() == \"query\":\n",
    "        query = p.content\n",
    "    if p._id.lower() == \"maxrec\":\n",
    "        maxrec = p.content"
   ]
  },
  {
   "cell_type": "code",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(f\"Query string is \\\"{query}\\\", max records is {maxrec}.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyvo.dal.tap import TAPQuery\n",
    "tap_url = \"/\".join(query_url.split(\"/\")[:-2])\n",
    "\n",
    "# Create a new query by editing the \"query\" variable and then doing something like:\n",
    "#  new_tap_query=TAPQuery(tap_url, query, mode=\"async\", maxrec=maxrec, session=retrieved_job._session)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "LSST",
   "language": "python",
   "name": "lsst"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
