# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .classification_score import ClassificationScore


class Classification(pydantic.BaseModel):
    """
    A classification of an asset for one or more concept
    """

    external_id: str = pydantic.Field(alias="externalId", description="A unique identifier for the embedding")
    scores: typing.List[ClassificationScore] = pydantic.Field(
        description="Classification of images for the relevant concept(s) in the embedding space"
    )

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
