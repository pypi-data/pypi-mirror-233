# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class VisualSafetyClassificationScore(pydantic.BaseModel):
    """
    A classification of an asset for visual safety
    """

    reject_probability: float = pydantic.Field(
        alias="rejectProbability",
        description="The visual safety score in the range [0, 1] (0=trusted,1=rejected) for the asset",
    )
    reject_decision_threshold: float = pydantic.Field(
        alias="rejectDecisionThreshold",
        description="The threshold used to determine if the asset is rejected by visual safety standards",
    )
    is_rejected: bool = pydantic.Field(
        alias="isRejected", description="If the asset is rejected by visual safety standards"
    )
    is_duplicate: bool = pydantic.Field(
        alias="isDuplicate", description="Whether the asset is a duplicate of some already rejected images"
    )
    duplicate_score: float = pydantic.Field(alias="duplicateScore", description="The duplicate score")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
