# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime


class TextDetectionScore(pydantic.BaseModel):
    """
    Base model for all schema
    """

    text_probability: float = pydantic.Field(
        alias="textProbability",
        description="The probability score for text in image in the range [0, 1] (0=no-text,1=text) for the asset",
    )
    text_decision_threshold: float = pydantic.Field(
        alias="textDecisionThreshold",
        description="The probability score above which the asset is determined to have text",
    )
    has_text: bool = pydantic.Field(alias="hasText", description="If the asset contains text")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
