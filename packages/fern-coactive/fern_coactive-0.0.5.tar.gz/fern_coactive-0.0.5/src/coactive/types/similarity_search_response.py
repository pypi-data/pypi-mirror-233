# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ..core.datetime_utils import serialize_datetime
from .similarity_search_item import SimilaritySearchItem


class SimilaritySearchResponse(pydantic.BaseModel):
    """
    Similar assets are returned in decreasing similarity
    """

    group_by: typing.Optional[str] = pydantic.Field(
        alias="groupBy", description="A metadata property to use to group the similarity search results"
    )
    data: typing.List[SimilaritySearchItem] = pydantic.Field(description="List of similarity search items")

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().dict(**kwargs_with_defaults)

    class Config:
        frozen = True
        smart_union = True
        allow_population_by_field_name = True
        json_encoders = {dt.datetime: serialize_datetime}
