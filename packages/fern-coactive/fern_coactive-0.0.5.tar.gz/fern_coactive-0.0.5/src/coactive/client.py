# This file was auto-generated by Fern from our API Definition.

import typing

import httpx

from .core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from .environment import CoactiveEnvironment
from .resources.classification.client import AsyncClassificationClient, ClassificationClient
from .resources.concept.client import AsyncConceptClient, ConceptClient
from .resources.credentials.client import AsyncCredentialsClient, CredentialsClient
from .resources.dataset.client import AsyncDatasetClient, DatasetClient
from .resources.embedding.client import AsyncEmbeddingClient, EmbeddingClient
from .resources.image.client import AsyncImageClient, ImageClient
from .resources.label.client import AsyncLabelClient, LabelClient
from .resources.query.client import AsyncQueryClient, QueryClient
from .resources.similarity_search.client import AsyncSimilaritySearchClient, SimilaritySearchClient


class Coactive:
    def __init__(
        self,
        *,
        client_id: str,
        client_secret: str,
        base_url: typing.Optional[str] = None,
        environment: CoactiveEnvironment = CoactiveEnvironment.DEFAULT,
        timeout: typing.Optional[float] = 60
    ):
        self._client_wrapper = SyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=f"{client_id}:{client_secret}",
            httpx_client=httpx.Client(timeout=timeout),
        )
        self.dataset = DatasetClient(client_wrapper=self._client_wrapper)
        self.embedding = EmbeddingClient(client_wrapper=self._client_wrapper)
        self.concept = ConceptClient(client_wrapper=self._client_wrapper)
        self.credentials = CredentialsClient(client_wrapper=self._client_wrapper)
        self.label = LabelClient(client_wrapper=self._client_wrapper)
        self.image = ImageClient(client_wrapper=self._client_wrapper)
        self.similarity_search = SimilaritySearchClient(client_wrapper=self._client_wrapper)
        self.query = QueryClient(client_wrapper=self._client_wrapper)
        self.classification = ClassificationClient(client_wrapper=self._client_wrapper)


class AsyncCoactive:
    def __init__(
        self,
        *,
        client_id: str,
        client_secret: str,
        base_url: typing.Optional[str] = None,
        environment: CoactiveEnvironment = CoactiveEnvironment.DEFAULT,
        timeout: typing.Optional[float] = 60
    ):
        self._client_wrapper = AsyncClientWrapper(
            base_url=_get_base_url(base_url=base_url, environment=environment),
            token=f"{client_id}:{client_secret}",
            httpx_client=httpx.AsyncClient(timeout=timeout),
        )
        self.dataset = AsyncDatasetClient(client_wrapper=self._client_wrapper)
        self.embedding = AsyncEmbeddingClient(client_wrapper=self._client_wrapper)
        self.concept = AsyncConceptClient(client_wrapper=self._client_wrapper)
        self.credentials = AsyncCredentialsClient(client_wrapper=self._client_wrapper)
        self.label = AsyncLabelClient(client_wrapper=self._client_wrapper)
        self.image = AsyncImageClient(client_wrapper=self._client_wrapper)
        self.similarity_search = AsyncSimilaritySearchClient(client_wrapper=self._client_wrapper)
        self.query = AsyncQueryClient(client_wrapper=self._client_wrapper)
        self.classification = AsyncClassificationClient(client_wrapper=self._client_wrapper)


def _get_base_url(*, base_url: typing.Optional[str] = None, environment: CoactiveEnvironment) -> str:
    if base_url is not None:
        return base_url
    elif environment is not None:
        return environment.value
    else:
        raise Exception("Please pass in either base_url or environment to construct the client")
