---
include:
    -   remote: 'https://raw.githubusercontent.com/miquido/gitlab-templates/1.3.85/docker-toolkit.yml'
plan:
    id_tokens:
        GITLAB_OIDC_TOKEN:
            aud: https://gitlab.com
    variables:
        PLAN: plan.cache
        PLAN_JSON: plan.json
        ROLE_ARN: <ROLE_ARN>
        TF_ROOT: <ENVIRONMENT>
    image:
        name: hashicorp/terraform
        entrypoint: [ "" ]
    before_script:
        - apk add --no-cache aws-cli
        - !reference [ .oidc-login, script ]
        - cd $TF_ROOT
        - cp $SECRETS secrets.auto.tfvars
        - cp $BACKEND_STATE tfstate-backend.tf
        - apk add jq
        - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
    script:
        - terraform init -backend-config=password=${BACKEND_STATE_TOKEN} -backend-config=username=gitlab-ci-token
        - terraform plan -var="aws_used_role_name=ReadOnlyAccess" -out=$PLAN -lock=false
        - terraform show --json $PLAN | convert_report > $PLAN_JSON
    artifacts:
        paths:
            - ${TF_ROOT}/plan.cache
            - ${TF_ROOT}/.terraform.lock.hcl
        reports:
            terraform: ${TF_ROOT}/$PLAN_JSON
    rules:
        - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
          when: on_success
    tags:
        - miquido
        - docker

plan-<ENVIRONMENT>:
    environment: <ENVIRONMENT>
    id_tokens:
        GITLAB_OIDC_TOKEN:
            aud: https://gitlab.com
    variables:
        PLAN: plan.cache
        PLAN_JSON: plan.json
        TF_ROOT: <ENVIRONMENT>
    image:
        name: hashicorp/terraform
        entrypoint: [ "" ]
    before_script:
        - apk add --no-cache aws-cli
        - export ROLE_ARN=<ROLE_ARN>
        - !reference [ .oidc-login, script ]
        - cd $TF_ROOT
        - cp $SECRETS secrets.auto.tfvars || true
        - apk add jq
        - alias convert_report="jq -r '([.resource_changes[]?.change.actions?]|flatten)|{\"create\":(map(select(.==\"create\"))|length),\"update\":(map(select(.==\"update\"))|length),\"delete\":(map(select(.==\"delete\"))|length)}'"
    script:
        - terraform init -backend-config=password=${BACKEND_STATE_TOKEN} -backend-config=username=gitlab-ci-token
        - terraform plan -out=$PLAN
        - terraform show --json $PLAN | convert_report > $PLAN_JSON
    artifacts:
        paths:
            - ${TF_ROOT}/plan.cache
            - ${TF_ROOT}/.terraform.lock.hcl
        reports:
            terraform: ${TF_ROOT}/$PLAN_JSON
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: on_success
    tags:
        - miquido
        - docker

apply-<ENVIRONMENT>:
    environment:
        name: <ENVIRONMENT>
        url: <SERVICE_URL>
    id_tokens:
        GITLAB_OIDC_TOKEN:
            aud: https://gitlab.com
    variables:
        PLAN: plan.cache
        PLAN_JSON: plan.json
        TF_ROOT: <ENVIRONMENT>
    image:
        name: hashicorp/terraform
        entrypoint: [ "" ]
    before_script:
        - apk add --no-cache aws-cli
        - export ROLE_ARN=<ROLE_ARN>
        - !reference [ .oidc-login, script ]
        - cd $TF_ROOT
        - cp $SECRETS secrets.auto.tfvars || true
        - apk add jq
    script:
        - aws sts get-caller-identity
        - terraform init -backend-config=password=${BACKEND_STATE_TOKEN} -backend-config=username=gitlab-ci-token
        - terraform apply $PLAN
    artifacts:
        paths:
            - ${TF_ROOT}/plan.cache
            - ${TF_ROOT}/.terraform.lock.hcl
    rules:
        - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
          when: on_success
    needs:
        - plan-<ENVIRONMENT>
    tags:
        - miquido
        - docker
