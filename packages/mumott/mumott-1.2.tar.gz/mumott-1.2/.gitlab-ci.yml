image: $CI_REGISTRY/liebi-group/software/$CI_PROJECT_NAME/cicd

variables:
  INSTDIR_LINUX: "local_installation_linux"

#------------------- build stage -------------------

.build:
  before_script:
    - export PYTHONPATH=$PWD/$INSTDIR_LINUX:${PYTHONPATH}
  stage: build
  artifacts:
    expire_in: 2 days
    paths:
      - build
  script:
    - python3.9 -m pip install --target=$INSTDIR_LINUX .
  artifacts:
    expire_in: 2 days
    paths:
      - $INSTDIR_LINUX
  tags:
    - linux


build:linux:
  extends: .build
  tags:
    - linux


#------------------- test stage -------------------

.basic_tests:
  before_script:
    - export PYTHONPATH=$PWD/$INSTDIR_LINUX:${PYTHONPATH}
  needs:
    - build:linux
  stage: test
  script:
    # this is done to ensure that coverage/pytest uses the previously installed version
    - rm -fr mumott
    - xdoctest mumott
    - coverage run -m pytest --verbose --junitxml=report.xml tests
    - coverage report -m
    - coverage html


basic_tests:linux:
  extends: .basic_tests
  tags:
    - linux
    - gpu
  coverage: "/TOTAL.+ ([0-9]{1,3}%)/"
  artifacts:
    expire_in: 2 days
    paths:
      - htmlcov/
    reports:
      junit: report.xml


.test_notebooks:
  stage: test
  before_script:
    - export PYTHONPATH=$PWD/$INSTDIR_LINUX:${PYTHONPATH}
  tags:
    - linux
    - gpu
  needs:
    - build:linux
  script:
    # astoundingly, this is the solution to not making a special VTK build. A framebuffer.
    - Xvfb :99 -screen 0 1280x1024x24 &
    - export DISPLAY=:99
    - cd tutorial
    - curl -O https://zenodo.org/record/7326784/files/saxstt_dataset_M.h5 --retry 5 --verbose
    - curl -O https://zenodo.org/record/7940753/files/trabecular_bone_9.h5 --retry 5 --verbose
    - cd ..
    - pytest --nbmake --nbmake-timeout=3600 tutorial/reconstruct_and_visualize.ipynb
    - pytest --nbmake --nbmake-timeout=3600 tutorial/inspect_data.ipynb
    - pytest --nbmake --nbmake-timeout=3600 tutorial/projection_and_adjoint.ipynb
    - pytest --nbmake --nbmake-timeout=3600 tutorial/alignment.ipynb
    - pytest --nbmake --nbmake-timeout=3600 tutorial/reconstruction_pipelines.ipynb


test_notebooks:manual:
  extends: .test_notebooks
  when: manual


test_notebooks:schedules:
  extends: .test_notebooks
  only:
   - schedules


style_check:
  stage: test
  tags:
    - linux
  script:
  - flake8 doc/ mumott/ tests/


test_documentation:
  before_script:
    - export PYTHONPATH=$PWD/$INSTDIR_LINUX:${PYTHONPATH}
  stage: test
  needs:
    - build:linux
  script:
    - sphinx-build -W doc/ public/
  except:
   - master
  artifacts:
    expire_in: 1 days
    paths:
      - public


#------------------- deploy stage -------------------

pages:
  before_script:
    - export PYTHONPATH=$PWD/$INSTDIR_LINUX:${PYTHONPATH}
  stage: deploy
  needs:
    - build:linux  # for compiled libraries
    - basic_tests:linux  # for coverage
  artifacts:
    expire_in: 30 days
    paths:
      - public
  only:
    - master
    - tags
  script:
    - mkdir -p public/dev
    - mv htmlcov/ public/
    # --------------------------
    # DEVELOPMENT VERSION
    - tag=$(git describe --tags | tail -1)
    - echo "tag= $tag"
    - sed -i "s/version = ''/version = '$tag'/" doc/conf.py
    - grep version doc/conf.py
    - sphinx-build -W doc/ public/dev/
    - find tests/ -print | zip public/dev/tests.zip -@
    - git checkout -- doc/conf.py
    # --------------------------
    # STABLE VERSION
    - tag=$(git tag | tail -1)
    - echo "tag= $tag"
    - git checkout $tag
    - sed -i "s/version = ''/version = '$tag'/" doc/conf.py
    - ORIG_PYTHONPATH=$PYTHONPATH
    - export PYTHONPATH=$PWD:$PYTHONPATH
    - sphinx-build -W doc/ public/
    - find tests/ -print | zip public/tests.zip -@
    - export PYTHONPATH=$ORIG_PYTHONPATH
    # --------------------------
    - ls -l public/
    - chmod go-rwX -R public/


pypi:
  stage: deploy
  tags:
    - linux
  only:
    - tags
  when: manual
  environment:
      name: pypi-upload
  script:
    - export PYTHONPATH=$PWD/$INSTDIR_LINUX:${PYTHONPATH}
    # check out the latest tag (redundant if job is limited to tags; still a sensible precaution)
    - tag=$(git tag | tail -1)
    - echo "tag= $tag"
    - git checkout $tag
    # create source distribution and push to PyPI
    - python3.9 setup.py sdist
    - ls -l dist/
    - python3.9 -m twine upload dist/*
