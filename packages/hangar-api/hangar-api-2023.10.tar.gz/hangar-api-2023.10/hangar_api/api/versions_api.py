# coding: utf-8

"""
    Hangar API

    This page describes the format for the current Hangar REST API as well as general usage guidelines.<br> Note that all routes **not** listed here should be considered **internal**, and can change at a moment's notice. **Do not use them**.  ## Authentication and Authorization There are two ways to consume the API: Authenticated or anonymous.  ### Anonymous When using anonymous authentication, you only have access to public information, but you don't need to worry about creating and storing an API key or handing JWTs.  ### Authenticated If you need access to non-public content or actions, you need to create and use API keys. These can be created by going to the API keys page via the profile dropdown or by going to your user page and clicking on the key icon.  API keys allow you to impersonate yourself, so they should be handled like passwords. **Do not share them with anyone else!**  #### Getting and Using a JWT Once you have an API key, you need to authenticate yourself: Send a `POST` request with your API key identifier to `/api/v1/authenticate?apiKey=yourKey`. The response will contain your JWT as well as an expiration time. Put this JWT into the `Authorization` header of every request and make sure to request a new JWT after the expiration time has passed.  Please also set a meaningful `User-Agent` header. This allows us to better identify loads and needs for potentially new endpoints.  ## Misc ### Date Formats Standard ISO types. Where possible, we use the [OpenAPI format modifier](https://swagger.io/docs/specification/data-models/data-types/#format).  ### Rate Limits and Caching The default rate limit is set at 20 requests every 5 seconds with an initial overdraft for extra leniency. Individual endpoints, such as version creation, may have stricter rate limiting.  If applicable, always cache responses. The Hangar API itself is cached by CloudFlare and internally.

    The version of the OpenAPI document: 1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import re  # noqa: F401
import io
import warnings

from pydantic import validate_call, ValidationError
from typing import Dict, List, Optional, Tuple

from pydantic import Field
from typing_extensions import Annotated
from datetime import datetime

from pydantic import StrictBytes, StrictStr

from typing import Any, Dict, List, Optional, Union

from hangar_api.models.paginated_result_version import PaginatedResultVersion
from hangar_api.models.platform import Platform
from hangar_api.models.request_pagination import RequestPagination
from hangar_api.models.uploaded_version import UploadedVersion
from hangar_api.models.version import Version
from hangar_api.models.version_stats import VersionStats
from hangar_api.models.version_upload import VersionUpload

from hangar_api.api_client import ApiClient
from hangar_api.api_response import ApiResponse
from hangar_api.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class VersionsApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def download_version(self, slug : Annotated[StrictStr, Field(description="The slug of the project to download the version from")], name : Annotated[StrictStr, Field(description="The name of the version to download")], platform : Annotated[Platform, Field(description="The platform of the version to download")], **kwargs) -> object:  # noqa: E501
        """Downloads a version  # noqa: E501

        Downloads the file for a specific platform of a version. Requires visibility of the project and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_version(slug, name, platform, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to download the version from (required)
        :type slug: str
        :param name: The name of the version to download (required)
        :type name: str
        :param platform: The platform of the version to download (required)
        :type platform: Platform
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the download_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.download_version_with_http_info(slug, name, platform, **kwargs)  # noqa: E501

    @validate_call
    def download_version_with_http_info(self, slug : Annotated[StrictStr, Field(description="The slug of the project to download the version from")], name : Annotated[StrictStr, Field(description="The name of the version to download")], platform : Annotated[Platform, Field(description="The platform of the version to download")], **kwargs) -> ApiResponse:  # noqa: E501
        """Downloads a version  # noqa: E501

        Downloads the file for a specific platform of a version. Requires visibility of the project and version.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_version_with_http_info(slug, name, platform, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to download the version from (required)
        :type slug: str
        :param name: The name of the version to download (required)
        :type name: str
        :param platform: The platform of the version to download (required)
        :type platform: Platform
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'slug',
            'name',
            'platform'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']

        if _params['name'] is not None:
            _path_params['name'] = _params['name']

        if _params['platform'] is not None:
            _path_params['platform'] = _params['platform']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = ['HangarAuth']  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '303': "object",
            '200': "object",
            '400': "object",
            '403': "object",
            '401': "object",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{slug}/versions/{name}/{platform}/download', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def download_version1(self, author : Annotated[StrictStr, Field(description="The author of the project to download the version from")], slug : Annotated[StrictStr, Field(description="The slug of the project to download the version from")], name : Annotated[StrictStr, Field(description="The name of the version to download")], platform : Annotated[Platform, Field(description="The platform of the version to download")], **kwargs) -> object:  # noqa: E501
        """(Deprecated) download_version1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_version1(author, slug, name, platform, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to download the version from (required)
        :type author: str
        :param slug: The slug of the project to download the version from (required)
        :type slug: str
        :param name: The name of the version to download (required)
        :type name: str
        :param platform: The platform of the version to download (required)
        :type platform: Platform
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the download_version1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.download_version1_with_http_info(author, slug, name, platform, **kwargs)  # noqa: E501

    @validate_call
    def download_version1_with_http_info(self, author : Annotated[StrictStr, Field(description="The author of the project to download the version from")], slug : Annotated[StrictStr, Field(description="The slug of the project to download the version from")], name : Annotated[StrictStr, Field(description="The name of the version to download")], platform : Annotated[Platform, Field(description="The platform of the version to download")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) download_version1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_version1_with_http_info(author, slug, name, platform, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to download the version from (required)
        :type author: str
        :param slug: The slug of the project to download the version from (required)
        :type slug: str
        :param name: The name of the version to download (required)
        :type name: str
        :param platform: The platform of the version to download (required)
        :type platform: Platform
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /api/v1/projects/{author}/{slug}/versions/{name}/{platform}/download is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'author',
            'slug',
            'name',
            'platform'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_version1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['author'] is not None:
            _path_params['author'] = _params['author']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']

        if _params['name'] is not None:
            _path_params['name'] = _params['name']

        if _params['platform'] is not None:
            _path_params['platform'] = _params['platform']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "object",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{author}/{slug}/versions/{name}/{platform}/download', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def get_latest_release_version(self, author : Annotated[StrictStr, Field(description="The author of the project to return the latest version for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return the latest version for")], **kwargs) -> str:  # noqa: E501
        """(Deprecated) get_latest_release_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_latest_release_version(author, slug, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to return the latest version for (required)
        :type author: str
        :param slug: The slug of the project to return the latest version for (required)
        :type slug: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_latest_release_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_latest_release_version_with_http_info(author, slug, **kwargs)  # noqa: E501

    @validate_call
    def get_latest_release_version_with_http_info(self, author : Annotated[StrictStr, Field(description="The author of the project to return the latest version for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return the latest version for")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) get_latest_release_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_latest_release_version_with_http_info(author, slug, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to return the latest version for (required)
        :type author: str
        :param slug: The slug of the project to return the latest version for (required)
        :type slug: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /api/v1/projects/{author}/{slug}/latestrelease is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'author',
            'slug'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_release_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['author'] is not None:
            _path_params['author'] = _params['author']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{author}/{slug}/latestrelease', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def get_latest_version(self, author : Annotated[StrictStr, Field(description="The author of the project to return the latest version for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return the latest version for")], channel : Annotated[StrictStr, Field(description="The channel to return the latest version for")], **kwargs) -> str:  # noqa: E501
        """(Deprecated) get_latest_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_latest_version(author, slug, channel, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to return the latest version for (required)
        :type author: str
        :param slug: The slug of the project to return the latest version for (required)
        :type slug: str
        :param channel: The channel to return the latest version for (required)
        :type channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_latest_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_latest_version_with_http_info(author, slug, channel, **kwargs)  # noqa: E501

    @validate_call
    def get_latest_version_with_http_info(self, author : Annotated[StrictStr, Field(description="The author of the project to return the latest version for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return the latest version for")], channel : Annotated[StrictStr, Field(description="The channel to return the latest version for")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) get_latest_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_latest_version_with_http_info(author, slug, channel, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to return the latest version for (required)
        :type author: str
        :param slug: The slug of the project to return the latest version for (required)
        :type slug: str
        :param channel: The channel to return the latest version for (required)
        :type channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /api/v1/projects/{author}/{slug}/latest is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'author',
            'slug',
            'channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_latest_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['author'] is not None:
            _path_params['author'] = _params['author']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('channel') is not None:  # noqa: E501
            _query_params.append(('channel', _params['channel']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{author}/{slug}/latest', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def get_version(self, author : Annotated[StrictStr, Field(description="The author of the project to return the version for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return the version for")], name : Annotated[StrictStr, Field(description="The name of the version to return")], **kwargs) -> Version:  # noqa: E501
        """(Deprecated) get_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_version(author, slug, name, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to return the version for (required)
        :type author: str
        :param slug: The slug of the project to return the version for (required)
        :type slug: str
        :param name: The name of the version to return (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Version
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_version_with_http_info(author, slug, name, **kwargs)  # noqa: E501

    @validate_call
    def get_version_with_http_info(self, author : Annotated[StrictStr, Field(description="The author of the project to return the version for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return the version for")], name : Annotated[StrictStr, Field(description="The name of the version to return")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) get_version  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_version_with_http_info(author, slug, name, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to return the version for (required)
        :type author: str
        :param slug: The slug of the project to return the version for (required)
        :type slug: str
        :param name: The name of the version to return (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Version, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /api/v1/projects/{author}/{slug}/versions/{name} is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'author',
            'slug',
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['author'] is not None:
            _path_params['author'] = _params['author']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']

        if _params['name'] is not None:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{author}/{slug}/versions/{name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def get_version_stats(self, author : Annotated[StrictStr, Field(description="The author of the version to return the stats for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return stats for")], name : Annotated[StrictStr, Field(description="The version to return the stats for")], from_date : Annotated[datetime, Field(description="The first date to include in the result")], to_date : Annotated[datetime, Field(description="The last date to include in the result")], **kwargs) -> Dict[str, VersionStats]:  # noqa: E501
        """(Deprecated) get_version_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_version_stats(author, slug, name, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param author: The author of the version to return the stats for (required)
        :type author: str
        :param slug: The slug of the project to return stats for (required)
        :type slug: str
        :param name: The version to return the stats for (required)
        :type name: str
        :param from_date: The first date to include in the result (required)
        :type from_date: datetime
        :param to_date: The last date to include in the result (required)
        :type to_date: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Dict[str, VersionStats]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_version_stats_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_version_stats_with_http_info(author, slug, name, from_date, to_date, **kwargs)  # noqa: E501

    @validate_call
    def get_version_stats_with_http_info(self, author : Annotated[StrictStr, Field(description="The author of the version to return the stats for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return stats for")], name : Annotated[StrictStr, Field(description="The version to return the stats for")], from_date : Annotated[datetime, Field(description="The first date to include in the result")], to_date : Annotated[datetime, Field(description="The last date to include in the result")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) get_version_stats  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_version_stats_with_http_info(author, slug, name, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param author: The author of the version to return the stats for (required)
        :type author: str
        :param slug: The slug of the project to return stats for (required)
        :type slug: str
        :param name: The version to return the stats for (required)
        :type name: str
        :param from_date: The first date to include in the result (required)
        :type from_date: datetime
        :param to_date: The last date to include in the result (required)
        :type to_date: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Dict[str, VersionStats], status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /api/v1/projects/{author}/{slug}/versions/{name}/stats is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'author',
            'slug',
            'name',
            'from_date',
            'to_date'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_version_stats" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['author'] is not None:
            _path_params['author'] = _params['author']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']

        if _params['name'] is not None:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('from_date') is not None:  # noqa: E501
            if isinstance(_params['from_date'], datetime):
                _query_params.append(('fromDate', _params['from_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('fromDate', _params['from_date']))

        if _params.get('to_date') is not None:  # noqa: E501
            if isinstance(_params['to_date'], datetime):
                _query_params.append(('toDate', _params['to_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('toDate', _params['to_date']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dict[str, VersionStats]",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{author}/{slug}/versions/{name}/stats', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def get_versions(self, author : Annotated[StrictStr, Field(description="The author of the project to return versions for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return versions for")], pagination : Annotated[RequestPagination, Field(description="Pagination information")], **kwargs) -> PaginatedResultVersion:  # noqa: E501
        """(Deprecated) get_versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_versions(author, slug, pagination, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to return versions for (required)
        :type author: str
        :param slug: The slug of the project to return versions for (required)
        :type slug: str
        :param pagination: Pagination information (required)
        :type pagination: RequestPagination
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedResultVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the get_versions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.get_versions_with_http_info(author, slug, pagination, **kwargs)  # noqa: E501

    @validate_call
    def get_versions_with_http_info(self, author : Annotated[StrictStr, Field(description="The author of the project to return versions for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return versions for")], pagination : Annotated[RequestPagination, Field(description="Pagination information")], **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) get_versions  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_versions_with_http_info(author, slug, pagination, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to return versions for (required)
        :type author: str
        :param slug: The slug of the project to return versions for (required)
        :type slug: str
        :param pagination: Pagination information (required)
        :type pagination: RequestPagination
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedResultVersion, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("GET /api/v1/projects/{author}/{slug}/versions is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'author',
            'slug',
            'pagination'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_versions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['author'] is not None:
            _path_params['author'] = _params['author']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('pagination') is not None:  # noqa: E501
            _query_params.append(('pagination', _params['pagination']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResultVersion",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{author}/{slug}/versions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def latest_release_version(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return the latest version for")], **kwargs) -> str:  # noqa: E501
        """Returns the latest release version of a project  # noqa: E501

        Returns the latest version of a project. Requires the `view_public_info` permission in the project or owning organizations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.latest_release_version(slug, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return the latest version for (required)
        :type slug: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the latest_release_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.latest_release_version_with_http_info(slug, **kwargs)  # noqa: E501

    @validate_call
    def latest_release_version_with_http_info(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return the latest version for")], **kwargs) -> ApiResponse:  # noqa: E501
        """Returns the latest release version of a project  # noqa: E501

        Returns the latest version of a project. Requires the `view_public_info` permission in the project or owning organizations.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.latest_release_version_with_http_info(slug, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return the latest version for (required)
        :type slug: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'slug'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method latest_release_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = ['HangarAuth']  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '403': "str",
            '401': "str",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{slug}/latestrelease', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def latest_version(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return the latest version for")], channel : Annotated[StrictStr, Field(description="The channel to return the latest version for")], **kwargs) -> str:  # noqa: E501
        """Returns the latest version of a project for a specific channel  # noqa: E501

        Returns the latest version of a project. Requires the `view_public_info` permission in the project or owning organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.latest_version(slug, channel, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return the latest version for (required)
        :type slug: str
        :param channel: The channel to return the latest version for (required)
        :type channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: str
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the latest_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.latest_version_with_http_info(slug, channel, **kwargs)  # noqa: E501

    @validate_call
    def latest_version_with_http_info(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return the latest version for")], channel : Annotated[StrictStr, Field(description="The channel to return the latest version for")], **kwargs) -> ApiResponse:  # noqa: E501
        """Returns the latest version of a project for a specific channel  # noqa: E501

        Returns the latest version of a project. Requires the `view_public_info` permission in the project or owning organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.latest_version_with_http_info(slug, channel, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return the latest version for (required)
        :type slug: str
        :param channel: The channel to return the latest version for (required)
        :type channel: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(str, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'slug',
            'channel'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method latest_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('channel') is not None:  # noqa: E501
            _query_params.append(('channel', _params['channel']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = ['HangarAuth']  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "str",
            '403': "str",
            '401': "str",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{slug}/latest', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def list_versions(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return versions for")], pagination : Annotated[RequestPagination, Field(description="Pagination information")], channel : Annotated[Optional[StrictStr], Field(description="A name of a version channel to filter for")] = None, platform : Annotated[Optional[StrictStr], Field(description="A platform name to filter for")] = None, platform_version : Annotated[Optional[StrictStr], Field(description="A platform version to filter for")] = None, **kwargs) -> PaginatedResultVersion:  # noqa: E501
        """Returns all versions of a project  # noqa: E501

        Returns all versions of a project. Requires the `view_public_info` permission in the project or owning organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_versions(slug, pagination, channel, platform, platform_version, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return versions for (required)
        :type slug: str
        :param pagination: Pagination information (required)
        :type pagination: RequestPagination
        :param channel: A name of a version channel to filter for
        :type channel: str
        :param platform: A platform name to filter for
        :type platform: str
        :param platform_version: A platform version to filter for
        :type platform_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: PaginatedResultVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the list_versions_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.list_versions_with_http_info(slug, pagination, channel, platform, platform_version, **kwargs)  # noqa: E501

    @validate_call
    def list_versions_with_http_info(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return versions for")], pagination : Annotated[RequestPagination, Field(description="Pagination information")], channel : Annotated[Optional[StrictStr], Field(description="A name of a version channel to filter for")] = None, platform : Annotated[Optional[StrictStr], Field(description="A platform name to filter for")] = None, platform_version : Annotated[Optional[StrictStr], Field(description="A platform version to filter for")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Returns all versions of a project  # noqa: E501

        Returns all versions of a project. Requires the `view_public_info` permission in the project or owning organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_versions_with_http_info(slug, pagination, channel, platform, platform_version, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return versions for (required)
        :type slug: str
        :param pagination: Pagination information (required)
        :type pagination: RequestPagination
        :param channel: A name of a version channel to filter for
        :type channel: str
        :param platform: A platform name to filter for
        :type platform: str
        :param platform_version: A platform version to filter for
        :type platform_version: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(PaginatedResultVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'slug',
            'pagination',
            'channel',
            'platform',
            'platform_version'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_versions" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('pagination') is not None:  # noqa: E501
            _query_params.append(('pagination', _params['pagination']))

        if _params.get('channel') is not None:  # noqa: E501
            _query_params.append(('channel', _params['channel']))

        if _params.get('platform') is not None:  # noqa: E501
            _query_params.append(('platform', _params['platform']))

        if _params.get('platform_version') is not None:  # noqa: E501
            _query_params.append(('platformVersion', _params['platform_version']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = ['HangarAuth']  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "PaginatedResultVersion",
            '403': "PaginatedResultVersion",
            '401': "PaginatedResultVersion",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{slug}/versions', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def show_version(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return the version for")], name : Annotated[StrictStr, Field(description="The name of the version to return")], **kwargs) -> Version:  # noqa: E501
        """Returns a specific version of a project  # noqa: E501

        Returns a specific version of a project. Requires the `view_public_info` permission in the project or owning organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.show_version(slug, name, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return the version for (required)
        :type slug: str
        :param name: The name of the version to return (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Version
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the show_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.show_version_with_http_info(slug, name, **kwargs)  # noqa: E501

    @validate_call
    def show_version_with_http_info(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return the version for")], name : Annotated[StrictStr, Field(description="The name of the version to return")], **kwargs) -> ApiResponse:  # noqa: E501
        """Returns a specific version of a project  # noqa: E501

        Returns a specific version of a project. Requires the `view_public_info` permission in the project or owning organization.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.show_version_with_http_info(slug, name, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return the version for (required)
        :type slug: str
        :param name: The name of the version to return (required)
        :type name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Version, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'slug',
            'name'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']

        if _params['name'] is not None:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = ['HangarAuth']  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Version",
            '403': "Version",
            '401': "Version",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{slug}/versions/{name}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def show_version_stats(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return stats for")], name : Annotated[StrictStr, Field(description="The version to return the stats for")], from_date : Annotated[datetime, Field(description="The first date to include in the result")], to_date : Annotated[datetime, Field(description="The last date to include in the result")], **kwargs) -> Dict[str, VersionStats]:  # noqa: E501
        """Returns the stats for a version  # noqa: E501

        Returns the stats (downloads) for a version per day for a certain date range. Requires the `is_subject_member` permission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.show_version_stats(slug, name, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return stats for (required)
        :type slug: str
        :param name: The version to return the stats for (required)
        :type name: str
        :param from_date: The first date to include in the result (required)
        :type from_date: datetime
        :param to_date: The last date to include in the result (required)
        :type to_date: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Dict[str, VersionStats]
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the show_version_stats_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.show_version_stats_with_http_info(slug, name, from_date, to_date, **kwargs)  # noqa: E501

    @validate_call
    def show_version_stats_with_http_info(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return stats for")], name : Annotated[StrictStr, Field(description="The version to return the stats for")], from_date : Annotated[datetime, Field(description="The first date to include in the result")], to_date : Annotated[datetime, Field(description="The last date to include in the result")], **kwargs) -> ApiResponse:  # noqa: E501
        """Returns the stats for a version  # noqa: E501

        Returns the stats (downloads) for a version per day for a certain date range. Requires the `is_subject_member` permission.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.show_version_stats_with_http_info(slug, name, from_date, to_date, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return stats for (required)
        :type slug: str
        :param name: The version to return the stats for (required)
        :type name: str
        :param from_date: The first date to include in the result (required)
        :type from_date: datetime
        :param to_date: The last date to include in the result (required)
        :type to_date: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Dict[str, VersionStats], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'slug',
            'name',
            'from_date',
            'to_date'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method show_version_stats" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']

        if _params['name'] is not None:
            _path_params['name'] = _params['name']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        if _params.get('from_date') is not None:  # noqa: E501
            if isinstance(_params['from_date'], datetime):
                _query_params.append(('fromDate', _params['from_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('fromDate', _params['from_date']))

        if _params.get('to_date') is not None:  # noqa: E501
            if isinstance(_params['to_date'], datetime):
                _query_params.append(('toDate', _params['to_date'].strftime(self.api_client.configuration.datetime_format)))
            else:
                _query_params.append(('toDate', _params['to_date']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings: List[str] = ['HangarAuth']  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "Dict[str, VersionStats]",
            '403': "Dict[str, VersionStats]",
            '401': "Dict[str, VersionStats]",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{slug}/versions/{name}/stats', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def upload_version(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return versions for")], version_upload : VersionUpload, files : Annotated[Optional[List[Union[StrictBytes, StrictStr]]], Field(description="The version files in order of selected platforms, if any")] = None, **kwargs) -> UploadedVersion:  # noqa: E501
        """Creates a new version and returns parts of its metadata  # noqa: E501

        Creates a new version for a project. Requires the `create_version` permission in the project or owning organization. Make sure you provide the contents of this request as multipart/form-data. You can find a simple example implementation written in Java here: https://gist.github.com/kennytv/a227d82249f54e0ad35005330256fee2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_version(slug, version_upload, files, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return versions for (required)
        :type slug: str
        :param version_upload: (required)
        :type version_upload: VersionUpload
        :param files: The version files in order of selected platforms, if any
        :type files: List[bytearray]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UploadedVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the upload_version_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.upload_version_with_http_info(slug, version_upload, files, **kwargs)  # noqa: E501

    @validate_call
    def upload_version_with_http_info(self, slug : Annotated[StrictStr, Field(description="The slug of the project to return versions for")], version_upload : VersionUpload, files : Annotated[Optional[List[Union[StrictBytes, StrictStr]]], Field(description="The version files in order of selected platforms, if any")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """Creates a new version and returns parts of its metadata  # noqa: E501

        Creates a new version for a project. Requires the `create_version` permission in the project or owning organization. Make sure you provide the contents of this request as multipart/form-data. You can find a simple example implementation written in Java here: https://gist.github.com/kennytv/a227d82249f54e0ad35005330256fee2  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_version_with_http_info(slug, version_upload, files, async_req=True)
        >>> result = thread.get()

        :param slug: The slug of the project to return versions for (required)
        :type slug: str
        :param version_upload: (required)
        :type version_upload: VersionUpload
        :param files: The version files in order of selected platforms, if any
        :type files: List[bytearray]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UploadedVersion, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'slug',
            'version_upload',
            'files'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_version" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        if _params['files'] is not None:
            _files['files'] = _params['files']
            _collection_formats['files'] = 'csv'

        if _params['version_upload'] is not None:
            _form_params.append(('versionUpload', _params['version_upload']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings: List[str] = ['HangarAuth']  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '201': "UploadedVersion",
            '403': "UploadedVersion",
            '401': "UploadedVersion",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{slug}/upload', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_call
    def upload_version1(self, author : Annotated[StrictStr, Field(description="The author of the project to return versions for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return versions for")], version_upload : VersionUpload, files : Annotated[Optional[List[Union[StrictBytes, StrictStr]]], Field(description="The version files in order of selected platforms, if any")] = None, **kwargs) -> UploadedVersion:  # noqa: E501
        """(Deprecated) upload_version1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_version1(author, slug, version_upload, files, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to return versions for (required)
        :type author: str
        :param slug: The slug of the project to return versions for (required)
        :type slug: str
        :param version_upload: (required)
        :type version_upload: VersionUpload
        :param files: The version files in order of selected platforms, if any
        :type files: List[bytearray]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request.
               If one number provided, it will be total request
               timeout. It can also be a pair (tuple) of
               (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: UploadedVersion
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            message = "Error! Please call the upload_version1_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"  # noqa: E501
            raise ValueError(message)
        return self.upload_version1_with_http_info(author, slug, version_upload, files, **kwargs)  # noqa: E501

    @validate_call
    def upload_version1_with_http_info(self, author : Annotated[StrictStr, Field(description="The author of the project to return versions for")], slug : Annotated[StrictStr, Field(description="The slug of the project to return versions for")], version_upload : VersionUpload, files : Annotated[Optional[List[Union[StrictBytes, StrictStr]]], Field(description="The version files in order of selected platforms, if any")] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """(Deprecated) upload_version1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_version1_with_http_info(author, slug, version_upload, files, async_req=True)
        >>> result = thread.get()

        :param author: The author of the project to return versions for (required)
        :type author: str
        :param slug: The slug of the project to return versions for (required)
        :type slug: str
        :param version_upload: (required)
        :type version_upload: VersionUpload
        :param files: The version files in order of selected platforms, if any
        :type files: List[bytearray]
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(UploadedVersion, status_code(int), headers(HTTPHeaderDict))
        """

        warnings.warn("POST /api/v1/projects/{author}/{slug}/upload is deprecated.", DeprecationWarning)

        _params = locals()

        _all_params = [
            'author',
            'slug',
            'version_upload',
            'files'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_version1" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats: Dict[str, str] = {}

        # process the path parameters
        _path_params: Dict[str, str] = {}
        if _params['author'] is not None:
            _path_params['author'] = _params['author']

        if _params['slug'] is not None:
            _path_params['slug'] = _params['slug']


        # process the query parameters
        _query_params: List[Tuple[str, str]] = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[str, str] = {}
        if _params['files'] is not None:
            _files['files'] = _params['files']
            _collection_formats['files'] = 'csv'

        if _params['version_upload'] is not None:
            _form_params.append(('versionUpload', _params['version_upload']))

        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['multipart/form-data']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings: List[str] = []  # noqa: E501

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "UploadedVersion",
        }

        return self.api_client.call_api(
            '/api/v1/projects/{author}/{slug}/upload', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
