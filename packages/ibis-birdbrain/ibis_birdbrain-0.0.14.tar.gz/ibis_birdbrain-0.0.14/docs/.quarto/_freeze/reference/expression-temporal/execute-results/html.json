{
  "hash": "b66bc5142ac5ddf50e27843c492e8cd3",
  "result": {
    "markdown": "---\ntitle: Temporal expressions\n---\n\n\n\nDates, times, timestamps and intervals.\n\n# TimestampValue { #ibis.expr.types.temporal.TimestampValue }\n\n`expr.types.temporal.TimestampValue()`\n\n\n\n## Attributes\n\n| Name | Description |\n| --- | --- |\n| [add](#ibis.expr.types.temporal.TimestampValue.add) | Add an interval to a timestamp. |\n| [radd](#ibis.expr.types.temporal.TimestampValue.radd) | Add an interval to a timestamp. |\n| [sub](#ibis.expr.types.temporal.TimestampValue.sub) | Subtract a timestamp or an interval from a timestamp. |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [date](#ibis.expr.types.temporal.TimestampValue.date) | Return the date component of the expression. |\n| [truncate](#ibis.expr.types.temporal.TimestampValue.truncate) | Truncate timestamp expression to units of `unit`. |\n\n### date { #ibis.expr.types.temporal.TimestampValue.date }\n\n`date(self)`\n\nReturn the date component of the expression.\n\n#### Returns\n\n| Type                                              | Description                  |\n|---------------------------------------------------|------------------------------|\n| [DateValue](`ibis.expr.types.temporal.DateValue`) | The date component of `self` |\n\n### truncate { #ibis.expr.types.temporal.TimestampValue.truncate }\n\n`truncate(self, unit)`\n\nTruncate timestamp expression to units of `unit`.\n\n#### Parameters\n\n| Name   | Type                                                                                    | Description         | Default    |\n|--------|-----------------------------------------------------------------------------------------|---------------------|------------|\n| `unit` | [Literal](`typing.Literal`)\\['Y', 'Q', 'M', 'W', 'D', 'h', 'm', 's', 'ms', 'us', 'ns'\\] | Unit to truncate to | _required_ |\n\n#### Returns\n\n| Type                                                        | Description                    |\n|-------------------------------------------------------------|--------------------------------|\n| [TimestampValue](`ibis.expr.types.temporal.TimestampValue`) | Truncated timestamp expression |\n\n# DateValue { #ibis.expr.types.temporal.DateValue }\n\n`expr.types.temporal.DateValue()`\n\n\n\n## Attributes\n\n| Name | Description |\n| --- | --- |\n| [add](#ibis.expr.types.temporal.DateValue.add) | Add an interval to a date. |\n| [radd](#ibis.expr.types.temporal.DateValue.radd) | Add an interval to a date. |\n| [sub](#ibis.expr.types.temporal.DateValue.sub) | Subtract a date or an interval from a date. |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [truncate](#ibis.expr.types.temporal.DateValue.truncate) | Truncate date expression to units of `unit`. |\n\n### truncate { #ibis.expr.types.temporal.DateValue.truncate }\n\n`truncate(self, unit)`\n\nTruncate date expression to units of `unit`.\n\n#### Parameters\n\n| Name   | Type                                                   | Description               | Default    |\n|--------|--------------------------------------------------------|---------------------------|------------|\n| `unit` | [Literal](`typing.Literal`)\\['Y', 'Q', 'M', 'W', 'D'\\] | Unit to truncate `arg` to | _required_ |\n\n#### Returns\n\n| Type                                              | Description                     |\n|---------------------------------------------------|---------------------------------|\n| [DateValue](`ibis.expr.types.temporal.DateValue`) | Truncated date value expression |\n\n# TimeValue { #ibis.expr.types.temporal.TimeValue }\n\n`expr.types.temporal.TimeValue()`\n\n\n\n## Attributes\n\n| Name | Description |\n| --- | --- |\n| [add](#ibis.expr.types.temporal.TimeValue.add) | Add an interval to a time expression. |\n| [radd](#ibis.expr.types.temporal.TimeValue.radd) | Add an interval to a time expression. |\n| [sub](#ibis.expr.types.temporal.TimeValue.sub) | Subtract a time or an interval from a time expression. |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [truncate](#ibis.expr.types.temporal.TimeValue.truncate) | Truncate the expression to a time expression in units of `unit`. |\n\n### truncate { #ibis.expr.types.temporal.TimeValue.truncate }\n\n`truncate(self, unit)`\n\nTruncate the expression to a time expression in units of `unit`.\n\nCommonly used for time series resampling.\n\n#### Parameters\n\n| Name   | Type                                                           | Description             | Default    |\n|--------|----------------------------------------------------------------|-------------------------|------------|\n| `unit` | [Literal](`typing.Literal`)\\['h', 'm', 's', 'ms', 'us', 'ns'\\] | The unit to truncate to | _required_ |\n\n#### Returns\n\n| Type                                              | Description                |\n|---------------------------------------------------|----------------------------|\n| [TimeValue](`ibis.expr.types.temporal.TimeValue`) | `self` truncated to `unit` |\n\n# IntervalValue { #ibis.expr.types.temporal.IntervalValue }\n\n`expr.types.temporal.IntervalValue()`\n\n\n\n## Attributes\n\n| Name | Description |\n| --- | --- |\n| [days](#ibis.expr.types.temporal.IntervalValue.days) | Extract the number of days from an interval. |\n| [hours](#ibis.expr.types.temporal.IntervalValue.hours) | Extract the number of hours from an interval. |\n| [microseconds](#ibis.expr.types.temporal.IntervalValue.microseconds) | Extract the number of microseconds from an interval. |\n| [milliseconds](#ibis.expr.types.temporal.IntervalValue.milliseconds) | Extract the number of milliseconds from an interval. |\n| [minutes](#ibis.expr.types.temporal.IntervalValue.minutes) | Extract the number of minutes from an interval. |\n| [months](#ibis.expr.types.temporal.IntervalValue.months) | Extract the number of months from an interval. |\n| [nanoseconds](#ibis.expr.types.temporal.IntervalValue.nanoseconds) | Extract the number of nanoseconds from an interval. |\n| [quarters](#ibis.expr.types.temporal.IntervalValue.quarters) | Extract the number of quarters from an interval. |\n| [seconds](#ibis.expr.types.temporal.IntervalValue.seconds) | Extract the number of seconds from an interval. |\n| [weeks](#ibis.expr.types.temporal.IntervalValue.weeks) | Extract the number of weeks from an interval. |\n| [years](#ibis.expr.types.temporal.IntervalValue.years) | Extract the number of years from an interval. |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [negate](#ibis.expr.types.temporal.IntervalValue.negate) | Negate an interval expression. |\n| [to_unit](#ibis.expr.types.temporal.IntervalValue.to_unit) | Convert this interval to units of `target_unit`. |\n\n### negate { #ibis.expr.types.temporal.IntervalValue.negate }\n\n`negate(self)`\n\nNegate an interval expression.\n\n#### Returns\n\n| Type                                                      | Description                         |\n|-----------------------------------------------------------|-------------------------------------|\n| [IntervalValue](`ibis.expr.types.temporal.IntervalValue`) | A negated interval value expression |\n\n### to_unit { #ibis.expr.types.temporal.IntervalValue.to_unit }\n\n`to_unit(self, target_unit)`\n\nConvert this interval to units of `target_unit`.\n\n# DayOfWeek { #ibis.expr.types.temporal.DayOfWeek }\n\n`expr.types.temporal.DayOfWeek(self, expr)`\n\nA namespace of methods for extracting day of week information.\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [full_name](#ibis.expr.types.temporal.DayOfWeek.full_name) | Get the name of the day of the week. |\n| [index](#ibis.expr.types.temporal.DayOfWeek.index) | Get the index of the day of the week. |\n\n### full_name { #ibis.expr.types.temporal.DayOfWeek.full_name }\n\n`full_name(self)`\n\nGet the name of the day of the week.\n\n#### Returns\n\n| Type                         | Description                     |\n|------------------------------|---------------------------------|\n| [StringValue](`StringValue`) | The name of the day of the week |\n\n### index { #ibis.expr.types.temporal.DayOfWeek.index }\n\n`index(self)`\n\nGet the index of the day of the week.\n\n::: {.callout-note}\n## Ibis follows the `pandas` convention for day numbering: Monday = 0 and Sunday = 6.\n:::\n\n#### Returns\n\n| Type                           | Description                       |\n|--------------------------------|-----------------------------------|\n| [IntegerValue](`IntegerValue`) | The index of the day of the week. |\n\n# now { #ibis.now }\n\n`now()`\n\nReturn an expression that will compute the current timestamp.\n\n## Returns\n\n| Type                                 | Description                                       |\n|--------------------------------------|---------------------------------------------------|\n| [TimestampScalar](`TimestampScalar`) | An expression representing the current timestamp. |\n\n# date { #ibis.date }\n\n`date(value, *args)`\n\nReturn a date literal if `value` is coercible to a date.\n\n## Parameters\n\n| Name    | Type   | Description                                   | Default    |\n|---------|--------|-----------------------------------------------|------------|\n| `value` |        | Date string, datetime object or numeric value | _required_ |\n| `args`  |        | Month and day if `value` is a year            | `()`       |\n\n## Returns\n\n| Type                       | Description       |\n|----------------------------|-------------------|\n| [DateScalar](`DateScalar`) | A date expression |\n\n# time { #ibis.time }\n\n`time(value, *args)`\n\nReturn a time literal if `value` is coercible to a time.\n\n## Parameters\n\n| Name    | Type   | Description                            | Default    |\n|---------|--------|----------------------------------------|------------|\n| `value` |        | Time string                            | _required_ |\n| `args`  |        | Minutes, seconds if `value` is an hour | `()`       |\n\n## Returns\n\n| Type                       | Description       |\n|----------------------------|-------------------|\n| [TimeScalar](`TimeScalar`) | A time expression |\n\n## Examples\n\n\n::: {#7e9b974f .cell execution_count=1}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> ibis.time(\"00:00:00\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=1}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-magenta-fg ansi-bold\">datetime.time</span><span class=\"ansi-bold\">(</span><span class=\"ansi-cyan-fg ansi-bold\">0</span>, <span class=\"ansi-cyan-fg ansi-bold\">0</span><span class=\"ansi-bold\">)</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#82e5d329 .cell execution_count=2}\n``` {.python .cell-code}\n>>> ibis.time(12, 15, 30)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-magenta-fg ansi-bold\">datetime.time</span><span class=\"ansi-bold\">(</span><span class=\"ansi-cyan-fg ansi-bold\">12</span>, <span class=\"ansi-cyan-fg ansi-bold\">15</span>, <span class=\"ansi-cyan-fg ansi-bold\">30</span><span class=\"ansi-bold\">)</span></pre>\n```\n:::\n\n:::\n:::\n\n\n# timestamp { #ibis.timestamp }\n\n`timestamp(value, *args, timezone=None)`\n\nReturn a timestamp literal if `value` is coercible to a timestamp.\n\n## Parameters\n\n| Name       | Type                 | Description                                        | Default    |\n|------------|----------------------|----------------------------------------------------|------------|\n| `value`    |                      | Timestamp string, datetime object or numeric value | _required_ |\n| `args`     |                      | Additional arguments if `value` is numeric         | `()`       |\n| `timezone` | [str](`str`) \\| None | Timezone name                                      | `None`     |\n\n## Returns\n\n| Type                                 | Description            |\n|--------------------------------------|------------------------|\n| [TimestampScalar](`TimestampScalar`) | A timestamp expression |\n\n## Examples\n\n::: {#2047d759 .cell execution_count=3}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> ibis.timestamp(\"2021-01-01 00:00:00\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=3}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-magenta-fg ansi-bold\">Timestamp</span><span class=\"ansi-bold\">(</span><span class=\"ansi-green-fg\">'2021-01-01 00:00:00'</span><span class=\"ansi-bold\">)</span></pre>\n```\n:::\n\n:::\n:::\n\n\n# interval { #ibis.interval }\n\n`interval(value=None, unit='s', *, years=None, quarters=None, months=None, weeks=None, days=None, hours=None, minutes=None, seconds=None, milliseconds=None, microseconds=None, nanoseconds=None)`\n\nReturn an interval literal expression.\n\n## Parameters\n\n| Name           | Type                                                                             | Description            | Default   |\n|----------------|----------------------------------------------------------------------------------|------------------------|-----------|\n| `value`        | [int](`int`) \\| [datetime](`datetime`).[timedelta](`datetime.timedelta`) \\| None | Interval value.        | `None`    |\n| `unit`         | [str](`str`)                                                                     | Unit of `value`        | `'s'`     |\n| `years`        | [int](`int`) \\| None                                                             | Number of years        | `None`    |\n| `quarters`     | [int](`int`) \\| None                                                             | Number of quarters     | `None`    |\n| `months`       | [int](`int`) \\| None                                                             | Number of months       | `None`    |\n| `weeks`        | [int](`int`) \\| None                                                             | Number of weeks        | `None`    |\n| `days`         | [int](`int`) \\| None                                                             | Number of days         | `None`    |\n| `hours`        | [int](`int`) \\| None                                                             | Number of hours        | `None`    |\n| `minutes`      | [int](`int`) \\| None                                                             | Number of minutes      | `None`    |\n| `seconds`      | [int](`int`) \\| None                                                             | Number of seconds      | `None`    |\n| `milliseconds` | [int](`int`) \\| None                                                             | Number of milliseconds | `None`    |\n| `microseconds` | [int](`int`) \\| None                                                             | Number of microseconds | `None`    |\n| `nanoseconds`  | [int](`int`) \\| None                                                             | Number of nanoseconds  | `None`    |\n\n## Returns\n\n| Type                               | Description            |\n|------------------------------------|------------------------|\n| [IntervalScalar](`IntervalScalar`) | An interval expression |\n\n",
    "supporting": [
      "expression-temporal_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}