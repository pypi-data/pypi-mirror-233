{
  "hash": "6f1231fa68a35a803ccd4289c367a6a2",
  "result": {
    "markdown": "---\ntitle: Numeric and Boolean expressions\n---\n\n\n\nInteger, floating point, decimal, and boolean expressions.\n\n# NumericValue { #ibis.expr.types.numeric.NumericValue }\n\n`expr.types.numeric.NumericValue()`\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [abs](#ibis.expr.types.numeric.NumericValue.abs) | Return the absolute value of `self`. |\n| [acos](#ibis.expr.types.numeric.NumericValue.acos) | Compute the arc cosine of `self`. |\n| [asin](#ibis.expr.types.numeric.NumericValue.asin) | Compute the arc sine of `self`. |\n| [atan](#ibis.expr.types.numeric.NumericValue.atan) | Compute the arc tangent of `self`. |\n| [atan2](#ibis.expr.types.numeric.NumericValue.atan2) | Compute the two-argument version of arc tangent. |\n| [ceil](#ibis.expr.types.numeric.NumericValue.ceil) | Return the ceiling of `self`. |\n| [clip](#ibis.expr.types.numeric.NumericValue.clip) | Trim values outside of `lower` and `upper` bounds. |\n| [cos](#ibis.expr.types.numeric.NumericValue.cos) | Compute the cosine of `self`. |\n| [cot](#ibis.expr.types.numeric.NumericValue.cot) | Compute the cotangent of `self`. |\n| [degrees](#ibis.expr.types.numeric.NumericValue.degrees) | Compute the degrees of `self` radians. |\n| [exp](#ibis.expr.types.numeric.NumericValue.exp) | Compute $e^\\texttt{self}$. |\n| [floor](#ibis.expr.types.numeric.NumericValue.floor) | Return the floor of an expression. |\n| [ln](#ibis.expr.types.numeric.NumericValue.ln) | Compute $\\ln\\left(\\texttt{self}\\right)$. |\n| [log](#ibis.expr.types.numeric.NumericValue.log) | Compute $\\log_{\\texttt{base}}\\left(\\texttt{self}\\right)$. |\n| [log10](#ibis.expr.types.numeric.NumericValue.log10) | Compute $\\log_{10}\\left(\\texttt{self}\\right)$. |\n| [log2](#ibis.expr.types.numeric.NumericValue.log2) | Compute $\\log_{2}\\left(\\texttt{self}\\right)$. |\n| [negate](#ibis.expr.types.numeric.NumericValue.negate) | Negate a numeric expression. |\n| [nullifzero](#ibis.expr.types.numeric.NumericValue.nullifzero) | Return `NULL` if an expression is zero. |\n| [point](#ibis.expr.types.numeric.NumericValue.point) | Return a point constructed from the coordinate values. |\n| [radians](#ibis.expr.types.numeric.NumericValue.radians) | Compute radians from `self` degrees. |\n| [round](#ibis.expr.types.numeric.NumericValue.round) | Round values to an indicated number of decimal places. |\n| [sign](#ibis.expr.types.numeric.NumericValue.sign) | Return the sign of the input. |\n| [sin](#ibis.expr.types.numeric.NumericValue.sin) | Compute the sine of `self`. |\n| [sqrt](#ibis.expr.types.numeric.NumericValue.sqrt) | Compute the square root of `self`. |\n| [tan](#ibis.expr.types.numeric.NumericValue.tan) | Compute the tangent of `self`. |\n| [zeroifnull](#ibis.expr.types.numeric.NumericValue.zeroifnull) | Return zero if an expression is `NULL`. |\n\n### abs { #ibis.expr.types.numeric.NumericValue.abs }\n\n`abs(self)`\n\nReturn the absolute value of `self`.\n\n#### Examples\n\n\n::: {#8c87404d .cell execution_count=1}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [-1, 2, -3, 4]})\n>>> t.values.abs()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Abs(values) </span>┃\n┡━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │\n├─────────────┤\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │\n└─────────────┘\n</pre>\n```\n:::\n:::\n\n\n### acos { #ibis.expr.types.numeric.NumericValue.acos }\n\n`acos(self)`\n\nCompute the arc cosine of `self`.\n\n#### Examples\n\n::: {#b74adbc4 .cell execution_count=2}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [-1, 0, 1]})\n>>> t.values.acos()\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Acos(values) </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>      │\n├──────────────┤\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.141593</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.570796</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.000000</span> │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### asin { #ibis.expr.types.numeric.NumericValue.asin }\n\n`asin(self)`\n\nCompute the arc sine of `self`.\n\n#### Examples\n\n::: {#e92482a6 .cell execution_count=3}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [-1, 0, 1]})\n>>> t.values.asin()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Asin(values) </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>      │\n├──────────────┤\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.570796</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.000000</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.570796</span> │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### atan { #ibis.expr.types.numeric.NumericValue.atan }\n\n`atan(self)`\n\nCompute the arc tangent of `self`.\n\n#### Examples\n\n::: {#920ec504 .cell execution_count=4}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [-1, 0, 1]})\n>>> t.values.atan()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Atan(values) </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>      │\n├──────────────┤\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.785398</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.000000</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.785398</span> │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### atan2 { #ibis.expr.types.numeric.NumericValue.atan2 }\n\n`atan2(self, other)`\n\nCompute the two-argument version of arc tangent.\n\n#### Examples\n\n::: {#000ac41c .cell execution_count=5}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [-1, 0, 1]})\n>>> t.values.atan2(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Atan2(values, 0) </span>┃\n┡━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>          │\n├──────────────────┤\n│        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.570796</span> │\n│         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.000000</span> │\n│         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.570796</span> │\n└──────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### ceil { #ibis.expr.types.numeric.NumericValue.ceil }\n\n`ceil(self)`\n\nReturn the ceiling of `self`.\n\n#### Examples\n\n::: {#7239ee95 .cell execution_count=6}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [1, 1.1, 2, 2.1, 3.3]})\n>>> t.values.ceil()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Ceil(values) </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>        │\n├──────────────┤\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### clip { #ibis.expr.types.numeric.NumericValue.clip }\n\n`clip(self, lower=None, upper=None)`\n\nTrim values outside of `lower` and `upper` bounds.\n\n#### Parameters\n\n| Name    | Type                                                           | Description   | Default   |\n|---------|----------------------------------------------------------------|---------------|-----------|\n| `lower` | [NumericValue](`ibis.expr.types.numeric.NumericValue`) \\| None | Lower bound   | `None`    |\n| `upper` | [NumericValue](`ibis.expr.types.numeric.NumericValue`) \\| None | Upper bound   | `None`    |\n\n#### Returns\n\n| Type                                                   | Description   |\n|--------------------------------------------------------|---------------|\n| [NumericValue](`ibis.expr.types.numeric.NumericValue`) | Clipped input |\n\n#### Examples\n\n::: {#c0844853 .cell execution_count=7}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": range(8)})\n>>> t.values.clip(lower=3, upper=6)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Clip(values, 3, 6) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>              │\n├────────────────────┤\n│                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │\n│                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span> │\n│                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6</span> │\n│                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6</span> │\n└────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### cos { #ibis.expr.types.numeric.NumericValue.cos }\n\n`cos(self)`\n\nCompute the cosine of `self`.\n\n#### Examples\n\n::: {#6011e54f .cell execution_count=8}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [-1, 0, 1]})\n>>> t.values.cos()\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Cos(values) </span>┃\n┡━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>     │\n├─────────────┤\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.540302</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.000000</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.540302</span> │\n└─────────────┘\n</pre>\n```\n:::\n:::\n\n\n### cot { #ibis.expr.types.numeric.NumericValue.cot }\n\n`cot(self)`\n\nCompute the cotangent of `self`.\n\n#### Examples\n\n::: {#48220688 .cell execution_count=9}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [-1, 0, 1]})\n>>> t.values.cot()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Cot(values) </span>┃\n┡━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>     │\n├─────────────┤\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.642093</span> │\n│         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">inf</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.642093</span> │\n└─────────────┘\n</pre>\n```\n:::\n:::\n\n\n### degrees { #ibis.expr.types.numeric.NumericValue.degrees }\n\n`degrees(self)`\n\nCompute the degrees of `self` radians.\n\n#### Examples\n\n::: {#ce0abc0b .cell execution_count=10}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> from math import pi\n>>> t = ibis.memtable({\"values\": [0, pi / 2, pi, 3 * pi / 2, 2 * pi]})\n>>> t.values.degrees()\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Degrees(values) </span>┃\n┡━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>         │\n├─────────────────┤\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">90.0</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">180.0</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">270.0</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">360.0</span> │\n└─────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### exp { #ibis.expr.types.numeric.NumericValue.exp }\n\n`exp(self)`\n\nCompute $e^\\texttt{self}$.\n\n#### Returns\n\n| Type                                                   | Description       |\n|--------------------------------------------------------|-------------------|\n| [NumericValue](`ibis.expr.types.numeric.NumericValue`) | $e^\\texttt{self}$ |\n\n#### Examples\n\n::: {#8a336763 .cell execution_count=11}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": range(4)})\n>>> t.values.exp()\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Exp(values) </span>┃\n┡━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>     │\n├─────────────┤\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.000000</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.718282</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7.389056</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">20.085537</span> │\n└─────────────┘\n</pre>\n```\n:::\n:::\n\n\n### floor { #ibis.expr.types.numeric.NumericValue.floor }\n\n`floor(self)`\n\nReturn the floor of an expression.\n\n#### Examples\n\n::: {#d64d0abb .cell execution_count=12}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [1, 1.1, 2, 2.1, 3.3]})\n>>> t.values.floor()\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Floor(values) </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>         │\n├───────────────┤\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n### ln { #ibis.expr.types.numeric.NumericValue.ln }\n\n`ln(self)`\n\nCompute $\\ln\\left(\\texttt{self}\\right)$.\n\n#### Examples\n\n::: {#2bf5b561 .cell execution_count=13}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [1, 2.718281828, 3]})\n>>> t.values.ln()\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Ln(values) </span>┃\n┡━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>    │\n├────────────┤\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.000000</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.000000</span> │\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.098612</span> │\n└────────────┘\n</pre>\n```\n:::\n:::\n\n\n### log { #ibis.expr.types.numeric.NumericValue.log }\n\n`log(self, base=None)`\n\nCompute $\\log_{\\texttt{base}}\\left(\\texttt{self}\\right)$.\n\n#### Parameters\n\n| Name   | Type                                                           | Description                                             | Default   |\n|--------|----------------------------------------------------------------|---------------------------------------------------------|-----------|\n| `base` | [NumericValue](`ibis.expr.types.numeric.NumericValue`) \\| None | The base of the logarithm. If `None`, base `e` is used. | `None`    |\n\n#### Returns\n\n| Type                                                   | Description                         |\n|--------------------------------------------------------|-------------------------------------|\n| [NumericValue](`ibis.expr.types.numeric.NumericValue`) | Logarithm of `arg` with base `base` |\n\n#### Examples\n\n::: {#20d74034 .cell execution_count=14}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> from math import e\n>>> t = ibis.memtable({\"values\": [e, e**2, e**3]})\n>>> t.values.log()\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Log(values) </span>┃\n┡━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>     │\n├─────────────┤\n│         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.0</span> │\n│         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.0</span> │\n│         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.0</span> │\n└─────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#d61a21d2 .cell execution_count=15}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [10, 100, 1000]})\n>>> t.values.log(base=10)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Log(values, 10) </span>┃\n┡━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>         │\n├─────────────────┤\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.0</span> │\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.0</span> │\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.0</span> │\n└─────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### log10 { #ibis.expr.types.numeric.NumericValue.log10 }\n\n`log10(self)`\n\nCompute $\\log_{10}\\left(\\texttt{self}\\right)$.\n\n#### Examples\n\n::: {#f3d69347 .cell execution_count=16}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [1, 10, 100]})\n>>> t.values.log10()\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Log10(values) </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │\n├───────────────┤\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.0</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.0</span> │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n### log2 { #ibis.expr.types.numeric.NumericValue.log2 }\n\n`log2(self)`\n\nCompute $\\log_{2}\\left(\\texttt{self}\\right)$.\n\n#### Examples\n\n::: {#e2e17ddf .cell execution_count=17}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [1, 2, 4, 8]})\n>>> t.values.log2()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Log2(values) </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>      │\n├──────────────┤\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.0</span> │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### negate { #ibis.expr.types.numeric.NumericValue.negate }\n\n`negate(self)`\n\nNegate a numeric expression.\n\n#### Returns\n\n| Type                                                   | Description                |\n|--------------------------------------------------------|----------------------------|\n| [NumericValue](`ibis.expr.types.numeric.NumericValue`) | A numeric value expression |\n\n#### Examples\n\n::: {#b445ff41 .cell execution_count=18}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [-1, 0, 1]})\n>>> t.values.negate()\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Negate(values) </span>┃\n┡━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>          │\n├────────────────┤\n│              <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│              <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1</span> │\n└────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### nullifzero { #ibis.expr.types.numeric.NumericValue.nullifzero }\n\n`nullifzero(self)`\n\nReturn `NULL` if an expression is zero.\n\n### point { #ibis.expr.types.numeric.NumericValue.point }\n\n`point(self, right)`\n\nReturn a point constructed from the coordinate values.\n\nConstant coordinates result in construction of a `POINT` literal or\ncolumn.\n\n#### Parameters\n\n| Name    | Type                                                                                       | Description   | Default    |\n|---------|--------------------------------------------------------------------------------------------|---------------|------------|\n| `right` | [int](`int`) \\| [float](`float`) \\| [NumericValue](`ibis.expr.types.numeric.NumericValue`) | Y coordinate  | _required_ |\n\n#### Returns\n\n| Type                       | Description   |\n|----------------------------|---------------|\n| [PointValue](`PointValue`) | Points        |\n\n### radians { #ibis.expr.types.numeric.NumericValue.radians }\n\n`radians(self)`\n\nCompute radians from `self` degrees.\n\n#### Examples\n\n::: {#a1f9b45c .cell execution_count=19}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [0, 90, 180, 270, 360]})\n>>> t.values.radians()\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Radians(values) </span>┃\n┡━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>         │\n├─────────────────┤\n│        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.000000</span> │\n│        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.570796</span> │\n│        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.141593</span> │\n│        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4.712389</span> │\n│        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6.283185</span> │\n└─────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### round { #ibis.expr.types.numeric.NumericValue.round }\n\n`round(self, digits=None)`\n\nRound values to an indicated number of decimal places.\n\n#### Parameters\n\n| Name     | Type                                                                           | Description                                                                                                                                                                                                                                                                                                                                                             | Default   |\n|----------|--------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|\n| `digits` | [int](`int`) \\| [IntegerValue](`ibis.expr.types.numeric.IntegerValue`) \\| None | The number of digits to round to.  Here's how the `digits` parameter affects the expression output type:  - `digits` is `False`-y; `self.type()` is `decimal` → `decimal` -   `digits` is nonzero; `self.type()` is `decimal` → `decimal` - `digits` is `False`-y; `self.type()` is Floating  → `int64` -   `digits` is nonzero; `self.type()` is Floating  → `float64` | `None`    |\n\n#### Returns\n\n| Type                                                   | Description            |\n|--------------------------------------------------------|------------------------|\n| [NumericValue](`ibis.expr.types.numeric.NumericValue`) | The rounded expression |\n\n#### Examples\n\n::: {#65ea3f58 .cell execution_count=20}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [1.22, 1.64, 2.15, 2.54]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> values  </span>┃\n┡━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span> │\n├─────────┤\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.22</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.64</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.15</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.54</span> │\n└─────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#773543e2 .cell execution_count=21}\n``` {.python .cell-code}\n>>> t.values.round()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Round(values) </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>         │\n├───────────────┤\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#5328e279 .cell execution_count=22}\n``` {.python .cell-code}\n>>> t.values.round(digits=1)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Round(values, 1) </span>┃\n┡━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>          │\n├──────────────────┤\n│              <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.2</span> │\n│              <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.6</span> │\n│              <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.2</span> │\n│              <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.5</span> │\n└──────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### sign { #ibis.expr.types.numeric.NumericValue.sign }\n\n`sign(self)`\n\nReturn the sign of the input.\n\n#### Examples\n\n::: {#f7ed5105 .cell execution_count=23}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [-1, 2, -3, 4]})\n>>> t.values.sign()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Sign(values) </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>        │\n├──────────────┤\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### sin { #ibis.expr.types.numeric.NumericValue.sin }\n\n`sin(self)`\n\nCompute the sine of `self`.\n\n#### Examples\n\n::: {#2036607e .cell execution_count=24}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [-1, 0, 1]})\n>>> t.values.sin()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Sin(values) </span>┃\n┡━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>     │\n├─────────────┤\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.841471</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.000000</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.841471</span> │\n└─────────────┘\n</pre>\n```\n:::\n:::\n\n\n### sqrt { #ibis.expr.types.numeric.NumericValue.sqrt }\n\n`sqrt(self)`\n\nCompute the square root of `self`.\n\n#### Examples\n\n::: {#ca162ba3 .cell execution_count=25}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [1, 4, 9, 16]})\n>>> t.values.sqrt()\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Sqrt(values) </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>      │\n├──────────────┤\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.0</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4.0</span> │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### tan { #ibis.expr.types.numeric.NumericValue.tan }\n\n`tan(self)`\n\nCompute the tangent of `self`.\n\n#### Examples\n\n::: {#249de5ce .cell execution_count=26}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [-1, 0, 1]})\n>>> t.values.tan()\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Tan(values) </span>┃\n┡━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>     │\n├─────────────┤\n│   <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.557408</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.000000</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.557408</span> │\n└─────────────┘\n</pre>\n```\n:::\n:::\n\n\n### zeroifnull { #ibis.expr.types.numeric.NumericValue.zeroifnull }\n\n`zeroifnull(self)`\n\nReturn zero if an expression is `NULL`.\n\n# NumericColumn { #ibis.expr.types.numeric.NumericColumn }\n\n`expr.types.numeric.NumericColumn()`\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [bucket](#ibis.expr.types.numeric.NumericColumn.bucket) | Compute a discrete binning of a numeric array. |\n| [corr](#ibis.expr.types.numeric.NumericColumn.corr) | Return the correlation of two numeric columns. |\n| [cov](#ibis.expr.types.numeric.NumericColumn.cov) | Return the covariance of two numeric columns. |\n| [cummean](#ibis.expr.types.numeric.NumericColumn.cummean) | Return the cumulative mean of the input. |\n| [cumsum](#ibis.expr.types.numeric.NumericColumn.cumsum) | Return the cumulative sum of the input. |\n| [histogram](#ibis.expr.types.numeric.NumericColumn.histogram) | Compute a histogram with fixed width bins. |\n| [mean](#ibis.expr.types.numeric.NumericColumn.mean) | Return the mean of a numeric column. |\n| [median](#ibis.expr.types.numeric.NumericColumn.median) | Return the median of the column. |\n| [quantile](#ibis.expr.types.numeric.NumericColumn.quantile) | Return value at the given quantile. |\n| [std](#ibis.expr.types.numeric.NumericColumn.std) | Return the standard deviation of a numeric column. |\n| [sum](#ibis.expr.types.numeric.NumericColumn.sum) | Return the sum of a numeric column. |\n| [var](#ibis.expr.types.numeric.NumericColumn.var) | Return the variance of a numeric column. |\n\n### bucket { #ibis.expr.types.numeric.NumericColumn.bucket }\n\n`bucket(self, buckets, closed='left', close_extreme=True, include_under=False, include_over=False)`\n\nCompute a discrete binning of a numeric array.\n\n#### Parameters\n\n| Name            | Type                                           | Description                                                                                                                                                                       | Default    |\n|-----------------|------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `buckets`       | [Sequence](`typing.Sequence`)\\[[int](`int`)\\]  | List of buckets                                                                                                                                                                   | _required_ |\n| `closed`        | [Literal](`typing.Literal`)\\['left', 'right'\\] | Which side of each interval is closed. For example:  ```python buckets = [0, 100, 200] closed = \"left\"  # 100 falls in 2nd bucket closed = \"right\"  # 100 falls in 1st bucket ``` | `'left'`   |\n| `close_extreme` | [bool](`bool`)                                 | Whether the extreme values fall in the last bucket                                                                                                                                | `True`     |\n| `include_over`  | [bool](`bool`)                                 | Include values greater than the last bucket in the last bucket                                                                                                                    | `False`    |\n| `include_under` | [bool](`bool`)                                 | Include values less than the first bucket in the first bucket                                                                                                                     | `False`    |\n\n#### Returns\n\n| Type                                                     | Description                     |\n|----------------------------------------------------------|---------------------------------|\n| [IntegerColumn](`ibis.expr.types.numeric.IntegerColumn`) | A categorical column expression |\n\n### corr { #ibis.expr.types.numeric.NumericColumn.corr }\n\n`corr(self, right, where=None, how='sample')`\n\nReturn the correlation of two numeric columns.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                      | Default    |\n|---------|----------------------------------------------------------|----------------------------------|------------|\n| `right` | [NumericColumn](`ibis.expr.types.numeric.NumericColumn`) | Numeric column                   | _required_ |\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter                           | `None`     |\n| `how`   | [Literal](`typing.Literal`)\\['sample', 'pop'\\]           | Population or sample correlation | `'sample'` |\n\n#### Returns\n\n| Type                                                     | Description                           |\n|----------------------------------------------------------|---------------------------------------|\n| [NumericScalar](`ibis.expr.types.numeric.NumericScalar`) | The correlation of `left` and `right` |\n\n### cov { #ibis.expr.types.numeric.NumericColumn.cov }\n\n`cov(self, right, where=None, how='sample')`\n\nReturn the covariance of two numeric columns.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                     | Default    |\n|---------|----------------------------------------------------------|---------------------------------|------------|\n| `right` | [NumericColumn](`ibis.expr.types.numeric.NumericColumn`) | Numeric column                  | _required_ |\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter                          | `None`     |\n| `how`   | [Literal](`typing.Literal`)\\['sample', 'pop'\\]           | Population or sample covariance | `'sample'` |\n\n#### Returns\n\n| Type                                                     | Description                          |\n|----------------------------------------------------------|--------------------------------------|\n| [NumericScalar](`ibis.expr.types.numeric.NumericScalar`) | The covariance of `self` and `right` |\n\n### cummean { #ibis.expr.types.numeric.NumericColumn.cummean }\n\n`cummean(self)`\n\nReturn the cumulative mean of the input.\n\n### cumsum { #ibis.expr.types.numeric.NumericColumn.cumsum }\n\n`cumsum(self)`\n\nReturn the cumulative sum of the input.\n\n### histogram { #ibis.expr.types.numeric.NumericColumn.histogram }\n\n`histogram(self, nbins=None, binwidth=None, base=None, eps=1e-13)`\n\nCompute a histogram with fixed width bins.\n\n#### Parameters\n\n| Name       | Type                     | Description                                                                      | Default   |\n|------------|--------------------------|----------------------------------------------------------------------------------|-----------|\n| `nbins`    | [int](`int`) \\| None     | If supplied, will be used to compute the binwidth                                | `None`    |\n| `binwidth` | [float](`float`) \\| None | If not supplied, computed from the data (actual max and min values)              | `None`    |\n| `base`     | [float](`float`) \\| None | The value of the first histogram bin. Defaults to the minimum value of `column`. | `None`    |\n| `eps`      | [float](`float`)         | Allowed floating point epsilon for histogram base                                | `1e-13`   |\n\n#### Returns\n\n| Type                                       | Description     |\n|--------------------------------------------|-----------------|\n| [Column](`ibis.expr.types.generic.Column`) | Bucketed column |\n\n### mean { #ibis.expr.types.numeric.NumericColumn.mean }\n\n`mean(self, where=None)`\n\nReturn the mean of a numeric column.\n\n#### Parameters\n\n| Name    | Type                                                     | Description   | Default   |\n|---------|----------------------------------------------------------|---------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter        | `None`    |\n\n#### Returns\n\n| Type                                                     | Description                      |\n|----------------------------------------------------------|----------------------------------|\n| [NumericScalar](`ibis.expr.types.numeric.NumericScalar`) | The mean of the input expression |\n\n### median { #ibis.expr.types.numeric.NumericColumn.median }\n\n`median(self, where=None)`\n\nReturn the median of the column.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                                                                                                               | Default   |\n|---------|----------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Optional boolean expression. If given, only the values where `where` evaluates to true will be considered for the median. | `None`    |\n\n#### Returns\n\n| Type                                                     | Description          |\n|----------------------------------------------------------|----------------------|\n| [NumericScalar](`ibis.expr.types.numeric.NumericScalar`) | Median of the column |\n\n### quantile { #ibis.expr.types.numeric.NumericColumn.quantile }\n\n`quantile(self, quantile, interpolation=None, where=None)`\n\nReturn value at the given quantile.\n\n#### Parameters\n\n| Name            | Type                                                                                                        | Description                                                                                                                                                                                                                                                                                                                                                                                                                                          | Default    |\n|-----------------|-------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `quantile`      | [Sequence](`typing.Sequence`)\\[[NumericValue](`ibis.expr.types.numeric.NumericValue`) \\| [float](`float`)\\] | `0 <= quantile <= 1`, the quantile(s) to compute                                                                                                                                                                                                                                                                                                                                                                                                     | _required_ |\n| `interpolation` | [Literal](`typing.Literal`)\\['linear', 'lower', 'higher', 'midpoint', 'nearest'\\] \\| None                   | ::: {.callout-warning} ## This parameter is backend dependent and may have no effect :::  This parameter specifies the interpolation method to use, when the desired quantile lies between two data points `i` and `j`:  * linear: `i + (j - i) * fraction`, where `fraction` is the   fractional part of the index surrounded by `i` and `j`. * lower: `i`. * higher: `j`. * nearest: `i` or `j` whichever is nearest. * midpoint: (`i` + `j`) / 2. | `None`     |\n| `where`         | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None                                                    | Boolean filter for input values                                                                                                                                                                                                                                                                                                                                                                                                                      | `None`     |\n\n#### Returns\n\n| Type                                                     | Description           |\n|----------------------------------------------------------|-----------------------|\n| [NumericScalar](`ibis.expr.types.numeric.NumericScalar`) | Quantile of the input |\n\n### std { #ibis.expr.types.numeric.NumericColumn.std }\n\n`std(self, where=None, how='sample')`\n\nReturn the standard deviation of a numeric column.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                             | Default    |\n|---------|----------------------------------------------------------|-----------------------------------------|------------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter                                  | `None`     |\n| `how`   | [Literal](`typing.Literal`)\\['sample', 'pop'\\]           | Sample or population standard deviation | `'sample'` |\n\n#### Returns\n\n| Type                                                     | Description                 |\n|----------------------------------------------------------|-----------------------------|\n| [NumericScalar](`ibis.expr.types.numeric.NumericScalar`) | Standard deviation of `arg` |\n\n### sum { #ibis.expr.types.numeric.NumericColumn.sum }\n\n`sum(self, where=None)`\n\nReturn the sum of a numeric column.\n\n#### Parameters\n\n| Name    | Type                                                     | Description   | Default   |\n|---------|----------------------------------------------------------|---------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter        | `None`    |\n\n#### Returns\n\n| Type                                                     | Description                     |\n|----------------------------------------------------------|---------------------------------|\n| [NumericScalar](`ibis.expr.types.numeric.NumericScalar`) | The sum of the input expression |\n\n### var { #ibis.expr.types.numeric.NumericColumn.var }\n\n`var(self, where=None, how='sample')`\n\nReturn the variance of a numeric column.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                   | Default    |\n|---------|----------------------------------------------------------|-------------------------------|------------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter                        | `None`     |\n| `how`   | [Literal](`typing.Literal`)\\['sample', 'pop'\\]           | Sample or population variance | `'sample'` |\n\n#### Returns\n\n| Type                                                     | Description                 |\n|----------------------------------------------------------|-----------------------------|\n| [NumericScalar](`ibis.expr.types.numeric.NumericScalar`) | Standard deviation of `arg` |\n\n# IntegerValue { #ibis.expr.types.numeric.IntegerValue }\n\n`expr.types.numeric.IntegerValue()`\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [convert_base](#ibis.expr.types.numeric.IntegerValue.convert_base) | Convert an integer from one base to another. |\n| [label](#ibis.expr.types.numeric.IntegerValue.label) | Label a set of integer values with strings. |\n| [to_interval](#ibis.expr.types.numeric.IntegerValue.to_interval) | Convert an integer to an interval. |\n| [to_timestamp](#ibis.expr.types.numeric.IntegerValue.to_timestamp) | Convert an integral UNIX timestamp to a timestamp expression. |\n\n### convert_base { #ibis.expr.types.numeric.IntegerValue.convert_base }\n\n`convert_base(self, from_base, to_base)`\n\nConvert an integer from one base to another.\n\n#### Parameters\n\n| Name        | Type                                                   | Description                | Default    |\n|-------------|--------------------------------------------------------|----------------------------|------------|\n| `from_base` | [IntegerValue](`ibis.expr.types.numeric.IntegerValue`) | Numeric base of expression | _required_ |\n| `to_base`   | [IntegerValue](`ibis.expr.types.numeric.IntegerValue`) | New base                   | _required_ |\n\n#### Returns\n\n| Type                                                   | Description          |\n|--------------------------------------------------------|----------------------|\n| [IntegerValue](`ibis.expr.types.numeric.IntegerValue`) | Converted expression |\n\n### label { #ibis.expr.types.numeric.IntegerValue.label }\n\n`label(self, labels, nulls=None)`\n\nLabel a set of integer values with strings.\n\n#### Parameters\n\n| Name     | Type                                          | Description                                                                                       | Default    |\n|----------|-----------------------------------------------|---------------------------------------------------------------------------------------------------|------------|\n| `labels` | [Iterable](`typing.Iterable`)\\[[str](`str`)\\] | An iterable of string labels. Each integer value in `self` will be mapped to a value in `labels`. | _required_ |\n| `nulls`  | [str](`str`) \\| None                          | String label to use for `NULL` values                                                             | `None`     |\n\n#### Returns\n\n| Type                         | Description                  |\n|------------------------------|------------------------------|\n| [StringValue](`StringValue`) | `self` labeled with `labels` |\n\n#### Examples\n\n::: {#1e814db8 .cell execution_count=27}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"a\": [0, 1, 0, 2]})\n>>> t.select(t.a, labeled=t.a.label([\"a\", \"b\", \"c\"]))\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━┳━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> a     </span>┃<span style=\"font-weight: bold\"> labeled </span>┃\n┡━━━━━━━╇━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │\n├───────┼─────────┤\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">a      </span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">b      </span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">a      </span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">c      </span> │\n└───────┴─────────┘\n</pre>\n```\n:::\n:::\n\n\n### to_interval { #ibis.expr.types.numeric.IntegerValue.to_interval }\n\n`to_interval(self, unit='s')`\n\nConvert an integer to an interval.\n\n#### Parameters\n\n| Name   | Type                                                                               | Description                     | Default   |\n|--------|------------------------------------------------------------------------------------|---------------------------------|-----------|\n| `unit` | [Literal](`typing.Literal`)\\['Y', 'M', 'W', 'D', 'h', 'm', 's', 'ms', 'us', 'ns'\\] | Unit for the resulting interval | `'s'`     |\n\n#### Returns\n\n| Type                             | Description                    |\n|----------------------------------|--------------------------------|\n| [IntervalValue](`IntervalValue`) | An interval in units of `unit` |\n\n### to_timestamp { #ibis.expr.types.numeric.IntegerValue.to_timestamp }\n\n`to_timestamp(self, unit='s')`\n\nConvert an integral UNIX timestamp to a timestamp expression.\n\n#### Parameters\n\n| Name   | Type                                           | Description             | Default   |\n|--------|------------------------------------------------|-------------------------|-----------|\n| `unit` | [Literal](`typing.Literal`)\\['s', 'ms', 'us'\\] | The resolution of `arg` | `'s'`     |\n\n#### Returns\n\n| Type                               | Description                     |\n|------------------------------------|---------------------------------|\n| [TimestampValue](`TimestampValue`) | `self` converted to a timestamp |\n\n# IntegerColumn { #ibis.expr.types.numeric.IntegerColumn }\n\n`expr.types.numeric.IntegerColumn()`\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [bit_and](#ibis.expr.types.numeric.IntegerColumn.bit_and) | Aggregate the column using the bitwise and operator. |\n| [bit_or](#ibis.expr.types.numeric.IntegerColumn.bit_or) | Aggregate the column using the bitwise or operator. |\n| [bit_xor](#ibis.expr.types.numeric.IntegerColumn.bit_xor) | Aggregate the column using the bitwise exclusive or operator. |\n\n### bit_and { #ibis.expr.types.numeric.IntegerColumn.bit_and }\n\n`bit_and(self, where=None)`\n\nAggregate the column using the bitwise and operator.\n\n### bit_or { #ibis.expr.types.numeric.IntegerColumn.bit_or }\n\n`bit_or(self, where=None)`\n\nAggregate the column using the bitwise or operator.\n\n### bit_xor { #ibis.expr.types.numeric.IntegerColumn.bit_xor }\n\n`bit_xor(self, where=None)`\n\nAggregate the column using the bitwise exclusive or operator.\n\n# FloatingValue { #ibis.expr.types.numeric.FloatingValue }\n\n`expr.types.numeric.FloatingValue()`\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [isinf](#ibis.expr.types.numeric.FloatingValue.isinf) | Return whether the value is infinity. |\n| [isnan](#ibis.expr.types.numeric.FloatingValue.isnan) | Return whether the value is NaN. |\n\n### isinf { #ibis.expr.types.numeric.FloatingValue.isinf }\n\n`isinf(self)`\n\nReturn whether the value is infinity.\n\n### isnan { #ibis.expr.types.numeric.FloatingValue.isnan }\n\n`isnan(self)`\n\nReturn whether the value is NaN.\n\n# DecimalValue { #ibis.expr.types.numeric.DecimalValue }\n\n`expr.types.numeric.DecimalValue()`\n\n\n\n# BooleanValue { #ibis.expr.types.logical.BooleanValue }\n\n`expr.types.logical.BooleanValue()`\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [ifelse](#ibis.expr.types.logical.BooleanValue.ifelse) | Construct a ternary conditional expression. |\n\n### ifelse { #ibis.expr.types.logical.BooleanValue.ifelse }\n\n`ifelse(self, true_expr, false_expr)`\n\nConstruct a ternary conditional expression.\n\n#### Parameters\n\n| Name         | Type                               | Description                                                   | Default    |\n|--------------|------------------------------------|---------------------------------------------------------------|------------|\n| `true_expr`  | [ir](`ibis`).[Value](`ibis.Value`) | Expression to return if `self` evaluates to `True`            | _required_ |\n| `false_expr` | [ir](`ibis`).[Value](`ibis.Value`) | Expression to return if `self` evaluates to `False` or `NULL` | _required_ |\n\n#### Returns\n\n| Type             | Description                                                   |\n|------------------|---------------------------------------------------------------|\n| [Value](`Value`) | The value of `true_expr` if `arg` is `True` else `false_expr` |\n\n#### Examples\n\n::: {#d60f6df7 .cell execution_count=28}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"is_person\": [True, False, True, None]})\n>>> t.is_person.ifelse(\"yes\", \"no\")\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> IfElse(is_person, 'yes', 'no') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                         │\n├────────────────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">yes                           </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">no                            </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">yes                           </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">no                            </span> │\n└────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n# ifelse { #ibis.expr.api.ifelse }\n\n`expr.api.ifelse`\n\nConstruct a ternary conditional expression.\n\n## Parameters\n\n| Name         | Type                                             | Description                                                        | Default    |\n|--------------|--------------------------------------------------|--------------------------------------------------------------------|------------|\n| `condition`  | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) | A boolean expression                                               | _required_ |\n| `true_expr`  | [ir](`ibis`).[Value](`ibis.Value`)               | Expression to return if `condition` evaluates to `True`            | _required_ |\n| `false_expr` | [ir](`ibis`).[Value](`ibis.Value`)               | Expression to return if `condition` evaluates to `False` or `NULL` | _required_ |\n\n## Returns\n\n| Type                               | Description                                                         |\n|------------------------------------|---------------------------------------------------------------------|\n| [ir](`ibis`).[Value](`ibis.Value`) | The value of `true_expr` if `condition` is `True` else `false_expr` |\n\n## Examples\n\n::: {#ba89261b .cell execution_count=29}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"is_person\": [True, False, True, None]})\n>>> ibis.ifelse(t.is_person, \"yes\", \"no\")\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> IfElse(is_person, 'yes', 'no') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                         │\n├────────────────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">yes                           </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">no                            </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">yes                           </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">no                            </span> │\n└────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n# and_ { #ibis.and_ }\n\n`and_(*predicates)`\n\nCombine multiple predicates using `&`.\n\n## Parameters\n\n| Name         | Type                                             | Description               | Default   |\n|--------------|--------------------------------------------------|---------------------------|-----------|\n| `predicates` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) | Boolean value expressions | `()`      |\n\n## Returns\n\n| Type                           | Description                                                                                                                |\n|--------------------------------|----------------------------------------------------------------------------------------------------------------------------|\n| [BooleanValue](`BooleanValue`) | A new predicate that evaluates to True if all composing predicates are True. If no predicates were provided, returns True. |\n\n# or_ { #ibis.or_ }\n\n`or_(*predicates)`\n\nCombine multiple predicates using `|`.\n\n## Parameters\n\n| Name         | Type                                             | Description               | Default   |\n|--------------|--------------------------------------------------|---------------------------|-----------|\n| `predicates` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) | Boolean value expressions | `()`      |\n\n## Returns\n\n| Type                           | Description                                                                                                                 |\n|--------------------------------|-----------------------------------------------------------------------------------------------------------------------------|\n| [BooleanValue](`BooleanValue`) | A new predicate that evaluates to True if any composing predicates are True. If no predicates were provided, returns False. |\n\n# least { #ibis.expr.api.least }\n\n`expr.api.least`\n\n\n\n# greatest { #ibis.expr.api.greatest }\n\n`expr.api.greatest`\n\n\n\n# negate { #ibis.expr.api.negate }\n\n`expr.api.negate`\n\n\n\n# random { #ibis.random }\n\n`random()`\n\nReturn a random floating point number in the range [0.0, 1.0).\n\nSimilar to [](`random.random`) in the Python standard library.\n\n## Returns\n\n| Type                               | Description                   |\n|------------------------------------|-------------------------------|\n| [FloatingScalar](`FloatingScalar`) | Random float value expression |\n\n",
    "supporting": [
      "expression-numeric_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}