{
  "hash": "74d5fcccc69a1facb3b770611018779d",
  "result": {
    "markdown": "---\ntitle: Generic expressions\n---\n\n\n\nScalars and columns of any element type.\n\n# Value { #ibis.expr.types.generic.Value }\n\n`expr.types.generic.Value()`\n\nBase class for a data generating expression having a known type.\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [as_table](#ibis.expr.types.generic.Value.as_table) | Promote the expression to a table. |\n| [asc](#ibis.expr.types.generic.Value.asc) | Sort an expression ascending. |\n| [between](#ibis.expr.types.generic.Value.between) | Check if this expression is between `lower` and `upper`, inclusive. |\n| [case](#ibis.expr.types.generic.Value.case) | Create a SimpleCaseBuilder to chain multiple if-else statements. |\n| [cases](#ibis.expr.types.generic.Value.cases) | Create a case expression in one shot. |\n| [cast](#ibis.expr.types.generic.Value.cast) | Cast expression to indicated data type. |\n| [coalesce](#ibis.expr.types.generic.Value.coalesce) | Return the first non-null value from `args`. |\n| [collect](#ibis.expr.types.generic.Value.collect) | Aggregate this expression's elements into an array. |\n| [desc](#ibis.expr.types.generic.Value.desc) | Sort an expression descending. |\n| [fillna](#ibis.expr.types.generic.Value.fillna) | Replace any null values with the indicated fill value. |\n| [greatest](#ibis.expr.types.generic.Value.greatest) | Compute the largest value among the supplied arguments. |\n| [group_concat](#ibis.expr.types.generic.Value.group_concat) | Concatenate values using the indicated separator to produce a string. |\n| [hash](#ibis.expr.types.generic.Value.hash) | Compute an integer hash value. |\n| [identical_to](#ibis.expr.types.generic.Value.identical_to) | Return whether this expression is identical to other. |\n| [isin](#ibis.expr.types.generic.Value.isin) | Check whether this expression's values are in `values`. |\n| [isnull](#ibis.expr.types.generic.Value.isnull) | Return whether this expression is NULL. |\n| [least](#ibis.expr.types.generic.Value.least) | Compute the smallest value among the supplied arguments. |\n| [name](#ibis.expr.types.generic.Value.name) | Rename an expression to `name`. |\n| [notin](#ibis.expr.types.generic.Value.notin) | Check whether this expression's values are not in `values`. |\n| [notnull](#ibis.expr.types.generic.Value.notnull) | Return whether this expression is not NULL. |\n| [nullif](#ibis.expr.types.generic.Value.nullif) | Set values to null if they equal the values `null_if_expr`. |\n| [over](#ibis.expr.types.generic.Value.over) | Construct a window expression. |\n| [substitute](#ibis.expr.types.generic.Value.substitute) | Replace values given in `values` with `replacement`. |\n| [to_pandas](#ibis.expr.types.generic.Value.to_pandas) | Convert a column expression to a pandas Series or scalar object. |\n| [try_cast](#ibis.expr.types.generic.Value.try_cast) | Try cast expression to indicated data type. |\n| [type](#ibis.expr.types.generic.Value.type) | Return the [DataType] of this expression. |\n| [typeof](#ibis.expr.types.generic.Value.typeof) | Return the data type of the expression. |\n\n### as_table { #ibis.expr.types.generic.Value.as_table }\n\n`as_table(self)`\n\nPromote the expression to a table.\n\n#### Returns\n\n| Type             | Description        |\n|------------------|--------------------|\n| [Table](`Table`) | A table expression |\n\n#### Examples\n\n\n::: {#a476edc0 .cell execution_count=1}\n``` {.python .cell-code}\n>>> import ibis\n>>> t = ibis.table(dict(a=\"str\"), name=\"t\")\n>>> expr = t.a.length().name(\"len\").as_table()\n>>> expected = t.select(len=t.a.length())\n>>> expr.equals(expected)\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nTrue\n```\n:::\n:::\n\n\n### asc { #ibis.expr.types.generic.Value.asc }\n\n`asc(self)`\n\nSort an expression ascending.\n\n### between { #ibis.expr.types.generic.Value.between }\n\n`between(self, lower, upper)`\n\nCheck if this expression is between `lower` and `upper`, inclusive.\n\n#### Parameters\n\n| Name    | Type                                     | Description   | Default    |\n|---------|------------------------------------------|---------------|------------|\n| `lower` | [Value](`ibis.expr.types.generic.Value`) | Lower bound   | _required_ |\n| `upper` | [Value](`ibis.expr.types.generic.Value`) | Upper bound   | _required_ |\n\n#### Returns\n\n| Type                           | Description                                            |\n|--------------------------------|--------------------------------------------------------|\n| [BooleanValue](`BooleanValue`) | Expression indicating membership in the provided range |\n\n#### Examples\n\n::: {#59c473fd .cell execution_count=2}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch().limit(5)\n>>> t.bill_length_mm.between(35, 38)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/cody/repos/ibis-birdbrain/venv/lib/python3.11/site-packages/google/auth/_default.py:76: UserWarning:\n\nYour application has authenticated using end user credentials from Google Cloud SDK without a quota project. You might receive a \"quota exceeded\" or \"API not enabled\" error. See the following page for troubleshooting: https://cloud.google.com/docs/authentication/adc-troubleshooting/user-creds. \n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Between(bill_length_mm, 35, 38) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>                         │\n├─────────────────────────────────┤\n│ False                           │\n│ False                           │\n│ False                           │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                            │\n│ True                            │\n└─────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### case { #ibis.expr.types.generic.Value.case }\n\n`case(self)`\n\nCreate a SimpleCaseBuilder to chain multiple if-else statements.\n\nAdd new search expressions with the `.when()` method. These must be\ncomparable with this column expression. Conclude by calling `.end()`\n\n#### Returns\n\n| Type                                     | Description    |\n|------------------------------------------|----------------|\n| [SimpleCaseBuilder](`SimpleCaseBuilder`) | A case builder |\n\n#### Examples\n\n::: {#446538e0 .cell execution_count=3}\n``` {.python .cell-code}\n>>> import ibis\n>>> t = ibis.table([(\"string_col\", \"string\")], name=\"t\")\n>>> expr = t.string_col\n>>> case_expr = (\n...     expr.case()\n...     .when(\"a\", \"an a\")\n...     .when(\"b\", \"a b\")\n...     .else_(\"null or (not a and not b)\")\n...     .end()\n... )\n>>> case_expr\n```\n\n::: {.cell-output .cell-output-error}\n```\nIbisError: Expression contains unbound tables and therefore cannot be executed. Use ibis.<backend>.execute(expr) or assign a backend instance to `ibis.options.default_backend`.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nIbisError: Expression contains unbound tables and therefore cannot be executed. Use ibis.<backend>.execute(expr) or assign a backend instance to `ibis.options.default_backend`.\n```\n:::\n:::\n\n\n### cases { #ibis.expr.types.generic.Value.cases }\n\n`cases(self, case_result_pairs, default=None)`\n\nCreate a case expression in one shot.\n\n#### Parameters\n\n| Name                | Type                                                                                                                                            | Description                                             | Default    |\n|---------------------|-------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------|------------|\n| `case_result_pairs` | [Iterable](`typing.Iterable`)\\[[tuple](`tuple`)\\[[ir](`ibis`).[BooleanValue](`ibis.BooleanValue`), [Value](`ibis.expr.types.generic.Value`)\\]\\] | Conditional-result pairs                                | _required_ |\n| `default`           | [Value](`ibis.expr.types.generic.Value`) \\| None                                                                                                | Value to return if none of the case conditions are true | `None`     |\n\n#### Returns\n\n| Type                                     | Description      |\n|------------------------------------------|------------------|\n| [Value](`ibis.expr.types.generic.Value`) | Value expression |\n\n#### Examples\n\n::: {#7078ab6d .cell execution_count=4}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [1, 2, 1, 2, 3, 2, 4]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> values </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>  │\n├────────┤\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#97717f74 .cell execution_count=5}\n``` {.python .cell-code}\n>>> number_letter_map = ((1, \"a\"), (2, \"b\"), (3, \"c\"))\n>>> t.values.cases(number_letter_map, default=\"unk\").name(\"replace\")\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> replace </span>┃\n┡━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │\n├─────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a      </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b      </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a      </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b      </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">c      </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b      </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">unk    </span> │\n└─────────┘\n</pre>\n```\n:::\n:::\n\n\n### cast { #ibis.expr.types.generic.Value.cast }\n\n`cast(self, target_type)`\n\nCast expression to indicated data type.\n\n#### Parameters\n\n| Name          | Type                                     | Description     | Default    |\n|---------------|------------------------------------------|-----------------|------------|\n| `target_type` | [dt](`ibis`).[DataType](`ibis.DataType`) | Type to cast to | _required_ |\n\n#### Returns\n\n| Type                                     | Description       |\n|------------------------------------------|-------------------|\n| [Value](`ibis.expr.types.generic.Value`) | Casted expression |\n\n#### Examples\n\n::: {#1e6206e0 .cell execution_count=6}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = False\n>>> t = ibis.table(dict(a=\"int64\"), name=\"t\")\n>>> t.a.cast(\"float\")\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">r0 := UnboundTable: t\n  a int64\n\nCast(a, float64): Cast(r0.a, to=float64)\n</pre>\n```\n:::\n:::\n\n\n### coalesce { #ibis.expr.types.generic.Value.coalesce }\n\n`coalesce(self, *args)`\n\nReturn the first non-null value from `args`.\n\n#### Parameters\n\n| Name   | Type                                     | Description                                             | Default   |\n|--------|------------------------------------------|---------------------------------------------------------|-----------|\n| `args` | [Value](`ibis.expr.types.generic.Value`) | Arguments from which to choose the first non-null value | `()`      |\n\n#### Returns\n\n| Type                                     | Description          |\n|------------------------------------------|----------------------|\n| [Value](`ibis.expr.types.generic.Value`) | Coalesced expression |\n\n#### Examples\n\n::: {#84a07609 .cell execution_count=7}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.coalesce(None, 4, 5).name(\"x\")\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\nx: Coalesce([None, 4, 5])\n```\n:::\n:::\n\n\n### collect { #ibis.expr.types.generic.Value.collect }\n\n`collect(self, where=None)`\n\nAggregate this expression's elements into an array.\n\nThis function is called `array_agg`, `list_agg`, or `list` in other systems.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                        | Default   |\n|---------|----------------------------------------------------------|------------------------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter to apply before aggregation | `None`    |\n\n#### Returns\n\n| Type                         | Description     |\n|------------------------------|-----------------|\n| [ArrayScalar](`ArrayScalar`) | Collected array |\n\n#### Examples\n\nBasic collect usage\n\n::: {#36ec2f8c .cell execution_count=8}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"key\": list(\"aaabb\"), \"value\": [1, 2, 3, 4, 5]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> key    </span>┃<span style=\"font-weight: bold\"> value </span>┃\n┡━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a     </span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a     </span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a     </span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b     </span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b     </span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span> │\n└────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#788fa12d .cell execution_count=9}\n``` {.python .cell-code}\n>>> t.value.collect()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=9}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bold\">[</span><span class=\"ansi-cyan-fg ansi-bold\">1</span>, <span class=\"ansi-cyan-fg ansi-bold\">2</span>, <span class=\"ansi-cyan-fg ansi-bold\">3</span>, <span class=\"ansi-cyan-fg ansi-bold\">4</span>, <span class=\"ansi-cyan-fg ansi-bold\">5</span><span class=\"ansi-bold\">]</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#26c85b96 .cell execution_count=10}\n``` {.python .cell-code}\n>>> type(t.value.collect())\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\nibis.expr.types.arrays.ArrayScalar\n```\n:::\n:::\n\n\nCollect elements per group\n\n::: {#0b674983 .cell execution_count=11}\n``` {.python .cell-code}\n>>> t.group_by(\"key\").agg(v=lambda t: t.value.collect())\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┳━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> key    </span>┃<span style=\"font-weight: bold\"> v              </span>┃\n┡━━━━━━━━╇━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>   │\n├────────┼────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a     </span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b     </span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span><span style=\"font-weight: bold\">]</span>         │\n└────────┴────────────────┘\n</pre>\n```\n:::\n:::\n\n\nCollect elements per group using a filter\n\n::: {#37805775 .cell execution_count=12}\n``` {.python .cell-code}\n>>> t.group_by(\"key\").agg(v=lambda t: t.value.collect(where=t.value > 1))\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┳━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> key    </span>┃<span style=\"font-weight: bold\"> v            </span>┃\n┡━━━━━━━━╇━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├────────┼──────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a     </span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b     </span> │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span><span style=\"font-weight: bold\">]</span>       │\n└────────┴──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### desc { #ibis.expr.types.generic.Value.desc }\n\n`desc(self)`\n\nSort an expression descending.\n\n### fillna { #ibis.expr.types.generic.Value.fillna }\n\n`fillna(self, fill_value)`\n\nReplace any null values with the indicated fill value.\n\n#### Parameters\n\n| Name         | Type                                       | Description                                       | Default    |\n|--------------|--------------------------------------------|---------------------------------------------------|------------|\n| `fill_value` | [Scalar](`ibis.expr.types.generic.Scalar`) | Value with which to replace `NA` values in `self` | _required_ |\n\n#### Examples\n\n::: {#101a10fc .cell execution_count=13}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch().limit(5)\n>>> t.sex\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> sex    </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>   │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#58595305 .cell execution_count=14}\n``` {.python .cell-code}\n>>> t.sex.fillna(\"unrecorded\").name(\"sex\")\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> sex        </span>┃\n┡━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>     │\n├────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">male      </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">female    </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">female    </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">unrecorded</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">female    </span> │\n└────────────┘\n</pre>\n```\n:::\n:::\n\n\n#### Returns\n\n| Type                                     | Description                                      |\n|------------------------------------------|--------------------------------------------------|\n| [Value](`ibis.expr.types.generic.Value`) | `self` filled with `fill_value` where it is `NA` |\n\n### greatest { #ibis.expr.types.generic.Value.greatest }\n\n`greatest(self, *args)`\n\nCompute the largest value among the supplied arguments.\n\n#### Parameters\n\n| Name   | Type                               | Description              | Default   |\n|--------|------------------------------------|--------------------------|-----------|\n| `args` | [ir](`ibis`).[Value](`ibis.Value`) | Arguments to choose from | `()`      |\n\n#### Returns\n\n| Type                                     | Description                     |\n|------------------------------------------|---------------------------------|\n| [Value](`ibis.expr.types.generic.Value`) | Maximum of the passed arguments |\n\n### group_concat { #ibis.expr.types.generic.Value.group_concat }\n\n`group_concat(self, sep=',', where=None)`\n\nConcatenate values using the indicated separator to produce a string.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                            | Default   |\n|---------|----------------------------------------------------------|----------------------------------------|-----------|\n| `sep`   | [str](`str`)                                             | Separator will be used to join strings | `','`     |\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter expression                      | `None`    |\n\n#### Returns\n\n| Type                           | Description                    |\n|--------------------------------|--------------------------------|\n| [StringScalar](`StringScalar`) | Concatenated string expression |\n\n#### Examples\n\n::: {#4ee3e894 .cell execution_count=15}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch().limit(5)\n>>> t[[\"bill_length_mm\", \"bill_depth_mm\"]]\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃\n┡━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │\n├────────────────┼───────────────┤\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.7</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.5</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.4</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">40.3</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.0</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">nan</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">nan</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">36.7</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">19.3</span> │\n└────────────────┴───────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#8bcc5f63 .cell execution_count=16}\n``` {.python .cell-code}\n>>> t.bill_length_mm.group_concat()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=16}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg\">'39.1,39.5,40.3,36.7'</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#013fc63b .cell execution_count=17}\n``` {.python .cell-code}\n>>> t.bill_length_mm.group_concat(sep=\": \")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=17}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg\">'39.1: 39.5: 40.3: 36.7'</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#3f9dc0a5 .cell execution_count=18}\n``` {.python .cell-code}\n>>> t.bill_length_mm.group_concat(sep=\": \", where=t.bill_depth_mm > 18)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=18}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg\">'39.1: 36.7'</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### hash { #ibis.expr.types.generic.Value.hash }\n\n`hash(self)`\n\nCompute an integer hash value.\n\n::: {.callout-note}\n## The hashing function used is backend-dependent.\n:::\n\n#### Returns\n\n| Type                           | Description              |\n|--------------------------------|--------------------------|\n| [IntegerValue](`IntegerValue`) | The hash value of `self` |\n\n### identical_to { #ibis.expr.types.generic.Value.identical_to }\n\n`identical_to(self, other)`\n\nReturn whether this expression is identical to other.\n\nCorresponds to `IS NOT DISTINCT FROM` in SQL.\n\n#### Parameters\n\n| Name    | Type                                     | Description              | Default    |\n|---------|------------------------------------------|--------------------------|------------|\n| `other` | [Value](`ibis.expr.types.generic.Value`) | Expression to compare to | _required_ |\n\n#### Returns\n\n| Type                           | Description                                          |\n|--------------------------------|------------------------------------------------------|\n| [BooleanValue](`BooleanValue`) | Whether this expression is not distinct from `other` |\n\n#### Examples\n\n::: {#ea53ff84 .cell execution_count=19}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> one = ibis.literal(1)\n>>> two = ibis.literal(2)\n>>> two.identical_to(one + one)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=19}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span style=\"font-style:italic\" class=\"ansi-bright-green-fg\">True</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### isin { #ibis.expr.types.generic.Value.isin }\n\n`isin(self, values)`\n\nCheck whether this expression's values are in `values`.\n\n#### Parameters\n\n| Name     | Type                                                                                                                  | Description                                  | Default    |\n|----------|-----------------------------------------------------------------------------------------------------------------------|----------------------------------------------|------------|\n| `values` | [Value](`ibis.expr.types.generic.Value`) \\| [Sequence](`typing.Sequence`)\\[[Value](`ibis.expr.types.generic.Value`)\\] | Values or expression to check for membership | _required_ |\n\n#### Returns\n\n| Type                           | Description                      |\n|--------------------------------|----------------------------------|\n| [BooleanValue](`BooleanValue`) | Expression indicating membership |\n\n#### Examples\n\nCheck whether a column's values are contained in a sequence\n\n::: {#8704c260 .cell execution_count=20}\n``` {.python .cell-code}\n>>> import ibis\n>>> table = ibis.table(dict(string_col=\"string\"), name=\"t\")\n>>> table.string_col.isin([\"foo\", \"bar\", \"baz\"])\n```\n\n::: {.cell-output .cell-output-error}\n```\nIbisError: Expression contains unbound tables and therefore cannot be executed. Use ibis.<backend>.execute(expr) or assign a backend instance to `ibis.options.default_backend`.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nIbisError: Expression contains unbound tables and therefore cannot be executed. Use ibis.<backend>.execute(expr) or assign a backend instance to `ibis.options.default_backend`.\n```\n:::\n:::\n\n\nCheck whether a column's values are contained in another table's column\n\n::: {#5ffcd08a .cell execution_count=21}\n``` {.python .cell-code}\n>>> table2 = ibis.table(dict(other_string_col=\"string\"), name=\"t2\")\n>>> table.string_col.isin(table2.other_string_col)\n```\n\n::: {.cell-output .cell-output-error}\n```\nIbisError: Expression contains unbound tables and therefore cannot be executed. Use ibis.<backend>.execute(expr) or assign a backend instance to `ibis.options.default_backend`.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nIbisError: Expression contains unbound tables and therefore cannot be executed. Use ibis.<backend>.execute(expr) or assign a backend instance to `ibis.options.default_backend`.\n```\n:::\n:::\n\n\n### isnull { #ibis.expr.types.generic.Value.isnull }\n\n`isnull(self)`\n\nReturn whether this expression is NULL.\n\n#### Examples\n\n::: {#11bbe500 .cell execution_count=22}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch().limit(5)\n>>> t.bill_depth_mm\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │\n├───────────────┤\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.7</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.4</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.0</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">nan</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">19.3</span> │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#4b6fc714 .cell execution_count=23}\n``` {.python .cell-code}\n>>> t.bill_depth_mm.isnull()\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> IsNull(bill_depth_mm) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>               │\n├───────────────────────┤\n│ False                 │\n│ False                 │\n│ False                 │\n│ True                  │\n│ False                 │\n└───────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### least { #ibis.expr.types.generic.Value.least }\n\n`least(self, *args)`\n\nCompute the smallest value among the supplied arguments.\n\n#### Parameters\n\n| Name   | Type                               | Description              | Default   |\n|--------|------------------------------------|--------------------------|-----------|\n| `args` | [ir](`ibis`).[Value](`ibis.Value`) | Arguments to choose from | `()`      |\n\n#### Returns\n\n| Type                                     | Description                     |\n|------------------------------------------|---------------------------------|\n| [Value](`ibis.expr.types.generic.Value`) | Minimum of the passed arguments |\n\n### name { #ibis.expr.types.generic.Value.name }\n\n`name(self, name)`\n\nRename an expression to `name`.\n\n#### Parameters\n\n| Name   | Type   | Description                    | Default    |\n|--------|--------|--------------------------------|------------|\n| `name` |        | The new name of the expression | _required_ |\n\n#### Returns\n\n| Type                                     | Description             |\n|------------------------------------------|-------------------------|\n| [Value](`ibis.expr.types.generic.Value`) | `self` with name `name` |\n\n#### Examples\n\n::: {#fdfeed1f .cell execution_count=24}\n``` {.python .cell-code}\n>>> import ibis\n>>> t = ibis.table(dict(a=\"int64\"), name=\"t\")\n>>> t.a.name(\"b\")\n```\n\n::: {.cell-output .cell-output-error}\n```\nIbisError: Expression contains unbound tables and therefore cannot be executed. Use ibis.<backend>.execute(expr) or assign a backend instance to `ibis.options.default_backend`.\n```\n:::\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nIbisError: Expression contains unbound tables and therefore cannot be executed. Use ibis.<backend>.execute(expr) or assign a backend instance to `ibis.options.default_backend`.\n```\n:::\n:::\n\n\n### notin { #ibis.expr.types.generic.Value.notin }\n\n`notin(self, values)`\n\nCheck whether this expression's values are not in `values`.\n\n#### Parameters\n\n| Name     | Type                                                                                                                  | Description                                          | Default    |\n|----------|-----------------------------------------------------------------------------------------------------------------------|------------------------------------------------------|------------|\n| `values` | [Value](`ibis.expr.types.generic.Value`) \\| [Sequence](`typing.Sequence`)\\[[Value](`ibis.expr.types.generic.Value`)\\] | Values or expression to check for lack of membership | _required_ |\n\n#### Returns\n\n| Type                           | Description                                           |\n|--------------------------------|-------------------------------------------------------|\n| [BooleanValue](`BooleanValue`) | Whether `self`'s values are not contained in `values` |\n\n#### Examples\n\n::: {#845c5e34 .cell execution_count=25}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch().limit(5)\n>>> t.bill_depth_mm\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │\n├───────────────┤\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.7</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.4</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.0</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">nan</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">19.3</span> │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#7bbb858b .cell execution_count=26}\n``` {.python .cell-code}\n>>> t.bill_depth_mm.notin([18.7, 18.1])\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Not(InValues(bill_depth_mm)) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>                      │\n├──────────────────────────────┤\n│ False                        │\n│ True                         │\n│ True                         │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                         │\n│ True                         │\n└──────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### notnull { #ibis.expr.types.generic.Value.notnull }\n\n`notnull(self)`\n\nReturn whether this expression is not NULL.\n\n#### Examples\n\n::: {#81467eb5 .cell execution_count=27}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch().limit(5)\n>>> t.bill_depth_mm\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │\n├───────────────┤\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.7</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.4</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.0</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">nan</span> │\n│          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">19.3</span> │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#0cb15724 .cell execution_count=28}\n``` {.python .cell-code}\n>>> t.bill_depth_mm.notnull()\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> NotNull(bill_depth_mm) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>                │\n├────────────────────────┤\n│ True                   │\n│ True                   │\n│ True                   │\n│ False                  │\n│ True                   │\n└────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### nullif { #ibis.expr.types.generic.Value.nullif }\n\n`nullif(self, null_if_expr)`\n\nSet values to null if they equal the values `null_if_expr`.\n\nCommonly used to avoid divide-by-zero problems by replacing zero with\n`NULL` in the divisor.\n\n#### Parameters\n\n| Name           | Type                                     | Description                                      | Default    |\n|----------------|------------------------------------------|--------------------------------------------------|------------|\n| `null_if_expr` | [Value](`ibis.expr.types.generic.Value`) | Expression indicating what values should be NULL | _required_ |\n\n#### Returns\n\n| Type                                     | Description      |\n|------------------------------------------|------------------|\n| [Value](`ibis.expr.types.generic.Value`) | Value expression |\n\n### over { #ibis.expr.types.generic.Value.over }\n\n`over(self, window=None, *, rows=None, range=None, group_by=None, order_by=None)`\n\nConstruct a window expression.\n\n#### Parameters\n\n| Name       | Type   | Description                              | Default   |\n|------------|--------|------------------------------------------|-----------|\n| `window`   |        | Window specification                     | `None`    |\n| `rows`     |        | Whether to use the `ROWS` window clause  | `None`    |\n| `range`    |        | Whether to use the `RANGE` window clause | `None`    |\n| `group_by` |        | Grouping key                             | `None`    |\n| `order_by` |        | Ordering key                             | `None`    |\n\n#### Returns\n\n| Type                                     | Description                  |\n|------------------------------------------|------------------------------|\n| [Value](`ibis.expr.types.generic.Value`) | A window function expression |\n\n### substitute { #ibis.expr.types.generic.Value.substitute }\n\n`substitute(self, value, replacement=None, else_=None)`\n\nReplace values given in `values` with `replacement`.\n\nThis is similar to the pandas `replace` method.\n\n#### Parameters\n\n| Name          | Type                                                       | Description                                                                                                                        | Default    |\n|---------------|------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `value`       | [Value](`ibis.expr.types.generic.Value`) \\| [dict](`dict`) | Expression or dict.                                                                                                                | _required_ |\n| `replacement` | [Value](`ibis.expr.types.generic.Value`) \\| None           | If an expression is passed to value, this must be passed.                                                                          | `None`     |\n| `else_`       | [Value](`ibis.expr.types.generic.Value`) \\| None           | If an original value does not match `value`, then `else_` is used. The default of `None` means leave the original value unchanged. | `None`     |\n\n#### Returns\n\n| Type                                     | Description     |\n|------------------------------------------|-----------------|\n| [Value](`ibis.expr.types.generic.Value`) | Replaced values |\n\n#### Examples\n\n::: {#84075193 .cell execution_count=29}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t.island.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┳━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> island_count </span>┃\n┡━━━━━━━━━━━╇━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>        │\n├───────────┼──────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">52</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">168</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">124</span> │\n└───────────┴──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#e97514c8 .cell execution_count=30}\n``` {.python .cell-code}\n>>> t.island.substitute({\"Torgersen\": \"torg\", \"Biscoe\": \"bisc\"}).value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> SimpleCase(island, island) </span>┃<span style=\"font-weight: bold\"> SimpleCase(island, island)_count </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                     │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>                            │\n├────────────────────────────┼──────────────────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">torg                      </span> │                               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">52</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">bisc                      </span> │                              <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">168</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Dream                     </span> │                              <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">124</span> │\n└────────────────────────────┴──────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### to_pandas { #ibis.expr.types.generic.Value.to_pandas }\n\n`to_pandas(self, **kwargs)`\n\nConvert a column expression to a pandas Series or scalar object.\n\n#### Parameters\n\n| Name     | Type   | Description                                                                  | Default   |\n|----------|--------|------------------------------------------------------------------------------|-----------|\n| `kwargs` |        | Same as keyword arguments to [`execute`](#ibis.expr.types.core.Expr.execute) | `{}`      |\n\n#### Examples\n\n::: {#f80d5bbf .cell execution_count=31}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch().limit(5)\n>>> t.to_pandas()\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>species</th>\n      <th>island</th>\n      <th>bill_length_mm</th>\n      <th>bill_depth_mm</th>\n      <th>flipper_length_mm</th>\n      <th>body_mass_g</th>\n      <th>sex</th>\n      <th>year</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.1</td>\n      <td>18.7</td>\n      <td>181.0</td>\n      <td>3750.0</td>\n      <td>male</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>39.5</td>\n      <td>17.4</td>\n      <td>186.0</td>\n      <td>3800.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>40.3</td>\n      <td>18.0</td>\n      <td>195.0</td>\n      <td>3250.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>None</td>\n      <td>2007</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Adelie</td>\n      <td>Torgersen</td>\n      <td>36.7</td>\n      <td>19.3</td>\n      <td>193.0</td>\n      <td>3450.0</td>\n      <td>female</td>\n      <td>2007</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n### try_cast { #ibis.expr.types.generic.Value.try_cast }\n\n`try_cast(self, target_type)`\n\nTry cast expression to indicated data type.\nIf the cast fails for a row, the value is returned\nas null or NaN depending on target_type and backend behavior.\n\n#### Parameters\n\n| Name          | Type                                     | Description         | Default    |\n|---------------|------------------------------------------|---------------------|------------|\n| `target_type` | [dt](`ibis`).[DataType](`ibis.DataType`) | Type to try cast to | _required_ |\n\n#### Returns\n\n| Type                                     | Description       |\n|------------------------------------------|-------------------|\n| [Value](`ibis.expr.types.generic.Value`) | Casted expression |\n\n#### Examples\n\n::: {#251062fb .cell execution_count=32}\n``` {.python .cell-code}\n>>> import ibis\n>>> from ibis import _\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable(\n...     {\"numbers\": [1, 2, 3, 4], \"strings\": [\"1.0\", \"2\", \"hello\", \"world\"]}\n... )\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> numbers </span>┃<span style=\"font-weight: bold\"> strings </span>┃\n┡━━━━━━━━━╇━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │\n├─────────┼─────────┤\n│       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">1.0    </span> │\n│       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">2      </span> │\n│       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">hello  </span> │\n│       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">world  </span> │\n└─────────┴─────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#b2eddaca .cell execution_count=33}\n``` {.python .cell-code}\n>>> t = t.mutate(numbers_to_strings=_.numbers.try_cast(\"string\"))\n>>> t = t.mutate(strings_to_numbers=_.strings.try_cast(\"int\"))\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> numbers </span>┃<span style=\"font-weight: bold\"> strings </span>┃<span style=\"font-weight: bold\"> numbers_to_strings </span>┃<span style=\"font-weight: bold\"> strings_to_numbers </span>┃\n┡━━━━━━━━━╇━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>   │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>             │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>              │\n├─────────┼─────────┼────────────────────┼────────────────────┤\n│       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">1.0    </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">1                 </span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">2      </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">2                 </span> │                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">hello  </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">3                 </span> │               <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n│       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">world  </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">4                 </span> │               <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└─────────┴─────────┴────────────────────┴────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### type { #ibis.expr.types.generic.Value.type }\n\n`type(self)`\n\nReturn the [DataType] of this expression.\n\n### typeof { #ibis.expr.types.generic.Value.typeof }\n\n`typeof(self)`\n\nReturn the data type of the expression.\n\nThe values of the returned strings are necessarily backend dependent.\n\n#### Returns\n\n| Type                         | Description                               |\n|------------------------------|-------------------------------------------|\n| [StringValue](`StringValue`) | A string indicating the type of the value |\n\n# Column { #ibis.expr.types.generic.Column }\n\n`expr.types.generic.Column()`\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [approx_median](#ibis.expr.types.generic.Column.approx_median) | Return an approximate of the median of `self`. |\n| [approx_nunique](#ibis.expr.types.generic.Column.approx_nunique) | Return the approximate number of distinct elements in `self`. |\n| [arbitrary](#ibis.expr.types.generic.Column.arbitrary) | Select an arbitrary value in a column. |\n| [argmax](#ibis.expr.types.generic.Column.argmax) | Return the value of `self` that maximizes `key`. |\n| [argmin](#ibis.expr.types.generic.Column.argmin) | Return the value of `self` that minimizes `key`. |\n| [count](#ibis.expr.types.generic.Column.count) | Compute the number of rows in an expression. |\n| [cume_dist](#ibis.expr.types.generic.Column.cume_dist) | Return the cumulative distribution over a window. |\n| [cummax](#ibis.expr.types.generic.Column.cummax) | Return the cumulative max over a window. |\n| [cummin](#ibis.expr.types.generic.Column.cummin) | Return the cumulative min over a window. |\n| [dense_rank](#ibis.expr.types.generic.Column.dense_rank) | Position of first element within each group of equal values. |\n| [first](#ibis.expr.types.generic.Column.first) | Return the first value of a column. |\n| [lag](#ibis.expr.types.generic.Column.lag) | Return the row located at `offset` rows **before** the current row. |\n| [last](#ibis.expr.types.generic.Column.last) | Return the last value of a column. |\n| [lead](#ibis.expr.types.generic.Column.lead) | Return the row located at `offset` rows **after** the current row. |\n| [max](#ibis.expr.types.generic.Column.max) | Return the maximum of a column. |\n| [min](#ibis.expr.types.generic.Column.min) | Return the minimum of a column. |\n| [mode](#ibis.expr.types.generic.Column.mode) | Return the mode of a column. |\n| [nth](#ibis.expr.types.generic.Column.nth) | Return the `n`th value (0-indexed) over a window. |\n| [ntile](#ibis.expr.types.generic.Column.ntile) | Return the integer number of a partitioning of the column values. |\n| [nunique](#ibis.expr.types.generic.Column.nunique) | Compute the number of distinct rows in an expression. |\n| [percent_rank](#ibis.expr.types.generic.Column.percent_rank) | Return the relative rank of the values in the column. |\n| [rank](#ibis.expr.types.generic.Column.rank) | Compute position of first element within each equal-value group in sorted order. |\n| [topk](#ibis.expr.types.generic.Column.topk) | Return a \"top k\" expression. |\n| [value_counts](#ibis.expr.types.generic.Column.value_counts) | Compute a frequency table. |\n\n### approx_median { #ibis.expr.types.generic.Column.approx_median }\n\n`approx_median(self, where=None)`\n\nReturn an approximate of the median of `self`.\n\n::: {.callout-note}\n## The result may or may not be exact\n\nWhether the result is an approximation depends on the backend.\n\n::: {.callout-warning}\n## Do not depend on the results being exact\n:::\n\n:::\n\n#### Parameters\n\n| Name    | Type                                                     | Description                             | Default   |\n|---------|----------------------------------------------------------|-----------------------------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter in values when `where` is `True` | `None`    |\n\n#### Returns\n\n| Type                                       | Description                              |\n|--------------------------------------------|------------------------------------------|\n| [Scalar](`ibis.expr.types.generic.Scalar`) | An approximation of the median of `self` |\n\n#### Examples\n\n::: {#6132f1df .cell execution_count=34}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t.body_mass_g.approx_median()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=34}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">4030</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#55e87fbf .cell execution_count=35}\n``` {.python .cell-code}\n>>> t.body_mass_g.approx_median(where=t.species == \"Chinstrap\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=35}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">3700</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### approx_nunique { #ibis.expr.types.generic.Column.approx_nunique }\n\n`approx_nunique(self, where=None)`\n\nReturn the approximate number of distinct elements in `self`.\n\n::: {.callout-note}\n## The result may or may not be exact\n\nWhether the result is an approximation depends on the backend.\n\n::: {.callout-warning}\n## Do not depend on the results being exact\n:::\n\n:::\n\n#### Parameters\n\n| Name    | Type                                                     | Description                             | Default   |\n|---------|----------------------------------------------------------|-----------------------------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter in values when `where` is `True` | `None`    |\n\n#### Returns\n\n| Type                                       | Description                                             |\n|--------------------------------------------|---------------------------------------------------------|\n| [Scalar](`ibis.expr.types.generic.Scalar`) | An approximate count of the distinct elements of `self` |\n\n#### Examples\n\n::: {#d27f7059 .cell execution_count=36}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t.body_mass_g.approx_nunique()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=36}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">94</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#ed2eac18 .cell execution_count=37}\n``` {.python .cell-code}\n>>> t.body_mass_g.approx_nunique(where=t.species == \"Adelie\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=37}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">55</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### arbitrary { #ibis.expr.types.generic.Column.arbitrary }\n\n`arbitrary(self, where=None, how='first')`\n\nSelect an arbitrary value in a column.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                                                                                                                                                                                                                                                                              | Default   |\n|---------|----------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | A filter expression                                                                                                                                                                                                                                                                      | `None`    |\n| `how`   | [Literal](`typing.Literal`)\\['first', 'last', 'heavy'\\]  | The method to use for selecting the element.  * `\"first\"`: Select the first non-`NULL` element * `\"last\"`: Select the last non-`NULL` element * `\"heavy\"`: Select a frequently occurring value using the heavy   hitters algorithm. `\"heavy\"` is only supported by Clickhouse   backend. | `'first'` |\n\n#### Returns\n\n| Type                                       | Description   |\n|--------------------------------------------|---------------|\n| [Scalar](`ibis.expr.types.generic.Scalar`) | An expression |\n\n### argmax { #ibis.expr.types.generic.Column.argmax }\n\n`argmax(self, key, where=None)`\n\nReturn the value of `self` that maximizes `key`.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                             | Default   |\n|---------|----------------------------------------------------------|-----------------------------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter in values when `where` is `True` | `None`    |\n\n#### Returns\n\n| Type                                       | Description                              |\n|--------------------------------------------|------------------------------------------|\n| [Scalar](`ibis.expr.types.generic.Scalar`) | The value of `self` that maximizes `key` |\n\n#### Examples\n\n::: {#2da42276 .cell execution_count=38}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t.species.argmax(t.body_mass_g)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=38}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg\">'Gentoo'</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#02048494 .cell execution_count=39}\n``` {.python .cell-code}\n>>> t.species.argmax(t.body_mass_g, where=t.island == \"Dream\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=39}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg\">'Chinstrap'</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### argmin { #ibis.expr.types.generic.Column.argmin }\n\n`argmin(self, key, where=None)`\n\nReturn the value of `self` that minimizes `key`.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                             | Default   |\n|---------|----------------------------------------------------------|-----------------------------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter in values when `where` is `True` | `None`    |\n\n#### Returns\n\n| Type                                       | Description                              |\n|--------------------------------------------|------------------------------------------|\n| [Scalar](`ibis.expr.types.generic.Scalar`) | The value of `self` that minimizes `key` |\n\n#### Examples\n\n::: {#69dd1c5b .cell execution_count=40}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t.species.argmin(t.body_mass_g)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=40}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg\">'Chinstrap'</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#b7a84940 .cell execution_count=41}\n``` {.python .cell-code}\n>>> t.species.argmin(t.body_mass_g, where=t.island == \"Biscoe\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=41}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg\">'Adelie'</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### count { #ibis.expr.types.generic.Column.count }\n\n`count(self, where=None)`\n\nCompute the number of rows in an expression.\n\n#### Parameters\n\n| Name    | Type                                                     | Description       | Default   |\n|---------|----------------------------------------------------------|-------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter expression | `None`    |\n\n#### Returns\n\n| Type                             | Description                         |\n|----------------------------------|-------------------------------------|\n| [IntegerScalar](`IntegerScalar`) | Number of elements in an expression |\n\n### cume_dist { #ibis.expr.types.generic.Column.cume_dist }\n\n`cume_dist(self)`\n\nReturn the cumulative distribution over a window.\n\n### cummax { #ibis.expr.types.generic.Column.cummax }\n\n`cummax(self)`\n\nReturn the cumulative max over a window.\n\n### cummin { #ibis.expr.types.generic.Column.cummin }\n\n`cummin(self)`\n\nReturn the cumulative min over a window.\n\n### dense_rank { #ibis.expr.types.generic.Column.dense_rank }\n\n`dense_rank(self)`\n\nPosition of first element within each group of equal values.\n\nValues are returned in sorted order and duplicate values are ignored.\n\nEquivalent to SQL's `DENSE_RANK()`.\n\n#### Returns\n\n| Type                             | Description   |\n|----------------------------------|---------------|\n| [IntegerColumn](`IntegerColumn`) | The rank      |\n\n#### Examples\n\n::: {#66d9d34c .cell execution_count=42}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [1, 2, 1, 2, 3, 2]})\n>>> t.mutate(rank=t.values.dense_rank())\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> values </span>┃<span style=\"font-weight: bold\"> rank  </span>┃\n┡━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├────────┼───────┤\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n└────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n### first { #ibis.expr.types.generic.Column.first }\n\n`first(self, where=None)`\n\nReturn the first value of a column.\n\n#### Examples\n\n::: {#81034754 .cell execution_count=43}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"chars\": [\"a\", \"b\", \"c\", \"d\"]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> chars  </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">c     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">d     </span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#f8603bab .cell execution_count=44}\n``` {.python .cell-code}\n>>> t.chars.first()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=44}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg\">'a'</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#d174ab8a .cell execution_count=45}\n``` {.python .cell-code}\n>>> t.chars.first(where=t.chars != \"a\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=45}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg\">'b'</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### lag { #ibis.expr.types.generic.Column.lag }\n\n`lag(self, offset=None, default=None)`\n\nReturn the row located at `offset` rows **before** the current row.\n\n#### Parameters\n\n| Name      | Type                                                                     | Description                             | Default   |\n|-----------|--------------------------------------------------------------------------|-----------------------------------------|-----------|\n| `offset`  | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) \\| None | Index of row to select                  | `None`    |\n| `default` | [Value](`ibis.expr.types.generic.Value`) \\| None                         | Value used if no row exists at `offset` | `None`    |\n\n### last { #ibis.expr.types.generic.Column.last }\n\n`last(self, where=None)`\n\nReturn the last value of a column.\n\n#### Examples\n\n::: {#3d7b2426 .cell execution_count=46}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"chars\": [\"a\", \"b\", \"c\", \"d\"]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> chars  </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">c     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">d     </span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#2562be2b .cell execution_count=47}\n``` {.python .cell-code}\n>>> t.chars.last()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=47}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg\">'d'</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#9297b6a1 .cell execution_count=48}\n``` {.python .cell-code}\n>>> t.chars.last(where=t.chars != \"d\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=48}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-green-fg\">'c'</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### lead { #ibis.expr.types.generic.Column.lead }\n\n`lead(self, offset=None, default=None)`\n\nReturn the row located at `offset` rows **after** the current row.\n\n#### Parameters\n\n| Name      | Type                                                                     | Description                             | Default   |\n|-----------|--------------------------------------------------------------------------|-----------------------------------------|-----------|\n| `offset`  | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) \\| None | Index of row to select                  | `None`    |\n| `default` | [Value](`ibis.expr.types.generic.Value`) \\| None                         | Value used if no row exists at `offset` | `None`    |\n\n### max { #ibis.expr.types.generic.Column.max }\n\n`max(self, where=None)`\n\nReturn the maximum of a column.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                             | Default   |\n|---------|----------------------------------------------------------|-----------------------------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter in values when `where` is `True` | `None`    |\n\n#### Returns\n\n| Type                                       | Description                 |\n|--------------------------------------------|-----------------------------|\n| [Scalar](`ibis.expr.types.generic.Scalar`) | The maximum value in `self` |\n\n#### Examples\n\n::: {#c7338f31 .cell execution_count=49}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t.body_mass_g.max()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=49}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">6300</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#f70e60db .cell execution_count=50}\n``` {.python .cell-code}\n>>> t.body_mass_g.max(where=t.species == \"Chinstrap\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=50}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">4800</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### min { #ibis.expr.types.generic.Column.min }\n\n`min(self, where=None)`\n\nReturn the minimum of a column.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                             | Default   |\n|---------|----------------------------------------------------------|-----------------------------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter in values when `where` is `True` | `None`    |\n\n#### Returns\n\n| Type                                       | Description                 |\n|--------------------------------------------|-----------------------------|\n| [Scalar](`ibis.expr.types.generic.Scalar`) | The minimum value in `self` |\n\n#### Examples\n\n::: {#75d0e70d .cell execution_count=51}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t.body_mass_g.min()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=51}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">2700</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#abf9360d .cell execution_count=52}\n``` {.python .cell-code}\n>>> t.body_mass_g.min(where=t.species == \"Adelie\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=52}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">2850</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### mode { #ibis.expr.types.generic.Column.mode }\n\n`mode(self, where=None)`\n\nReturn the mode of a column.\n\n#### Parameters\n\n| Name    | Type                                                     | Description                             | Default   |\n|---------|----------------------------------------------------------|-----------------------------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter in values when `where` is `True` | `None`    |\n\n#### Returns\n\n| Type                                       | Description        |\n|--------------------------------------------|--------------------|\n| [Scalar](`ibis.expr.types.generic.Scalar`) | The mode of `self` |\n\n#### Examples\n\n::: {#70c8e0eb .cell execution_count=53}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t.body_mass_g.mode()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=53}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">3800</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#13cca2f5 .cell execution_count=54}\n``` {.python .cell-code}\n>>> t.body_mass_g.mode(where=(t.species == \"Gentoo\") & (t.sex == \"male\"))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=54}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">5550</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### nth { #ibis.expr.types.generic.Column.nth }\n\n`nth(self, n)`\n\nReturn the `n`th value (0-indexed) over a window.\n\n`.nth(0)` is equivalent to `.first()`. Negative will result in `NULL`.\nIf the value of `n` is greater than the number of rows in the window,\n`NULL` will be returned.\n\n#### Parameters\n\n| Name   | Type                                                             | Description        | Default    |\n|--------|------------------------------------------------------------------|--------------------|------------|\n| `n`    | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) | Desired rank value | _required_ |\n\n#### Returns\n\n| Type                                       | Description                 |\n|--------------------------------------------|-----------------------------|\n| [Column](`ibis.expr.types.generic.Column`) | The nth value over a window |\n\n### ntile { #ibis.expr.types.generic.Column.ntile }\n\n`ntile(self, buckets)`\n\nReturn the integer number of a partitioning of the column values.\n\n#### Parameters\n\n| Name      | Type                                                             | Description                         | Default    |\n|-----------|------------------------------------------------------------------|-------------------------------------|------------|\n| `buckets` | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) | Number of buckets to partition into | _required_ |\n\n### nunique { #ibis.expr.types.generic.Column.nunique }\n\n`nunique(self, where=None)`\n\nCompute the number of distinct rows in an expression.\n\n#### Parameters\n\n| Name    | Type                                                     | Description       | Default   |\n|---------|----------------------------------------------------------|-------------------|-----------|\n| `where` | [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`) \\| None | Filter expression | `None`    |\n\n#### Returns\n\n| Type                             | Description                                  |\n|----------------------------------|----------------------------------------------|\n| [IntegerScalar](`IntegerScalar`) | Number of distinct elements in an expression |\n\n#### Examples\n\n::: {#318f72e3 .cell execution_count=55}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t.body_mass_g.nunique()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=55}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">94</span></pre>\n```\n:::\n\n:::\n:::\n\n\n::: {#2a93f7db .cell execution_count=56}\n``` {.python .cell-code}\n>>> t.body_mass_g.nunique(where=t.species == \"Adelie\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=56}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">55</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### percent_rank { #ibis.expr.types.generic.Column.percent_rank }\n\n`percent_rank(self)`\n\nReturn the relative rank of the values in the column.\n\n### rank { #ibis.expr.types.generic.Column.rank }\n\n`rank(self)`\n\nCompute position of first element within each equal-value group in sorted order.\n\nEquivalent to SQL's `RANK()` window function.\n\n#### Returns\n\n| Type                         | Description   |\n|------------------------------|---------------|\n| [Int64Column](`Int64Column`) | The min rank  |\n\n#### Examples\n\n::: {#924f6534 .cell execution_count=57}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"values\": [1, 2, 1, 2, 3, 2]})\n>>> t.mutate(rank=t.values.rank())\n```\n\n::: {.cell-output .cell-output-display execution_count=57}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> values </span>┃<span style=\"font-weight: bold\"> rank  </span>┃\n┡━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├────────┼───────┤\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span> │\n└────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n### topk { #ibis.expr.types.generic.Column.topk }\n\n`topk(self, k, by=None)`\n\nReturn a \"top k\" expression.\n\n#### Parameters\n\n| Name   | Type                                       | Description                         | Default    |\n|--------|--------------------------------------------|-------------------------------------|------------|\n| `k`    | [int](`int`)                               | Return this number of rows          | _required_ |\n| `by`   | [ir](`ibis`).[Value](`ibis.Value`) \\| None | An expression. Defaults to `count`. | `None`     |\n\n#### Returns\n\n| Type                     | Description        |\n|--------------------------|--------------------|\n| [TableExpr](`TableExpr`) | A top-k expression |\n\n### value_counts { #ibis.expr.types.generic.Column.value_counts }\n\n`value_counts(self)`\n\nCompute a frequency table.\n\n#### Returns\n\n| Type             | Description                |\n|------------------|----------------------------|\n| [Table](`Table`) | Frequency table expression |\n\n#### Examples\n\n::: {#2c014195 .cell execution_count=58}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"chars\": char} for char in \"aabcddd\")\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> chars  </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">c     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">d     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">d     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">d     </span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#e6b61e48 .cell execution_count=59}\n``` {.python .cell-code}\n>>> t.chars.value_counts()\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┳━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> chars  </span>┃<span style=\"font-weight: bold\"> chars_count </span>┃\n┡━━━━━━━━╇━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │\n├────────┼─────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a     </span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b     </span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">c     </span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">d     </span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n└────────┴─────────────┘\n</pre>\n```\n:::\n:::\n\n\n# Scalar { #ibis.expr.types.generic.Scalar }\n\n`expr.types.generic.Scalar()`\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [as_table](#ibis.expr.types.generic.Scalar.as_table) | Promote the scalar expression to a table. |\n\n### as_table { #ibis.expr.types.generic.Scalar.as_table }\n\n`as_table(self)`\n\nPromote the scalar expression to a table.\n\n#### Returns\n\n| Type             | Description        |\n|------------------|--------------------|\n| [Table](`Table`) | A table expression |\n\n#### Examples\n\nPromote an aggregation to a table\n\n::: {#fc9b88cd .cell execution_count=60}\n``` {.python .cell-code}\n>>> import ibis\n>>> import ibis.expr.types as ir\n>>> t = ibis.table(dict(a=\"str\"), name=\"t\")\n>>> expr = t.a.length().sum().name(\"len\").as_table()\n>>> isinstance(expr, ir.Table)\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```\nTrue\n```\n:::\n:::\n\n\nPromote a literal value to a table\n\n::: {#174c78d7 .cell execution_count=61}\n``` {.python .cell-code}\n>>> import ibis.expr.types as ir\n>>> lit = ibis.literal(1).name(\"a\").as_table()\n>>> isinstance(lit, ir.Table)\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```\nTrue\n```\n:::\n:::\n\n\n# literal { #ibis.literal }\n\n`literal(value, type=None)`\n\nCreate a scalar expression from a Python value.\n\n::: {.callout-tip}\n## Use specific functions for arrays, structs and maps\n\nIbis supports literal construction of arrays using the following\nfunctions:\n\n1. [`ibis.array`](./expression-collections.qmd#ibis.array)\n1. [`ibis.struct`](./expression-collections.qmd#ibis.struct)\n1. [`ibis.map`](./expression-collections.qmd#ibis.map)\n\nConstructing these types using `literal` will be deprecated in a future\nrelease.\n:::\n\n## Parameters\n\n| Name    | Type                                                             | Description                                                                                                                                                                                                                                      | Default    |\n|---------|------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `value` | [Any](`typing.Any`)                                              | A Python value                                                                                                                                                                                                                                   | _required_ |\n| `type`  | [dt](`ibis`).[DataType](`ibis.DataType`) \\| [str](`str`) \\| None | An instance of [`DataType`](./datatypes.qmd#ibis.expr.datatypes.DataType) or a string indicating the ibis type of `value`. This parameter can be used in cases where ibis's type inference isn't sufficient for discovering the type of `value`. | `None`     |\n\n## Returns\n\n| Type                                       | Description                                |\n|--------------------------------------------|--------------------------------------------|\n| [Scalar](`ibis.expr.types.generic.Scalar`) | An expression representing a literal value |\n\n## Examples\n\nConstruct an integer literal\n\n::: {#097bf681 .cell execution_count=62}\n``` {.python .cell-code}\n>>> import ibis\n>>> x = ibis.literal(42)\n>>> x.type()\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```\nInt8(nullable=True)\n```\n:::\n:::\n\n\nConstruct a `float64` literal from an `int`\n\n::: {#1f38797d .cell execution_count=63}\n``` {.python .cell-code}\n>>> y = ibis.literal(42, type=\"double\")\n>>> y.type()\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```\nFloat64(nullable=True)\n```\n:::\n:::\n\n\nIbis checks for invalid types\n\n::: {#c760ebfd .cell execution_count=64}\n``` {.python .cell-code}\n>>> ibis.literal(\"foobar\", type=\"int64\")  \n```\n\n::: {.cell-output .cell-output-error}\n```\nTypeError: Unable to normalize 'foobar' to Int64(nullable=True)\n```\n:::\n:::\n\n\n# param { #ibis.param }\n\n`param(type)`\n\nCreate a deferred parameter of a given type.\n\n## Parameters\n\n| Name   | Type                                     | Description                                                        | Default    |\n|--------|------------------------------------------|--------------------------------------------------------------------|------------|\n| `type` | [dt](`ibis`).[DataType](`ibis.DataType`) | The type of the unbound parameter, e.g., double, int64, date, etc. | _required_ |\n\n## Returns\n\n| Type               | Description                                |\n|--------------------|--------------------------------------------|\n| [Scalar](`Scalar`) | A scalar expression backend by a parameter |\n\n## Examples\n\n::: {#fb7202d6 .cell execution_count=65}\n``` {.python .cell-code}\n>>> import ibis\n>>> start = ibis.param(\"date\")\n>>> end = ibis.param(\"date\")\n>>> schema = dict(timestamp_col=\"timestamp\", value=\"double\")\n>>> t = ibis.table(schema, name=\"t\")\n>>> predicates = [t.timestamp_col >= start, t.timestamp_col <= end]\n>>> t.filter(predicates).value.sum()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-error}\n```\nIbisError: Expression contains unbound tables and therefore cannot be executed. Use ibis.<backend>.execute(expr) or assign a backend instance to `ibis.options.default_backend`.\n```\n:::\n:::\n\n\n# NA { #ibis.expr.api.NA }\n\n`expr.api.NA`\n\nThe NULL scalar.\n\n## Examples\n\n::: {#f7875731 .cell execution_count=66}\n``` {.python .cell-code}\n>>> import ibis\n>>> my_null = ibis.NA\n>>> my_null.isnull()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=66}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span style=\"font-style:italic\" class=\"ansi-bright-green-fg\">True</span></pre>\n```\n:::\n\n:::\n:::\n\n\n# null { #ibis.null }\n\n`null()`\n\nCreate a NULL/NA scalar.\n\n# coalesce { #ibis.expr.api.coalesce }\n\n`expr.api.coalesce`\n\n\n\n# asc { #ibis.asc }\n\n`asc(expr)`\n\nCreate a ascending sort key from `asc` or column name.\n\n## Parameters\n\n| Name   | Type                                                 | Description                                      | Default    |\n|--------|------------------------------------------------------|--------------------------------------------------|------------|\n| `expr` | [ir](`ibis`).[Column](`ibis.Column`) \\| [str](`str`) | The expression or column name to use for sorting | _required_ |\n\n## Examples\n\n::: {#420deff4 .cell execution_count=67}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t[[\"species\", \"year\"]].order_by(ibis.asc(\"year\")).head()\n```\n\n::: {.cell-output .cell-output-display execution_count=67}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n└─────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n## Returns\n\n| Type                                       | Description   |\n|--------------------------------------------|---------------|\n| [ir](`ibis`).[ValueExpr](`ibis.ValueExpr`) | An expression |\n\n# desc { #ibis.desc }\n\n`desc(expr)`\n\nCreate a descending sort key from `expr` or column name.\n\n## Parameters\n\n| Name   | Type                                                 | Description                                      | Default    |\n|--------|------------------------------------------------------|--------------------------------------------------|------------|\n| `expr` | [ir](`ibis`).[Column](`ibis.Column`) \\| [str](`str`) | The expression or column name to use for sorting | _required_ |\n\n## Examples\n\n::: {#481cff83 .cell execution_count=68}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.examples.penguins.fetch()\n>>> t[[\"species\", \"year\"]].order_by(ibis.desc(\"year\")).head()\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2009</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2009</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2009</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2009</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2009</span> │\n└─────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n## Returns\n\n| Type                                       | Description   |\n|--------------------------------------------|---------------|\n| [ir](`ibis`).[ValueExpr](`ibis.ValueExpr`) | An expression |\n\n# case { #ibis.case }\n\n`case()`\n\nBegin constructing a case expression.\n\nUse the `.when` method on the resulting object followed by `.end` to create a\ncomplete case.\n\n## Examples\n\n::: {#cf5e1f8c .cell execution_count=69}\n``` {.python .cell-code}\n>>> import ibis\n>>> cond1 = ibis.literal(1) == 1\n>>> cond2 = ibis.literal(2) == 1\n>>> expr = ibis.case().when(cond1, 3).when(cond2, 4).end()\n>>> expr\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=69}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">3</span></pre>\n```\n:::\n\n:::\n:::\n\n\n## Returns\n\n| Type                                         | Description                                                 |\n|----------------------------------------------|-------------------------------------------------------------|\n| [SearchedCaseBuilder](`SearchedCaseBuilder`) | A builder object to use for constructing a case expression. |\n\n# show_sql { #ibis.show_sql }\n\n`show_sql(expr, dialect=None, file=None)`\n\nPretty-print the compiled SQL string of an expression.\n\nIf a dialect cannot be inferred and one was not passed, duckdb\nwill be used as the dialect\n\n## Parameters\n\n| Name      | Type                                      | Description                                                                                                 | Default    |\n|-----------|-------------------------------------------|-------------------------------------------------------------------------------------------------------------|------------|\n| `expr`    | [ir](`ibis`).[Expr](`ibis.Expr`)          | Ibis expression whose SQL will be printed                                                                   | _required_ |\n| `dialect` | [str](`str`) \\| None                      | String dialect. This is typically not required, but can be useful if ibis cannot infer the backend dialect. | `None`     |\n| `file`    | [IO](`typing.IO`)\\[[str](`str`)\\] \\| None | File to write output to                                                                                     | `None`     |\n\n## Examples\n\n::: {#469708b2 .cell execution_count=70}\n``` {.python .cell-code}\n>>> import ibis\n>>> from ibis import _\n>>> t = ibis.table(dict(a=\"int\"), name=\"t\")\n>>> expr = t.select(c=_.a * 2)\n>>> ibis.show_sql(expr)  # duckdb dialect by default\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSELECT\n  t0.a * CAST(2 AS TINYINT) AS c\nFROM t AS t0\n```\n:::\n:::\n\n\n::: {#9ff8585d .cell execution_count=71}\n``` {.python .cell-code}\n>>> ibis.show_sql(expr, dialect=\"mysql\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSELECT\n  t0.a * 2 AS c\nFROM t AS t0\n```\n:::\n:::\n\n\n# to_sql { #ibis.to_sql }\n\n`to_sql(expr, dialect=None, **kwargs)`\n\nReturn the formatted SQL string for an expression.\n\n## Parameters\n\n| Name      | Type                             | Description                         | Default    |\n|-----------|----------------------------------|-------------------------------------|------------|\n| `expr`    | [ir](`ibis`).[Expr](`ibis.Expr`) | Ibis expression.                    | _required_ |\n| `dialect` | [str](`str`) \\| None             | SQL dialect to use for compilation. | `None`     |\n| `kwargs`  |                                  | Scalar parameters                   | `{}`       |\n\n## Returns\n\n| Type         | Description          |\n|--------------|----------------------|\n| [str](`str`) | Formatted SQL string |\n\n# get_backend { #ibis.get_backend }\n\n`get_backend(expr=None)`\n\nGet the current Ibis backend to use for a given expression.\n\nexpr\n    An expression to get the backend from. If not passed, the default\n    backend is returned.\n\n## Returns\n\n| Type                                            | Description       |\n|-------------------------------------------------|-------------------|\n| [BaseBackend](`ibis.backends.base.BaseBackend`) | The Ibis backend. |\n\n",
    "supporting": [
      "expression-generic_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}