{
  "hash": "a754bf9f7df5ec23ca1e6bf4fc197f4f",
  "result": {
    "markdown": "---\ntitle: Schemas\n---\n\n\n\nTable Schemas\n\n# schema { #ibis.schema }\n\n`schema(pairs=None, names=None, types=None)`\n\nValidate and return a [`Schema`](./schemas.qmd#ibis.expr.schema.Schema) object.\n\n## Parameters\n\n| Name    | Type                                                                                                       | Description                                                                                    | Default   |\n|---------|------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------|-----------|\n| `pairs` | [SupportsSchema](`ibis.common.typing.SupportsSchema`) \\| None                                              | List or dictionary of name, type pairs. Mutually exclusive with `names` and `types` arguments. | `None`    |\n| `names` | [Iterable](`collections.abc.Iterable`)\\[[str](`str`)\\] \\| None                                             | Field names. Mutually exclusive with `pairs`.                                                  | `None`    |\n| `types` | [Iterable](`collections.abc.Iterable`)\\[[str](`str`) \\| [dt](`ibis`).[DataType](`ibis.DataType`)\\] \\| None | Field types. Mutually exclusive with `pairs`.                                                  | `None`    |\n\n## Returns\n\n| Type                                | Description    |\n|-------------------------------------|----------------|\n| [Schema](`ibis.expr.schema.Schema`) | An ibis schema |\n\n## Examples\n\n\n::: {#e5bbd61e .cell execution_count=1}\n``` {.python .cell-code}\n>>> from ibis import schema, Schema\n>>> sc = schema([(\"foo\", \"string\"), (\"bar\", \"int64\"), (\"baz\", \"boolean\")])\n>>> sc = schema(names=[\"foo\", \"bar\", \"baz\"], types=[\"string\", \"int64\", \"boolean\"])\n>>> sc = schema(dict(foo=\"string\"))\n>>> sc = schema(Schema(dict(foo=\"string\")))  # no-op\n```\n:::\n\n\n# Schema { #ibis.expr.schema.Schema }\n\n`expr.schema.Schema()`\n\nAn object for holding table schema information.\n\n## Attributes\n\n| Name | Description |\n| --- | --- |\n| [fields](#ibis.expr.schema.Schema.fields) | A mapping of [](`str`) to |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [equals](#ibis.expr.schema.Schema.equals) | Return whether `other` is equal to `self`. |\n| [from_dask](#ibis.expr.schema.Schema.from_dask) | Return the equivalent ibis schema. |\n| [from_numpy](#ibis.expr.schema.Schema.from_numpy) | Return the equivalent ibis schema. |\n| [from_pandas](#ibis.expr.schema.Schema.from_pandas) | Return the equivalent ibis schema. |\n| [from_pyarrow](#ibis.expr.schema.Schema.from_pyarrow) | Return the equivalent ibis schema. |\n| [from_tuples](#ibis.expr.schema.Schema.from_tuples) | Construct a `Schema` from an iterable of pairs. |\n| [name_at_position](#ibis.expr.schema.Schema.name_at_position) | Return the name of a schema column at position `i`. |\n| [to_dask](#ibis.expr.schema.Schema.to_dask) | Return the equivalent dask dtypes. |\n| [to_numpy](#ibis.expr.schema.Schema.to_numpy) | Return the equivalent numpy dtypes. |\n| [to_pandas](#ibis.expr.schema.Schema.to_pandas) | Return the equivalent pandas datatypes. |\n| [to_pyarrow](#ibis.expr.schema.Schema.to_pyarrow) | Return the equivalent pyarrow schema. |\n\n### equals { #ibis.expr.schema.Schema.equals }\n\n`equals(self, other)`\n\nReturn whether `other` is equal to `self`.\n\n#### Parameters\n\n| Name    | Type                                | Description                  | Default    |\n|---------|-------------------------------------|------------------------------|------------|\n| `other` | [Schema](`ibis.expr.schema.Schema`) | Schema to compare `self` to. | _required_ |\n\n#### Examples\n\n::: {#e6f92194 .cell execution_count=2}\n``` {.python .cell-code}\n>>> import ibis\n>>> first = ibis.schema({\"a\": \"int\"})\n>>> second = ibis.schema({\"a\": \"int\"})\n>>> assert first.equals(second)\n>>> third = ibis.schema({\"a\": \"array<int>\"})\n>>> assert not first.equals(third)\n```\n:::\n\n\n### from_dask { #ibis.expr.schema.Schema.from_dask }\n\n`from_dask(cls, dask_schema)`\n\nReturn the equivalent ibis schema.\n\n### from_numpy { #ibis.expr.schema.Schema.from_numpy }\n\n`from_numpy(cls, numpy_schema)`\n\nReturn the equivalent ibis schema.\n\n### from_pandas { #ibis.expr.schema.Schema.from_pandas }\n\n`from_pandas(cls, pandas_schema)`\n\nReturn the equivalent ibis schema.\n\n### from_pyarrow { #ibis.expr.schema.Schema.from_pyarrow }\n\n`from_pyarrow(cls, pyarrow_schema)`\n\nReturn the equivalent ibis schema.\n\n### from_tuples { #ibis.expr.schema.Schema.from_tuples }\n\n`from_tuples(cls, values)`\n\nConstruct a `Schema` from an iterable of pairs.\n\n#### Parameters\n\n| Name     | Type                                                                                                                                 | Description                            | Default    |\n|----------|--------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------|------------|\n| `values` | [Iterable](`collections.abc.Iterable`)\\[[tuple](`tuple`)\\[[str](`str`), [str](`str`) \\| [dt](`ibis`).[DataType](`ibis.DataType`)\\]\\] | An iterable of pairs of name and type. | _required_ |\n\n#### Returns\n\n| Type                                | Description   |\n|-------------------------------------|---------------|\n| [Schema](`ibis.expr.schema.Schema`) | A new schema  |\n\n#### Examples\n\n::: {#8dba5333 .cell execution_count=3}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.Schema.from_tuples([(\"a\", \"int\"), (\"b\", \"string\")])\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nibis.Schema {\n  a  int64\n  b  string\n}\n```\n:::\n:::\n\n\n### name_at_position { #ibis.expr.schema.Schema.name_at_position }\n\n`name_at_position(self, i)`\n\nReturn the name of a schema column at position `i`.\n\n#### Parameters\n\n| Name   | Type         | Description                | Default    |\n|--------|--------------|----------------------------|------------|\n| `i`    | [int](`int`) | The position of the column | _required_ |\n\n#### Returns\n\n| Type         | Description                                           |\n|--------------|-------------------------------------------------------|\n| [str](`str`) | The name of the column in the schema at position `i`. |\n\n#### Examples\n\n::: {#db6f93ae .cell execution_count=4}\n``` {.python .cell-code}\n>>> import ibis\n>>> sch = ibis.Schema({\"a\": \"int\", \"b\": \"string\"})\n>>> sch.name_at_position(0)\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n'a'\n```\n:::\n:::\n\n\n::: {#3400b1cd .cell execution_count=5}\n``` {.python .cell-code}\n>>> sch.name_at_position(1)\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n'b'\n```\n:::\n:::\n\n\n### to_dask { #ibis.expr.schema.Schema.to_dask }\n\n`to_dask(self)`\n\nReturn the equivalent dask dtypes.\n\n### to_numpy { #ibis.expr.schema.Schema.to_numpy }\n\n`to_numpy(self)`\n\nReturn the equivalent numpy dtypes.\n\n### to_pandas { #ibis.expr.schema.Schema.to_pandas }\n\n`to_pandas(self)`\n\nReturn the equivalent pandas datatypes.\n\n### to_pyarrow { #ibis.expr.schema.Schema.to_pyarrow }\n\n`to_pyarrow(self)`\n\nReturn the equivalent pyarrow schema.\n\n",
    "supporting": [
      "schemas_files"
    ],
    "filters": [],
    "includes": {}
  }
}