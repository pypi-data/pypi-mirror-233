{
  "hash": "fded42dff4fce81c4bdb843410418c81",
  "result": {
    "markdown": "---\ntitle: Collection expressions\n---\n\n\n\nArrays, maps and structs.\n\n# ArrayValue { #ibis.expr.types.arrays.ArrayValue }\n\n`expr.types.arrays.ArrayValue()`\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [concat](#ibis.expr.types.arrays.ArrayValue.concat) | Concatenate this array with one or more arrays. |\n| [contains](#ibis.expr.types.arrays.ArrayValue.contains) | Return whether the array contains `other`. |\n| [filter](#ibis.expr.types.arrays.ArrayValue.filter) | Filter array elements using `predicate`. |\n| [index](#ibis.expr.types.arrays.ArrayValue.index) | Return the position of `other` in an array. |\n| [intersect](#ibis.expr.types.arrays.ArrayValue.intersect) | Intersect two arrays. |\n| [join](#ibis.expr.types.arrays.ArrayValue.join) | Join the elements of this array expression with `sep`. |\n| [length](#ibis.expr.types.arrays.ArrayValue.length) | Compute the length of an array. |\n| [map](#ibis.expr.types.arrays.ArrayValue.map) | Apply a callable `func` to each element of this array expression. |\n| [remove](#ibis.expr.types.arrays.ArrayValue.remove) | Remove `other` from `self`. |\n| [repeat](#ibis.expr.types.arrays.ArrayValue.repeat) | Repeat this array `n` times. |\n| [sort](#ibis.expr.types.arrays.ArrayValue.sort) | Sort the elements in an array. |\n| [union](#ibis.expr.types.arrays.ArrayValue.union) | Union two arrays. |\n| [unique](#ibis.expr.types.arrays.ArrayValue.unique) | Return the unique values in an array. |\n| [unnest](#ibis.expr.types.arrays.ArrayValue.unnest) | Flatten an array into a column. |\n| [zip](#ibis.expr.types.arrays.ArrayValue.zip) | Zip two or more arrays together. |\n\n### concat { #ibis.expr.types.arrays.ArrayValue.concat }\n\n`concat(self, other, *args)`\n\nConcatenate this array with one or more arrays.\n\n#### Parameters\n\n| Name    | Type                                              | Description                        | Default    |\n|---------|---------------------------------------------------|------------------------------------|------------|\n| `other` | [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | Other array to concat with `self`  | _required_ |\n| `args`  | [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | Other arrays to concat with `self` | `()`       |\n\n#### Returns\n\n| Type                                              | Description                                 |\n|---------------------------------------------------|---------------------------------------------|\n| [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | `self` concatenated with `other` and `args` |\n\n#### Examples\n\n\n::: {#c9ed3195 .cell execution_count=1}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"a\": [[7], [3], None]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> a            </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├──────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span><span style=\"font-weight: bold\">]</span>          │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>          │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#84d13340 .cell execution_count=2}\n``` {.python .cell-code}\n>>> t.a.concat(t.a)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayConcat() </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>  │\n├───────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span><span style=\"font-weight: bold\">]</span>        │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>        │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>          │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#bdbb8952 .cell execution_count=3}\n``` {.python .cell-code}\n>>> t.a.concat(ibis.literal([4], type=\"array<int64>\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayConcat() </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>  │\n├───────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span><span style=\"font-weight: bold\">]</span>        │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span><span style=\"font-weight: bold\">]</span>        │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span><span style=\"font-weight: bold\">]</span>           │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n`concat` is also available using the `+` operator\n\n::: {#6f7bd020 .cell execution_count=4}\n``` {.python .cell-code}\n>>> [1] + t.a\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayConcat() </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>  │\n├───────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span><span style=\"font-weight: bold\">]</span>        │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>        │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>           │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#a1b1b6d4 .cell execution_count=5}\n``` {.python .cell-code}\n>>> t.a + [1]\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayConcat() </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>  │\n├───────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>        │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>        │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>           │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n### contains { #ibis.expr.types.arrays.ArrayValue.contains }\n\n`contains(self, other)`\n\nReturn whether the array contains `other`.\n\n#### Parameters\n\n| Name    | Type                               | Description                                         | Default    |\n|---------|------------------------------------|-----------------------------------------------------|------------|\n| `other` | [ir](`ibis`).[Value](`ibis.Value`) | Ibis expression to check for existence of in `self` | _required_ |\n\n#### Returns\n\n| Type                           | Description                            |\n|--------------------------------|----------------------------------------|\n| [BooleanValue](`BooleanValue`) | Whether `other` is contained in `self` |\n\n#### Examples\n\n::: {#18747b90 .cell execution_count=6}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"arr\": [[1], [], [42, 42], None]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> arr          </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├──────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>          │\n│ <span style=\"font-weight: bold\">[]</span>           │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>     │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#ad630280 .cell execution_count=7}\n``` {.python .cell-code}\n>>> t.arr.contains(42)\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayContains(arr, 42) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>                │\n├────────────────────────┤\n│ False                  │\n│ False                  │\n│ True                   │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                   │\n└────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#ebde4927 .cell execution_count=8}\n``` {.python .cell-code}\n>>> t.arr.contains(None)\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayContains(arr, None) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>                  │\n├──────────────────────────┤\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                     │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                     │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                     │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                     │\n└──────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### filter { #ibis.expr.types.arrays.ArrayValue.filter }\n\n`filter(self, predicate)`\n\nFilter array elements using `predicate`.\n\n#### Parameters\n\n| Name        | Type                                                                                                                                        | Description                              | Default    |\n|-------------|---------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------|------------|\n| `predicate` | [Callable](`typing.Callable`)\\[\\[[ir](`ibis`).[Value](`ibis.Value`)\\], [bool](`bool`) \\| [ir](`ibis`).[BooleanValue](`ibis.BooleanValue`)\\] | Function to use to filter array elements | _required_ |\n\n#### Returns\n\n| Type                                              | Description                               |\n|---------------------------------------------------|-------------------------------------------|\n| [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | Array elements filtered using `predicate` |\n\n#### Examples\n\n::: {#379144db .cell execution_count=9}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"a\": [[1, None, 2], [4], []]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> a                 </span>┃\n┡━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>      │\n├───────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span> │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span><span style=\"font-weight: bold\">]</span>               │\n│ <span style=\"font-weight: bold\">[]</span>                │\n└───────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#46303d80 .cell execution_count=10}\n``` {.python .cell-code}\n>>> t.a.filter(lambda x: x > 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayFilter(a, Greater(x, 1)) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>                  │\n├───────────────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>                           │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span><span style=\"font-weight: bold\">]</span>                           │\n│ <span style=\"font-weight: bold\">[]</span>                            │\n└───────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n`.filter()` also supports more complex callables like `functools.partial`\nand lambdas with closures\n\n::: {#cd245244 .cell execution_count=11}\n``` {.python .cell-code}\n>>> from functools import partial\n>>> def gt(x, y):\n...     return x > y\n...\n>>> gt1 = partial(gt, y=1)\n>>> t.a.filter(gt1)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayFilter(a, Greater(x, 1)) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>                  │\n├───────────────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>                           │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span><span style=\"font-weight: bold\">]</span>                           │\n│ <span style=\"font-weight: bold\">[]</span>                            │\n└───────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#8efd5cd8 .cell execution_count=12}\n``` {.python .cell-code}\n>>> y = 1\n>>> t.a.filter(lambda x: x > y)\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayFilter(a, Greater(x, 1)) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>                  │\n├───────────────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>                           │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span><span style=\"font-weight: bold\">]</span>                           │\n│ <span style=\"font-weight: bold\">[]</span>                            │\n└───────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### index { #ibis.expr.types.arrays.ArrayValue.index }\n\n`index(self, other)`\n\nReturn the position of `other` in an array.\n\n#### Parameters\n\n| Name    | Type                               | Description                               | Default    |\n|---------|------------------------------------|-------------------------------------------|------------|\n| `other` | [ir](`ibis`).[Value](`ibis.Value`) | Ibis expression to existence of in `self` | _required_ |\n\n#### Returns\n\n| Type                           | Description                       |\n|--------------------------------|-----------------------------------|\n| [BooleanValue](`BooleanValue`) | The position of `other` in `self` |\n\n#### Examples\n\n::: {#1683e831 .cell execution_count=13}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"arr\": [[1], [], [42, 42], None]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> arr          </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├──────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>          │\n│ <span style=\"font-weight: bold\">[]</span>           │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>     │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#f97961d5 .cell execution_count=14}\n``` {.python .cell-code}\n>>> t.arr.index(42)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayPosition(arr, 42) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>                  │\n├────────────────────────┤\n│                     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1</span> │\n│                     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1</span> │\n│                      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│                   <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#16497579 .cell execution_count=15}\n``` {.python .cell-code}\n>>> t.arr.index(800)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayPosition(arr, 800) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>                   │\n├─────────────────────────┤\n│                      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1</span> │\n│                      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1</span> │\n│                      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1</span> │\n│                    <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└─────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#33cd2010 .cell execution_count=16}\n``` {.python .cell-code}\n>>> t.arr.index(None)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayPosition(arr, None) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>                    │\n├──────────────────────────┤\n│                     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n│                     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n│                     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n│                     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└──────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### intersect { #ibis.expr.types.arrays.ArrayValue.intersect }\n\n`intersect(self, other)`\n\nIntersect two arrays.\n\n#### Parameters\n\n| Name    | Type                                              | Description                            | Default    |\n|---------|---------------------------------------------------|----------------------------------------|------------|\n| `other` | [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | Another array to intersect with `self` | _required_ |\n\n#### Returns\n\n| Type                                              | Description        |\n|---------------------------------------------------|--------------------|\n| [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | Intersected arrays |\n\n#### Examples\n\n::: {#2e1e6dfc .cell execution_count=17}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable(\n...     {\"arr1\": [[3, 2], [], None], \"arr2\": [[1, 3], [None], [5]]}\n... )\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> arr1         </span>┃<span style=\"font-weight: bold\"> arr2         </span>┃\n┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├──────────────┼──────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>       │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"font-weight: bold\">[]</span>           │ <span style=\"font-weight: bold\">[</span><span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span><span style=\"font-weight: bold\">]</span>          │\n└──────────────┴──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#dea8889e .cell execution_count=18}\n``` {.python .cell-code}\n>>> t.arr1.intersect(t.arr2)\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayIntersect(arr1, arr2) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>               │\n├────────────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>                        │\n│ <span style=\"font-weight: bold\">[]</span>                         │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                       │\n└────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### join { #ibis.expr.types.arrays.ArrayValue.join }\n\n`join(self, sep)`\n\nJoin the elements of this array expression with `sep`.\n\n#### Parameters\n\n| Name   | Type                                                           | Description                                 | Default    |\n|--------|----------------------------------------------------------------|---------------------------------------------|------------|\n| `sep`  | [str](`str`) \\| [ir](`ibis`).[StringValue](`ibis.StringValue`) | Separator to use for joining array elements | _required_ |\n\n#### Returns\n\n| Type                         | Description                          |\n|------------------------------|--------------------------------------|\n| [StringValue](`StringValue`) | Elements of `self` joined with `sep` |\n\n#### Examples\n\n::: {#77c48635 .cell execution_count=19}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"arr\": [[\"a\", \"b\", \"c\"], None, [], [\"b\", None]]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> arr                </span>┃\n┡━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;string&gt;</span>      │\n├────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>               │\n│ <span style=\"font-weight: bold\">[]</span>                 │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>, <span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span><span style=\"font-weight: bold\">]</span>        │\n└────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#0ba03b81 .cell execution_count=20}\n``` {.python .cell-code}\n>>> t.arr.join(\"|\")\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayStringJoin('|', arr) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                    │\n├───────────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a|b|c                    </span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                      │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                      │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b                        </span> │\n└───────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n#### See Also\n\n[`StringValue.join`](./expression-strings.qmd#ibis.expr.types.strings.StringValue.join)\n\n### length { #ibis.expr.types.arrays.ArrayValue.length }\n\n`length(self)`\n\nCompute the length of an array.\n\n#### Returns\n\n| Type                           | Description                                  |\n|--------------------------------|----------------------------------------------|\n| [IntegerValue](`IntegerValue`) | The integer length of each element of `self` |\n\n#### Examples\n\n::: {#c08e335b .cell execution_count=21}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"a\": [[7, 42], [3], None]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> a            </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├──────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>      │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>          │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#a2b5295e .cell execution_count=22}\n``` {.python .cell-code}\n>>> t.a.length()\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayLength(a) </span>┃\n┡━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>          │\n├────────────────┤\n│              <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│              <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│           <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### map { #ibis.expr.types.arrays.ArrayValue.map }\n\n`map(self, func)`\n\nApply a callable `func` to each element of this array expression.\n\n#### Parameters\n\n| Name   | Type                                                                                                        | Description                                     | Default    |\n|--------|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------|------------|\n| `func` | [Callable](`typing.Callable`)\\[\\[[ir](`ibis`).[Value](`ibis.Value`)\\], [ir](`ibis`).[Value](`ibis.Value`)\\] | Function to apply to each element of this array | _required_ |\n\n#### Returns\n\n| Type                                              | Description                                               |\n|---------------------------------------------------|-----------------------------------------------------------|\n| [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | `func` applied to every element of this array expression. |\n\n#### Examples\n\n::: {#c9c01f64 .cell execution_count=23}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"a\": [[1, None, 2], [4], []]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> a                 </span>┃\n┡━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>      │\n├───────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span> │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span><span style=\"font-weight: bold\">]</span>               │\n│ <span style=\"font-weight: bold\">[]</span>                │\n└───────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#2297253f .cell execution_count=24}\n``` {.python .cell-code}\n>>> t.a.map(lambda x: (x + 100).cast(\"float\"))\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayMap(a, Cast(Add(x, 100), float64)) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;float64&gt;</span>                          │\n├─────────────────────────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">101.0</span>, <span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>                   │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">104.0</span><span style=\"font-weight: bold\">]</span>                                 │\n│ <span style=\"font-weight: bold\">[]</span>                                      │\n└─────────────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n`.map()` also supports more complex callables like `functools.partial`\nand lambdas with closures\n\n::: {#accb3a62 .cell execution_count=25}\n``` {.python .cell-code}\n>>> from functools import partial\n>>> def add(x, y):\n...     return x + y\n...\n>>> add2 = partial(add, y=2)\n>>> t.a.map(add2)\n```\n\n::: {.cell-output .cell-output-display execution_count=25}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayMap(a, Add(x, 2)) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>           │\n├────────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>      │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6</span><span style=\"font-weight: bold\">]</span>                    │\n│ <span style=\"font-weight: bold\">[]</span>                     │\n└────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#0c976081 .cell execution_count=26}\n``` {.python .cell-code}\n>>> y = 2\n>>> t.a.map(lambda x: x + y)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayMap(a, Add(x, 2)) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>           │\n├────────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>      │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6</span><span style=\"font-weight: bold\">]</span>                    │\n│ <span style=\"font-weight: bold\">[]</span>                     │\n└────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### remove { #ibis.expr.types.arrays.ArrayValue.remove }\n\n`remove(self, other)`\n\nRemove `other` from `self`.\n\n#### Parameters\n\n| Name    | Type                               | Description                    | Default    |\n|---------|------------------------------------|--------------------------------|------------|\n| `other` | [ir](`ibis`).[Value](`ibis.Value`) | Element to remove from `self`. | _required_ |\n\n#### Examples\n\n::: {#f4f0e569 .cell execution_count=27}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"arr\": [[3, 2], [], [42, 2], [2, 2], None]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> arr          </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├──────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"font-weight: bold\">[]</span>           │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>      │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#812b34cd .cell execution_count=28}\n``` {.python .cell-code}\n>>> t.arr.remove(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayRemove(arr, 2) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>        │\n├─────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>                 │\n│ <span style=\"font-weight: bold\">[]</span>                  │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>                │\n│ <span style=\"font-weight: bold\">[]</span>                  │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                │\n└─────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### repeat { #ibis.expr.types.arrays.ArrayValue.repeat }\n\n`repeat(self, n)`\n\nRepeat this array `n` times.\n\n#### Parameters\n\n| Name   | Type                                                             | Description                       | Default    |\n|--------|------------------------------------------------------------------|-----------------------------------|------------|\n| `n`    | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) | Number of times to repeat `self`. | _required_ |\n\n#### Returns\n\n| Type                                              | Description               |\n|---------------------------------------------------|---------------------------|\n| [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | `self` repeated `n` times |\n\n#### Examples\n\n::: {#7238e9d3 .cell execution_count=29}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"a\": [[7], [3], None]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> a            </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├──────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span><span style=\"font-weight: bold\">]</span>          │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>          │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#bfe99060 .cell execution_count=30}\n``` {.python .cell-code}\n>>> t.a.repeat(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayRepeat(a, 2) </span>┃\n┡━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>      │\n├───────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span><span style=\"font-weight: bold\">]</span>            │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>            │\n│ <span style=\"font-weight: bold\">[]</span>                │\n└───────────────────┘\n</pre>\n```\n:::\n:::\n\n\n`repeat` is also available using the `*` operator\n\n::: {#a0ea4652 .cell execution_count=31}\n``` {.python .cell-code}\n>>> 2 * t.a\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayRepeat(a, 2) </span>┃\n┡━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>      │\n├───────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span><span style=\"font-weight: bold\">]</span>            │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>            │\n│ <span style=\"font-weight: bold\">[]</span>                │\n└───────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### sort { #ibis.expr.types.arrays.ArrayValue.sort }\n\n`sort(self)`\n\nSort the elements in an array.\n\n#### Returns\n\n| Type                                              | Description               |\n|---------------------------------------------------|---------------------------|\n| [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | Sorted values in an array |\n\n#### Examples\n\n::: {#e70cceaf .cell execution_count=32}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"arr\": [[3, 2], [], [42, 42], None]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> arr          </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├──────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"font-weight: bold\">[]</span>           │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>     │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#c99456dc .cell execution_count=33}\n``` {.python .cell-code}\n>>> t.arr.sort()\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArraySort(arr) </span>┃\n┡━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>   │\n├────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>         │\n│ <span style=\"font-weight: bold\">[]</span>             │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>           │\n└────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### union { #ibis.expr.types.arrays.ArrayValue.union }\n\n`union(self, other)`\n\nUnion two arrays.\n\n#### Parameters\n\n| Name    | Type                                         | Description                        | Default    |\n|---------|----------------------------------------------|------------------------------------|------------|\n| `other` | [ir](`ibis`).[ArrayValue](`ibis.ArrayValue`) | Another array to union with `self` | _required_ |\n\n#### Returns\n\n| Type                                              | Description    |\n|---------------------------------------------------|----------------|\n| [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | Unioned arrays |\n\n#### Examples\n\n::: {#0f77858f .cell execution_count=34}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable(\n...     {\"arr1\": [[3, 2], [], None], \"arr2\": [[1, 3], [None], [5]]}\n... )\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> arr1         </span>┃<span style=\"font-weight: bold\"> arr2         </span>┃\n┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├──────────────┼──────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>       │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"font-weight: bold\">[]</span>           │ <span style=\"font-weight: bold\">[</span><span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span><span style=\"font-weight: bold\">]</span>          │\n└──────────────┴──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#a8d25011 .cell execution_count=35}\n``` {.python .cell-code}\n>>> t.arr1.union(t.arr2)\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayUnion(arr1, arr2) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>           │\n├────────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>         │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span><span style=\"font-weight: bold\">]</span>                 │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span><span style=\"font-weight: bold\">]</span>                    │\n└────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#ffee6e75 .cell execution_count=36}\n``` {.python .cell-code}\n>>> t.arr1.union(t.arr2).contains(3)\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayContains(ArrayUnion(arr1, arr2), 3) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>                                  │\n├──────────────────────────────────────────┤\n│ True                                     │\n│ False                                    │\n│ False                                    │\n└──────────────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### unique { #ibis.expr.types.arrays.ArrayValue.unique }\n\n`unique(self)`\n\nReturn the unique values in an array.\n\n::: {.callout-note}\n## Element ordering in array may not be retained.\n:::\n\n#### Returns\n\n| Type                                              | Description               |\n|---------------------------------------------------|---------------------------|\n| [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | Unique values in an array |\n\n#### Examples\n\n::: {#095b9182 .cell execution_count=37}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"arr\": [[1, 3, 3], [], [42, 42], None]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> arr            </span>┃\n┡━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>   │\n├────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span> │\n│ <span style=\"font-weight: bold\">[]</span>             │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>           │\n└────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#cb94eec9 .cell execution_count=38}\n``` {.python .cell-code}\n>>> t.arr.unique()\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayDistinct(arr) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>       │\n├────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>             │\n│ <span style=\"font-weight: bold\">[]</span>                 │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>               │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>               │\n└────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### unnest { #ibis.expr.types.arrays.ArrayValue.unnest }\n\n`unnest(self)`\n\nFlatten an array into a column.\n\n::: {.callout-note}\n## This operation changes the cardinality of the result\n:::\n\n#### Examples\n\n::: {#c54b4c76 .cell execution_count=39}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"a\": [[7, 42], [3, 3], None]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> a            </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├──────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>      │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#e9c56082 .cell execution_count=40}\n``` {.python .cell-code}\n>>> t.a.unnest()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━┓\n┃<span style=\"font-weight: bold\"> a     </span>┃\n┡━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├───────┤\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">7</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n└───────┘\n</pre>\n```\n:::\n:::\n\n\n#### Returns\n\n| Type                               | Description    |\n|------------------------------------|----------------|\n| [ir](`ibis`).[Value](`ibis.Value`) | Unnested array |\n\n### zip { #ibis.expr.types.arrays.ArrayValue.zip }\n\n`zip(self, other, *others)`\n\nZip two or more arrays together.\n\n#### Parameters\n\n| Name     | Type                                              | Description                          | Default    |\n|----------|---------------------------------------------------|--------------------------------------|------------|\n| `other`  | [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | Another array to zip with `self`     | _required_ |\n| `others` | [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | Additional arrays to zip with `self` | `()`       |\n\n#### Returns\n\n| Type             | Description                                                                 |\n|------------------|-----------------------------------------------------------------------------|\n| [Array](`Array`) | Array of structs where each struct field is an element of each input array. |\n\n#### Examples\n\n::: {#268a18f8 .cell execution_count=41}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable(\n...     {\"numbers\": [[3, 2], [], None], \"strings\": [[\"a\", \"c\"], None, [\"e\"]]}\n... )\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> numbers      </span>┃<span style=\"font-weight: bold\"> strings       </span>┃\n┡━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;string&gt;</span> │\n├──────────────┼───────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>       │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'c'</span><span style=\"font-weight: bold\">]</span>    │\n│ <span style=\"font-weight: bold\">[]</span>           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>          │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>         │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'e'</span><span style=\"font-weight: bold\">]</span>         │\n└──────────────┴───────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#471b919b .cell execution_count=42}\n``` {.python .cell-code}\n>>> expr = t.numbers.zip(t.strings)\n>>> expr\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayZip()                           </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;struct&lt;f1: int64, f2: string&gt;&gt;</span> │\n├──────────────────────────────────────┤\n│ <span style=\"font-weight: bold\">[{</span><span style=\"color: #808000; text-decoration-color: #808000\">...</span><span style=\"font-weight: bold\">}</span>, <span style=\"font-weight: bold\">{</span><span style=\"color: #808000; text-decoration-color: #808000\">...</span><span style=\"font-weight: bold\">}]</span>                       │\n│ <span style=\"font-weight: bold\">[]</span>                                   │\n│ <span style=\"font-weight: bold\">[{</span><span style=\"color: #808000; text-decoration-color: #808000\">...</span><span style=\"font-weight: bold\">}]</span>                              │\n└──────────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#1a4d831a .cell execution_count=43}\n``` {.python .cell-code}\n>>> expr.unnest()\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayZip()                    </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">struct&lt;f1: int64, f2: string&gt;</span> │\n├───────────────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'f1'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'f2'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'a'</span><span style=\"font-weight: bold\">}</span>          │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'f1'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'f2'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'c'</span><span style=\"font-weight: bold\">}</span>          │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'f1'</span>: <span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'f2'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'e'</span><span style=\"font-weight: bold\">}</span>       │\n└───────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n# MapValue { #ibis.expr.types.maps.MapValue }\n\n`expr.types.maps.MapValue()`\n\nA map literal or column expression.\n\nCan be constructed with [`ibis.map()`](#ibis.expr.types.map).\n\n## Examples\n\n::: {#708b0197 .cell execution_count=44}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> import pyarrow as pa\n>>> tab = pa.table(\n...     {\n...         \"m\": pa.array(\n...             [[(\"a\", 1), (\"b\", 2)], [(\"a\", 1)], None],\n...             type=pa.map_(pa.utf8(), pa.int64()),\n...         )\n...     }\n... )\n>>> t = ibis.memtable(tab)\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> m                   </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">map&lt;!string, int64&gt;</span> │\n├─────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">}</span>    │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">}</span>            │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                │\n└─────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nCan use `[]` to access values:\n\n::: {#ad06539a .cell execution_count=45}\n``` {.python .cell-code}\n>>> t.m[\"a\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> MapGet(m, 'a', None) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>                │\n├──────────────────────┤\n│                    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│                    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│                 <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└──────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nTo provide default values, use `get`:\n\n::: {#8145f847 .cell execution_count=46}\n``` {.python .cell-code}\n>>> t.m.get(\"b\", 0)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> MapGet(m, 'b', 0) </span>┃\n┡━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>             │\n├───────────────────┤\n│                 <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│                 <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│                 <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n└───────────────────┘\n</pre>\n```\n:::\n:::\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [contains](#ibis.expr.types.maps.MapValue.contains) | Return whether the map contains `key`. |\n| [get](#ibis.expr.types.maps.MapValue.get) | Return the value for `key` from `expr`. |\n| [keys](#ibis.expr.types.maps.MapValue.keys) | Extract the keys of a map. |\n| [length](#ibis.expr.types.maps.MapValue.length) | Return the number of key-value pairs in the map. |\n| [values](#ibis.expr.types.maps.MapValue.values) | Extract the values of a map. |\n\n### contains { #ibis.expr.types.maps.MapValue.contains }\n\n`contains(self, key)`\n\nReturn whether the map contains `key`.\n\n#### Parameters\n\n| Name   | Type                                                                                                                               | Description                    | Default    |\n|--------|------------------------------------------------------------------------------------------------------------------------------------|--------------------------------|------------|\n| `key`  | [int](`int`) \\| [str](`str`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) \\| [ir](`ibis`).[StringValue](`ibis.StringValue`) | Mapping key for which to check | _required_ |\n\n#### Returns\n\n| Type                           | Description                                                    |\n|--------------------------------|----------------------------------------------------------------|\n| [BooleanValue](`BooleanValue`) | Boolean indicating the presence of `key` in the map expression |\n\n#### Examples\n\n::: {#0b6e8642 .cell execution_count=47}\n``` {.python .cell-code}\n>>> import ibis\n>>> import pyarrow as pa\n>>> ibis.options.interactive = True\n>>> tab = pa.table(\n...     {\n...         \"m\": pa.array(\n...             [[(\"a\", 1), (\"b\", 2)], [(\"a\", 1)], None],\n...             type=pa.map_(pa.utf8(), pa.int64()),\n...         )\n...     }\n... )\n>>> t = ibis.memtable(tab)\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> m                   </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">map&lt;!string, int64&gt;</span> │\n├─────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">}</span>    │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">}</span>            │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                │\n└─────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#9183d8d3 .cell execution_count=48}\n``` {.python .cell-code}\n>>> t.m.contains(\"b\")\n```\n\n::: {.cell-output .cell-output-display execution_count=48}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> MapContains(m, 'b') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>             │\n├─────────────────────┤\n│ True                │\n│ False               │\n│ False               │\n└─────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### get { #ibis.expr.types.maps.MapValue.get }\n\n`get(self, key, default=None)`\n\nReturn the value for `key` from `expr`.\n\nReturn `default` if `key` is not in the map.\n\n#### Parameters\n\n| Name      | Type                                       | Description                                          | Default    |\n|-----------|--------------------------------------------|------------------------------------------------------|------------|\n| `key`     | [ir](`ibis`).[Value](`ibis.Value`)         | Expression to use for key                            | _required_ |\n| `default` | [ir](`ibis`).[Value](`ibis.Value`) \\| None | Expression to return if `key` is not a key in `expr` | `None`     |\n\n#### Returns\n\n| Type                                     | Description                |\n|------------------------------------------|----------------------------|\n| [Value](`ibis.expr.types.generic.Value`) | The element type of `self` |\n\n#### Examples\n\n::: {#0bc7e9ed .cell execution_count=49}\n``` {.python .cell-code}\n>>> import ibis\n>>> import pyarrow as pa\n>>> ibis.options.interactive = True\n>>> tab = pa.table(\n...     {\n...         \"m\": pa.array(\n...             [[(\"a\", 1), (\"b\", 2)], [(\"a\", 1)], None],\n...             type=pa.map_(pa.utf8(), pa.int64()),\n...         )\n...     }\n... )\n>>> t = ibis.memtable(tab)\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> m                   </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">map&lt;!string, int64&gt;</span> │\n├─────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">}</span>    │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">}</span>            │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                │\n└─────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#a794a073 .cell execution_count=50}\n``` {.python .cell-code}\n>>> t.m.get(\"a\")\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> MapGet(m, 'a', None) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>                │\n├──────────────────────┤\n│                    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│                    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│                 <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└──────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#69b469f6 .cell execution_count=51}\n``` {.python .cell-code}\n>>> t.m.get(\"b\")\n```\n\n::: {.cell-output .cell-output-display execution_count=51}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> MapGet(m, 'b', None) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>                │\n├──────────────────────┤\n│                    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│                 <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n│                 <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└──────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#b4d78362 .cell execution_count=52}\n``` {.python .cell-code}\n>>> t.m.get(\"b\", 0)\n```\n\n::: {.cell-output .cell-output-display execution_count=52}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> MapGet(m, 'b', 0) </span>┃\n┡━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>             │\n├───────────────────┤\n│                 <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│                 <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│                 <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n└───────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### keys { #ibis.expr.types.maps.MapValue.keys }\n\n`keys(self)`\n\nExtract the keys of a map.\n\n#### Returns\n\n| Type                       | Description        |\n|----------------------------|--------------------|\n| [ArrayValue](`ArrayValue`) | The keys of `self` |\n\n#### Examples\n\n::: {#8beada0a .cell execution_count=53}\n``` {.python .cell-code}\n>>> import ibis\n>>> import pyarrow as pa\n>>> ibis.options.interactive = True\n>>> tab = pa.table(\n...     {\n...         \"m\": pa.array(\n...             [[(\"a\", 1), (\"b\", 2)], [(\"a\", 1)], None],\n...             type=pa.map_(pa.utf8(), pa.int64()),\n...         )\n...     }\n... )\n>>> t = ibis.memtable(tab)\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=53}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> m                   </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">map&lt;!string, int64&gt;</span> │\n├─────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">}</span>    │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">}</span>            │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                │\n└─────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#b5ee0fec .cell execution_count=54}\n``` {.python .cell-code}\n>>> t.m.keys()\n```\n\n::: {.cell-output .cell-output-display execution_count=54}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> MapKeys(m)     </span>┃\n┡━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;!string&gt;</span> │\n├────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span><span style=\"font-weight: bold\">]</span>     │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span><span style=\"font-weight: bold\">]</span>          │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>           │\n└────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### length { #ibis.expr.types.maps.MapValue.length }\n\n`length(self)`\n\nReturn the number of key-value pairs in the map.\n\n#### Returns\n\n| Type                           | Description                      |\n|--------------------------------|----------------------------------|\n| [IntegerValue](`IntegerValue`) | The number of elements in `self` |\n\n#### Examples\n\n::: {#11391f79 .cell execution_count=55}\n``` {.python .cell-code}\n>>> import ibis\n>>> import pyarrow as pa\n>>> ibis.options.interactive = True\n>>> tab = pa.table(\n...     {\n...         \"m\": pa.array(\n...             [[(\"a\", 1), (\"b\", 2)], [(\"a\", 1)], None],\n...             type=pa.map_(pa.utf8(), pa.int64()),\n...         )\n...     }\n... )\n>>> t = ibis.memtable(tab)\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=55}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> m                   </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">map&lt;!string, int64&gt;</span> │\n├─────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">}</span>    │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">}</span>            │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                │\n└─────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#858b94f6 .cell execution_count=56}\n``` {.python .cell-code}\n>>> t.m.length()\n```\n\n::: {.cell-output .cell-output-display execution_count=56}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> MapLength(m) </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>        │\n├──────────────┤\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│         <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### values { #ibis.expr.types.maps.MapValue.values }\n\n`values(self)`\n\nExtract the values of a map.\n\n#### Returns\n\n| Type                       | Description          |\n|----------------------------|----------------------|\n| [ArrayValue](`ArrayValue`) | The values of `self` |\n\n#### Examples\n\n::: {#b5a9a9f4 .cell execution_count=57}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> m = ibis.map({\"a\": 1, \"b\": 2})\n>>> m.values()\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=57}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bold\">[</span><span class=\"ansi-cyan-fg ansi-bold\">1</span>, <span class=\"ansi-cyan-fg ansi-bold\">2</span><span class=\"ansi-bold\">]</span></pre>\n```\n:::\n\n:::\n:::\n\n\n# StructValue { #ibis.expr.types.structs.StructValue }\n\n`expr.types.structs.StructValue()`\n\nA struct literal or column.\n\nCan be constructed with [`ibis.struct()`](#ibis.expr.types.struct).\n\n## Examples\n\n::: {#b1bbf8d9 .cell execution_count=58}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [{\"a\": 1, \"b\": \"foo\"}, {\"a\": 3, \"b\": None}, None]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=58}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> s                           </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">struct&lt;a: int64, b: string&gt;</span> │\n├─────────────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'foo'</span><span style=\"font-weight: bold\">}</span>        │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span><span style=\"font-weight: bold\">}</span>         │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                        │\n└─────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nCan use either `.` or `[]` to access fields:\n\n::: {#f13f8dd6 .cell execution_count=59}\n``` {.python .cell-code}\n>>> t.s.a\n```\n\n::: {.cell-output .cell-output-display execution_count=59}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━┓\n┃<span style=\"font-weight: bold\"> a     </span>┃\n┡━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├───────┤\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│  <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└───────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#145e0435 .cell execution_count=60}\n``` {.python .cell-code}\n>>> t.s[\"a\"]\n```\n\n::: {.cell-output .cell-output-display execution_count=60}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━┓\n┃<span style=\"font-weight: bold\"> a     </span>┃\n┡━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├───────┤\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│  <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└───────┘\n</pre>\n```\n:::\n:::\n\n\n## Attributes\n\n| Name | Description |\n| --- | --- |\n| [fields](#ibis.expr.types.structs.StructValue.fields) | Return a mapping from field name to field type of the struct. |\n| [names](#ibis.expr.types.structs.StructValue.names) | Return the field names of the struct. |\n| [types](#ibis.expr.types.structs.StructValue.types) | Return the field types of the struct. |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [destructure](#ibis.expr.types.structs.StructValue.destructure) | Destructure a ``StructValue`` into the corresponding struct fields. |\n| [lift](#ibis.expr.types.structs.StructValue.lift) | Project the fields of `self` into a table. |\n\n### destructure { #ibis.expr.types.structs.StructValue.destructure }\n\n`destructure(self)`\n\nDestructure a ``StructValue`` into the corresponding struct fields.\n\nWhen assigned, a destruct value will be destructured and assigned to\nmultiple columns.\n\n#### Returns\n\n| Type                                     | Description                                           |\n|------------------------------------------|-------------------------------------------------------|\n| [list](`list`)\\[[AnyValue](`AnyValue`)\\] | Value expressions corresponding to the struct fields. |\n\n#### Examples\n\n::: {#acc69dce .cell execution_count=61}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [{\"a\": 1, \"b\": \"foo\"}, {\"a\": 3, \"b\": None}, None]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=61}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> s                           </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">struct&lt;a: int64, b: string&gt;</span> │\n├─────────────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'foo'</span><span style=\"font-weight: bold\">}</span>        │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span><span style=\"font-weight: bold\">}</span>         │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                        │\n└─────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#96cad607 .cell execution_count=62}\n``` {.python .cell-code}\n>>> a, b = t.s.destructure()\n>>> a\n```\n\n::: {.cell-output .cell-output-display execution_count=62}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━┓\n┃<span style=\"font-weight: bold\"> a     </span>┃\n┡━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├───────┤\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│  <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span> │\n└───────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#8d614761 .cell execution_count=63}\n``` {.python .cell-code}\n>>> b\n```\n\n::: {.cell-output .cell-output-display execution_count=63}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> b      </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">foo   </span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>   │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>   │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n### lift { #ibis.expr.types.structs.StructValue.lift }\n\n`lift(self)`\n\nProject the fields of `self` into a table.\n\nThis method is useful when analyzing data that has deeply nested\nstructs or arrays of structs. `lift` can be chained to avoid repeating\ncolumn names and table references.\n\n#### Returns\n\n| Type             | Description                                        |\n|------------------|----------------------------------------------------|\n| [Table](`Table`) | A projection with this struct expression's fields. |\n\n#### Examples\n\n::: {#42dd7eba .cell execution_count=64}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable(\n...     {\n...         \"pos\": [\n...             {\"lat\": 10.1, \"lon\": 30.3},\n...             {\"lat\": 10.2, \"lon\": 30.2},\n...             {\"lat\": 10.3, \"lon\": 30.1},\n...         ]\n...     }\n... )\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=64}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> pos                                </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">struct&lt;lat: float64, lon: float64&gt;</span> │\n├────────────────────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'lat'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10.1</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'lon'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">30.3</span><span style=\"font-weight: bold\">}</span>         │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'lat'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10.2</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'lon'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">30.2</span><span style=\"font-weight: bold\">}</span>         │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'lat'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10.3</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'lon'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">30.1</span><span style=\"font-weight: bold\">}</span>         │\n└────────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#3fd6ad28 .cell execution_count=65}\n``` {.python .cell-code}\n>>> t.pos.lift()\n```\n\n::: {.cell-output .cell-output-display execution_count=65}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> lat     </span>┃<span style=\"font-weight: bold\"> lon     </span>┃\n┡━━━━━━━━━╇━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span> │\n├─────────┼─────────┤\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10.1</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">30.3</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10.2</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">30.2</span> │\n│    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">10.3</span> │    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">30.1</span> │\n└─────────┴─────────┘\n</pre>\n```\n:::\n:::\n\n\n#### See Also\n\n[`Table.unpack`](./expression-tables.qmd#ibis.expr.types.relations.Table.unpack)\n\n# array { #ibis.array }\n\n`array(values, type=None)`\n\nCreate an array expression.\n\nIf the input expressions are all column expressions, then the output will\nbe an `ArrayColumn`. The input columns will be concatenated row-wise to\nproduce each array in the output array column. Each array will have length\n_n_, where _n_ is the number of input columns. All input columns should be\nof the same datatype.\n\nIf the input expressions are Python literals, then the output will be a\nsingle `ArrayScalar` of length _n_, where _n_ is the number of input\nvalues. This is equivalent to\n\n```python\nvalues = [1, 2, 3]\nibis.literal(values)\n```\n\n## Parameters\n\n| Name     | Type                                                             | Description                                                                                    | Default    |\n|----------|------------------------------------------------------------------|------------------------------------------------------------------------------------------------|------------|\n| `values` | [Iterable](`typing.Iterable`)\\[[V](`ibis.expr.types.typing.V`)\\] | An iterable of Ibis expressions or a list of Python literals                                   | _required_ |\n| `type`   | [str](`str`) \\| [dt](`ibis`).[DataType](`ibis.DataType`) \\| None | An instance of `ibis.expr.datatypes.DataType` or a string indicating the ibis type of `value`. | `None`     |\n\n## Returns\n\n| Type                                              | Description                                                                                                    |\n|---------------------------------------------------|----------------------------------------------------------------------------------------------------------------|\n| [ArrayValue](`ibis.expr.types.arrays.ArrayValue`) | An array column (if the inputs are column expressions), or an array scalar (if the inputs are Python literals) |\n\n## Examples\n\nCreate an array column from column expressions\n\n::: {#f7bb3c6d .cell execution_count=66}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"a\": [1, 2, 3], \"b\": [4, 5, 6]})\n>>> ibis.array([t.a, t.b])\n```\n\n::: {.cell-output .cell-output-display execution_count=66}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayColumn() </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>  │\n├───────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4</span><span style=\"font-weight: bold\">]</span>        │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5</span><span style=\"font-weight: bold\">]</span>        │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6</span><span style=\"font-weight: bold\">]</span>        │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\nCreate an array scalar from Python literals\n\n::: {#83d63278 .cell execution_count=67}\n``` {.python .cell-code}\n>>> ibis.array([1.0, 2.0, 3.0])\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=67}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bold\">[</span><span class=\"ansi-cyan-fg ansi-bold\">1.0</span>, <span class=\"ansi-cyan-fg ansi-bold\">2.0</span>, <span class=\"ansi-cyan-fg ansi-bold\">3.0</span><span class=\"ansi-bold\">]</span></pre>\n```\n:::\n\n:::\n:::\n\n\nMixing scalar and column expressions is allowed\n\n::: {#3528644f .cell execution_count=68}\n``` {.python .cell-code}\n>>> ibis.array([t.a, 42])\n```\n\n::: {.cell-output .cell-output-display execution_count=68}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayColumn() </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span>  │\n├───────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42</span><span style=\"font-weight: bold\">]</span>       │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n# map { #ibis.map }\n\n`map(keys, values=None)`\n\nCreate a [map container object](https://docs.python.org/3/glossary.html#term-mapping).\n\nIf the `keys` and `values` are Python literals, then the output will be a\n`MapScalar`. If the `keys` and `values` are expressions (`ArrayColumn`),\nthen the the output will be a `MapColumn`.\n\n## Parameters\n\n| Name     | Type                                                                                                                                                                                   | Description                                                                      | Default    |\n|----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------|------------|\n| `keys`   | [Iterable](`typing.Iterable`)\\[[Any](`typing.Any`)\\] \\| [Mapping](`typing.Mapping`)\\[[Any](`typing.Any`), [Any](`typing.Any`)\\] \\| [ArrayColumn](`ibis.expr.types.arrays.ArrayColumn`) | Keys of the map or `Mapping`. If `keys` is a `Mapping`, `values` must be `None`. | _required_ |\n| `values` | [Iterable](`typing.Iterable`)\\[[Any](`typing.Any`)\\] \\| [ArrayColumn](`ibis.expr.types.arrays.ArrayColumn`) \\| None                                                                    | Values of the map or `None`. If `None`, the `keys` argument must be a `Mapping`. | `None`     |\n\n## Returns\n\n| Type                                        | Description                                                                                                       |\n|---------------------------------------------|-------------------------------------------------------------------------------------------------------------------|\n| [MapValue](`ibis.expr.types.maps.MapValue`) | An expression representing either a map column or literal (associative array with key/value pairs of fixed types) |\n\n## Examples\n\nCreate a map literal from a dict with the type inferred\n\n::: {#a7ef1a06 .cell execution_count=69}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> ibis.map(dict(a=1, b=2))\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=69}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-bold\">{</span><span class=\"ansi-green-fg\">'a'</span>: <span class=\"ansi-cyan-fg ansi-bold\">1</span>, <span class=\"ansi-green-fg\">'b'</span>: <span class=\"ansi-cyan-fg ansi-bold\">2</span><span class=\"ansi-bold\">}</span></pre>\n```\n:::\n\n:::\n:::\n\n\nCreate a new map column from columns with keys and values\n\n::: {#0f09abb9 .cell execution_count=70}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"keys\": [[\"a\", \"b\"], [\"b\"]], \"values\": [[1, 2], [3]]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=70}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> keys          </span>┃<span style=\"font-weight: bold\"> values       </span>┃\n┡━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;string&gt;</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;int64&gt;</span> │\n├───────────────┼──────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span><span style=\"font-weight: bold\">]</span>    │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">]</span>       │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'b'</span><span style=\"font-weight: bold\">]</span>         │ <span style=\"font-weight: bold\">[</span><span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">]</span>          │\n└───────────────┴──────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#b359ba62 .cell execution_count=71}\n``` {.python .cell-code}\n>>> ibis.map(t.keys, t.values)\n```\n\n::: {.cell-output .cell-output-display execution_count=71}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Map(keys, values)  </span>┃\n┡━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">map&lt;string, int64&gt;</span> │\n├────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span><span style=\"font-weight: bold\">}</span>   │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span><span style=\"font-weight: bold\">}</span>           │\n└────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n# struct { #ibis.struct }\n\n`struct(value, type=None)`\n\nCreate a struct expression.\n\nIf the input expressions are all column expressions, then the output will be\na `StructColumn`.\n\nIf the input expressions are Python literals, then the output will be a\n`StructScalar`.\n\n## Parameters\n\n| Name    | Type                                                                                                                                                                               | Description                                                                                                                                               | Default    |\n|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `value` | [Iterable](`typing.Iterable`)\\[[tuple](`tuple`)\\[[str](`str`), [V](`ibis.expr.types.typing.V`)\\]\\] \\| [Mapping](`typing.Mapping`)\\[[str](`str`), [V](`ibis.expr.types.typing.V`)\\] | The underlying data for literal struct value or a pairs of field names and column expressions.                                                            | _required_ |\n| `type`  | [str](`str`) \\| [dt](`ibis`).[DataType](`ibis.DataType`) \\| None                                                                                                                   | An instance of `ibis.expr.datatypes.DataType` or a string indicating the ibis type of `value`. This is only used if all of the input values are literals. | `None`     |\n\n## Returns\n\n| Type                                                 | Description                                                                                      |\n|------------------------------------------------------|--------------------------------------------------------------------------------------------------|\n| [StructValue](`ibis.expr.types.structs.StructValue`) | An expression representing a literal or column struct (compound type with fields of fixed types) |\n\n## Examples\n\nCreate a struct literal from a [](`dict`) with the type inferred\n\n::: {#c4e0ea74 .cell execution_count=72}\n``` {.python .cell-code}\n>>> import ibis\n>>> t = ibis.struct(dict(a=1, b=\"foo\"))\n```\n:::\n\n\nCreate a struct literal from a [](`dict`) with a specified type\n\n::: {#80fb013a .cell execution_count=73}\n``` {.python .cell-code}\n>>> t = ibis.struct(dict(a=1, b=\"foo\"), type=\"struct<a: float, b: string>\")\n```\n:::\n\n\nSpecify a specific type for the struct literal\n\n::: {#a4c134b8 .cell execution_count=74}\n``` {.python .cell-code}\n>>> t = ibis.struct(dict(a=1, b=40), type=\"struct<a: float, b: int32>\")\n```\n:::\n\n\nCreate a struct array from multiple arrays\n\n::: {#0d74e967 .cell execution_count=75}\n``` {.python .cell-code}\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"a\": [1, 2, 3], \"b\": [\"foo\", \"bar\", \"baz\"]})\n>>> ibis.struct([(\"a\", t.a), (\"b\", t.b)])\n```\n\n::: {.cell-output .cell-output-display execution_count=75}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StructColumn()              </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">struct&lt;a: int64, b: string&gt;</span> │\n├─────────────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'foo'</span><span style=\"font-weight: bold\">}</span>        │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'bar'</span><span style=\"font-weight: bold\">}</span>        │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'baz'</span><span style=\"font-weight: bold\">}</span>        │\n└─────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nCreate a struct array from columns and literals\n\n::: {#26f02c80 .cell execution_count=76}\n``` {.python .cell-code}\n>>> ibis.struct([(\"a\", t.a), (\"b\", \"foo\")])\n```\n\n::: {.cell-output .cell-output-display execution_count=76}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StructColumn()              </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">struct&lt;a: int64, b: string&gt;</span> │\n├─────────────────────────────┤\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'foo'</span><span style=\"font-weight: bold\">}</span>        │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'foo'</span><span style=\"font-weight: bold\">}</span>        │\n│ <span style=\"font-weight: bold\">{</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>: <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>: <span style=\"color: #008000; text-decoration-color: #008000\">'foo'</span><span style=\"font-weight: bold\">}</span>        │\n└─────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n",
    "supporting": [
      "expression-collections_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}