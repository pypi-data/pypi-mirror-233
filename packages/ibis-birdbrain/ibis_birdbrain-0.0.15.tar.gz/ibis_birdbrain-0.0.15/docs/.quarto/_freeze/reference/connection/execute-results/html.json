{
  "hash": "00ac7ebbb9f38feb0fd56eff0ecfecb5",
  "result": {
    "markdown": "---\ntitle: Top-level Backend API\n---\n\n\n\nCreate and manage backend connections.\n\n# connect { #ibis.connect }\n\n`connect(resource, **kwargs)`\n\nConnect to `resource`, inferring the backend automatically.\n\nThe general pattern for `ibis.connect` is\n\n```python\ncon = ibis.connect(\"backend://connection-parameters\")\n```\n\nWith many backends that looks like\n\n```python\ncon = ibis.connect(\"backend://user:password@host:port/database\")\n```\n\nSee the connection syntax for each backend for details about URL connection\nrequirements.\n\n## Parameters\n\n| Name       | Type                                   | Description                                       | Default    |\n|------------|----------------------------------------|---------------------------------------------------|------------|\n| `resource` | [Path](`pathlib.Path`) \\| [str](`str`) | A URL or path to the resource to be connected to. | _required_ |\n| `kwargs`   | [Any](`typing.Any`)                    | Backend specific keyword arguments                | `{}`       |\n\n## Examples\n\nConnect to an in-memory DuckDB database:\n\n\n::: {#2541fd30 .cell execution_count=1}\n``` {.python .cell-code}\n>>> import ibis\n>>> con = ibis.connect(\"duckdb://\")\n```\n:::\n\n\nConnect to an on-disk SQLite database:\n\n::: {#2e5c1bb1 .cell execution_count=2}\n``` {.python .cell-code}\n>>> con = ibis.connect(\"sqlite://relative.db\")\n>>> con = ibis.connect(\"sqlite:///absolute/path/to/data.db\")\n```\n:::\n\n\nConnect to a PostgreSQL server:\n\n```python\n>>> con = ibis.connect(\n...     \"postgres://user:password@hostname:5432\"\n... )  # quartodoc: +SKIP\n```\n\n\nConnect to BigQuery:\n\n```python\n>>> con = ibis.connect(\n...     \"bigquery://my-project/my-dataset\"\n... )  # quartodoc: +SKIP\n```\n\n\n# get_backend { #ibis.get_backend }\n\n`get_backend(expr=None)`\n\nGet the current Ibis backend to use for a given expression.\n\nexpr\n    An expression to get the backend from. If not passed, the default\n    backend is returned.\n\n## Returns\n\n| Type                                            | Description       |\n|-------------------------------------------------|-------------------|\n| [BaseBackend](`ibis.backends.base.BaseBackend`) | The Ibis backend. |\n\n# set_backend { #ibis.set_backend }\n\n`set_backend(backend)`\n\nSet the default Ibis backend.\n\n## Parameters\n\n| Name      | Type                                                            | Description                                                    | Default    |\n|-----------|-----------------------------------------------------------------|----------------------------------------------------------------|------------|\n| `backend` | [str](`str`) \\| [BaseBackend](`ibis.backends.base.BaseBackend`) | May be a backend name or URL, or an existing backend instance. | _required_ |\n\n## Examples\n\nYou can pass the backend as a name:\n\n::: {#8d573321 .cell execution_count=3}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.set_backend(\"polars\")\n```\n:::\n\n\nOr as a URI\n\n```python\n>>> ibis.set_backend(\n...     \"postgres://user:password@hostname:5432\"\n... )  # quartodoc: +SKIP\n```\n\n\nOr as an existing backend instance\n\n::: {#dcf1cccf .cell execution_count=4}\n``` {.python .cell-code}\n>>> ibis.set_backend(ibis.duckdb.connect())\n```\n:::\n\n\n",
    "supporting": [
      "connection_files"
    ],
    "filters": [],
    "includes": {}
  }
}