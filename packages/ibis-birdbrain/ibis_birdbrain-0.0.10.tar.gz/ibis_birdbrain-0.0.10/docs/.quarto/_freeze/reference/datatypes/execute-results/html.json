{
  "hash": "a83b73f8fede0453a2acec7ddaf5d53d",
  "result": {
    "markdown": "---\ntitle: Data types\n---\n\n\n\nScalar and column data types\n\n# dtype { #ibis.dtype }\n\n`dtype(value, nullable=True)`\n\nCreate a DataType object.\n\n## Parameters\n\n| Name       | Type                               | Description                                                                                                                                          | Default    |\n|------------|------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `value`    | [Any](`typing.Any`)                | The object to coerce to an Ibis DataType. Supported inputs include strings, python type annotations, numpy dtypes, pandas dtypes, and pyarrow types. | _required_ |\n| `nullable` | [bool](`ibis.expr.datatypes.bool`) | Whether the type should be nullable. Defaults to True.                                                                                               | `True`     |\n\n## Examples\n\n\n::: {#32b9c0d8 .cell execution_count=1}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.dtype(\"int32\")\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\nInt32(nullable=True)\n```\n:::\n:::\n\n\n::: {#4e2239e8 .cell execution_count=2}\n``` {.python .cell-code}\n>>> ibis.dtype(\"array<float>\")\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\nArray(value_type=Float64(nullable=True), nullable=True)\n```\n:::\n:::\n\n\nDataType objects may also be created from Python types:\n\n::: {#86ad1b49 .cell execution_count=3}\n``` {.python .cell-code}\n>>> ibis.dtype(int)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nInt64(nullable=True)\n```\n:::\n:::\n\n\n::: {#a2c7b02b .cell execution_count=4}\n``` {.python .cell-code}\n>>> ibis.dtype(list[float])\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nArray(value_type=Float64(nullable=True), nullable=True)\n```\n:::\n:::\n\n\nOr other type systems, like numpy/pandas/pyarrow types:\n\n::: {#b311eb65 .cell execution_count=5}\n``` {.python .cell-code}\n>>> import pyarrow as pa\n>>> ibis.dtype(pa.int32())\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\nInt32(nullable=True)\n```\n:::\n:::\n\n\n# Array { #ibis.expr.datatypes.core.Array }\n\n`expr.datatypes.core.Array()`\n\nArray values.\n\n# Binary { #ibis.expr.datatypes.core.Binary }\n\n`expr.datatypes.core.Binary()`\n\n## Notes\n\nSome databases treat strings and blobs of equally, and some do not.\n\nFor example, Impala doesn't make a distinction between string and binary\ntypes but PostgreSQL has a `TEXT` type and a `BYTEA` type which are\ndistinct types that have different behavior.\n\n# Boolean { #ibis.expr.datatypes.core.Boolean }\n\n`expr.datatypes.core.Boolean()`\n\n[](`True`) or [](`False`) values.\n\n# DataType { #ibis.expr.datatypes.core.DataType }\n\n`expr.datatypes.core.DataType()`\n\nBase class for all data types.\n\nInstances are immutable.\n\n## Attributes\n\n| Name | Description |\n| --- | --- |\n| [name](#ibis.expr.datatypes.core.DataType.name) | Return the name of the data type. |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [from_dask](#ibis.expr.datatypes.core.DataType.from_dask) | Return the equivalent ibis datatype. |\n| [from_numpy](#ibis.expr.datatypes.core.DataType.from_numpy) | Return the equivalent ibis datatype. |\n| [from_pandas](#ibis.expr.datatypes.core.DataType.from_pandas) | Return the equivalent ibis datatype. |\n| [from_pyarrow](#ibis.expr.datatypes.core.DataType.from_pyarrow) | Return the equivalent ibis datatype. |\n| [is_array](#ibis.expr.datatypes.core.DataType.is_array) | Return True if an instance of an Array type. |\n| [is_binary](#ibis.expr.datatypes.core.DataType.is_binary) | Return True if an instance of a Binary type. |\n| [is_boolean](#ibis.expr.datatypes.core.DataType.is_boolean) | Return True if an instance of a Boolean type. |\n| [is_date](#ibis.expr.datatypes.core.DataType.is_date) | Return True if an instance of a Date type. |\n| [is_decimal](#ibis.expr.datatypes.core.DataType.is_decimal) | Return True if an instance of a Decimal type. |\n| [is_enum](#ibis.expr.datatypes.core.DataType.is_enum) | Return True if an instance of an Enum type. |\n| [is_float16](#ibis.expr.datatypes.core.DataType.is_float16) | Return True if an instance of a Float16 type. |\n| [is_float32](#ibis.expr.datatypes.core.DataType.is_float32) | Return True if an instance of a Float32 type. |\n| [is_float64](#ibis.expr.datatypes.core.DataType.is_float64) | Return True if an instance of a Float64 type. |\n| [is_floating](#ibis.expr.datatypes.core.DataType.is_floating) | Return True if an instance of any Floating type. |\n| [is_geospatial](#ibis.expr.datatypes.core.DataType.is_geospatial) | Return True if an instance of a Geospatial type. |\n| [is_inet](#ibis.expr.datatypes.core.DataType.is_inet) | Return True if an instance of an Inet type. |\n| [is_int16](#ibis.expr.datatypes.core.DataType.is_int16) | Return True if an instance of an Int16 type. |\n| [is_int32](#ibis.expr.datatypes.core.DataType.is_int32) | Return True if an instance of an Int32 type. |\n| [is_int64](#ibis.expr.datatypes.core.DataType.is_int64) | Return True if an instance of an Int64 type. |\n| [is_int8](#ibis.expr.datatypes.core.DataType.is_int8) | Return True if an instance of an Int8 type. |\n| [is_integer](#ibis.expr.datatypes.core.DataType.is_integer) | Return True if an instance of any Integer type. |\n| [is_interval](#ibis.expr.datatypes.core.DataType.is_interval) | Return True if an instance of an Interval type. |\n| [is_json](#ibis.expr.datatypes.core.DataType.is_json) | Return True if an instance of a JSON type. |\n| [is_linestring](#ibis.expr.datatypes.core.DataType.is_linestring) | Return True if an instance of a LineString type. |\n| [is_macaddr](#ibis.expr.datatypes.core.DataType.is_macaddr) | Return True if an instance of a MACADDR type. |\n| [is_map](#ibis.expr.datatypes.core.DataType.is_map) | Return True if an instance of a Map type. |\n| [is_multilinestring](#ibis.expr.datatypes.core.DataType.is_multilinestring) | Return True if an instance of a MultiLineString type. |\n| [is_multipoint](#ibis.expr.datatypes.core.DataType.is_multipoint) | Return True if an instance of a MultiPoint type. |\n| [is_multipolygon](#ibis.expr.datatypes.core.DataType.is_multipolygon) | Return True if an instance of a MultiPolygon type. |\n| [is_nested](#ibis.expr.datatypes.core.DataType.is_nested) | Return true if an instance of any nested (Array/Map/Struct) type. |\n| [is_null](#ibis.expr.datatypes.core.DataType.is_null) | Return true if an instance of a Null type. |\n| [is_numeric](#ibis.expr.datatypes.core.DataType.is_numeric) | Return true if an instance of a Numeric type. |\n| [is_point](#ibis.expr.datatypes.core.DataType.is_point) | Return true if an instance of a Point type. |\n| [is_polygon](#ibis.expr.datatypes.core.DataType.is_polygon) | Return true if an instance of a Polygon type. |\n| [is_primitive](#ibis.expr.datatypes.core.DataType.is_primitive) | Return true if an instance of a Primitive type. |\n| [is_signed_integer](#ibis.expr.datatypes.core.DataType.is_signed_integer) | Return true if an instance of a SignedInteger type. |\n| [is_string](#ibis.expr.datatypes.core.DataType.is_string) | Return true if an instance of a String type. |\n| [is_struct](#ibis.expr.datatypes.core.DataType.is_struct) | Return true if an instance of a Struct type. |\n| [is_temporal](#ibis.expr.datatypes.core.DataType.is_temporal) | Return true if an instance of a Temporal type. |\n| [is_time](#ibis.expr.datatypes.core.DataType.is_time) | Return true if an instance of a Time type. |\n| [is_timestamp](#ibis.expr.datatypes.core.DataType.is_timestamp) | Return true if an instance of a Timestamp type. |\n| [is_uint16](#ibis.expr.datatypes.core.DataType.is_uint16) | Return true if an instance of a UInt16 type. |\n| [is_uint32](#ibis.expr.datatypes.core.DataType.is_uint32) | Return true if an instance of a UInt32 type. |\n| [is_uint64](#ibis.expr.datatypes.core.DataType.is_uint64) | Return true if an instance of a UInt64 type. |\n| [is_uint8](#ibis.expr.datatypes.core.DataType.is_uint8) | Return true if an instance of a UInt8 type. |\n| [is_unknown](#ibis.expr.datatypes.core.DataType.is_unknown) | Return true if an instance of an Unknown type. |\n| [is_unsigned_integer](#ibis.expr.datatypes.core.DataType.is_unsigned_integer) | Return true if an instance of an UnsignedInteger type. |\n| [is_uuid](#ibis.expr.datatypes.core.DataType.is_uuid) | Return true if an instance of a UUID type. |\n| [is_variadic](#ibis.expr.datatypes.core.DataType.is_variadic) | Return true if an instance of a Variadic type. |\n| [to_dask](#ibis.expr.datatypes.core.DataType.to_dask) | Return the equivalent dask datatype. |\n| [to_numpy](#ibis.expr.datatypes.core.DataType.to_numpy) | Return the equivalent numpy datatype. |\n| [to_pandas](#ibis.expr.datatypes.core.DataType.to_pandas) | Return the equivalent pandas datatype. |\n| [to_pyarrow](#ibis.expr.datatypes.core.DataType.to_pyarrow) | Return the equivalent pyarrow datatype. |\n\n### from_dask { #ibis.expr.datatypes.core.DataType.from_dask }\n\n`from_dask(cls, dask_type, nullable=True)`\n\nReturn the equivalent ibis datatype.\n\n### from_numpy { #ibis.expr.datatypes.core.DataType.from_numpy }\n\n`from_numpy(cls, numpy_type, nullable=True)`\n\nReturn the equivalent ibis datatype.\n\n### from_pandas { #ibis.expr.datatypes.core.DataType.from_pandas }\n\n`from_pandas(cls, pandas_type, nullable=True)`\n\nReturn the equivalent ibis datatype.\n\n### from_pyarrow { #ibis.expr.datatypes.core.DataType.from_pyarrow }\n\n`from_pyarrow(cls, arrow_type, nullable=True)`\n\nReturn the equivalent ibis datatype.\n\n### is_array { #ibis.expr.datatypes.core.DataType.is_array }\n\n`is_array(self)`\n\nReturn True if an instance of an Array type.\n\n### is_binary { #ibis.expr.datatypes.core.DataType.is_binary }\n\n`is_binary(self)`\n\nReturn True if an instance of a Binary type.\n\n### is_boolean { #ibis.expr.datatypes.core.DataType.is_boolean }\n\n`is_boolean(self)`\n\nReturn True if an instance of a Boolean type.\n\n### is_date { #ibis.expr.datatypes.core.DataType.is_date }\n\n`is_date(self)`\n\nReturn True if an instance of a Date type.\n\n### is_decimal { #ibis.expr.datatypes.core.DataType.is_decimal }\n\n`is_decimal(self)`\n\nReturn True if an instance of a Decimal type.\n\n### is_enum { #ibis.expr.datatypes.core.DataType.is_enum }\n\n`is_enum(self)`\n\nReturn True if an instance of an Enum type.\n\n### is_float16 { #ibis.expr.datatypes.core.DataType.is_float16 }\n\n`is_float16(self)`\n\nReturn True if an instance of a Float16 type.\n\n### is_float32 { #ibis.expr.datatypes.core.DataType.is_float32 }\n\n`is_float32(self)`\n\nReturn True if an instance of a Float32 type.\n\n### is_float64 { #ibis.expr.datatypes.core.DataType.is_float64 }\n\n`is_float64(self)`\n\nReturn True if an instance of a Float64 type.\n\n### is_floating { #ibis.expr.datatypes.core.DataType.is_floating }\n\n`is_floating(self)`\n\nReturn True if an instance of any Floating type.\n\n### is_geospatial { #ibis.expr.datatypes.core.DataType.is_geospatial }\n\n`is_geospatial(self)`\n\nReturn True if an instance of a Geospatial type.\n\n### is_inet { #ibis.expr.datatypes.core.DataType.is_inet }\n\n`is_inet(self)`\n\nReturn True if an instance of an Inet type.\n\n### is_int16 { #ibis.expr.datatypes.core.DataType.is_int16 }\n\n`is_int16(self)`\n\nReturn True if an instance of an Int16 type.\n\n### is_int32 { #ibis.expr.datatypes.core.DataType.is_int32 }\n\n`is_int32(self)`\n\nReturn True if an instance of an Int32 type.\n\n### is_int64 { #ibis.expr.datatypes.core.DataType.is_int64 }\n\n`is_int64(self)`\n\nReturn True if an instance of an Int64 type.\n\n### is_int8 { #ibis.expr.datatypes.core.DataType.is_int8 }\n\n`is_int8(self)`\n\nReturn True if an instance of an Int8 type.\n\n### is_integer { #ibis.expr.datatypes.core.DataType.is_integer }\n\n`is_integer(self)`\n\nReturn True if an instance of any Integer type.\n\n### is_interval { #ibis.expr.datatypes.core.DataType.is_interval }\n\n`is_interval(self)`\n\nReturn True if an instance of an Interval type.\n\n### is_json { #ibis.expr.datatypes.core.DataType.is_json }\n\n`is_json(self)`\n\nReturn True if an instance of a JSON type.\n\n### is_linestring { #ibis.expr.datatypes.core.DataType.is_linestring }\n\n`is_linestring(self)`\n\nReturn True if an instance of a LineString type.\n\n### is_macaddr { #ibis.expr.datatypes.core.DataType.is_macaddr }\n\n`is_macaddr(self)`\n\nReturn True if an instance of a MACADDR type.\n\n### is_map { #ibis.expr.datatypes.core.DataType.is_map }\n\n`is_map(self)`\n\nReturn True if an instance of a Map type.\n\n### is_multilinestring { #ibis.expr.datatypes.core.DataType.is_multilinestring }\n\n`is_multilinestring(self)`\n\nReturn True if an instance of a MultiLineString type.\n\n### is_multipoint { #ibis.expr.datatypes.core.DataType.is_multipoint }\n\n`is_multipoint(self)`\n\nReturn True if an instance of a MultiPoint type.\n\n### is_multipolygon { #ibis.expr.datatypes.core.DataType.is_multipolygon }\n\n`is_multipolygon(self)`\n\nReturn True if an instance of a MultiPolygon type.\n\n### is_nested { #ibis.expr.datatypes.core.DataType.is_nested }\n\n`is_nested(self)`\n\nReturn true if an instance of any nested (Array/Map/Struct) type.\n\n### is_null { #ibis.expr.datatypes.core.DataType.is_null }\n\n`is_null(self)`\n\nReturn true if an instance of a Null type.\n\n### is_numeric { #ibis.expr.datatypes.core.DataType.is_numeric }\n\n`is_numeric(self)`\n\nReturn true if an instance of a Numeric type.\n\n### is_point { #ibis.expr.datatypes.core.DataType.is_point }\n\n`is_point(self)`\n\nReturn true if an instance of a Point type.\n\n### is_polygon { #ibis.expr.datatypes.core.DataType.is_polygon }\n\n`is_polygon(self)`\n\nReturn true if an instance of a Polygon type.\n\n### is_primitive { #ibis.expr.datatypes.core.DataType.is_primitive }\n\n`is_primitive(self)`\n\nReturn true if an instance of a Primitive type.\n\n### is_signed_integer { #ibis.expr.datatypes.core.DataType.is_signed_integer }\n\n`is_signed_integer(self)`\n\nReturn true if an instance of a SignedInteger type.\n\n### is_string { #ibis.expr.datatypes.core.DataType.is_string }\n\n`is_string(self)`\n\nReturn true if an instance of a String type.\n\n### is_struct { #ibis.expr.datatypes.core.DataType.is_struct }\n\n`is_struct(self)`\n\nReturn true if an instance of a Struct type.\n\n### is_temporal { #ibis.expr.datatypes.core.DataType.is_temporal }\n\n`is_temporal(self)`\n\nReturn true if an instance of a Temporal type.\n\n### is_time { #ibis.expr.datatypes.core.DataType.is_time }\n\n`is_time(self)`\n\nReturn true if an instance of a Time type.\n\n### is_timestamp { #ibis.expr.datatypes.core.DataType.is_timestamp }\n\n`is_timestamp(self)`\n\nReturn true if an instance of a Timestamp type.\n\n### is_uint16 { #ibis.expr.datatypes.core.DataType.is_uint16 }\n\n`is_uint16(self)`\n\nReturn true if an instance of a UInt16 type.\n\n### is_uint32 { #ibis.expr.datatypes.core.DataType.is_uint32 }\n\n`is_uint32(self)`\n\nReturn true if an instance of a UInt32 type.\n\n### is_uint64 { #ibis.expr.datatypes.core.DataType.is_uint64 }\n\n`is_uint64(self)`\n\nReturn true if an instance of a UInt64 type.\n\n### is_uint8 { #ibis.expr.datatypes.core.DataType.is_uint8 }\n\n`is_uint8(self)`\n\nReturn true if an instance of a UInt8 type.\n\n### is_unknown { #ibis.expr.datatypes.core.DataType.is_unknown }\n\n`is_unknown(self)`\n\nReturn true if an instance of an Unknown type.\n\n### is_unsigned_integer { #ibis.expr.datatypes.core.DataType.is_unsigned_integer }\n\n`is_unsigned_integer(self)`\n\nReturn true if an instance of an UnsignedInteger type.\n\n### is_uuid { #ibis.expr.datatypes.core.DataType.is_uuid }\n\n`is_uuid(self)`\n\nReturn true if an instance of a UUID type.\n\n### is_variadic { #ibis.expr.datatypes.core.DataType.is_variadic }\n\n`is_variadic(self)`\n\nReturn true if an instance of a Variadic type.\n\n### to_dask { #ibis.expr.datatypes.core.DataType.to_dask }\n\n`to_dask(self)`\n\nReturn the equivalent dask datatype.\n\n### to_numpy { #ibis.expr.datatypes.core.DataType.to_numpy }\n\n`to_numpy(self)`\n\nReturn the equivalent numpy datatype.\n\n### to_pandas { #ibis.expr.datatypes.core.DataType.to_pandas }\n\n`to_pandas(self)`\n\nReturn the equivalent pandas datatype.\n\n### to_pyarrow { #ibis.expr.datatypes.core.DataType.to_pyarrow }\n\n`to_pyarrow(self)`\n\nReturn the equivalent pyarrow datatype.\n\n# Date { #ibis.expr.datatypes.core.Date }\n\n`expr.datatypes.core.Date()`\n\nDate values.\n\n# Decimal { #ibis.expr.datatypes.core.Decimal }\n\n`expr.datatypes.core.Decimal(self, precision=None, scale=None, **kwargs)`\n\nFixed-precision decimal values.\n\n## Attributes\n\n| Name | Description |\n| --- | --- |\n| [largest](#ibis.expr.datatypes.core.Decimal.largest) | Return the largest type of decimal. |\n| [precision](#ibis.expr.datatypes.core.Decimal.precision) | The number of decimal places values of this type can hold. |\n| [scale](#ibis.expr.datatypes.core.Decimal.scale) | The number of values after the decimal point. |\n\n# Float16 { #ibis.expr.datatypes.core.Float16 }\n\n`expr.datatypes.core.Float16()`\n\n16-bit floating point numbers.\n\n# Float32 { #ibis.expr.datatypes.core.Float32 }\n\n`expr.datatypes.core.Float32()`\n\n32-bit floating point numbers.\n\n# Float64 { #ibis.expr.datatypes.core.Float64 }\n\n`expr.datatypes.core.Float64()`\n\n64-bit floating point numbers.\n\n# INET { #ibis.expr.datatypes.core.INET }\n\n`expr.datatypes.core.INET()`\n\nIP addresses.\n\n# Int16 { #ibis.expr.datatypes.core.Int16 }\n\n`expr.datatypes.core.Int16()`\n\nSigned 16-bit integers.\n\n# Int32 { #ibis.expr.datatypes.core.Int32 }\n\n`expr.datatypes.core.Int32()`\n\nSigned 32-bit integers.\n\n# Int64 { #ibis.expr.datatypes.core.Int64 }\n\n`expr.datatypes.core.Int64()`\n\nSigned 64-bit integers.\n\n# Int8 { #ibis.expr.datatypes.core.Int8 }\n\n`expr.datatypes.core.Int8()`\n\nSigned 8-bit integers.\n\n# Interval { #ibis.expr.datatypes.core.Interval }\n\n`expr.datatypes.core.Interval()`\n\nInterval values.\n\n## Attributes\n\n| Name | Description |\n| --- | --- |\n| [resolution](#ibis.expr.datatypes.core.Interval.resolution) | The interval unit's name. |\n| [unit](#ibis.expr.datatypes.core.Interval.unit) | The time unit of the interval. |\n\n# JSON { #ibis.expr.datatypes.core.JSON }\n\n`expr.datatypes.core.JSON()`\n\nJSON values.\n\n# LineString { #ibis.expr.datatypes.core.LineString }\n\n`expr.datatypes.core.LineString()`\n\nA sequence of 2 or more points.\n\n# MACADDR { #ibis.expr.datatypes.core.MACADDR }\n\n`expr.datatypes.core.MACADDR()`\n\nMedia Access Control (MAC) address of a network interface.\n\n# Map { #ibis.expr.datatypes.core.Map }\n\n`expr.datatypes.core.Map()`\n\nAssociative array values.\n\n# MultiLineString { #ibis.expr.datatypes.core.MultiLineString }\n\n`expr.datatypes.core.MultiLineString()`\n\nA set of one or more line strings.\n\n# MultiPoint { #ibis.expr.datatypes.core.MultiPoint }\n\n`expr.datatypes.core.MultiPoint()`\n\nA set of one or more points.\n\n# MultiPolygon { #ibis.expr.datatypes.core.MultiPolygon }\n\n`expr.datatypes.core.MultiPolygon()`\n\nA set of one or more polygons.\n\n# Null { #ibis.expr.datatypes.core.Null }\n\n`expr.datatypes.core.Null()`\n\nNull values.\n\n# Point { #ibis.expr.datatypes.core.Point }\n\n`expr.datatypes.core.Point()`\n\nA point described by two coordinates.\n\n# Polygon { #ibis.expr.datatypes.core.Polygon }\n\n`expr.datatypes.core.Polygon()`\n\nA set of one or more closed line strings.\n\nThe first line string represents the shape (external ring) and the\nrest represent holes in that shape (internal rings).\n\n# String { #ibis.expr.datatypes.core.String }\n\n`expr.datatypes.core.String()`\n\n## Notes\n\nBecause of differences in the way different backends handle strings, we\ncannot assume that strings are UTF-8 encoded.\n\n# Struct { #ibis.expr.datatypes.core.Struct }\n\n`expr.datatypes.core.Struct()`\n\nStructured values.\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [from_tuples](#ibis.expr.datatypes.core.Struct.from_tuples) | Construct a `Struct` type from pairs. |\n| [names](#ibis.expr.datatypes.core.Struct.names) | Return the names of the struct's fields. |\n| [types](#ibis.expr.datatypes.core.Struct.types) | Return the types of the struct's fields. |\n\n### from_tuples { #ibis.expr.datatypes.core.Struct.from_tuples }\n\n`from_tuples(cls, pairs, nullable=True)`\n\nConstruct a `Struct` type from pairs.\n\n#### Parameters\n\n| Name       | Type                                                                                                                                                                                | Description                                 | Default    |\n|------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------|------------|\n| `pairs`    | [Iterable](`collections.abc.Iterable`)\\[[tuple](`tuple`)\\[[str](`ibis.expr.datatypes.str`), [str](`ibis.expr.datatypes.str`) \\| [DataType](`ibis.expr.datatypes.core.DataType`)\\]\\] | An iterable of pairs of field name and type | _required_ |\n| `nullable` | [bool](`ibis.expr.datatypes.bool`)                                                                                                                                                  | Whether the type is nullable                | `True`     |\n\n#### Returns\n\n| Type                                        | Description               |\n|---------------------------------------------|---------------------------|\n| [Struct](`ibis.expr.datatypes.core.Struct`) | Struct data type instance |\n\n### names { #ibis.expr.datatypes.core.Struct.names }\n\n`names(self)`\n\nReturn the names of the struct's fields.\n\n### types { #ibis.expr.datatypes.core.Struct.types }\n\n`types(self)`\n\nReturn the types of the struct's fields.\n\n# Time { #ibis.expr.datatypes.core.Time }\n\n`expr.datatypes.core.Time()`\n\nTime values.\n\n# Timestamp { #ibis.expr.datatypes.core.Timestamp }\n\n`expr.datatypes.core.Timestamp()`\n\nTimestamp values.\n\n## Attributes\n\n| Name | Description |\n| --- | --- |\n| [scale](#ibis.expr.datatypes.core.Timestamp.scale) | The scale of the timestamp if known. |\n| [timezone](#ibis.expr.datatypes.core.Timestamp.timezone) | The timezone of values of this type. |\n| [unit](#ibis.expr.datatypes.core.Timestamp.unit) | Return the unit of the timestamp. |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [from_unit](#ibis.expr.datatypes.core.Timestamp.from_unit) | Return a timestamp type with the given unit and timezone. |\n\n### from_unit { #ibis.expr.datatypes.core.Timestamp.from_unit }\n\n`from_unit(cls, unit, timezone=None, nullable=True)`\n\nReturn a timestamp type with the given unit and timezone.\n\n# UInt16 { #ibis.expr.datatypes.core.UInt16 }\n\n`expr.datatypes.core.UInt16()`\n\nUnsigned 16-bit integers.\n\n# UInt32 { #ibis.expr.datatypes.core.UInt32 }\n\n`expr.datatypes.core.UInt32()`\n\nUnsigned 32-bit integers.\n\n# UInt64 { #ibis.expr.datatypes.core.UInt64 }\n\n`expr.datatypes.core.UInt64()`\n\nUnsigned 64-bit integers.\n\n# UInt8 { #ibis.expr.datatypes.core.UInt8 }\n\n`expr.datatypes.core.UInt8()`\n\nUnsigned 8-bit integers.\n\n# UUID { #ibis.expr.datatypes.core.UUID }\n\n`expr.datatypes.core.UUID()`\n\nA 128-bit number used to identify information in computer systems.\n\n",
    "supporting": [
      "datatypes_files"
    ],
    "filters": [],
    "includes": {}
  }
}