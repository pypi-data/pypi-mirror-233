{
  "hash": "e839c218033424d69d44c3e11ec904d1",
  "result": {
    "markdown": "---\ntitle: Column selectors\n---\n\n\n\nChoose Table columns based on dtype, regex, and other criteria\n\n# where { #ibis.selectors.where }\n\n`selectors.where(predicate)`\n\nSelect columns that satisfy `predicate`.\n\nUse this selector when one of the other selectors does not meet your needs.\n\n## Parameters\n\n| Name        | Type                                                                                    | Description                                                           | Default    |\n|-------------|-----------------------------------------------------------------------------------------|-----------------------------------------------------------------------|------------|\n| `predicate` | [Callable](`typing.Callable`)\\[\\[[ir](`ibis`).[Value](`ibis.Value`)\\], [bool](`bool`)\\] | A callable that accepts an ibis value expression and returns a `bool` | _required_ |\n\n## Examples\n\n\n::: {#e148cc41 .cell execution_count=1}\n``` {.python .cell-code}\n>>> import ibis\n>>> import ibis.selectors as s\n>>> t = ibis.table(dict(a=\"float32\"), name=\"t\")\n>>> expr = t.select(s.where(lambda col: col.get_name() == \"a\"))\n>>> expr.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```\n['a']\n```\n:::\n:::\n\n\n# numeric { #ibis.selectors.numeric }\n\n`selectors.numeric()`\n\nReturn numeric columns.\n\n## Examples\n\n::: {#4d8e0118 .cell execution_count=2}\n``` {.python .cell-code}\n>>> import ibis\n>>> import ibis.selectors as s\n>>> t = ibis.table(dict(a=\"int\", b=\"string\", c=\"array<string>\"), name=\"t\")\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">UnboundTable: t\n  a int64\n  b string\n  c array&lt;string&gt;\n</pre>\n```\n:::\n:::\n\n\n::: {#57c70982 .cell execution_count=3}\n``` {.python .cell-code}\n>>> expr = t.select(s.numeric())  # `a` has integer type, so it's numeric\n>>> expr.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\n['a']\n```\n:::\n:::\n\n\n## See Also\n\n[`of_type`](#ibis.selectors.of_type)\n\n# of_type { #ibis.selectors.of_type }\n\n`selectors.of_type(dtype)`\n\nSelect columns of type `dtype`.\n\n## Parameters\n\n| Name    | Type                                                                                                                   | Description                                    | Default    |\n|---------|------------------------------------------------------------------------------------------------------------------------|------------------------------------------------|------------|\n| `dtype` | [dt](`ibis`).[DataType](`ibis.DataType`) \\| [str](`str`) \\| [type](`type`)\\[[dt](`ibis`).[DataType](`ibis.DataType`)\\] | `DataType` instance, `str` or `DataType` class | _required_ |\n\n## Examples\n\nSelect according to a specific `DataType` instance\n\n::: {#55b545e3 .cell execution_count=4}\n``` {.python .cell-code}\n>>> import ibis\n>>> import ibis.expr.datatypes as dt\n>>> import ibis.selectors as s\n>>> t = ibis.table(\n...     dict(name=\"string\", siblings=\"array<string>\", parents=\"array<int64>\")\n... )\n>>> expr = t.select(s.of_type(dt.Array(dt.string)))\n>>> expr.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n['siblings']\n```\n:::\n:::\n\n\nStrings are also accepted\n\n::: {#bef5fa81 .cell execution_count=5}\n``` {.python .cell-code}\n>>> expr = t.select(s.of_type(\"array<string>\"))\n>>> expr.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n['siblings']\n```\n:::\n:::\n\n\nAbstract/unparametrized types may also be specified by their string name\n(e.g. \"integer\" for any integer type), or by passing in a `DataType` class\ninstead. The following options are equivalent.\n\n::: {#39d8c863 .cell execution_count=6}\n``` {.python .cell-code}\n>>> expr1 = t.select(s.of_type(\"array\"))\n>>> expr2 = t.select(s.of_type(dt.Array))\n>>> expr1.equals(expr2)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#f4375bff .cell execution_count=7}\n``` {.python .cell-code}\n>>> expr2.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n['siblings', 'parents']\n```\n:::\n:::\n\n\n## See Also\n\n[`numeric`](#ibis.selectors.numeric)\n\n# startswith { #ibis.selectors.startswith }\n\n`selectors.startswith(prefixes)`\n\nSelect columns whose name starts with one of `prefixes`.\n\n## Parameters\n\n| Name       | Type                                                  | Description                              | Default    |\n|------------|-------------------------------------------------------|------------------------------------------|------------|\n| `prefixes` | [str](`str`) \\| [tuple](`tuple`)\\[[str](`str`), ...\\] | Prefixes to compare column names against | _required_ |\n\n## Examples\n\n::: {#dfead034 .cell execution_count=8}\n``` {.python .cell-code}\n>>> import ibis\n>>> import ibis.selectors as s\n>>> t = ibis.table(dict(apples=\"int\", oranges=\"float\", bananas=\"bool\"), name=\"t\")\n>>> expr = t.select(s.startswith((\"a\", \"b\")))\n>>> expr.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n['apples', 'bananas']\n```\n:::\n:::\n\n\n## See Also\n\n[`endswith`](#ibis.selectors.endswith)\n\n# endswith { #ibis.selectors.endswith }\n\n`selectors.endswith(suffixes)`\n\nSelect columns whose name ends with one of `suffixes`.\n\n## Parameters\n\n| Name       | Type                                                  | Description                              | Default    |\n|------------|-------------------------------------------------------|------------------------------------------|------------|\n| `suffixes` | [str](`str`) \\| [tuple](`tuple`)\\[[str](`str`), ...\\] | Suffixes to compare column names against | _required_ |\n\n## See Also\n\n[`startswith`](#ibis.selectors.startswith)\n\n# contains { #ibis.selectors.contains }\n\n`selectors.contains(needles, how=any)`\n\nReturn columns whose name contains `needles`.\n\n## Parameters\n\n| Name      | Type                                                                                                          | Description                                                                     | Default    |\n|-----------|---------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------|------------|\n| `needles` | [str](`str`) \\| [tuple](`tuple`)\\[[str](`str`), ...\\]                                                         | One or more strings to search for in column names                               | _required_ |\n| `how`     | [Callable](`typing.Callable`)\\[\\[[Iterable](`collections.abc.Iterable`)\\[[bool](`bool`)\\]\\], [bool](`bool`)\\] | A boolean reduction to allow the configuration of how `needles` are summarized. | `any`      |\n\n## Examples\n\nSelect columns that contain either `\"a\"` or `\"b\"`\n\n::: {#db8c018e .cell execution_count=9}\n``` {.python .cell-code}\n>>> import ibis\n>>> import ibis.selectors as s\n>>> t = ibis.table(\n...     dict(\n...         a=\"int64\", b=\"string\", c=\"float\", d=\"array<int16>\", ab=\"struct<x: int>\"\n...     )\n... )\n>>> expr = t.select(s.contains((\"a\", \"b\")))\n>>> expr.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n['a', 'b', 'ab']\n```\n:::\n:::\n\n\nSelect columns that contain all of `\"a\"` and `\"b\"`, that is, both `\"a\"` and\n`\"b\"` must be in each column's name to match.\n\n::: {#14136662 .cell execution_count=10}\n``` {.python .cell-code}\n>>> expr = t.select(s.contains((\"a\", \"b\"), how=all))\n>>> expr.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n['ab']\n```\n:::\n:::\n\n\n## See Also\n\n[`matches`](#ibis.selectors.matches)\n\n# matches { #ibis.selectors.matches }\n\n`selectors.matches(regex)`\n\nReturn columns whose name matches the regular expression `regex`.\n\n## Parameters\n\n| Name    | Type                                               | Description                     | Default    |\n|---------|----------------------------------------------------|---------------------------------|------------|\n| `regex` | [str](`str`) \\| [re](`re`).[Pattern](`re.Pattern`) | A string or `re.Pattern` object | _required_ |\n\n## Examples\n\n::: {#4f16295e .cell execution_count=11}\n``` {.python .cell-code}\n>>> import ibis\n>>> import ibis.selectors as s\n>>> t = ibis.table(dict(ab=\"string\", abd=\"int\", be=\"array<string>\"))\n>>> expr = t.select(s.matches(r\"ab+\"))\n>>> expr.columns\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n['ab', 'abd']\n```\n:::\n:::\n\n\n## See Also\n\n[`contains`](#ibis.selectors.contains)\n\n# any_of { #ibis.selectors.any_of }\n\n`selectors.any_of(*predicates)`\n\nInclude columns satisfying any of `predicates`.\n\n# all_of { #ibis.selectors.all_of }\n\n`selectors.all_of(*predicates)`\n\nInclude columns satisfying all of `predicates`.\n\n# c { #ibis.selectors.c }\n\n`selectors.c(*names)`\n\nSelect specific column names.\n\n# across { #ibis.selectors.across }\n\n`selectors.across(selector, func, names=None)`\n\nApply data transformations across multiple columns.\n\n## Parameters\n\n| Name       | Type                                                                                                                                                                                                                                                                                                                                                                               | Description                                                                                                                                               | Default    |\n|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `selector` | [Selector](`ibis.selectors.Selector`) \\| [Iterable](`collections.abc.Iterable`)\\[[str](`str`)\\] \\| [str](`str`)                                                                                                                                                                                                                                                                    | An expression that selects columns on which the transformation function will be applied, an iterable of `str` column names or a single `str` column name. | _required_ |\n| `func`     | [Deferred](`ibis.expr.deferred.Deferred`) \\| [Callable](`typing.Callable`)\\[\\[[ir](`ibis`).[Value](`ibis.Value`)\\], [ir](`ibis`).[Value](`ibis.Value`)\\] \\| [Mapping](`collections.abc.Mapping`)\\[[str](`str`) \\| None, [Deferred](`ibis.expr.deferred.Deferred`) \\| [Callable](`typing.Callable`)\\[\\[[ir](`ibis`).[Value](`ibis.Value`)\\], [ir](`ibis`).[Value](`ibis.Value`)\\]\\] | A function (or dictionary of functions) to use to transform the data.                                                                                     | _required_ |\n| `names`    | [str](`str`) \\| [Callable](`typing.Callable`)\\[\\[[str](`str`), [str](`str`) \\| None\\], [str](`str`)\\] \\| None                                                                                                                                                                                                                                                                      | A lambda function or a format string to name the columns created by the transformation function.                                                          | `None`     |\n\n## Returns\n\n| Type                              | Description                 |\n|-----------------------------------|-----------------------------|\n| [Across](`ibis.selectors.Across`) | An `Across` selector object |\n\n## Examples\n\n::: {#467bc645 .cell execution_count=12}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> from ibis import _, selectors as s\n>>> t = ibis.examples.penguins.fetch()\n>>> t.select(s.startswith(\"bill\")).mutate(\n...     s.across(s.numeric(), dict(centered=_ - _.mean()), names=\"{fn}_{col}\")\n... )\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/Users/cody/repos/ibis-birdbrain/venv/lib/python3.11/site-packages/google/auth/_default.py:76: UserWarning:\n\nYour application has authenticated using end user credentials from Google Cloud SDK without a quota project. You might receive a \"quota exceeded\" or \"API not enabled\" error. See the following page for troubleshooting: https://cloud.google.com/docs/authentication/adc-troubleshooting/user-creds. \n\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=12}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> centered_bill_length_mm </span>┃<span style=\"font-weight: bold\"> centered_bill_depth_mm </span>┃\n┡━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>                 │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>                │\n├────────────────┼───────────────┼─────────────────────────┼────────────────────────┤\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.7</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-4.82193</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.54883</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.5</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.4</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-4.42193</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.24883</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">40.3</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.0</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-3.62193</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.84883</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">nan</span> │           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">nan</span> │                     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">nan</span> │                    <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">nan</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">36.7</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">19.3</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-7.22193</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.14883</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.3</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">20.6</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-4.62193</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.44883</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">38.9</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">17.8</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-5.02193</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.64883</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">39.2</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">19.6</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-4.72193</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.44883</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">34.1</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">18.1</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-9.82193</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.94883</span> │\n│           <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">42.0</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">20.2</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.92193</span> │                <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3.04883</span> │\n│              <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │             <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │                       <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │                      <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└────────────────┴───────────────┴─────────────────────────┴────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n# if_any { #ibis.selectors.if_any }\n\n`selectors.if_any(selector, predicate)`\n\nReturn the **disjunction** of `predicate` applied on all `selector` columns.\n\n## Parameters\n\n| Name        | Type                                                                       | Description                                                                                 | Default    |\n|-------------|----------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|------------|\n| `selector`  | [Selector](`ibis.selectors.Selector`)                                      | A column selector                                                                           | _required_ |\n| `predicate` | [Deferred](`ibis.expr.deferred.Deferred`) \\| [Callable](`typing.Callable`) | A callable or deferred object defining a predicate to apply to each column from `selector`. | _required_ |\n\n## Examples\n\n::: {#1899036c .cell execution_count=13}\n``` {.python .cell-code}\n>>> import ibis\n>>> from ibis import selectors as s, _\n>>> ibis.options.interactive = True\n>>> penguins = ibis.examples.penguins.fetch()\n>>> cols = s.across(s.endswith(\"_mm\"), (_ - _.mean()) / _.std())\n>>> expr = penguins.mutate(cols).filter(s.if_any(s.endswith(\"_mm\"), _.abs() > 2))\n>>> expr_by_hand = penguins.mutate(cols).filter(\n...     (_.bill_length_mm.abs() > 2)\n...     | (_.bill_depth_mm.abs() > 2)\n...     | (_.flipper_length_mm.abs() > 2)\n... )\n>>> expr.equals(expr_by_hand)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#5f5d7e79 .cell execution_count=14}\n``` {.python .cell-code}\n>>> expr\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> body_mass_g </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.102918</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.733585</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-2.056265</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3150</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.113200</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.430972</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.068326</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5700</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.871441</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.076542</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.068326</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">6050</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.900745</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.734769</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.139439</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5650</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.076570</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.177807</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.068326</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5700</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0.856789</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.582871</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.068326</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5800</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.497815</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.076542</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.068326</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5550</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2009</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.387925</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.430972</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.068326</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5500</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2009</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe</span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.047266</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.582871</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2.068326</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5850</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2009</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream </span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-2.165189</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.836035</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-0.918447</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3050</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2009</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>      │              <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │             <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │                 <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │           <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span>      │     <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">…</span> │\n└─────────┴────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n# if_all { #ibis.selectors.if_all }\n\n`selectors.if_all(selector, predicate)`\n\nReturn the **conjunction** of `predicate` applied on all `selector` columns.\n\n## Parameters\n\n| Name        | Type                                                                       | Description                                                                                 | Default    |\n|-------------|----------------------------------------------------------------------------|---------------------------------------------------------------------------------------------|------------|\n| `selector`  | [Selector](`ibis.selectors.Selector`)                                      | A column selector                                                                           | _required_ |\n| `predicate` | [Deferred](`ibis.expr.deferred.Deferred`) \\| [Callable](`typing.Callable`) | A callable or deferred object defining a predicate to apply to each column from `selector`. | _required_ |\n\n## Examples\n\n::: {#d79051af .cell execution_count=15}\n``` {.python .cell-code}\n>>> import ibis\n>>> from ibis import selectors as s, _\n>>> ibis.options.interactive = True\n>>> penguins = ibis.examples.penguins.fetch()\n>>> cols = s.across(s.endswith(\"_mm\"), (_ - _.mean()) / _.std())\n>>> expr = penguins.mutate(cols).filter(s.if_all(s.endswith(\"_mm\"), _.abs() > 1))\n>>> expr_by_hand = penguins.mutate(cols).filter(\n...     (_.bill_length_mm.abs() > 1)\n...     & (_.bill_depth_mm.abs() > 1)\n...     & (_.flipper_length_mm.abs() > 1)\n... )\n>>> expr.equals(expr_by_hand)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nTrue\n```\n:::\n:::\n\n\n::: {#bb91b626 .cell execution_count=16}\n``` {.python .cell-code}\n>>> expr\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━┳━━━━━━━━┳━━━━━━━┓\n┃<span style=\"font-weight: bold\"> species </span>┃<span style=\"font-weight: bold\"> island    </span>┃<span style=\"font-weight: bold\"> bill_length_mm </span>┃<span style=\"font-weight: bold\"> bill_depth_mm </span>┃<span style=\"font-weight: bold\"> flipper_length_mm </span>┃<span style=\"font-weight: bold\"> body_mass_g </span>┃<span style=\"font-weight: bold\"> sex    </span>┃<span style=\"font-weight: bold\"> year  </span>┃\n┡━━━━━━━━━╇━━━━━━━━━━━╇━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━╇━━━━━━━━╇━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>  │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>        │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">float64</span>           │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>       │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span> │\n├─────────┼───────────┼────────────────┼───────────────┼───────────────────┼─────────────┼────────┼───────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Dream    </span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.157863</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.088015</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.416243</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3300</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">female</span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Adelie </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Torgersen</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.231123</span> │      <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.138648</span> │         <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.202902</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3900</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.149830</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.443630</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.214962</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5700</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2007</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.039940</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.089200</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.072735</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">4750</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.131515</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.089200</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.712757</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5000</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.241405</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.089200</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.570530</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5550</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2008</span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Gentoo </span> │ <span style=\"color: #008000; text-decoration-color: #008000\">Biscoe   </span> │       <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.351295</span> │     <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1.494263</span> │          <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1.214962</span> │        <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">5300</span> │ <span style=\"color: #008000; text-decoration-color: #008000\">male  </span> │  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2009</span> │\n└─────────┴───────────┴────────────────┴───────────────┴───────────────────┴─────────────┴────────┴───────┘\n</pre>\n```\n:::\n:::\n\n\n# r { #ibis.selectors.r }\n\n`selectors.r`\n\nRanges of columns.\n\n# first { #ibis.selectors.first }\n\n`selectors.first()`\n\nReturn the first column of a table.\n\n# last { #ibis.selectors.last }\n\n`selectors.last()`\n\nReturn the last column of a table.\n\n# all { #ibis.selectors.all }\n\n`selectors.all()`\n\nReturn every column from a table.\n\n",
    "supporting": [
      "selectors_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}