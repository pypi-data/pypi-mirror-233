{
  "hash": "e71e1322b45ea91bb516d31462ba07fd",
  "result": {
    "markdown": "---\ntitle: String expressions\n---\n\n\n\nAll string operations are valid for both scalars and columns.\n\n# StringValue { #ibis.expr.types.strings.StringValue }\n\n`expr.types.strings.StringValue()`\n\n\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [ascii_str](#ibis.expr.types.strings.StringValue.ascii_str) | Return the numeric ASCII code of the first character of a string. |\n| [authority](#ibis.expr.types.strings.StringValue.authority) | Parse a URL and extract authority. |\n| [capitalize](#ibis.expr.types.strings.StringValue.capitalize) | Capitalize the input string. |\n| [concat](#ibis.expr.types.strings.StringValue.concat) | Concatenate strings. |\n| [contains](#ibis.expr.types.strings.StringValue.contains) | Return whether the expression contains `substr`. |\n| [convert_base](#ibis.expr.types.strings.StringValue.convert_base) | Convert a string representing an integer from one base to another. |\n| [endswith](#ibis.expr.types.strings.StringValue.endswith) | Determine if `self` ends with `end`. |\n| [file](#ibis.expr.types.strings.StringValue.file) | Parse a URL and extract file. |\n| [find](#ibis.expr.types.strings.StringValue.find) | Return the position of the first occurrence of substring. |\n| [find_in_set](#ibis.expr.types.strings.StringValue.find_in_set) | Find the first occurrence of `str_list` within a list of strings. |\n| [fragment](#ibis.expr.types.strings.StringValue.fragment) | Parse a URL and extract fragment identifier. |\n| [hashbytes](#ibis.expr.types.strings.StringValue.hashbytes) | Compute the binary hash value of the input. |\n| [host](#ibis.expr.types.strings.StringValue.host) | Parse a URL and extract host. |\n| [ilike](#ibis.expr.types.strings.StringValue.ilike) | Match `patterns` against `self`, case-insensitive. |\n| [join](#ibis.expr.types.strings.StringValue.join) | Join a list of strings using `self` as the separator. |\n| [left](#ibis.expr.types.strings.StringValue.left) | Return the `nchars` left-most characters. |\n| [length](#ibis.expr.types.strings.StringValue.length) | Compute the length of a string. |\n| [levenshtein](#ibis.expr.types.strings.StringValue.levenshtein) | Return the Levenshtein distance between two strings. |\n| [like](#ibis.expr.types.strings.StringValue.like) | Match `patterns` against `self`, case-sensitive. |\n| [lower](#ibis.expr.types.strings.StringValue.lower) | Convert string to all lowercase. |\n| [lpad](#ibis.expr.types.strings.StringValue.lpad) | Pad `arg` by truncating on the right or padding on the left. |\n| [lstrip](#ibis.expr.types.strings.StringValue.lstrip) | Remove whitespace from the left side of string. |\n| [path](#ibis.expr.types.strings.StringValue.path) | Parse a URL and extract path. |\n| [protocol](#ibis.expr.types.strings.StringValue.protocol) | Parse a URL and extract protocol. |\n| [query](#ibis.expr.types.strings.StringValue.query) | Parse a URL and returns query strring or query string parameter. |\n| [re_extract](#ibis.expr.types.strings.StringValue.re_extract) | Return the specified match at `index` from a regex `pattern`. |\n| [re_replace](#ibis.expr.types.strings.StringValue.re_replace) | Replace match found by regex `pattern` with `replacement`. |\n| [re_search](#ibis.expr.types.strings.StringValue.re_search) | Return whether the values match `pattern`. |\n| [repeat](#ibis.expr.types.strings.StringValue.repeat) | Repeat a string `n` times. |\n| [replace](#ibis.expr.types.strings.StringValue.replace) | Replace each exact match of `pattern` with `replacement`. |\n| [reverse](#ibis.expr.types.strings.StringValue.reverse) | Reverse the characters of a string. |\n| [right](#ibis.expr.types.strings.StringValue.right) | Return up to `nchars` from the end of each string. |\n| [rpad](#ibis.expr.types.strings.StringValue.rpad) | Pad `self` by truncating or padding on the right. |\n| [rstrip](#ibis.expr.types.strings.StringValue.rstrip) | Remove whitespace from the right side of string. |\n| [split](#ibis.expr.types.strings.StringValue.split) | Split as string on `delimiter`. |\n| [startswith](#ibis.expr.types.strings.StringValue.startswith) | Determine whether `self` starts with `end`. |\n| [strip](#ibis.expr.types.strings.StringValue.strip) | Remove whitespace from left and right sides of a string. |\n| [substr](#ibis.expr.types.strings.StringValue.substr) | Extract a substring. |\n| [to_timestamp](#ibis.expr.types.strings.StringValue.to_timestamp) | Parse a string and return a timestamp. |\n| [translate](#ibis.expr.types.strings.StringValue.translate) | Replace `from_str` characters in `self` characters in `to_str`. |\n| [upper](#ibis.expr.types.strings.StringValue.upper) | Convert string to all uppercase. |\n| [userinfo](#ibis.expr.types.strings.StringValue.userinfo) | Parse a URL and extract user info. |\n\n### ascii_str { #ibis.expr.types.strings.StringValue.ascii_str }\n\n`ascii_str(self)`\n\nReturn the numeric ASCII code of the first character of a string.\n\n#### Returns\n\n| Type                           | Description                                    |\n|--------------------------------|------------------------------------------------|\n| [IntegerValue](`IntegerValue`) | ASCII code of the first character of the input |\n\n#### Examples\n\n\n::: {#b1bf3e5a .cell execution_count=1}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"def\", \"ghi\"]})\n>>> t.s.ascii_str()\n```\n\n::: {.cell-output .cell-output-display execution_count=1}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StringAscii(s) </span>┃\n┡━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int32</span>          │\n├────────────────┤\n│             <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">97</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">100</span> │\n│            <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">103</span> │\n└────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### authority { #ibis.expr.types.strings.StringValue.authority }\n\n`authority(self)`\n\nParse a URL and extract authority.\n\n#### Examples\n\n::: {#a9b88372 .cell execution_count=2}\n``` {.python .cell-code}\n>>> import ibis\n>>> url = ibis.literal(\"https://user:pass@example.com:80/docs/books\")\n>>> result = url.authority()  # user:pass@example.com:80\n```\n:::\n\n\n#### Returns\n\n| Type                                                 | Description            |\n|------------------------------------------------------|------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Extracted string value |\n\n### capitalize { #ibis.expr.types.strings.StringValue.capitalize }\n\n`capitalize(self)`\n\nCapitalize the input string.\n\n#### Returns\n\n| Type                                                 | Description        |\n|------------------------------------------------------|--------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Capitalized string |\n\n#### Examples\n\n::: {#ebdb5aa0 .cell execution_count=3}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"def\", \"ghi\"]})\n>>> t.s.capitalize()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Capitalize(s) </span>┃\n┡━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>        │\n├───────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Abc          </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Def          </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">Ghi          </span> │\n└───────────────┘\n</pre>\n```\n:::\n:::\n\n\n### concat { #ibis.expr.types.strings.StringValue.concat }\n\n`concat(self, other, *args)`\n\nConcatenate strings.\n\n#### Parameters\n\n| Name    | Type                                                                 | Description                       | Default    |\n|---------|----------------------------------------------------------------------|-----------------------------------|------------|\n| `other` | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | String to concatenate             | _required_ |\n| `args`  | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | Additional strings to concatenate | `()`       |\n\n#### Returns\n\n| Type                                                 | Description              |\n|------------------------------------------------------|--------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | All strings concatenated |\n\n#### Examples\n\n::: {#088a79d9 .cell execution_count=4}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"bac\", \"bca\"]})\n>>> t.s.concat(\"xyz\")\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StringConcat() </span>┃\n┡━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>         │\n├────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">abcxyz        </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">bacxyz        </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">bcaxyz        </span> │\n└────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### contains { #ibis.expr.types.strings.StringValue.contains }\n\n`contains(self, substr)`\n\nReturn whether the expression contains `substr`.\n\n#### Parameters\n\n| Name     | Type                                                                 | Description                  | Default    |\n|----------|----------------------------------------------------------------------|------------------------------|------------|\n| `substr` | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | Substring for which to check | _required_ |\n\n#### Returns\n\n| Type                           | Description                                                   |\n|--------------------------------|---------------------------------------------------------------|\n| [BooleanValue](`BooleanValue`) | Boolean indicating the presence of `substr` in the expression |\n\n#### Examples\n\n::: {#c8237393 .cell execution_count=5}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"bab\", \"ddd\", \"eaf\"]})\n>>> t.s.contains(\"a\")\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StringContains(s, 'a') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>                │\n├────────────────────────┤\n│ True                   │\n│ False                  │\n│ True                   │\n└────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### convert_base { #ibis.expr.types.strings.StringValue.convert_base }\n\n`convert_base(self, from_base, to_base)`\n\nConvert a string representing an integer from one base to another.\n\n#### Parameters\n\n| Name        | Type                                                             | Description                    | Default    |\n|-------------|------------------------------------------------------------------|--------------------------------|------------|\n| `from_base` | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) | Numeric base of the expression | _required_ |\n| `to_base`   | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) | New base                       | _required_ |\n\n#### Returns\n\n| Type                           | Description          |\n|--------------------------------|----------------------|\n| [IntegerValue](`IntegerValue`) | Converted expression |\n\n### endswith { #ibis.expr.types.strings.StringValue.endswith }\n\n`endswith(self, end)`\n\nDetermine if `self` ends with `end`.\n\n#### Parameters\n\n| Name   | Type                                                                 | Description         | Default    |\n|--------|----------------------------------------------------------------------|---------------------|------------|\n| `end`  | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | Suffix to check for | _required_ |\n\n#### Returns\n\n| Type                           | Description                                       |\n|--------------------------------|---------------------------------------------------|\n| [BooleanValue](`BooleanValue`) | Boolean indicating whether `self` ends with `end` |\n\n#### Examples\n\n::: {#849070fe .cell execution_count=6}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"Ibis project\", \"GitHub\"]})\n>>> t.s.endswith(\"project\")\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> EndsWith(s, 'project') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>                │\n├────────────────────────┤\n│ True                   │\n│ False                  │\n└────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### file { #ibis.expr.types.strings.StringValue.file }\n\n`file(self)`\n\nParse a URL and extract file.\n\n#### Examples\n\n::: {#c38b6b68 .cell execution_count=7}\n``` {.python .cell-code}\n>>> import ibis\n>>> url = ibis.literal(\n...     \"https://example.com:80/docs/books/tutorial/index.html?name=networking\"\n... )\n>>> result = url.file()  # docs/books/tutorial/index.html?name=networking\n```\n:::\n\n\n#### Returns\n\n| Type                                                 | Description            |\n|------------------------------------------------------|------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Extracted string value |\n\n### find { #ibis.expr.types.strings.StringValue.find }\n\n`find(self, substr, start=None, end=None)`\n\nReturn the position of the first occurrence of substring.\n\n#### Parameters\n\n| Name     | Type                                                                     | Description                                                              | Default    |\n|----------|--------------------------------------------------------------------------|--------------------------------------------------------------------------|------------|\n| `substr` | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`)     | Substring to search for                                                  | _required_ |\n| `start`  | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) \\| None | Zero based index of where to start the search                            | `None`     |\n| `end`    | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) \\| None | Zero based index of where to stop the search. Currently not implemented. | `None`     |\n\n#### Returns\n\n| Type                           | Description                                         |\n|--------------------------------|-----------------------------------------------------|\n| [IntegerValue](`IntegerValue`) | Position of `substr` in `arg` starting from `start` |\n\n#### Examples\n\n::: {#92b26a68 .cell execution_count=8}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"bac\", \"bca\"]})\n>>> t.s.find(\"a\")\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StringFind(s, 'a') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>              │\n├────────────────────┤\n│                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">0</span> │\n│                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│                  <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n└────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#1cdcdf0e .cell execution_count=9}\n``` {.python .cell-code}\n>>> t.s.find(\"z\")\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StringFind(s, 'z') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int64</span>              │\n├────────────────────┤\n│                 <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1</span> │\n│                 <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1</span> │\n│                 <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">-1</span> │\n└────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### find_in_set { #ibis.expr.types.strings.StringValue.find_in_set }\n\n`find_in_set(self, str_list)`\n\nFind the first occurrence of `str_list` within a list of strings.\n\nNo string in `str_list` can have a comma.\n\n#### Parameters\n\n| Name       | Type                                          | Description         | Default    |\n|------------|-----------------------------------------------|---------------------|------------|\n| `str_list` | [Sequence](`typing.Sequence`)\\[[str](`str`)\\] | Sequence of strings | _required_ |\n\n#### Returns\n\n| Type                           | Description                                                                                     |\n|--------------------------------|-------------------------------------------------------------------------------------------------|\n| [IntegerValue](`IntegerValue`) | Position of `str_list` in `self`. Returns -1 if `self` isn't found or if `self` contains `','`. |\n\n#### Examples\n\n::: {#9c038843 .cell execution_count=10}\n``` {.python .cell-code}\n>>> import ibis\n>>> table = ibis.table(dict(string_col=\"string\"))\n>>> result = table.string_col.find_in_set([\"a\", \"b\"])\n```\n:::\n\n\n### fragment { #ibis.expr.types.strings.StringValue.fragment }\n\n`fragment(self)`\n\nParse a URL and extract fragment identifier.\n\n#### Examples\n\n::: {#fcc49c38 .cell execution_count=11}\n``` {.python .cell-code}\n>>> import ibis\n>>> url = ibis.literal(\"https://example.com:80/docs/#DOWNLOADING\")\n>>> result = url.fragment()  # DOWNLOADING\n```\n:::\n\n\n#### Returns\n\n| Type                                                 | Description            |\n|------------------------------------------------------|------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Extracted string value |\n\n### hashbytes { #ibis.expr.types.strings.StringValue.hashbytes }\n\n`hashbytes(self, how='sha256')`\n\nCompute the binary hash value of the input.\n\n#### Parameters\n\n| Name   | Type                                                             | Description           | Default    |\n|--------|------------------------------------------------------------------|-----------------------|------------|\n| `how`  | [Literal](`typing.Literal`)\\['md5', 'sha1', 'sha256', 'sha512'\\] | Hash algorithm to use | `'sha256'` |\n\n#### Returns\n\n| Type                         | Description       |\n|------------------------------|-------------------|\n| [BinaryValue](`BinaryValue`) | Binary expression |\n\n### host { #ibis.expr.types.strings.StringValue.host }\n\n`host(self)`\n\nParse a URL and extract host.\n\n#### Examples\n\n::: {#a4b05154 .cell execution_count=12}\n``` {.python .cell-code}\n>>> import ibis\n>>> url = ibis.literal(\"https://user:pass@example.com:80/docs/books\")\n>>> result = url.host()  # example.com\n```\n:::\n\n\n#### Returns\n\n| Type                                                 | Description            |\n|------------------------------------------------------|------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Extracted string value |\n\n### ilike { #ibis.expr.types.strings.StringValue.ilike }\n\n`ilike(self, patterns)`\n\nMatch `patterns` against `self`, case-insensitive.\n\nThis function is modeled after SQL's `ILIKE` directive. Use `%` as a\nmultiple-character wildcard or `_` as a single-character wildcard.\n\nUse `re_search` or `rlike` for regular expression-based matching.\n\n#### Parameters\n\n| Name       | Type                                                                                                                                                                          | Description                                                                                                       | Default    |\n|------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|------------|\n| `patterns` | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) \\| [Iterable](`typing.Iterable`)\\[[str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`)\\] | If `pattern` is a list, then if any pattern matches the input then the corresponding row in the output is `True`. | _required_ |\n\n#### Returns\n\n| Type                           | Description               |\n|--------------------------------|---------------------------|\n| [BooleanValue](`BooleanValue`) | Column indicating matches |\n\n#### Examples\n\n::: {#9cba78d2 .cell execution_count=13}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"Ibis project\", \"GitHub\"]})\n>>> t.s.ilike(\"%PROJect\")\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StringSQLILike(s, '%PROJect') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>                       │\n├───────────────────────────────┤\n│ True                          │\n│ False                         │\n└───────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### join { #ibis.expr.types.strings.StringValue.join }\n\n`join(self, strings)`\n\nJoin a list of strings using `self` as the separator.\n\n#### Parameters\n\n| Name      | Type                                                                                                                                                  | Description                | Default    |\n|-----------|-------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------|------------|\n| `strings` | [Sequence](`typing.Sequence`)\\[[str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`)\\] \\| [ir](`ibis`).[ArrayValue](`ibis.ArrayValue`) | Strings to join with `arg` | _required_ |\n\n#### Returns\n\n| Type                                                 | Description   |\n|------------------------------------------------------|---------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Joined string |\n\n#### Examples\n\n::: {#d2162222 .cell execution_count=14}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"arr\": [[\"a\", \"b\", \"c\"], None, [], [\"b\", None]]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> arr                </span>┃\n┡━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;string&gt;</span>      │\n├────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>               │\n│ <span style=\"font-weight: bold\">[]</span>                 │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>, <span style=\"color: #800080; text-decoration-color: #800080; font-style: italic\">None</span><span style=\"font-weight: bold\">]</span>        │\n└────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#f9734c2f .cell execution_count=15}\n``` {.python .cell-code}\n>>> ibis.literal(\"|\").join(t.arr)\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> ArrayStringJoin('|', arr) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                    │\n├───────────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a|b|c                    </span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                      │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">NULL</span>                      │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b                        </span> │\n└───────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n#### See Also\n\n[`ArrayValue.join`](./expression-collections.qmd#ibis.expr.types.arrays.ArrayValue.join)\n\n### left { #ibis.expr.types.strings.StringValue.left }\n\n`left(self, nchars)`\n\nReturn the `nchars` left-most characters.\n\n#### Parameters\n\n| Name     | Type                                                             | Description                            | Default    |\n|----------|------------------------------------------------------------------|----------------------------------------|------------|\n| `nchars` | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) | Maximum number of characters to return | _required_ |\n\n#### Returns\n\n| Type                                                 | Description               |\n|------------------------------------------------------|---------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Characters from the start |\n\n#### Examples\n\n::: {#d3cc3c03 .cell execution_count=16}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"defg\", \"hijlk\"]})\n>>> t.s.left(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Substring(s, 0, 2) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>             │\n├────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">ab                </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">de                </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">hi                </span> │\n└────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### length { #ibis.expr.types.strings.StringValue.length }\n\n`length(self)`\n\nCompute the length of a string.\n\n#### Returns\n\n| Type                           | Description                                 |\n|--------------------------------|---------------------------------------------|\n| [IntegerValue](`IntegerValue`) | The length of each string in the expression |\n\n#### Examples\n\n::: {#9eaf837c .cell execution_count=17}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"aaa\", \"a\", \"aa\"]})\n>>> t.s.length()\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StringLength(s) </span>┃\n┡━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">int32</span>           │\n├─────────────────┤\n│               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">3</span> │\n│               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span> │\n│               <span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">2</span> │\n└─────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### levenshtein { #ibis.expr.types.strings.StringValue.levenshtein }\n\n`levenshtein(self, other)`\n\nReturn the Levenshtein distance between two strings.\n\n#### Parameters\n\n| Name    | Type                                                 | Description          | Default    |\n|---------|------------------------------------------------------|----------------------|------------|\n| `other` | [StringValue](`ibis.expr.types.strings.StringValue`) | String to compare to | _required_ |\n\n#### Returns\n\n| Type                           | Description                               |\n|--------------------------------|-------------------------------------------|\n| [IntegerValue](`IntegerValue`) | The edit distance between the two strings |\n\n#### Examples\n\n::: {#6bc9a6d2 .cell execution_count=18}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> s = ibis.literal(\"kitten\")\n>>> s.levenshtein(\"sitting\")\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"></pre>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=18}\n\n::: {.ansi-escaped-output}\n```{=html}\n<pre><span class=\"ansi-cyan-fg ansi-bold\">3</span></pre>\n```\n:::\n\n:::\n:::\n\n\n### like { #ibis.expr.types.strings.StringValue.like }\n\n`like(self, patterns)`\n\nMatch `patterns` against `self`, case-sensitive.\n\nThis function is modeled after the SQL `LIKE` directive. Use `%` as a\nmultiple-character wildcard or `_` as a single-character wildcard.\n\nUse `re_search` or `rlike` for regular expression-based matching.\n\n#### Parameters\n\n| Name       | Type                                                                                                                                                                          | Description                                                                                                       | Default    |\n|------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------|------------|\n| `patterns` | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) \\| [Iterable](`typing.Iterable`)\\[[str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`)\\] | If `pattern` is a list, then if any pattern matches the input then the corresponding row in the output is `True`. | _required_ |\n\n#### Returns\n\n| Type                           | Description               |\n|--------------------------------|---------------------------|\n| [BooleanValue](`BooleanValue`) | Column indicating matches |\n\n#### Examples\n\n::: {#d48946a7 .cell execution_count=19}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"Ibis project\", \"GitHub\"]})\n>>> t.s.like(\"%project\")\n```\n\n::: {.cell-output .cell-output-display execution_count=19}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StringSQLLike(s, '%project') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>                      │\n├──────────────────────────────┤\n│ True                         │\n│ False                        │\n└──────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### lower { #ibis.expr.types.strings.StringValue.lower }\n\n`lower(self)`\n\nConvert string to all lowercase.\n\n#### Returns\n\n| Type                                                 | Description      |\n|------------------------------------------------------|------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Lowercase string |\n\n#### Examples\n\n::: {#56091ffa .cell execution_count=20}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"AAA\", \"a\", \"AA\"]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=20}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> s      </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">AAA   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">AA    </span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#75e7eb1e .cell execution_count=21}\n``` {.python .cell-code}\n>>> t.s.lower()\n```\n\n::: {.cell-output .cell-output-display execution_count=21}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Lowercase(s) </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>       │\n├──────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">aaa         </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a           </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">aa          </span> │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### lpad { #ibis.expr.types.strings.StringValue.lpad }\n\n`lpad(self, length, pad=' ')`\n\nPad `arg` by truncating on the right or padding on the left.\n\n#### Parameters\n\n| Name     | Type                                                                 | Description             | Default    |\n|----------|----------------------------------------------------------------------|-------------------------|------------|\n| `length` | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`)     | Length of output string | _required_ |\n| `pad`    | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | Pad character           | `' '`      |\n\n#### Returns\n\n| Type                                                 | Description        |\n|------------------------------------------------------|--------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Left-padded string |\n\n#### Examples\n\n::: {#5596a49f .cell execution_count=22}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"def\", \"ghij\"]})\n>>> t.s.lpad(5, \"-\")\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> LPad(s, 5, '-') </span>┃\n┡━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>          │\n├─────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">--abc          </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">--def          </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">-ghij          </span> │\n└─────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### lstrip { #ibis.expr.types.strings.StringValue.lstrip }\n\n`lstrip(self)`\n\nRemove whitespace from the left side of string.\n\n#### Returns\n\n| Type                                                 | Description          |\n|------------------------------------------------------|----------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Left-stripped string |\n\n#### Examples\n\n::: {#ebd3db46 .cell execution_count=23}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"\\ta\\t\", \"\\nb\\n\", \"\\vc\\t\"]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=23}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> s      </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\">a</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\"> </span> │\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\n</span><span style=\"color: #008000; text-decoration-color: #008000\">b</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\n</span><span style=\"color: #008000; text-decoration-color: #008000\"> </span> │\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\v</span><span style=\"color: #008000; text-decoration-color: #008000\">c</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\"> </span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#41f72011 .cell execution_count=24}\n``` {.python .cell-code}\n>>> t.s.lstrip()\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> LStrip(s) </span>┃\n┡━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │\n├───────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\">      </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\n</span><span style=\"color: #008000; text-decoration-color: #008000\">      </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">c</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\">      </span> │\n└───────────┘\n</pre>\n```\n:::\n:::\n\n\n### path { #ibis.expr.types.strings.StringValue.path }\n\n`path(self)`\n\nParse a URL and extract path.\n\n#### Examples\n\n::: {#27f4a5b5 .cell execution_count=25}\n``` {.python .cell-code}\n>>> import ibis\n>>> url = ibis.literal(\n...     \"https://example.com:80/docs/books/tutorial/index.html?name=networking\"\n... )\n>>> result = url.path()  # docs/books/tutorial/index.html\n```\n:::\n\n\n#### Returns\n\n| Type                                                 | Description            |\n|------------------------------------------------------|------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Extracted string value |\n\n### protocol { #ibis.expr.types.strings.StringValue.protocol }\n\n`protocol(self)`\n\nParse a URL and extract protocol.\n\n#### Examples\n\n::: {#be542d18 .cell execution_count=26}\n``` {.python .cell-code}\n>>> import ibis\n>>> url = ibis.literal(\"https://user:pass@example.com:80/docs/books\")\n>>> result = url.protocol()  # https\n```\n:::\n\n\n#### Returns\n\n| Type                                                 | Description            |\n|------------------------------------------------------|------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Extracted string value |\n\n### query { #ibis.expr.types.strings.StringValue.query }\n\n`query(self, key=None)`\n\nParse a URL and returns query strring or query string parameter.\n\nIf key is passed, return the value of the query string parameter named.\nIf key is absent, return the query string.\n\n#### Parameters\n\n| Name   | Type                                                                         | Description                | Default   |\n|--------|------------------------------------------------------------------------------|----------------------------|-----------|\n| `key`  | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) \\| None | Query component to extract | `None`    |\n\n#### Examples\n\n::: {#a4c5fa0c .cell execution_count=27}\n``` {.python .cell-code}\n>>> import ibis\n>>> url = ibis.literal(\n...     \"https://example.com:80/docs/books/tutorial/index.html?name=networking\"\n... )\n>>> result = url.query()  # name=networking\n>>> query_name = url.query(\"name\")  # networking\n```\n:::\n\n\n#### Returns\n\n| Type                                                 | Description            |\n|------------------------------------------------------|------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Extracted string value |\n\n### re_extract { #ibis.expr.types.strings.StringValue.re_extract }\n\n`re_extract(self, pattern, index)`\n\nReturn the specified match at `index` from a regex `pattern`.\n\n#### Parameters\n\n| Name      | Type                                                                 | Description                                                                                                                                                                                                                                                                                                        | Default    |\n|-----------|----------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `pattern` | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | Regular expression pattern string                                                                                                                                                                                                                                                                                  | _required_ |\n| `index`   | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`)     | The index of the match group to return.  The behavior of this function follows the behavior of Python's [`match objects`](https://docs.python.org/3/library/re.html#match-objects): when `index` is zero and there's a match, return the entire match, otherwise return the content of the `index`-th match group. | _required_ |\n\n#### Returns\n\n| Type                                                 | Description                                        |\n|------------------------------------------------------|----------------------------------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Extracted match or whole string if `index` is zero |\n\n#### Examples\n\n::: {#8ade32eb .cell execution_count=28}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"bac\", \"bca\"]})\n```\n:::\n\n\nExtract a specific group\n\n::: {#66351dc0 .cell execution_count=29}\n``` {.python .cell-code}\n>>> t.s.re_extract(r\"^(a)bc\", 1)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> RegexExtract(s, '^(a)bc', 1) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                       │\n├──────────────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a                           </span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                            │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                            │\n└──────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\nExtract the entire match\n\n::: {#770baa63 .cell execution_count=30}\n``` {.python .cell-code}\n>>> t.s.re_extract(r\"^(a)bc\", 0)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> RegexExtract(s, '^(a)bc', 0) </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                       │\n├──────────────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">abc                         </span> │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                            │\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">~</span>                            │\n└──────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### re_replace { #ibis.expr.types.strings.StringValue.re_replace }\n\n`re_replace(self, pattern, replacement)`\n\nReplace match found by regex `pattern` with `replacement`.\n\n#### Parameters\n\n| Name          | Type                                                                 | Description                              | Default    |\n|---------------|----------------------------------------------------------------------|------------------------------------------|------------|\n| `pattern`     | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | Regular expression string                | _required_ |\n| `replacement` | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | Replacement string or regular expression | _required_ |\n\n#### Returns\n\n| Type                                                 | Description     |\n|------------------------------------------------------|-----------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Modified string |\n\n#### Examples\n\n::: {#e46063f5 .cell execution_count=31}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"bac\", \"bca\"]})\n>>> t.s.re_replace(\"^(a)\", \"b\")\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> RegexReplace(s, '^(a)', 'b') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                       │\n├──────────────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">bbc                         </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">bac                         </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">bca                         </span> │\n└──────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### re_search { #ibis.expr.types.strings.StringValue.re_search }\n\n`re_search(self, pattern)`\n\nReturn whether the values match `pattern`.\n\nReturns `True` if the regex matches a string and `False` otherwise.\n\n#### Parameters\n\n| Name      | Type                                                                 | Description                          | Default    |\n|-----------|----------------------------------------------------------------------|--------------------------------------|------------|\n| `pattern` | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | Regular expression use for searching | _required_ |\n\n#### Returns\n\n| Type                           | Description          |\n|--------------------------------|----------------------|\n| [BooleanValue](`BooleanValue`) | Indicator of matches |\n\n#### Examples\n\n::: {#affdbc96 .cell execution_count=32}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"Ibis project\", \"GitHub\"]})\n>>> t.s.re_search(\".+Hub\")\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> RegexSearch(s, '.+Hub') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>                 │\n├─────────────────────────┤\n│ False                   │\n│ True                    │\n└─────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### repeat { #ibis.expr.types.strings.StringValue.repeat }\n\n`repeat(self, n)`\n\nRepeat a string `n` times.\n\n#### Parameters\n\n| Name   | Type                                                             | Description           | Default    |\n|--------|------------------------------------------------------------------|-----------------------|------------|\n| `n`    | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) | Number of repetitions | _required_ |\n\n#### Returns\n\n| Type                                                 | Description     |\n|------------------------------------------------------|-----------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Repeated string |\n\n#### Examples\n\n::: {#188b6f6b .cell execution_count=33}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"a\", \"bb\", \"c\"]})\n>>> t.s.repeat(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=33}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Repeat(s, 5) </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>       │\n├──────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">aaaaa       </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">bbbbbbbbbb  </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">ccccc       </span> │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### replace { #ibis.expr.types.strings.StringValue.replace }\n\n`replace(self, pattern, replacement)`\n\nReplace each exact match of `pattern` with `replacement`.\n\n#### Parameters\n\n| Name          | Type                                                 | Description        | Default    |\n|---------------|------------------------------------------------------|--------------------|------------|\n| `pattern`     | [StringValue](`ibis.expr.types.strings.StringValue`) | String pattern     | _required_ |\n| `replacement` | [StringValue](`ibis.expr.types.strings.StringValue`) | String replacement | _required_ |\n\n#### Returns\n\n| Type                                                 | Description     |\n|------------------------------------------------------|-----------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Replaced string |\n\n#### Examples\n\n::: {#f359b7b5 .cell execution_count=34}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"bac\", \"bca\"]})\n>>> t.s.replace(\"b\", \"z\")\n```\n\n::: {.cell-output .cell-output-display execution_count=34}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StringReplace(s, 'b', 'z') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>                     │\n├────────────────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">azc                       </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">zac                       </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">zca                       </span> │\n└────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### reverse { #ibis.expr.types.strings.StringValue.reverse }\n\n`reverse(self)`\n\nReverse the characters of a string.\n\n#### Returns\n\n| Type                                                 | Description     |\n|------------------------------------------------------|-----------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Reversed string |\n\n#### Examples\n\n::: {#21362975 .cell execution_count=35}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"def\", \"ghi\"]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=35}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> s      </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">abc   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">def   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">ghi   </span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#c645edde .cell execution_count=36}\n``` {.python .cell-code}\n>>> t.s.reverse()\n```\n\n::: {.cell-output .cell-output-display execution_count=36}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Reverse(s) </span>┃\n┡━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>     │\n├────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">cba       </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">fed       </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">ihg       </span> │\n└────────────┘\n</pre>\n```\n:::\n:::\n\n\n### right { #ibis.expr.types.strings.StringValue.right }\n\n`right(self, nchars)`\n\nReturn up to `nchars` from the end of each string.\n\n#### Parameters\n\n| Name     | Type                                                             | Description                            | Default    |\n|----------|------------------------------------------------------------------|----------------------------------------|------------|\n| `nchars` | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) | Maximum number of characters to return | _required_ |\n\n#### Returns\n\n| Type                                                 | Description             |\n|------------------------------------------------------|-------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Characters from the end |\n\n#### Examples\n\n::: {#48341e35 .cell execution_count=37}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"defg\", \"hijlk\"]})\n>>> t.s.right(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=37}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StrRight(s, 2) </span>┃\n┡━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>         │\n├────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">bc            </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">fg            </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">lk            </span> │\n└────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### rpad { #ibis.expr.types.strings.StringValue.rpad }\n\n`rpad(self, length, pad=' ')`\n\nPad `self` by truncating or padding on the right.\n\n#### Parameters\n\n| Name     | Type                                                                 | Description             | Default    |\n|----------|----------------------------------------------------------------------|-------------------------|------------|\n| `self`   |                                                                      | String to pad           | _required_ |\n| `length` | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`)     | Length of output string | _required_ |\n| `pad`    | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | Pad character           | `' '`      |\n\n#### Returns\n\n| Type                                                 | Description         |\n|------------------------------------------------------|---------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Right-padded string |\n\n#### Examples\n\n::: {#1d89492a .cell execution_count=38}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"def\", \"ghij\"]})\n>>> t.s.rpad(5, \"-\")\n```\n\n::: {.cell-output .cell-output-display execution_count=38}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> RPad(s, 5, '-') </span>┃\n┡━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>          │\n├─────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">abc--          </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">def--          </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">ghij-          </span> │\n└─────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### rstrip { #ibis.expr.types.strings.StringValue.rstrip }\n\n`rstrip(self)`\n\nRemove whitespace from the right side of string.\n\n#### Returns\n\n| Type                                                 | Description           |\n|------------------------------------------------------|-----------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Right-stripped string |\n\n#### Examples\n\n::: {#0bd32b7f .cell execution_count=39}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"\\ta\\t\", \"\\nb\\n\", \"\\vc\\t\"]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=39}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> s      </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\">a</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\"> </span> │\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\n</span><span style=\"color: #008000; text-decoration-color: #008000\">b</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\n</span><span style=\"color: #008000; text-decoration-color: #008000\"> </span> │\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\v</span><span style=\"color: #008000; text-decoration-color: #008000\">c</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\"> </span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#9bed941a .cell execution_count=40}\n``` {.python .cell-code}\n>>> t.s.rstrip()\n```\n\n::: {.cell-output .cell-output-display execution_count=40}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> RStrip(s) </span>┃\n┡━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>    │\n├───────────┤\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\">a      </span> │\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\n</span><span style=\"color: #008000; text-decoration-color: #008000\">b      </span> │\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\v</span><span style=\"color: #008000; text-decoration-color: #008000\">c      </span> │\n└───────────┘\n</pre>\n```\n:::\n:::\n\n\n### split { #ibis.expr.types.strings.StringValue.split }\n\n`split(self, delimiter)`\n\nSplit as string on `delimiter`.\n\n::: {.callout-note}\n## This API only works on backends with array support.\n:::\n\n#### Parameters\n\n| Name        | Type                                                                 | Description       | Default    |\n|-------------|----------------------------------------------------------------------|-------------------|------------|\n| `delimiter` | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | Value to split by | _required_ |\n\n#### Returns\n\n| Type                       | Description                     |\n|----------------------------|---------------------------------|\n| [ArrayValue](`ArrayValue`) | The string split by `delimiter` |\n\n#### Examples\n\n::: {#90f59765 .cell execution_count=41}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"col\": [\"a,b,c\", \"d,e\", \"f\"]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=41}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> col    </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a,b,c </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">d,e   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">f     </span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#78d49fb2 .cell execution_count=42}\n``` {.python .cell-code}\n>>> t.col.split(\",\")\n```\n\n::: {.cell-output .cell-output-display execution_count=42}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StringSplit(col, ',') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">array&lt;string&gt;</span>         │\n├───────────────────────┤\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'a'</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'b'</span>, <span style=\"color: #808000; text-decoration-color: #808000\">...</span> +<span style=\"color: #008080; text-decoration-color: #008080; font-weight: bold\">1</span><span style=\"font-weight: bold\">]</span>    │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'d'</span>, <span style=\"color: #008000; text-decoration-color: #008000\">'e'</span><span style=\"font-weight: bold\">]</span>            │\n│ <span style=\"font-weight: bold\">[</span><span style=\"color: #008000; text-decoration-color: #008000\">'f'</span><span style=\"font-weight: bold\">]</span>                 │\n└───────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### startswith { #ibis.expr.types.strings.StringValue.startswith }\n\n`startswith(self, start)`\n\nDetermine whether `self` starts with `end`.\n\n#### Parameters\n\n| Name    | Type                                                                 | Description         | Default    |\n|---------|----------------------------------------------------------------------|---------------------|------------|\n| `start` | [str](`str`) \\| [StringValue](`ibis.expr.types.strings.StringValue`) | prefix to check for | _required_ |\n\n#### Returns\n\n| Type                           | Description                                           |\n|--------------------------------|-------------------------------------------------------|\n| [BooleanValue](`BooleanValue`) | Boolean indicating whether `self` starts with `start` |\n\n#### Examples\n\n::: {#9b53b693 .cell execution_count=43}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"Ibis project\", \"GitHub\"]})\n>>> t.s.startswith(\"Ibis\")\n```\n\n::: {.cell-output .cell-output-display execution_count=43}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StartsWith(s, 'Ibis') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">boolean</span>               │\n├───────────────────────┤\n│ True                  │\n│ False                 │\n└───────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### strip { #ibis.expr.types.strings.StringValue.strip }\n\n`strip(self)`\n\nRemove whitespace from left and right sides of a string.\n\n#### Returns\n\n| Type                                                 | Description     |\n|------------------------------------------------------|-----------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Stripped string |\n\n#### Examples\n\n::: {#5b81efcd .cell execution_count=44}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"\\ta\\t\", \"\\nb\\n\", \"\\vc\\t\"]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=44}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> s      </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\">a</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\"> </span> │\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\n</span><span style=\"color: #008000; text-decoration-color: #008000\">b</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\n</span><span style=\"color: #008000; text-decoration-color: #008000\"> </span> │\n│ <span style=\"color: #d78700; text-decoration-color: #d78700\">\\v</span><span style=\"color: #008000; text-decoration-color: #008000\">c</span><span style=\"color: #d78700; text-decoration-color: #d78700\">\\t</span><span style=\"color: #008000; text-decoration-color: #008000\"> </span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#ceb30c61 .cell execution_count=45}\n``` {.python .cell-code}\n>>> t.s.strip()\n```\n\n::: {.cell-output .cell-output-display execution_count=45}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Strip(s) </span>┃\n┡━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>   │\n├──────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">a       </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">b       </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">c       </span> │\n└──────────┘\n</pre>\n```\n:::\n:::\n\n\n### substr { #ibis.expr.types.strings.StringValue.substr }\n\n`substr(self, start, length=None)`\n\nExtract a substring.\n\n#### Parameters\n\n| Name     | Type                                                                     | Description                                                                   | Default    |\n|----------|--------------------------------------------------------------------------|-------------------------------------------------------------------------------|------------|\n| `start`  | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`)         | First character to start splitting, indices start at 0                        | _required_ |\n| `length` | [int](`int`) \\| [ir](`ibis`).[IntegerValue](`ibis.IntegerValue`) \\| None | Maximum length of each substring. If not supplied, searches the entire string | `None`     |\n\n#### Returns\n\n| Type                                                 | Description     |\n|------------------------------------------------------|-----------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Found substring |\n\n#### Examples\n\n::: {#4824df6a .cell execution_count=46}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"abc\", \"defg\", \"hijlk\"]})\n>>> t.s.substr(2)\n```\n\n::: {.cell-output .cell-output-display execution_count=46}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Substring(s, 2) </span>┃\n┡━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>          │\n├─────────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">c              </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">fg             </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">jlk            </span> │\n└─────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### to_timestamp { #ibis.expr.types.strings.StringValue.to_timestamp }\n\n`to_timestamp(self, format_str)`\n\nParse a string and return a timestamp.\n\n#### Parameters\n\n| Name         | Type         | Description                        | Default    |\n|--------------|--------------|------------------------------------|------------|\n| `format_str` | [str](`str`) | Format string in `strptime` format | _required_ |\n\n#### Returns\n\n| Type                               | Description            |\n|------------------------------------|------------------------|\n| [TimestampValue](`TimestampValue`) | Parsed timestamp value |\n\n#### Examples\n\n::: {#3878e70b .cell execution_count=47}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"ts\": [\"20170206\"]})\n>>> t.ts.to_timestamp(\"%Y%m%d\")\n```\n\n::: {.cell-output .cell-output-display execution_count=47}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> StringToTimestamp(ts, '%Y%m%d') </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">timestamp('UTC')</span>                │\n├─────────────────────────────────┤\n│ <span style=\"color: #800080; text-decoration-color: #800080\">2017-02-06 00:00:00+00:00</span>       │\n└─────────────────────────────────┘\n</pre>\n```\n:::\n:::\n\n\n### translate { #ibis.expr.types.strings.StringValue.translate }\n\n`translate(self, from_str, to_str)`\n\nReplace `from_str` characters in `self` characters in `to_str`.\n\nTo avoid unexpected behavior, `from_str` should be shorter than\n`to_str`.\n\n#### Parameters\n\n| Name       | Type                                                 | Description                       | Default    |\n|------------|------------------------------------------------------|-----------------------------------|------------|\n| `from_str` | [StringValue](`ibis.expr.types.strings.StringValue`) | Characters in `arg` to replace    | _required_ |\n| `to_str`   | [StringValue](`ibis.expr.types.strings.StringValue`) | Characters to use for replacement | _required_ |\n\n#### Returns\n\n| Type                                                 | Description       |\n|------------------------------------------------------|-------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Translated string |\n\n#### Examples\n\n::: {#2217301e .cell execution_count=48}\n``` {.python .cell-code}\n>>> import ibis\n>>> table = ibis.table(dict(string_col=\"string\"))\n>>> result = table.string_col.translate(\"a\", \"b\")\n```\n:::\n\n\n### upper { #ibis.expr.types.strings.StringValue.upper }\n\n`upper(self)`\n\nConvert string to all uppercase.\n\n#### Returns\n\n| Type                                                 | Description      |\n|------------------------------------------------------|------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Uppercase string |\n\n#### Examples\n\n::: {#0293d234 .cell execution_count=49}\n``` {.python .cell-code}\n>>> import ibis\n>>> ibis.options.interactive = True\n>>> t = ibis.memtable({\"s\": [\"aaa\", \"A\", \"aa\"]})\n>>> t\n```\n\n::: {.cell-output .cell-output-display execution_count=49}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> s      </span>┃\n┡━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span> │\n├────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">aaa   </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">A     </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">aa    </span> │\n└────────┘\n</pre>\n```\n:::\n:::\n\n\n::: {#6dc8e363 .cell execution_count=50}\n``` {.python .cell-code}\n>>> t.s.upper()\n```\n\n::: {.cell-output .cell-output-display execution_count=50}\n```{=html}\n<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Uppercase(s) </span>┃\n┡━━━━━━━━━━━━━━┩\n│ <span style=\"color: #7f7f7f; text-decoration-color: #7f7f7f\">string</span>       │\n├──────────────┤\n│ <span style=\"color: #008000; text-decoration-color: #008000\">AAA         </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">A           </span> │\n│ <span style=\"color: #008000; text-decoration-color: #008000\">AA          </span> │\n└──────────────┘\n</pre>\n```\n:::\n:::\n\n\n### userinfo { #ibis.expr.types.strings.StringValue.userinfo }\n\n`userinfo(self)`\n\nParse a URL and extract user info.\n\n#### Examples\n\n::: {#09e4eced .cell execution_count=51}\n``` {.python .cell-code}\n>>> import ibis\n>>> url = ibis.literal(\"https://user:pass@example.com:80/docs/books\")\n>>> result = url.userinfo()  # user:pass\n```\n:::\n\n\n#### Returns\n\n| Type                                                 | Description            |\n|------------------------------------------------------|------------------------|\n| [StringValue](`ibis.expr.types.strings.StringValue`) | Extracted string value |\n\n",
    "supporting": [
      "expression-strings_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}