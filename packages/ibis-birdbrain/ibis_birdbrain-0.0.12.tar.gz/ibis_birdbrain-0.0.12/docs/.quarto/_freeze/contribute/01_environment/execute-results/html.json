{
  "hash": "3f03a22cb5d42875852f279e4106f87b",
  "result": {
    "markdown": "---\nhide:\n  - toc\ntitle: Setting up a development environment\n---\n\n\n\n\n\n## Required dependencies\n\n- [`git`](https://git-scm.com/)\n\n::: {.panel-tabset}\n\n## pip\n\n::: {.callout-warning}\n`pip` will not handle installation of system dependencies\n\n`pip` will not install system dependencies needed for some packages such as `psycopg2` and `kerberos`.\n\nFor a better development experience see the `conda` or `nix` setup instructions.\n:::\n\n1. [Install `gh`](https://cli.github.com/manual/installation)\n\n1. Fork and clone the ibis repository:\n\n   ```sh\n   gh repo fork --clone --remote ibis-project/ibis\n   ```\n\n1. Change directory into `ibis`:\n\n   ```sh\n   cd ibis\n   ```\n\n1. Install development dependencies\n\n   ```sh\n   pip install 'poetry==1.6.1'\n   pip install -r requirements-dev.txt\n   ```\n\n1. Install ibis in development mode\n\n   ```sh\n   pip install -e .\n   ```\n\n## Conda\n\n::: {.callout-note}\nSome optional dependencies for Windows are not available through `conda`/`mamba`\n:::\n\n### Support matrix\n\n| Python Version       | Python 3.9                   | Python 3.10      | Python 3.11      |\n| -------------------- | ---------------------------- | ---------------- | ---------------- |\n| **Operating System** |                              |                  |                  |\n| **Linux**            | {{< fa check >}}[^supported] | {{< fa check >}} | {{< fa check >}} |\n| **macOS (x86_64)**   | {{< fa check >}}             | {{< fa check >}} | {{< fa check >}} |\n| **macOS (aarch64)**  | {{< fa check >}}             | {{< fa check >}} | {{< fa check >}} |\n| **Windows**          | {{< fa check >}}             | {{< fa check >}} | {{< fa check >}} |\n\n::: {.panel-tabset}\n\n\n## `conda`\n\n1. Install [Miniconda](https://docs.conda.io/en/latest/miniconda.html)\n\n2. Install `gh`\n\n    ```sh\n    conda install -c conda-forge gh\n    ```\n\n3. Fork and clone the ibis repository:\n\n    ```sh\n    gh repo fork --clone --remote ibis-project/ibis\n    ```\n\n4. Create a Conda environment from a lock file in the repo:\n\n::: {.panel-tabset}\n\n## Linux\n\n```sh\n# Create a dev environment for linux-64\ncd ibis\nconda create -n ibis-dev --file=conda-lock/linux-64-3.10.lock\n```\n\n## macOS (x86_64)\n\n```sh\n# Create a dev environment for osx-64\ncd ibis\nconda create -n ibis-dev --file=conda-lock/osx-64-3.10.lock\n```\n\n## macOS (aarch64)\n\n```sh\n# Create a dev environment for osx-arm64\ncd ibis\nconda create -n ibis-dev --file=conda-lock/osx-arm64-3.10.lock\n```\n\n## Windows\n\n```sh\n# Create a dev environment for win-64\ncd ibis\nconda create -n ibis-dev --file=conda-lock/win-64-3.10.lock\n```\n\n\n:::\n\n5. Activate the environment\n\n    ```sh\n    conda activate ibis-dev\n    ```\n\n6. Install your local copy of `ibis` into the Conda environment\n\n    ```sh\n    cd ibis\n    pip install -e .\n    ```\n\n## `mamba`\n\n1. Install [Mamba](https://github.com/mamba-org/mamba)\n\n2. Install `gh`\n\n    ```sh\n    mamba install -c conda-forge gh\n    ```\n\n3. Fork and clone the ibis repository:\n\n    ```sh\n    gh repo fork --clone --remote ibis-project/ibis\n    ```\n\n4. Create a Conda environment from a lock file in the repo:\n\n::: {.panel-tabset}\n\n## Linux\n\n```sh\n# Create a dev environment for linux-64\ncd ibis\nmamba create -n ibis-dev --file=conda-lock/linux-64-3.10.lock\n```\n\n## macOS (x86_64)\n\n```sh\n# Create a dev environment for osx-64\ncd ibis\nmamba create -n ibis-dev --file=conda-lock/osx-64-3.10.lock\n```\n\n## macOS (aarch64)\n\n```sh\n# Create a dev environment for osx-arm64\ncd ibis\nmamba create -n ibis-dev --file=conda-lock/osx-arm64-3.10.lock\n```\n\n## Windows\n\n```sh\n# Create a dev environment for win-64\ncd ibis\nmamba create -n ibis-dev --file=conda-lock/win-64-3.10.lock\n```\n\n\n:::\n\n5. Activate the environment\n\n    ```sh\n    mamba activate ibis-dev\n    ```\n\n6. Install your local copy of `ibis` into the Conda environment\n\n    ```sh\n    cd ibis\n    pip install -e .\n    ```\n\n\n\n:::\n\n## Nix\n\n#### Support Matrix\n\n|      Python Version {{< fa arrow-right >}} |                Python 3.9                 |           Python 3.10           |           Python 3.11           |\n| -----------------------------------------: | :---------------------------------------: | :-----------------------------: | :-----------------------------: |\n| **Operating System** {{< fa arrow-down >}} |                                           |                                 |                                 |\n|                                  **Linux** |       {{< fa check >}} [^supported]       |        {{< fa check >}}         |        {{< fa check >}}         |\n|                         **macOS (x86_64)** |             {{< fa check >}}              |        {{< fa check >}}         |        {{< fa check >}}         |\n|                        **macOS (aarch64)** | {{< fa triangle-exclamation >}}[^unknown] | {{< fa triangle-exclamation >}} | {{< fa triangle-exclamation >}} |\n|                                **Windows** |         {{< fa ban >}}[^unlikely]         |         {{< fa ban >}}          |         {{< fa ban >}}          |\n\n1.  [Install `nix`](https://nixos.org/download.html)\n1.  Configure `nix`\n\n    Edit/create your `nix.conf` file (`$XDG_CONFIG_HOME/nix/nix.conf`) and add the line\n\n    ```sh\n    experimental-features = nix-command flakes\n    ```\n\n1.  Install `gh`:\n\n    ::: {.panel-tabset}\n\n    ## `nix-shell`\n\n    ```sh\n    nix-shell -p gh\n    ```\n\n    ## `nix-env`\n\n    ```sh\n    nix-env -iA gh\n    ```\n\n    :::\n\n1.  Fork and clone the ibis repository:\n\n    ```sh\n    gh repo fork --clone --remote ibis-project/ibis\n    ```\n\n1.  Set up the public `ibis` Cachix cache to pull pre-built dependencies:\n\n    ```sh\n    nix-shell -p cachix --run 'cachix use ibis'\n    ```\n\n1.  Run `nix-shell` in the checkout directory:\n\n    ```sh\n    cd ibis\n    nix-shell\n    ```\n\n    This may take a while due to artifact download from the cache.\n\n:::\n\n## Building the docs\n\nRun\n\n```bash\njust docs-preview\n```\n\nto build and serve the documentation.\n\n[^supported]: Tested in CI. If this doesn't work for you, please [file an issue](https://github.com/ibis-project/ibis/issues/new).\n[^unknown]: Not tested in CI. Unknown if this setup works.\n[^unlikely]: Unlikely to ever be supported or no upstream support.\n\n",
    "supporting": [
      "01_environment_files"
    ],
    "filters": [],
    "includes": {}
  }
}