Metadata-Version: 2.1
Name: eth-pydantic-types
Version: 0.1.0a1
Summary: eth-pydantic-types: Pydantic Types for Ethereum
Home-page: https://github.com/ApeWorX/evm-pydantic-types
Author: ApeWorX Ltd.
Author-email: admin@apeworx.io
License: Apache-2.0
Keywords: ethereum
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: MacOS
Classifier: Operating System :: POSIX
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8,<4
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: hexbytes <1,>=0.3.0
Requires-Dist: eth-utils <3,>=2.2.0
Requires-Dist: eth-hash[pycryptodome] <1,>=0.5.2
Requires-Dist: pydantic <3,>=2.4.2
Provides-Extra: dev
Requires-Dist: pytest-xdist ; extra == 'dev'
Requires-Dist: pytest-cov <5,>=4.0.0 ; extra == 'dev'
Requires-Dist: pytest-mock ; extra == 'dev'
Requires-Dist: hypothesis <7.0,>=6.2.0 ; extra == 'dev'
Requires-Dist: hypothesis-jsonschema ==0.19.0 ; extra == 'dev'
Requires-Dist: black <24,>=23.9.1 ; extra == 'dev'
Requires-Dist: mypy <2,>=1.5.1 ; extra == 'dev'
Requires-Dist: types-setuptools ; extra == 'dev'
Requires-Dist: flake8 <7,>=6.1.0 ; extra == 'dev'
Requires-Dist: flake8-breakpoint <2,>=1.1.0 ; extra == 'dev'
Requires-Dist: flake8-print <5,>=4.0.1 ; extra == 'dev'
Requires-Dist: isort <6,>=5.10.1 ; extra == 'dev'
Requires-Dist: mdformat >=0.7.17 ; extra == 'dev'
Requires-Dist: mdformat-gfm >=0.3.5 ; extra == 'dev'
Requires-Dist: mdformat-frontmatter >=0.4.1 ; extra == 'dev'
Requires-Dist: mdformat-pyproject >=0.0.1 ; extra == 'dev'
Requires-Dist: myst-parser <2,>=1.0.0 ; extra == 'dev'
Requires-Dist: Sphinx <7,>=6.1.3 ; extra == 'dev'
Requires-Dist: sphinx-rtd-theme <2,>=1.2.0 ; extra == 'dev'
Requires-Dist: sphinxcontrib-napoleon >=0.7 ; extra == 'dev'
Requires-Dist: packaging <24,>=23.1 ; extra == 'dev'
Requires-Dist: setuptools ; extra == 'dev'
Requires-Dist: wheel ; extra == 'dev'
Requires-Dist: twine ==3.8.0 ; extra == 'dev'
Requires-Dist: commitizen <2.41,>=2.40 ; extra == 'dev'
Requires-Dist: pre-commit ; extra == 'dev'
Requires-Dist: pytest-watch ; extra == 'dev'
Requires-Dist: ipdb ; extra == 'dev'
Provides-Extra: doc
Requires-Dist: myst-parser <2,>=1.0.0 ; extra == 'doc'
Requires-Dist: Sphinx <7,>=6.1.3 ; extra == 'doc'
Requires-Dist: sphinx-rtd-theme <2,>=1.2.0 ; extra == 'doc'
Requires-Dist: sphinxcontrib-napoleon >=0.7 ; extra == 'doc'
Requires-Dist: packaging <24,>=23.1 ; extra == 'doc'
Provides-Extra: lint
Requires-Dist: black <24,>=23.9.1 ; extra == 'lint'
Requires-Dist: mypy <2,>=1.5.1 ; extra == 'lint'
Requires-Dist: types-setuptools ; extra == 'lint'
Requires-Dist: flake8 <7,>=6.1.0 ; extra == 'lint'
Requires-Dist: flake8-breakpoint <2,>=1.1.0 ; extra == 'lint'
Requires-Dist: flake8-print <5,>=4.0.1 ; extra == 'lint'
Requires-Dist: isort <6,>=5.10.1 ; extra == 'lint'
Requires-Dist: mdformat >=0.7.17 ; extra == 'lint'
Requires-Dist: mdformat-gfm >=0.3.5 ; extra == 'lint'
Requires-Dist: mdformat-frontmatter >=0.4.1 ; extra == 'lint'
Requires-Dist: mdformat-pyproject >=0.0.1 ; extra == 'lint'
Provides-Extra: release
Requires-Dist: setuptools ; extra == 'release'
Requires-Dist: wheel ; extra == 'release'
Requires-Dist: twine ==3.8.0 ; extra == 'release'
Requires-Dist: packaging <24,>=23.1 ; extra == 'release'
Provides-Extra: test
Requires-Dist: pytest-xdist ; extra == 'test'
Requires-Dist: pytest-cov <5,>=4.0.0 ; extra == 'test'
Requires-Dist: pytest-mock ; extra == 'test'
Requires-Dist: hypothesis <7.0,>=6.2.0 ; extra == 'test'
Requires-Dist: hypothesis-jsonschema ==0.19.0 ; extra == 'test'

# eth-pydantic-types

The types in this package are pydantic types for Ethereum inspired from [eth-typing](https://github.com/ethereum/eth-typing/blob/master/eth_typing/evm.py).

## Hash32

Hash32 is a good type to use for Ethereum transaction hashes.
When using the Hash32 type, your inputs will be validated by length and your schema will declare the input a string with a binary format.
Use Hash32 like this:

```python
from pydantic import BaseModel

from eth_pydantic_types import Hash32

class Transaction(BaseModel):
    tx_hash: Hash32


# NOTE: I am able to pass an int-hash as the value and it will
#  get validated and type-coerced.
tx = Transaction(
    tx_hash=0x1031f0c9ac54dcb64b4f121a27957c14263c5cb49ed316d568e41e19c34d7b28
)
```

## HexBytes

A thin-wrapper around an already thin-wrapper `hexbytes.HexBytes`.
The difference here is that this HexBytes properly serializes.
Use HexBytes any place where you would actually use `hexbytes.HexBytes`.

```python
from pydantic import BaseModel
from eth_pydantic_types import HexBytes

class MyStorage(BaseModel):
    cid: HexBytes

# NOTE: We are able to pass a hex-str for a HexBytes value.
storage = MyStorage(cid="0x123")
```

## Address

Use the Address class for working with checksummed-addresses.
Addresses get validated and checksummed in model construction.

```python
from pydantic import BaseModel
from eth_pydantic_types import Address

class Account(BaseModel):
    address: Address

# NOTE: The address ends up checksummed
#   ("0x0837207e343277CBd6c114a45EC0e9Ec56a1AD84")
account = Account(address="0x837207e343277cbd6c114a45ec0e9ec56a1ad84")
```
