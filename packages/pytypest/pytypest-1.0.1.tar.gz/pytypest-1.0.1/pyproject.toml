[build-system]
requires = ["flit_core >=3.2,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "pytypest"
authors = [
    {name = "Gram", email = "git@orsinium.dev"},
]
license = {file = "LICENSE"}
readme = "README.md"
requires-python = ">=3.8"
dynamic = ["version", "description"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Typing :: Typed",
]
keywords = [
    "pytest",
    "tests",
    "testing",
    "framework",
    "fixtures",
]
dependencies = [
    "pytest",
    "typing-extensions",
]

[project.optional-dependencies]
test = [
    "pytest",
    "pytest-cov",
    "requests",
]
lint = [
    "flake8",
    "isort",
    "mypy",
    "unify",
    "types-requests",
    "ruff",
]
docs = [
    "sphinx",
    "myst-parser",
]


[project.urls]
Source = "https://github.com/orsinium-labs/pytypest"

[tool.mypy]
files = ["pytypest", "tests", "integration"]
python_version = "3.8"
ignore_missing_imports = true
# follow_imports = "silent"
show_error_codes = true
check_untyped_defs = true
no_implicit_optional = true
strict_equality = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.isort]
profile = "django"
lines_after_imports = 2
skip = ".venvs/"

[tool.pytest.ini_options]
addopts = [
    "--cov=pytypest",
    "--cov-report=html",
    "--cov-report=term-missing:skip-covered",
]
markers = ["two", "three"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if TYPE_CHECKING",
    "    pass",
    "except ImportError:",
]

[tool.coverage.run]
branch = true

[tool.ruff]
select = [
    "E", "W", "F", "N", "B",
    "COM", "ISC", "PIE", "Q",
    "SIM", "PTH", "PL", "RUF",
]
ignore = [
    "PLR2004",  # allow hardcoded constants
    "SIM117",   # allow nested with
    "SIM105",   # allow try-except-pass
    "PIE790",   # allow unnecessary pass statements
]
target-version = "py38"

[tool.ruff.flake8-quotes]
inline-quotes = "single"
