# coding: utf-8

"""
    Wavefront REST API Documentation

    <p>The REST API enables you to interact with the Wavefront service by using standard REST API tools. You can use the REST API to automate commonly executed operations, for example to tag sources automatically.</p><p>When you make REST API calls outside the REST API documentation UI, to authenticate to the service, you must use an API token associated with a user account or a service account. For information on how to get the API token and examples, see <a href=\"http://docs.wavefront.com/using_wavefront_api.html\">Use the Wavefront REST API.</a></p>  # noqa: E501

    OpenAPI spec version: v2
    Contact: chitimba@wavefront.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from wavefront_api_client.configuration import Configuration


class LogsTable(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'auto_load': 'bool',
        'columns': 'list[str]',
        'lines_to_show': 'str',
        'sort': 'LogsSort'
    }

    attribute_map = {
        'auto_load': 'autoLoad',
        'columns': 'columns',
        'lines_to_show': 'linesToShow',
        'sort': 'sort'
    }

    def __init__(self, auto_load=None, columns=None, lines_to_show=None, sort=None, _configuration=None):  # noqa: E501
        """LogsTable - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._auto_load = None
        self._columns = None
        self._lines_to_show = None
        self._sort = None
        self.discriminator = None

        if auto_load is not None:
            self.auto_load = auto_load
        if columns is not None:
            self.columns = columns
        if lines_to_show is not None:
            self.lines_to_show = lines_to_show
        if sort is not None:
            self.sort = sort

    @property
    def auto_load(self):
        """Gets the auto_load of this LogsTable.  # noqa: E501


        :return: The auto_load of this LogsTable.  # noqa: E501
        :rtype: bool
        """
        return self._auto_load

    @auto_load.setter
    def auto_load(self, auto_load):
        """Sets the auto_load of this LogsTable.


        :param auto_load: The auto_load of this LogsTable.  # noqa: E501
        :type: bool
        """

        self._auto_load = auto_load

    @property
    def columns(self):
        """Gets the columns of this LogsTable.  # noqa: E501


        :return: The columns of this LogsTable.  # noqa: E501
        :rtype: list[str]
        """
        return self._columns

    @columns.setter
    def columns(self, columns):
        """Sets the columns of this LogsTable.


        :param columns: The columns of this LogsTable.  # noqa: E501
        :type: list[str]
        """

        self._columns = columns

    @property
    def lines_to_show(self):
        """Gets the lines_to_show of this LogsTable.  # noqa: E501


        :return: The lines_to_show of this LogsTable.  # noqa: E501
        :rtype: str
        """
        return self._lines_to_show

    @lines_to_show.setter
    def lines_to_show(self, lines_to_show):
        """Sets the lines_to_show of this LogsTable.


        :param lines_to_show: The lines_to_show of this LogsTable.  # noqa: E501
        :type: str
        """

        self._lines_to_show = lines_to_show

    @property
    def sort(self):
        """Gets the sort of this LogsTable.  # noqa: E501


        :return: The sort of this LogsTable.  # noqa: E501
        :rtype: LogsSort
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this LogsTable.


        :param sort: The sort of this LogsTable.  # noqa: E501
        :type: LogsSort
        """

        self._sort = sort

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LogsTable, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LogsTable):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LogsTable):
            return True

        return self.to_dict() != other.to_dict()
