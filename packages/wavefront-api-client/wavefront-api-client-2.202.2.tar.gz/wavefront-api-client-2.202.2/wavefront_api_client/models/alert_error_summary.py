# coding: utf-8

"""
    Wavefront REST API Documentation

    <p>The REST API enables you to interact with the Wavefront service by using standard REST API tools. You can use the REST API to automate commonly executed operations, for example to tag sources automatically.</p><p>When you make REST API calls outside the REST API documentation UI, to authenticate to the service, you must use an API token associated with a user account or a service account. For information on how to get the API token and examples, see <a href=\"http://docs.wavefront.com/using_wavefront_api.html\">Use the Wavefront REST API.</a></p>  # noqa: E501

    OpenAPI spec version: v2
    Contact: chitimba@wavefront.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from wavefront_api_client.configuration import Configuration


class AlertErrorSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_code': 'int',
        'error_group_id': 'str',
        'error_message': 'str',
        'recommendation_key': 'str',
        'total_matched': 'int'
    }

    attribute_map = {
        'error_code': 'errorCode',
        'error_group_id': 'errorGroupId',
        'error_message': 'errorMessage',
        'recommendation_key': 'recommendationKey',
        'total_matched': 'totalMatched'
    }

    def __init__(self, error_code=None, error_group_id=None, error_message=None, recommendation_key=None, total_matched=None, _configuration=None):  # noqa: E501
        """AlertErrorSummary - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._error_code = None
        self._error_group_id = None
        self._error_message = None
        self._recommendation_key = None
        self._total_matched = None
        self.discriminator = None

        if error_code is not None:
            self.error_code = error_code
        if error_group_id is not None:
            self.error_group_id = error_group_id
        if error_message is not None:
            self.error_message = error_message
        if recommendation_key is not None:
            self.recommendation_key = recommendation_key
        if total_matched is not None:
            self.total_matched = total_matched

    @property
    def error_code(self):
        """Gets the error_code of this AlertErrorSummary.  # noqa: E501


        :return: The error_code of this AlertErrorSummary.  # noqa: E501
        :rtype: int
        """
        return self._error_code

    @error_code.setter
    def error_code(self, error_code):
        """Sets the error_code of this AlertErrorSummary.


        :param error_code: The error_code of this AlertErrorSummary.  # noqa: E501
        :type: int
        """

        self._error_code = error_code

    @property
    def error_group_id(self):
        """Gets the error_group_id of this AlertErrorSummary.  # noqa: E501


        :return: The error_group_id of this AlertErrorSummary.  # noqa: E501
        :rtype: str
        """
        return self._error_group_id

    @error_group_id.setter
    def error_group_id(self, error_group_id):
        """Sets the error_group_id of this AlertErrorSummary.


        :param error_group_id: The error_group_id of this AlertErrorSummary.  # noqa: E501
        :type: str
        """

        self._error_group_id = error_group_id

    @property
    def error_message(self):
        """Gets the error_message of this AlertErrorSummary.  # noqa: E501


        :return: The error_message of this AlertErrorSummary.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this AlertErrorSummary.


        :param error_message: The error_message of this AlertErrorSummary.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def recommendation_key(self):
        """Gets the recommendation_key of this AlertErrorSummary.  # noqa: E501


        :return: The recommendation_key of this AlertErrorSummary.  # noqa: E501
        :rtype: str
        """
        return self._recommendation_key

    @recommendation_key.setter
    def recommendation_key(self, recommendation_key):
        """Sets the recommendation_key of this AlertErrorSummary.


        :param recommendation_key: The recommendation_key of this AlertErrorSummary.  # noqa: E501
        :type: str
        """

        self._recommendation_key = recommendation_key

    @property
    def total_matched(self):
        """Gets the total_matched of this AlertErrorSummary.  # noqa: E501


        :return: The total_matched of this AlertErrorSummary.  # noqa: E501
        :rtype: int
        """
        return self._total_matched

    @total_matched.setter
    def total_matched(self, total_matched):
        """Sets the total_matched of this AlertErrorSummary.


        :param total_matched: The total_matched of this AlertErrorSummary.  # noqa: E501
        :type: int
        """

        self._total_matched = total_matched

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AlertErrorSummary, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AlertErrorSummary):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AlertErrorSummary):
            return True

        return self.to_dict() != other.to_dict()
