# coding: utf-8

"""
    Wavefront REST API Documentation

    <p>The REST API enables you to interact with the Wavefront service by using standard REST API tools. You can use the REST API to automate commonly executed operations, for example to tag sources automatically.</p><p>When you make REST API calls outside the REST API documentation UI, to authenticate to the service, you must use an API token associated with a user account or a service account. For information on how to get the API token and examples, see <a href=\"http://docs.wavefront.com/using_wavefront_api.html\">Use the Wavefront REST API.</a></p>  # noqa: E501

    OpenAPI spec version: v2
    Contact: chitimba@wavefront.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from wavefront_api_client.configuration import Configuration


class AWSBaseCredentials(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'external_id': 'str',
        'role_arn': 'str'
    }

    attribute_map = {
        'external_id': 'externalId',
        'role_arn': 'roleArn'
    }

    def __init__(self, external_id=None, role_arn=None, _configuration=None):  # noqa: E501
        """AWSBaseCredentials - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._external_id = None
        self._role_arn = None
        self.discriminator = None

        self.external_id = external_id
        self.role_arn = role_arn

    @property
    def external_id(self):
        """Gets the external_id of this AWSBaseCredentials.  # noqa: E501

        The external id corresponding to the Role ARN  # noqa: E501

        :return: The external_id of this AWSBaseCredentials.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this AWSBaseCredentials.

        The external id corresponding to the Role ARN  # noqa: E501

        :param external_id: The external_id of this AWSBaseCredentials.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and external_id is None:
            raise ValueError("Invalid value for `external_id`, must not be `None`")  # noqa: E501

        self._external_id = external_id

    @property
    def role_arn(self):
        """Gets the role_arn of this AWSBaseCredentials.  # noqa: E501

        The Role ARN that the customer has created in AWS IAM to allow access to Wavefront  # noqa: E501

        :return: The role_arn of this AWSBaseCredentials.  # noqa: E501
        :rtype: str
        """
        return self._role_arn

    @role_arn.setter
    def role_arn(self, role_arn):
        """Sets the role_arn of this AWSBaseCredentials.

        The Role ARN that the customer has created in AWS IAM to allow access to Wavefront  # noqa: E501

        :param role_arn: The role_arn of this AWSBaseCredentials.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and role_arn is None:
            raise ValueError("Invalid value for `role_arn`, must not be `None`")  # noqa: E501

        self._role_arn = role_arn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AWSBaseCredentials, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AWSBaseCredentials):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AWSBaseCredentials):
            return True

        return self.to_dict() != other.to_dict()
