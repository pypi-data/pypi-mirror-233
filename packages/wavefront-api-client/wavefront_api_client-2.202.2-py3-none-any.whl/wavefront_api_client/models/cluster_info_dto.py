# coding: utf-8

"""
    Wavefront REST API Documentation

    <p>The REST API enables you to interact with the Wavefront service by using standard REST API tools. You can use the REST API to automate commonly executed operations, for example to tag sources automatically.</p><p>When you make REST API calls outside the REST API documentation UI, to authenticate to the service, you must use an API token associated with a user account or a service account. For information on how to get the API token and examples, see <a href=\"http://docs.wavefront.com/using_wavefront_api.html\">Use the Wavefront REST API.</a></p>  # noqa: E501

    OpenAPI spec version: v2
    Contact: chitimba@wavefront.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from wavefront_api_client.configuration import Configuration


class ClusterInfoDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cluster_alias': 'str',
        'status_page_link': 'str'
    }

    attribute_map = {
        'cluster_alias': 'clusterAlias',
        'status_page_link': 'statusPageLink'
    }

    def __init__(self, cluster_alias=None, status_page_link=None, _configuration=None):  # noqa: E501
        """ClusterInfoDTO - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cluster_alias = None
        self._status_page_link = None
        self.discriminator = None

        if cluster_alias is not None:
            self.cluster_alias = cluster_alias
        if status_page_link is not None:
            self.status_page_link = status_page_link

    @property
    def cluster_alias(self):
        """Gets the cluster_alias of this ClusterInfoDTO.  # noqa: E501


        :return: The cluster_alias of this ClusterInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._cluster_alias

    @cluster_alias.setter
    def cluster_alias(self, cluster_alias):
        """Sets the cluster_alias of this ClusterInfoDTO.


        :param cluster_alias: The cluster_alias of this ClusterInfoDTO.  # noqa: E501
        :type: str
        """

        self._cluster_alias = cluster_alias

    @property
    def status_page_link(self):
        """Gets the status_page_link of this ClusterInfoDTO.  # noqa: E501


        :return: The status_page_link of this ClusterInfoDTO.  # noqa: E501
        :rtype: str
        """
        return self._status_page_link

    @status_page_link.setter
    def status_page_link(self, status_page_link):
        """Sets the status_page_link of this ClusterInfoDTO.


        :param status_page_link: The status_page_link of this ClusterInfoDTO.  # noqa: E501
        :type: str
        """

        self._status_page_link = status_page_link

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClusterInfoDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClusterInfoDTO):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ClusterInfoDTO):
            return True

        return self.to_dict() != other.to_dict()
