# coding: utf-8

"""
    Wavefront REST API Documentation

    <p>The REST API enables you to interact with the Wavefront service by using standard REST API tools. You can use the REST API to automate commonly executed operations, for example to tag sources automatically.</p><p>When you make REST API calls outside the REST API documentation UI, to authenticate to the service, you must use an API token associated with a user account or a service account. For information on how to get the API token and examples, see <a href=\"http://docs.wavefront.com/using_wavefront_api.html\">Use the Wavefront REST API.</a></p>  # noqa: E501

    OpenAPI spec version: v2
    Contact: chitimba@wavefront.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from wavefront_api_client.configuration import Configuration


class KubernetesComponent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_updated': 'int',
        'name': 'str',
        'status': 'dict(str, KubernetesComponentStatus)'
    }

    attribute_map = {
        'last_updated': 'lastUpdated',
        'name': 'name',
        'status': 'status'
    }

    def __init__(self, last_updated=None, name=None, status=None, _configuration=None):  # noqa: E501
        """KubernetesComponent - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._last_updated = None
        self._name = None
        self._status = None
        self.discriminator = None

        if last_updated is not None:
            self.last_updated = last_updated
        self.name = name
        if status is not None:
            self.status = status

    @property
    def last_updated(self):
        """Gets the last_updated of this KubernetesComponent.  # noqa: E501

        Last updated time of the monitored cluster component  # noqa: E501

        :return: The last_updated of this KubernetesComponent.  # noqa: E501
        :rtype: int
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this KubernetesComponent.

        Last updated time of the monitored cluster component  # noqa: E501

        :param last_updated: The last_updated of this KubernetesComponent.  # noqa: E501
        :type: int
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this KubernetesComponent.  # noqa: E501

        Name of the monitored cluster component  # noqa: E501

        :return: The name of this KubernetesComponent.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this KubernetesComponent.

        Name of the monitored cluster component  # noqa: E501

        :param name: The name of this KubernetesComponent.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def status(self):
        """Gets the status of this KubernetesComponent.  # noqa: E501

        Status of the monitored cluster component  # noqa: E501

        :return: The status of this KubernetesComponent.  # noqa: E501
        :rtype: dict(str, KubernetesComponentStatus)
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this KubernetesComponent.

        Status of the monitored cluster component  # noqa: E501

        :param status: The status of this KubernetesComponent.  # noqa: E501
        :type: dict(str, KubernetesComponentStatus)
        """

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KubernetesComponent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubernetesComponent):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubernetesComponent):
            return True

        return self.to_dict() != other.to_dict()
