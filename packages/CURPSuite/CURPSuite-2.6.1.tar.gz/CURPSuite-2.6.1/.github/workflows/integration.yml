name: Python CI

on:
  push:
    branches: [ master ]
    tags:        
      - '*'
  pull_request:
    branches: [ master ]

  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}

    # Matrix Strategy
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8, 3.9, "3.10"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Set up Python environment
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv requirements --dev > requirements.txt
          pip install -r requirements.txt

      - name: Run test suite
        run: python -m unittest

  version-check:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Check version against tag
        run: |
          VER=$(awk -F'["]' '/^__version__ =/ {print $2}' curp/__a* | sed 's/^/v/')
          if [ "$GITHUB_REF_NAME" != "$VER" ]; then
            echo "Version $VER does not match the GitHub tag $GITHUB_REF_NAME"
            exit 1
          fi

  pypi:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [ test, version-check ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Set up Python environment
        run: |
          python -m pip install --upgrade pip
          pip install pipenv
          pipenv requirements --dev > requirements.txt
          pip install -r requirements.txt

      - name: Build and upload to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          python -m build
          twine upload dist/*
