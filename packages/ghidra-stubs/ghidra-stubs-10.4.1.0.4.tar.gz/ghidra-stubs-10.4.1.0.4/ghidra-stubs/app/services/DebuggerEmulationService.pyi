import ghidra.app.plugin.core.debug.service.emulation
import ghidra.app.services
import ghidra.trace.model
import ghidra.trace.model.guest
import ghidra.trace.model.time.schedule
import ghidra.util.task
import java.lang
import java.util
import java.util.concurrent


class DebuggerEmulationService(object):





    class EmulatorStateListener(object):








        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def running(self, __a0: ghidra.app.services.DebuggerEmulationService.CachedEmulator) -> None: ...

        def stopped(self, __a0: ghidra.app.services.DebuggerEmulationService.CachedEmulator) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class EmulationResult(ghidra.trace.model.time.schedule.Scheduler.RunResult, object):








        def equals(self, __a0: object) -> bool: ...

        def error(self) -> java.lang.Throwable: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def schedule(self) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

        def snapshot(self) -> long: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class RecordEmulationResult(java.lang.Record, ghidra.app.services.DebuggerEmulationService.EmulationResult):




        def __init__(self, __a0: ghidra.trace.model.time.schedule.TraceSchedule, __a1: long, __a2: java.lang.Throwable): ...



        def equals(self, __a0: object) -> bool: ...

        def error(self) -> java.lang.Throwable: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def schedule(self) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

        def snapshot(self) -> long: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class CachedEmulator(java.lang.Record):




        @overload
        def __init__(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.app.plugin.core.debug.service.emulation.DebuggerPcodeMachine): ...

        @overload
        def __init__(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.app.plugin.core.debug.service.emulation.DebuggerPcodeMachine, __a2: long): ...



        def emulator(self) -> ghidra.app.plugin.core.debug.service.emulation.DebuggerPcodeMachine: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def isValid(self) -> bool: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def trace(self) -> ghidra.trace.model.Trace: ...

        def version(self) -> long: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...

        @property
        def valid(self) -> bool: ...





    def addStateListener(self, __a0: ghidra.app.services.DebuggerEmulationService.EmulatorStateListener) -> None: ...

    def backgroundEmulate(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.time.schedule.TraceSchedule) -> java.util.concurrent.CompletableFuture: ...

    def backgroundRun(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.time.schedule.TraceSchedule, __a2: ghidra.trace.model.time.schedule.Scheduler) -> java.util.concurrent.CompletableFuture: ...

    @overload
    def emulate(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.trace.model.time.schedule.TraceSchedule, __a2: ghidra.util.task.TaskMonitor) -> long: ...

    @overload
    def emulate(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.time.schedule.TraceSchedule, __a2: ghidra.util.task.TaskMonitor) -> long: ...

    def equals(self, __a0: object) -> bool: ...

    def getBusyEmulators(self) -> java.util.Collection: ...

    def getCachedEmulator(self, __a0: ghidra.trace.model.Trace, __a1: ghidra.trace.model.time.schedule.TraceSchedule) -> ghidra.app.plugin.core.debug.service.emulation.DebuggerPcodeMachine: ...

    def getClass(self) -> java.lang.Class: ...

    def getEmulatorFactories(self) -> java.util.Collection: ...

    def getEmulatorFactory(self) -> ghidra.app.plugin.core.debug.service.emulation.DebuggerPcodeEmulatorFactory: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeStateListener(self, __a0: ghidra.app.services.DebuggerEmulationService.EmulatorStateListener) -> None: ...

    def run(self, __a0: ghidra.trace.model.guest.TracePlatform, __a1: ghidra.trace.model.time.schedule.TraceSchedule, __a2: ghidra.util.task.TaskMonitor, __a3: ghidra.trace.model.time.schedule.Scheduler) -> ghidra.app.services.DebuggerEmulationService.EmulationResult: ...

    def setEmulatorFactory(self, __a0: ghidra.app.plugin.core.debug.service.emulation.DebuggerPcodeEmulatorFactory) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def busyEmulators(self) -> java.util.Collection: ...

    @property
    def emulatorFactories(self) -> java.util.Collection: ...

    @property
    def emulatorFactory(self) -> ghidra.app.plugin.core.debug.service.emulation.DebuggerPcodeEmulatorFactory: ...

    @emulatorFactory.setter
    def emulatorFactory(self, value: ghidra.app.plugin.core.debug.service.emulation.DebuggerPcodeEmulatorFactory) -> None: ...