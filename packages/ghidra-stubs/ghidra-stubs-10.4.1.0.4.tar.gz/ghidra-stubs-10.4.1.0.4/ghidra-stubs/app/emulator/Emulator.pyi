import ghidra.app.emulator
import ghidra.pcode.emulate
import ghidra.pcode.memstate
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.util.task
import java.lang


class Emulator(object):








    def addMemoryAccessFilter(self, __a0: ghidra.app.emulator.MemoryAccessFilter) -> None: ...

    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def executeInstruction(self, __a0: bool, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def getBreakTable(self) -> ghidra.pcode.emulate.BreakTableCallBack: ...

    def getClass(self) -> java.lang.Class: ...

    def getContextRegisterValue(self) -> ghidra.program.model.lang.RegisterValue: ...

    def getEmulateExecutionState(self) -> ghidra.pcode.emulate.EmulateExecutionState: ...

    def getExecuteAddress(self) -> ghidra.program.model.address.Address: ...

    def getFilteredMemState(self) -> ghidra.app.emulator.FilteredMemoryState: ...

    def getHalt(self) -> bool: ...

    def getLastExecuteAddress(self) -> ghidra.program.model.address.Address: ...

    def getMemState(self) -> ghidra.pcode.memstate.MemoryState: ...

    def getPC(self) -> long: ...

    def getPCRegisterName(self) -> unicode: ...

    def hashCode(self) -> int: ...

    def isAtBreakpoint(self) -> bool: ...

    def isExecuting(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setContextRegisterValue(self, __a0: ghidra.program.model.lang.RegisterValue) -> None: ...

    def setExecuteAddress(self, __a0: long) -> None: ...

    def setHalt(self, __a0: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def PC(self) -> long: ...

    @property
    def PCRegisterName(self) -> unicode: ...

    @property
    def atBreakpoint(self) -> bool: ...

    @property
    def breakTable(self) -> ghidra.pcode.emulate.BreakTableCallBack: ...

    @property
    def contextRegisterValue(self) -> ghidra.program.model.lang.RegisterValue: ...

    @contextRegisterValue.setter
    def contextRegisterValue(self, value: ghidra.program.model.lang.RegisterValue) -> None: ...

    @property
    def emulateExecutionState(self) -> ghidra.pcode.emulate.EmulateExecutionState: ...

    @property
    def executeAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def executing(self) -> bool: ...

    @property
    def filteredMemState(self) -> ghidra.app.emulator.FilteredMemoryState: ...

    @property
    def halt(self) -> bool: ...

    @halt.setter
    def halt(self, value: bool) -> None: ...

    @property
    def lastExecuteAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def memState(self) -> ghidra.pcode.memstate.MemoryState: ...