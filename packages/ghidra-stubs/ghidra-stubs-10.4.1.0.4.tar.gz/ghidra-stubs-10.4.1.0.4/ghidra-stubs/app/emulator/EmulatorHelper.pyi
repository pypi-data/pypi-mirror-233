from typing import List
import ghidra.app.emulator
import ghidra.app.emulator.memory
import ghidra.pcode.emulate
import ghidra.pcode.memstate
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.listing
import ghidra.program.model.mem
import ghidra.util.task
import java.lang


class EmulatorHelper(object, ghidra.pcode.memstate.MemoryFaultHandler, ghidra.app.emulator.EmulatorConfiguration):




    def __init__(self, __a0: ghidra.program.model.listing.Program): ...



    def clearBreakpoint(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def createMemoryBlockFromMemoryState(self, __a0: unicode, __a1: ghidra.program.model.address.Address, __a2: int, __a3: bool, __a4: ghidra.util.task.TaskMonitor) -> ghidra.program.model.mem.MemoryBlock: ...

    def dispose(self) -> None: ...

    def enableMemoryWriteTracking(self, __a0: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getContextRegister(self) -> ghidra.program.model.lang.RegisterValue: ...

    def getEmulateExecutionState(self) -> ghidra.pcode.emulate.EmulateExecutionState: ...

    def getEmulator(self) -> ghidra.app.emulator.Emulator: ...

    def getExecutionAddress(self) -> ghidra.program.model.address.Address: ...

    def getLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getLastError(self) -> unicode: ...

    def getLoadData(self) -> ghidra.app.emulator.memory.EmulatorLoadData: ...

    def getMemoryFaultHandler(self) -> ghidra.pcode.memstate.MemoryFaultHandler: ...

    def getPCRegister(self) -> ghidra.program.model.lang.Register: ...

    def getPreferredMemoryPageSize(self) -> int: ...

    def getProgram(self) -> ghidra.program.model.listing.Program: ...

    def getProgramCounterName(self) -> unicode: ...

    def getStackPointerRegister(self) -> ghidra.program.model.lang.Register: ...

    def getTrackedMemoryWriteSet(self) -> ghidra.program.model.address.AddressSetView: ...

    def hashCode(self) -> int: ...

    def isWriteBackEnabled(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def readMemory(self, __a0: ghidra.program.model.address.Address, __a1: int) -> List[int]: ...

    def readMemoryByte(self, __a0: ghidra.program.model.address.Address) -> int: ...

    def readNullTerminatedString(self, __a0: ghidra.program.model.address.Address, __a1: int) -> unicode: ...

    @overload
    def readRegister(self, __a0: unicode) -> long: ...

    @overload
    def readRegister(self, __a0: ghidra.program.model.lang.Register) -> long: ...

    def readStackValue(self, __a0: int, __a1: int, __a2: bool) -> long: ...

    def registerCallOtherCallback(self, __a0: unicode, __a1: ghidra.pcode.emulate.BreakCallBack) -> None: ...

    def registerDefaultCallOtherCallback(self, __a0: ghidra.pcode.emulate.BreakCallBack) -> None: ...

    @overload
    def run(self, __a0: ghidra.util.task.TaskMonitor) -> bool: ...

    @overload
    def run(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.lang.ProcessorContext, __a2: ghidra.util.task.TaskMonitor) -> bool: ...

    def setBreakpoint(self, __a0: ghidra.program.model.address.Address) -> None: ...

    @overload
    def setContextRegister(self, __a0: ghidra.program.model.lang.RegisterValue) -> None: ...

    @overload
    def setContextRegister(self, __a0: ghidra.program.model.lang.Register, __a1: long) -> None: ...

    def setMemoryFaultHandler(self, __a0: ghidra.pcode.memstate.MemoryFaultHandler) -> None: ...

    def step(self, __a0: ghidra.util.task.TaskMonitor) -> bool: ...

    def toString(self) -> unicode: ...

    def uninitializedRead(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: List[int], __a3: int) -> bool: ...

    def unknownAddress(self, __a0: ghidra.program.model.address.Address, __a1: bool) -> bool: ...

    def unregisterCallOtherCallback(self, __a0: unicode) -> None: ...

    def unregisterDefaultCallOtherCallback(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeMemory(self, __a0: ghidra.program.model.address.Address, __a1: List[int]) -> None: ...

    def writeMemoryValue(self, __a0: ghidra.program.model.address.Address, __a1: int, __a2: long) -> None: ...

    @overload
    def writeRegister(self, __a0: unicode, __a1: long) -> None: ...

    @overload
    def writeRegister(self, __a0: ghidra.program.model.lang.Register, __a1: long) -> None: ...

    @overload
    def writeRegister(self, __a0: unicode, __a1: long) -> None: ...

    @overload
    def writeRegister(self, __a0: ghidra.program.model.lang.Register, __a1: long) -> None: ...

    @overload
    def writeStackValue(self, __a0: int, __a1: int, __a2: long) -> None: ...

    @overload
    def writeStackValue(self, __a0: int, __a1: int, __a2: long) -> None: ...

    @property
    def PCRegister(self) -> ghidra.program.model.lang.Register: ...

    @property
    def breakpoint(self) -> None: ...  # No getter available.

    @breakpoint.setter
    def breakpoint(self, value: ghidra.program.model.address.Address) -> None: ...

    @property
    def contextRegister(self) -> ghidra.program.model.lang.RegisterValue: ...

    @contextRegister.setter
    def contextRegister(self, value: ghidra.program.model.lang.RegisterValue) -> None: ...

    @property
    def emulateExecutionState(self) -> ghidra.pcode.emulate.EmulateExecutionState: ...

    @property
    def emulator(self) -> ghidra.app.emulator.Emulator: ...

    @property
    def executionAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def language(self) -> ghidra.program.model.lang.Language: ...

    @property
    def lastError(self) -> unicode: ...

    @property
    def loadData(self) -> ghidra.app.emulator.memory.EmulatorLoadData: ...

    @property
    def memoryFaultHandler(self) -> ghidra.pcode.memstate.MemoryFaultHandler: ...

    @memoryFaultHandler.setter
    def memoryFaultHandler(self, value: ghidra.pcode.memstate.MemoryFaultHandler) -> None: ...

    @property
    def preferredMemoryPageSize(self) -> int: ...

    @property
    def program(self) -> ghidra.program.model.listing.Program: ...

    @property
    def programCounterName(self) -> unicode: ...

    @property
    def stackPointerRegister(self) -> ghidra.program.model.lang.Register: ...

    @property
    def trackedMemoryWriteSet(self) -> ghidra.program.model.address.AddressSetView: ...

    @property
    def writeBackEnabled(self) -> bool: ...