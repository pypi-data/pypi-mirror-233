import ghidra.app.plugin.core.debug
import ghidra.app.services
import ghidra.dbg.target
import ghidra.framework.options
import ghidra.framework.plugintool
import ghidra.trace.model
import ghidra.trace.model.guest
import ghidra.trace.model.program
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.trace.model.time.schedule
import java.lang


class DebuggerCoordinates(object):
    NOWHERE: ghidra.app.plugin.core.debug.DebuggerCoordinates = Coords(trace=null,recorder=null,thread=null,view=null,time=null,frame=null,object=null)







    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def equalsIgnoreRecorderAndView(__a0: ghidra.app.plugin.core.debug.DebuggerCoordinates, __a1: ghidra.app.plugin.core.debug.DebuggerCoordinates) -> bool: ...

    @overload
    def frame(self, __a0: int) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    @overload
    def frame(self, __a0: int) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    def getClass(self) -> java.lang.Class: ...

    def getFrame(self) -> int: ...

    def getObject(self) -> ghidra.trace.model.target.TraceObject: ...

    def getPlatform(self) -> ghidra.trace.model.guest.TracePlatform: ...

    def getRecorder(self) -> ghidra.app.services.TraceRecorder: ...

    def getRegisterContainer(self) -> ghidra.trace.model.target.TraceObject: ...

    def getSnap(self) -> long: ...

    def getThread(self) -> ghidra.trace.model.thread.TraceThread: ...

    def getTime(self) -> ghidra.trace.model.time.schedule.TraceSchedule: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getView(self) -> ghidra.trace.model.program.TraceProgramView: ...

    def getViewSnap(self) -> long: ...

    def hashCode(self) -> int: ...

    def isAlive(self) -> bool: ...

    def isAliveAndPresent(self) -> bool: ...

    def isAliveAndReadsPresent(self) -> bool: ...

    def isDeadOrPresent(self) -> bool: ...

    def isPresent(self) -> bool: ...

    def isReadsPresent(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    @overload
    def object(self, __a0: ghidra.dbg.target.TargetObject) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    @overload
    def object(self, __a0: ghidra.trace.model.target.TraceObject) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    def platform(self, __a0: ghidra.trace.model.guest.TracePlatform) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    def reFindThread(self) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    @staticmethod
    def readDataState(__a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.framework.options.SaveState, __a2: unicode) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    def recorder(self, __a0: ghidra.app.services.TraceRecorder) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    def snap(self, __a0: long) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    def snapNoResolve(self, __a0: long) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    def thread(self, __a0: ghidra.trace.model.thread.TraceThread) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    def time(self, __a0: ghidra.trace.model.time.schedule.TraceSchedule) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    def toString(self) -> unicode: ...

    def trace(self, __a0: ghidra.trace.model.Trace) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    def view(self, __a0: ghidra.trace.model.program.TraceProgramView) -> ghidra.app.plugin.core.debug.DebuggerCoordinates: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    def writeDataState(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.framework.options.SaveState, __a2: unicode) -> None: ...

    @property
    def alive(self) -> bool: ...

    @property
    def aliveAndPresent(self) -> bool: ...

    @property
    def aliveAndReadsPresent(self) -> bool: ...

    @property
    def deadOrPresent(self) -> bool: ...

    @property
    def present(self) -> bool: ...

    @property
    def readsPresent(self) -> bool: ...

    @property
    def registerContainer(self) -> ghidra.trace.model.target.TraceObject: ...

    @property
    def viewSnap(self) -> long: ...