import ghidra.app.plugin.core.debug.service.workflow
import ghidra.app.plugin.core.debug.workflow
import ghidra.app.services
import ghidra.dbg
import ghidra.framework.plugintool
import ghidra.program.model.listing
import ghidra.trace.model
import ghidra.util
import java.lang


class MapModulesDebuggerBot(ghidra.app.plugin.core.debug.workflow.AbstractMapDebuggerBot):




    def __init__(self): ...



    def disable(self) -> None: ...

    def enable(self, __a0: ghidra.app.plugin.core.debug.service.workflow.DebuggerWorkflowServicePlugin) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getClass(self) -> java.lang.Class: ...

    def getDescription(self) -> unicode: ...

    def getDetails(self) -> unicode: ...

    def getHelpLocation(self) -> ghidra.util.HelpLocation: ...

    @staticmethod
    def getInfo(__a0: java.lang.Class, __a1: unicode) -> ghidra.app.services.DebuggerBotInfo: ...

    def hashCode(self) -> int: ...

    def isEnabled(self) -> bool: ...

    def isEnabledByDefault(self) -> bool: ...

    def modelAdded(self, __a0: ghidra.dbg.DebuggerObjectModel) -> None: ...

    def modelRemoved(self, __a0: ghidra.dbg.DebuggerObjectModel) -> None: ...

    @staticmethod
    def noAnnot(__a0: java.lang.Class, __a1: unicode) -> None: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def programClosed(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.program.model.listing.Program) -> None: ...

    def programOpened(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.program.model.listing.Program) -> None: ...

    def setEnabled(self, __a0: ghidra.app.plugin.core.debug.service.workflow.DebuggerWorkflowServicePlugin, __a1: bool) -> None: ...

    def toString(self) -> unicode: ...

    def traceClosed(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.trace.model.Trace) -> None: ...

    def traceOpened(self, __a0: ghidra.framework.plugintool.PluginTool, __a1: ghidra.trace.model.Trace) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

