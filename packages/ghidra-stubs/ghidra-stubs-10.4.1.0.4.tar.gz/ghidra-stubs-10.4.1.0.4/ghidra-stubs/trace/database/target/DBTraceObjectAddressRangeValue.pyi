import ghidra.dbg.target.schema
import ghidra.program.model.address
import ghidra.trace.database.map
import ghidra.trace.database.target
import ghidra.trace.model
import ghidra.trace.model.target
import ghidra.trace.util
import ghidra.util
import ghidra.util.database
import ghidra.util.database.spatial
import ghidra.util.database.spatial.rect
import java.lang


class DBTraceObjectAddressRangeValue(ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree.AbstractDBTraceAddressSnapRangePropertyMapData, ghidra.trace.database.target.InternalTraceObjectValue):
    TABLE_NAME: unicode = u'ObjectRangeValue'



    def __init__(self, __a0: ghidra.trace.database.target.DBTraceObjectManager, __a1: ghidra.trace.database.map.DBTraceAddressSnapRangePropertyMapTree, __a2: ghidra.util.database.DBCachedObjectStore, __a3: db.DBRecord): ...



    def castValue(self) -> object: ...

    @overload
    def computeAreaIntersection(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

    @overload
    def computeAreaIntersection(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

    @overload
    def computeAreaUnionBounds(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

    @overload
    def computeAreaUnionBounds(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

    @overload
    def computeCentroidDistance(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> float: ...

    @overload
    def computeCentroidDistance(self, __a0: ghidra.util.database.spatial.BoundingShape) -> float: ...

    @overload
    def contains(self, __a0: ghidra.util.database.spatial.rect.Point2D) -> bool: ...

    @overload
    def contains(self, __a0: object, __a1: object) -> bool: ...

    def delete(self) -> None: ...

    def description(self) -> unicode: ...

    def doDelete(self) -> None: ...

    def doDeleteAndEmit(self) -> None: ...

    def doEquals(self, __a0: object) -> bool: ...

    def doHashCode(self) -> int: ...

    def doSetLifespan(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    def doSetLifespanAndEmit(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    def doTruncateOrDelete(self, __a0: ghidra.trace.model.Lifespan) -> ghidra.trace.database.target.InternalTraceObjectValue: ...

    def doTruncateOrDeleteAndEmitLifeChange(self, __a0: ghidra.trace.model.Lifespan) -> ghidra.trace.database.target.InternalTraceObjectValue: ...

    def enclosedBy(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

    @overload
    def encloses(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

    @overload
    def encloses(self, __a0: ghidra.util.database.spatial.BoundingShape) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def getArea(self) -> float: ...

    def getBounds(self) -> ghidra.util.database.spatial.BoundingShape: ...

    def getCanonicalPath(self) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    def getCenter(self) -> ghidra.util.database.spatial.rect.Point2D: ...

    def getChild(self) -> ghidra.trace.model.target.TraceObject: ...

    def getChildOrNull(self) -> ghidra.trace.database.target.DBTraceObject: ...

    def getClass(self) -> java.lang.Class: ...

    def getEntryKey(self) -> unicode: ...

    def getKey(self) -> long: ...

    def getLifespan(self) -> ghidra.trace.model.Lifespan: ...

    def getManager(self) -> ghidra.trace.database.target.DBTraceObjectManager: ...

    def getMargin(self) -> float: ...

    def getMaxSnap(self) -> long: ...

    def getMinSnap(self) -> long: ...

    def getObjectKey(self) -> ghidra.util.database.ObjectKey: ...

    def getParent(self) -> ghidra.trace.model.target.TraceObject: ...

    def getParentKey(self) -> long: ...

    def getRange(self) -> ghidra.program.model.address.AddressRange: ...

    def getShape(self) -> ghidra.util.database.spatial.BoundedShape: ...

    def getSpace(self) -> ghidra.util.database.spatial.rect.EuclideanSpace2D: ...

    def getTableName(self) -> unicode: ...

    def getTargetSchema(self) -> ghidra.dbg.target.schema.TargetObjectSchema: ...

    def getTrace(self) -> ghidra.trace.model.Trace: ...

    def getTraceAddressSpace(self) -> ghidra.trace.util.TraceAddressSpace: ...

    def getValue(self) -> object: ...

    def getX1(self) -> object: ...

    def getX2(self) -> object: ...

    def getY1(self) -> object: ...

    def getY2(self) -> object: ...

    def hashCode(self) -> int: ...

    @overload
    def immutable(self, __a0: ghidra.program.model.address.Address, __a1: ghidra.program.model.address.Address, __a2: long, __a3: long) -> ghidra.trace.model.TraceAddressSnapRange: ...

    @overload
    def immutable(self, __a0: object, __a1: object, __a2: object, __a3: object) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

    def intersection(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

    def intersects(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> bool: ...

    def isCanonical(self) -> bool: ...

    @overload
    def isDeleted(self) -> bool: ...

    @overload
    def isDeleted(self, __a0: ghidra.util.Lock) -> bool: ...

    def isHidden(self) -> bool: ...

    def isObject(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setInvalid(self) -> None: ...

    @overload
    def setLifespan(self, __a0: ghidra.trace.model.Lifespan) -> None: ...

    @overload
    def setLifespan(self, __a0: ghidra.trace.model.Lifespan, __a1: ghidra.trace.model.target.TraceObject.ConflictResolution) -> None: ...

    def setMaxSnap(self, __a0: long) -> None: ...

    def setMinSnap(self, __a0: long) -> None: ...

    def setParentKey(self, __a0: long) -> None: ...

    @overload
    def setShape(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> None: ...

    @overload
    def setShape(self, __a0: ghidra.util.database.spatial.BoundedShape) -> None: ...

    @overload
    def shapeEquals(self, __a0: ghidra.trace.model.TraceAddressSnapRange) -> bool: ...

    @overload
    def shapeEquals(self, __a0: ghidra.util.database.spatial.BoundedShape) -> bool: ...

    def toString(self) -> unicode: ...

    def truncateOrDelete(self, __a0: ghidra.trace.model.Lifespan) -> ghidra.trace.model.target.TraceObjectValue: ...

    @overload
    def unionBounds(self, __a0: ghidra.util.database.spatial.rect.Rectangle2D) -> ghidra.util.database.spatial.rect.Rectangle2D: ...

    @overload
    def unionBounds(self, __a0: ghidra.util.database.spatial.BoundingShape) -> ghidra.util.database.spatial.BoundingShape: ...

    @staticmethod
    def unionIterable(__a0: java.lang.Iterable) -> ghidra.util.database.spatial.BoundingShape: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def canonical(self) -> bool: ...

    @property
    def canonicalPath(self) -> ghidra.trace.model.target.TraceObjectKeyPath: ...

    @property
    def child(self) -> ghidra.trace.database.target.DBTraceObject: ...

    @property
    def childOrNull(self) -> ghidra.trace.database.target.DBTraceObject: ...

    @property
    def entryKey(self) -> unicode: ...

    @property
    def manager(self) -> ghidra.trace.database.target.DBTraceObjectManager: ...

    @property
    def maxSnap(self) -> long: ...

    @maxSnap.setter
    def maxSnap(self, value: long) -> None: ...

    @property
    def minSnap(self) -> long: ...

    @minSnap.setter
    def minSnap(self, value: long) -> None: ...

    @property
    def object(self) -> bool: ...

    @property
    def parent(self) -> ghidra.trace.database.target.DBTraceObject: ...

    @property
    def trace(self) -> ghidra.trace.model.Trace: ...

    @property
    def traceAddressSpace(self) -> ghidra.trace.util.TraceAddressSpace: ...

    @property
    def value(self) -> object: ...