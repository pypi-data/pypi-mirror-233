import ghidra.pcode.emulate
import ghidra.pcode.memstate
import ghidra.pcode.pcoderaw
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.util.task
import java.lang


class Emulate(object):




    def __init__(self, __a0: ghidra.app.plugin.processors.sleigh.SleighLanguage, __a1: ghidra.pcode.memstate.MemoryState, __a2: ghidra.pcode.emulate.BreakTable): ...



    def dispose(self) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def executeBranch(self, __a0: ghidra.pcode.pcoderaw.PcodeOpRaw) -> None: ...

    def executeBranchind(self, __a0: ghidra.pcode.pcoderaw.PcodeOpRaw) -> None: ...

    def executeCall(self, __a0: ghidra.pcode.pcoderaw.PcodeOpRaw) -> None: ...

    def executeCallind(self, __a0: ghidra.pcode.pcoderaw.PcodeOpRaw) -> None: ...

    def executeCallother(self, __a0: ghidra.pcode.pcoderaw.PcodeOpRaw) -> None: ...

    def executeConditionalBranch(self, __a0: ghidra.pcode.pcoderaw.PcodeOpRaw) -> None: ...

    def executeIndirect(self, __a0: ghidra.pcode.pcoderaw.PcodeOpRaw) -> None: ...

    def executeInstruction(self, __a0: bool, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def executeLoad(self, __a0: ghidra.pcode.pcoderaw.PcodeOpRaw) -> None: ...

    def executeMultiequal(self, __a0: ghidra.pcode.pcoderaw.PcodeOpRaw) -> None: ...

    def executeStore(self, __a0: ghidra.pcode.pcoderaw.PcodeOpRaw) -> None: ...

    def fallthruOp(self) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def getContextRegisterValue(self) -> ghidra.program.model.lang.RegisterValue: ...

    def getExecuteAddress(self) -> ghidra.program.model.address.Address: ...

    def getExecutionState(self) -> ghidra.pcode.emulate.EmulateExecutionState: ...

    def getLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getLastExecuteAddress(self) -> ghidra.program.model.address.Address: ...

    def getMemoryState(self) -> ghidra.pcode.memstate.MemoryState: ...

    def getNewDisassemblerContext(self) -> ghidra.pcode.emulate.EmulateDisassemblerContext: ...

    def hashCode(self) -> int: ...

    def isInstructionStart(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setContextRegisterValue(self, __a0: ghidra.program.model.lang.RegisterValue) -> None: ...

    def setExecuteAddress(self, __a0: ghidra.program.model.address.Address) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def contextRegisterValue(self) -> ghidra.program.model.lang.RegisterValue: ...

    @contextRegisterValue.setter
    def contextRegisterValue(self, value: ghidra.program.model.lang.RegisterValue) -> None: ...

    @property
    def executeAddress(self) -> ghidra.program.model.address.Address: ...

    @executeAddress.setter
    def executeAddress(self, value: ghidra.program.model.address.Address) -> None: ...

    @property
    def executionState(self) -> ghidra.pcode.emulate.EmulateExecutionState: ...

    @property
    def instructionStart(self) -> bool: ...

    @property
    def language(self) -> ghidra.program.model.lang.Language: ...

    @property
    def lastExecuteAddress(self) -> ghidra.program.model.address.Address: ...

    @property
    def memoryState(self) -> ghidra.pcode.memstate.MemoryState: ...

    @property
    def newDisassemblerContext(self) -> ghidra.pcode.emulate.EmulateDisassemblerContext: ...