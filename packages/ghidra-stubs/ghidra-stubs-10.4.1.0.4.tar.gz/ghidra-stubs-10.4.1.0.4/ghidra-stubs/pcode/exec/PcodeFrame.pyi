from typing import List
import ghidra.program.model.pcode
import java.lang
import java.util


class PcodeFrame(object):




    def __init__(self, __a0: ghidra.program.model.lang.Language, __a1: List[object], __a2: java.util.Map): ...



    def advance(self) -> int: ...

    def branch(self, __a0: int) -> None: ...

    def copyCode(self) -> List[ghidra.program.model.pcode.PcodeOp]: ...

    def count(self) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def finishAsBranch(self) -> None: ...

    def getBranched(self) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getCode(self) -> List[object]: ...

    def getUseropName(self, __a0: int) -> unicode: ...

    def getUseropNames(self) -> java.util.Map: ...

    def hashCode(self) -> int: ...

    def index(self) -> int: ...

    def isBranch(self) -> bool: ...

    def isFallThrough(self) -> bool: ...

    def isFinished(self) -> bool: ...

    def nextOp(self) -> ghidra.program.model.pcode.PcodeOp: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def stepBack(self) -> int: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def branched(self) -> int: ...

    @property
    def code(self) -> List[object]: ...

    @property
    def fallThrough(self) -> bool: ...

    @property
    def finished(self) -> bool: ...

    @property
    def useropNames(self) -> java.util.Map: ...