from typing import List
import ghidra.pcode.exec
import ghidra.program.model.lang
import ghidra.program.model.pcode
import java.lang
import org.apache.commons.lang3.tuple


class PairedPcodeArithmetic(object, ghidra.pcode.exec.PcodeArithmetic):
    SIZEOF_SIZEOF: int = 8



    def __init__(self, __a0: ghidra.pcode.exec.PcodeArithmetic, __a1: ghidra.pcode.exec.PcodeArithmetic): ...



    @overload
    def binaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: org.apache.commons.lang3.tuple.Pair, __a2: org.apache.commons.lang3.tuple.Pair) -> org.apache.commons.lang3.tuple.Pair: ...

    @overload
    def binaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: object, __a2: object) -> object: ...

    @overload
    def binaryOp(self, __a0: int, __a1: int, __a2: int, __a3: org.apache.commons.lang3.tuple.Pair, __a4: int, __a5: org.apache.commons.lang3.tuple.Pair) -> org.apache.commons.lang3.tuple.Pair: ...

    @overload
    def binaryOp(self, __a0: int, __a1: int, __a2: int, __a3: object, __a4: int, __a5: object) -> object: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def fromConst(self, __a0: List[int]) -> org.apache.commons.lang3.tuple.Pair: ...

    @overload
    def fromConst(self, __a0: long, __a1: int) -> object: ...

    @overload
    def fromConst(self, __a0: long, __a1: int) -> object: ...

    @overload
    def fromConst(self, __a0: long, __a1: int, __a2: bool) -> object: ...

    def getClass(self) -> java.lang.Class: ...

    def getEndian(self) -> ghidra.program.model.lang.Endian: ...

    def getLeft(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    def getRight(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    def hashCode(self) -> int: ...

    def isTrue(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> bool: ...

    @overload
    def modAfterLoad(self, __a0: int, __a1: int, __a2: org.apache.commons.lang3.tuple.Pair, __a3: int, __a4: org.apache.commons.lang3.tuple.Pair) -> org.apache.commons.lang3.tuple.Pair: ...

    @overload
    def modAfterLoad(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object) -> object: ...

    @overload
    def modBeforeStore(self, __a0: int, __a1: int, __a2: org.apache.commons.lang3.tuple.Pair, __a3: int, __a4: org.apache.commons.lang3.tuple.Pair) -> org.apache.commons.lang3.tuple.Pair: ...

    @overload
    def modBeforeStore(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object) -> object: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ptrAdd(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object, __a5: int) -> object: ...

    def ptrSub(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object) -> object: ...

    @overload
    def sizeOf(self, __a0: org.apache.commons.lang3.tuple.Pair) -> long: ...

    @overload
    def sizeOf(self, __a0: object) -> long: ...

    def sizeOfAbstract(self, __a0: object) -> object: ...

    def toBigInteger(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> long: ...

    @overload
    def toConcrete(self, __a0: org.apache.commons.lang3.tuple.Pair, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> List[int]: ...

    @overload
    def toConcrete(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> List[int]: ...

    def toLong(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> long: ...

    def toString(self) -> unicode: ...

    @overload
    def unaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: org.apache.commons.lang3.tuple.Pair) -> org.apache.commons.lang3.tuple.Pair: ...

    @overload
    def unaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: object) -> object: ...

    @overload
    def unaryOp(self, __a0: int, __a1: int, __a2: int, __a3: org.apache.commons.lang3.tuple.Pair) -> org.apache.commons.lang3.tuple.Pair: ...

    @overload
    def unaryOp(self, __a0: int, __a1: int, __a2: int, __a3: object) -> object: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def endian(self) -> ghidra.program.model.lang.Endian: ...

    @property
    def left(self) -> ghidra.pcode.exec.PcodeArithmetic: ...

    @property
    def right(self) -> ghidra.pcode.exec.PcodeArithmetic: ...