from typing import List
import ghidra.pcode.memstate
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.pcode
import java.lang


class DefaultMemoryState(ghidra.pcode.memstate.AbstractMemoryState):




    def __init__(self, __a0: ghidra.program.model.lang.Language): ...



    def equals(self, __a0: object) -> bool: ...

    @overload
    def getBigInteger(self, __a0: unicode) -> long: ...

    @overload
    def getBigInteger(self, __a0: ghidra.program.model.lang.Register) -> long: ...

    @overload
    def getBigInteger(self, __a0: ghidra.program.model.pcode.Varnode, __a1: bool) -> long: ...

    @overload
    def getBigInteger(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int, __a3: bool) -> long: ...

    def getChunk(self, __a0: List[int], __a1: ghidra.program.model.address.AddressSpace, __a2: long, __a3: int, __a4: bool) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getMemoryBank(self, __a0: ghidra.program.model.address.AddressSpace) -> ghidra.pcode.memstate.MemoryBank: ...

    @overload
    def getValue(self, __a0: unicode) -> long: ...

    @overload
    def getValue(self, __a0: ghidra.program.model.lang.Register) -> long: ...

    @overload
    def getValue(self, __a0: ghidra.program.model.pcode.Varnode) -> long: ...

    @overload
    def getValue(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int) -> long: ...

    def hashCode(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setChunk(self, __a0: List[int], __a1: ghidra.program.model.address.AddressSpace, __a2: long, __a3: int) -> None: ...

    def setInitialized(self, __a0: bool, __a1: ghidra.program.model.address.AddressSpace, __a2: long, __a3: int) -> None: ...

    def setMemoryBank(self, __a0: ghidra.pcode.memstate.MemoryBank) -> None: ...

    @overload
    def setValue(self, __a0: unicode, __a1: long) -> None: ...

    @overload
    def setValue(self, __a0: ghidra.program.model.lang.Register, __a1: long) -> None: ...

    @overload
    def setValue(self, __a0: ghidra.program.model.pcode.Varnode, __a1: long) -> None: ...

    @overload
    def setValue(self, __a0: unicode, __a1: long) -> None: ...

    @overload
    def setValue(self, __a0: ghidra.program.model.lang.Register, __a1: long) -> None: ...

    @overload
    def setValue(self, __a0: ghidra.program.model.pcode.Varnode, __a1: long) -> None: ...

    @overload
    def setValue(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int, __a3: long) -> None: ...

    @overload
    def setValue(self, __a0: ghidra.program.model.address.AddressSpace, __a1: long, __a2: int, __a3: long) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def memoryBank(self) -> None: ...  # No getter available.

    @memoryBank.setter
    def memoryBank(self, value: ghidra.pcode.memstate.MemoryBank) -> None: ...