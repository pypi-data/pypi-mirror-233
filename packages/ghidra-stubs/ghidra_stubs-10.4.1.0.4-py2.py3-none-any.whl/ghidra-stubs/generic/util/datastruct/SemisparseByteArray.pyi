from typing import List
import generic
import ghidra.generic.util.datastruct
import java.lang


class SemisparseByteArray(object):
    BLOCK_SIZE: int = 4096



    def __init__(self): ...



    def clear(self) -> None: ...

    def contiguousAvailableAfter(self, __a0: long) -> int: ...

    def equals(self, __a0: object) -> bool: ...

    def fork(self) -> ghidra.generic.util.datastruct.SemisparseByteArray: ...

    def getClass(self) -> java.lang.Class: ...

    @overload
    def getData(self, __a0: long, __a1: List[int]) -> None: ...

    @overload
    def getData(self, __a0: long, __a1: List[int], __a2: int, __a3: int) -> None: ...

    def getInitialized(self, __a0: long, __a1: long) -> generic.ULongSpan.ULongSpanSet: ...

    def getUninitialized(self, __a0: long, __a1: long) -> generic.ULongSpan.ULongSpanSet: ...

    def hashCode(self) -> int: ...

    @overload
    def isInitialized(self, __a0: long) -> bool: ...

    @overload
    def isInitialized(self, __a0: long, __a1: long) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def putAll(self, __a0: ghidra.generic.util.datastruct.SemisparseByteArray) -> None: ...

    @overload
    def putData(self, __a0: long, __a1: List[int]) -> None: ...

    @overload
    def putData(self, __a0: long, __a1: List[int], __a2: int, __a3: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

