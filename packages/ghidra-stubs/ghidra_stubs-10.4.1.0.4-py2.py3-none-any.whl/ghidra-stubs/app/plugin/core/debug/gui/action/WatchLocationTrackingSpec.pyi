import ghidra.app.plugin.core.debug
import ghidra.app.plugin.core.debug.gui.action
import ghidra.app.plugin.core.debug.gui.watch
import ghidra.trace.model
import ghidra.trace.util
import java.lang
import javax.swing


class WatchLocationTrackingSpec(object, ghidra.app.plugin.core.debug.gui.action.LocationTrackingSpec):
    CONFIG_PREFIX: unicode = u'TRACK_WATCH_'



    def __init__(self, __a0: unicode): ...



    @staticmethod
    def changeIsCurrent(__a0: ghidra.trace.util.TraceAddressSpace, __a1: ghidra.trace.model.TraceAddressSnapRange, __a2: ghidra.app.plugin.core.debug.DebuggerCoordinates) -> bool: ...

    def computeTitle(self, __a0: ghidra.app.plugin.core.debug.DebuggerCoordinates) -> unicode: ...

    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def fromWatch(__a0: ghidra.app.plugin.core.debug.gui.watch.WatchRow) -> ghidra.app.plugin.core.debug.gui.action.WatchLocationTrackingSpec: ...

    def getClass(self) -> java.lang.Class: ...

    def getConfigName(self) -> unicode: ...

    def getLocationLabel(self) -> unicode: ...

    def getMenuIcon(self) -> javax.swing.Icon: ...

    def getMenuName(self) -> unicode: ...

    def getTracker(self) -> ghidra.app.plugin.core.debug.gui.action.LocationTracker: ...

    def hashCode(self) -> int: ...

    @staticmethod
    def isTrackable(__a0: ghidra.app.plugin.core.debug.gui.watch.WatchRow) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def configName(self) -> unicode: ...

    @property
    def locationLabel(self) -> unicode: ...

    @property
    def menuIcon(self) -> javax.swing.Icon: ...

    @property
    def menuName(self) -> unicode: ...

    @property
    def tracker(self) -> ghidra.app.plugin.core.debug.gui.action.LocationTracker: ...