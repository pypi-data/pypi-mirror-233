from typing import Iterator
import ghidra.util.datastruct
import java.lang
import java.util
import java.util.function
import java.util.stream


class CopyOnReadWeakSet(ghidra.util.datastruct.WeakSet):
    """
    A copy on read set that will create a copy of its internal data for iteration operations.  This
     allows clients to avoid concurrency issue by allowing mutates during reads.  All operations
     of this class are synchronized to allow clients to use non-iterative methods without the need
     for a copy operation.
    """





    def __init__(self): ...

    def __iter__(self): ...

    def add(self, t: object) -> None: ...

    def addAll(self, it: java.lang.Iterable) -> None:
        """
        Adds all items to this set
        @param it the items
        """
        ...

    def clear(self) -> None: ...

    def contains(self, t: object) -> bool: ...

    def equals(self, __a0: object) -> bool: ...

    def forEach(self, __a0: java.util.function.Consumer) -> None: ...

    def getClass(self) -> java.lang.Class: ...

    def hashCode(self) -> int: ...

    def isEmpty(self) -> bool: ...

    def iterator(self) -> Iterator[object]: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def remove(self, t: object) -> None: ...

    def size(self) -> int: ...

    def spliterator(self) -> java.util.Spliterator: ...

    def stream(self) -> java.util.stream.Stream: ...

    def toString(self) -> unicode: ...

    def values(self) -> java.util.Collection: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

