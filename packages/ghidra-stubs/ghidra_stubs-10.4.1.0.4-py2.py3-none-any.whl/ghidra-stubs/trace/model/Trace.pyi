from typing import List
import db
import ghidra.framework.model
import ghidra.framework.options
import ghidra.program.model.address
import ghidra.program.model.data
import ghidra.program.model.lang
import ghidra.trace.model
import ghidra.trace.model.bookmark
import ghidra.trace.model.breakpoint
import ghidra.trace.model.context
import ghidra.trace.model.guest
import ghidra.trace.model.listing
import ghidra.trace.model.memory
import ghidra.trace.model.modules
import ghidra.trace.model.program
import ghidra.trace.model.property
import ghidra.trace.model.stack
import ghidra.trace.model.symbol
import ghidra.trace.model.target
import ghidra.trace.model.thread
import ghidra.trace.model.time
import ghidra.trace.util
import ghidra.util
import ghidra.util.task
import java.io
import java.lang
import java.util
import utility.function


class Trace(ghidra.program.model.data.DataTypeManagerDomainObject, object):
    DO_DOMAIN_FILE_CHANGED: int = 2
    DO_OBJECT_CLOSED: int = 6
    DO_OBJECT_ERROR: int = 8
    DO_OBJECT_RENAMED: int = 3
    DO_OBJECT_RESTORED: int = 4
    DO_OBJECT_SAVED: int = 1
    DO_PROPERTY_CHANGED: int = 5
    TRACE_ICON: javax.swing.Icon = jar:file:/opt/hostedtoolcache/ghidra/10.4/x64/Ghidra/Framework/Gui/lib/Gui.jar!/images/core.png
    undoLock: object = java.lang.Object@5718d051




    class TraceStackChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@24f61523
        CHANGED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@6e401e26
        DELETED: ghidra.trace.model.Trace.TraceStackChangeType = ghidra.trace.model.Trace$TraceStackChangeType@7f0d571d



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceProgramViewListener(object):








        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        def viewCreated(self, __a0: ghidra.trace.model.program.TraceProgramView) -> None: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TracePlatformChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@9f4692e
        DELETED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@1d3f28a7
        MAPPING_ADDED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@5f4fdeba
        MAPPING_DELETED: ghidra.trace.model.Trace.TracePlatformChangeType = ghidra.trace.model.Trace$TracePlatformChangeType@6a51be46



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceStaticMappingChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceStaticMappingChangeType = ghidra.trace.model.Trace$TraceStaticMappingChangeType@55ae751a
        DELETED: ghidra.trace.model.Trace.TraceStaticMappingChangeType = ghidra.trace.model.Trace$TraceStaticMappingChangeType@7fb9deda



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSymbolChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@23e20876
        ADDRESS_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@250c4a02
        ASSOCIATION_ADDED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@6e687a0e
        ASSOCIATION_REMOVED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@899f915
        CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@1453344c
        DELETED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@25ad6712
        LIFESPAN_CHANGED: ghidra.trace.util.DefaultTraceChangeType = ghidra.trace.util.DefaultTraceChangeType@30dc018
        PARENT_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@4d531c28
        RENAMED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@20b31526
        SET_AS_PRIMARY: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@1dae71a0
        SOURCE_CHANGED: ghidra.trace.model.Trace.TraceSymbolChangeType = ghidra.trace.model.Trace$TraceSymbolChangeType@6394d364



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCodeChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@22a77362
        DATA_TYPE_REPLACED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@3d1e54ae
        DATA_TYPE_SETTINGS_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@48c4928f
        FRAGMENT_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@fdf952c
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@2609c946
        REMOVED: ghidra.trace.model.Trace.TraceCodeChangeType = ghidra.trace.model.Trace$TraceCodeChangeType@5122f4ef



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryStateChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceMemoryStateChangeType = ghidra.trace.model.Trace$TraceMemoryStateChangeType@4c90ac05



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceModuleChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@613ffe05
        CHANGED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@45272224
        DELETED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@3fa52b5b
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceModuleChangeType = ghidra.trace.model.Trace$TraceModuleChangeType@769c582e



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceReferenceChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@3272048c
        DELETED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@1f55ad77
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@184b74e
        PRIMARY_CHANGED: ghidra.trace.model.Trace.TraceReferenceChangeType = ghidra.trace.model.Trace$TraceReferenceChangeType@b1cd912



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSnapshotChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@6ba960f0
        CHANGED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@6dc7af12
        DELETED: ghidra.trace.model.Trace.TraceSnapshotChangeType = ghidra.trace.model.Trace$TraceSnapshotChangeType@49dd4b23



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCommentChangeType(ghidra.trace.util.DefaultTraceChangeType):
        EOL_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@3b5b0d71
        PLATE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@1771e63c
        POST_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@3bac3894
        PRE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@1b55400b
        REPEATABLE_CHANGED: ghidra.trace.model.Trace.TraceCommentChangeType = ghidra.trace.model.Trace$TraceCommentChangeType@38f29065
        type: int







        @staticmethod
        def byType(__a0: int) -> ghidra.trace.model.Trace.TraceCommentChangeType: ...

        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCompositeDataChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@1f74e053
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@45c608e7
        REMOVED: ghidra.trace.model.Trace.TraceCompositeDataChangeType = ghidra.trace.model.Trace$TraceCompositeDataChangeType@7aca587



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSourceArchiveChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@23a46b62
        CHANGED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@79086f4a
        DELETED: ghidra.trace.model.Trace.TraceSourceArchiveChangeType = ghidra.trace.model.Trace$TraceSourceArchiveChangeType@41c66e40



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryRegionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@194ba4f8
        CHANGED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@73827017
        DELETED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@1c4a449
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceMemoryRegionChangeType = ghidra.trace.model.Trace$TraceMemoryRegionChangeType@13b3068



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceObjectChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CREATED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@4123a316
        DELETED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@58bab3b
        LIFE_CHANGED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@75794ecd
        VALUE_CREATED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@4b2c5448
        VALUE_DELETED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@73507731
        VALUE_LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceObjectChangeType = ghidra.trace.model.Trace$TraceObjectChangeType@5d6b688e



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceDataTypeChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@cf5b1fb
        CHANGED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@7114cc91
        DELETED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@10dc47d
        MOVED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@34938d9b
        RENAMED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@5bd284b0
        REPLACED: ghidra.trace.model.Trace.TraceDataTypeChangeType = ghidra.trace.model.Trace$TraceDataTypeChangeType@3ebdedb7



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceCategoryChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@bf1faf6
        DELETED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@44c911db
        MOVED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@5636768f
        RENAMED: ghidra.trace.model.Trace.TraceCategoryChangeType = ghidra.trace.model.Trace$TraceCategoryChangeType@23a65146



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceOverlaySpaceChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceOverlaySpaceChangeType = ghidra.trace.model.Trace$TraceOverlaySpaceChangeType@19bd0614
        DELETED: ghidra.trace.model.Trace.TraceOverlaySpaceChangeType = ghidra.trace.model.Trace$TraceOverlaySpaceChangeType@5e5f85b8



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceMemoryBytesChangeType(ghidra.trace.util.DefaultTraceChangeType):
        CHANGED: ghidra.trace.model.Trace.TraceMemoryBytesChangeType = ghidra.trace.model.Trace$TraceMemoryBytesChangeType@2a855629



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceInstructionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        FALL_THROUGH_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@3d0f220e
        FLOW_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@642eae98
        LENGTH_OVERRIDE_CHANGED: ghidra.trace.model.Trace.TraceInstructionChangeType = ghidra.trace.model.Trace$TraceInstructionChangeType@641a882a



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceSectionChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@66e955f4
        CHANGED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@4749e0d9
        DELETED: ghidra.trace.model.Trace.TraceSectionChangeType = ghidra.trace.model.Trace$TraceSectionChangeType@5602dcc6



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceBookmarkChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@27301ea8
        CHANGED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@78c5483a
        DELETED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@148bfb05
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@75661ca6
        TYPE_ADDED: ghidra.trace.model.Trace.TraceBookmarkChangeType = ghidra.trace.model.Trace$TraceBookmarkChangeType@38615f08



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceBreakpointChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@75979871
        CHANGED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@5e030e2c
        DELETED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@1b45ba66
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceBreakpointChangeType = ghidra.trace.model.Trace$TraceBreakpointChangeType@3c2722f8



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...






    class TraceThreadChangeType(ghidra.trace.util.DefaultTraceChangeType):
        ADDED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@66f37af2
        CHANGED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@5838009
        DELETED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@3652a3
        LIFESPAN_CHANGED: ghidra.trace.model.Trace.TraceThreadChangeType = ghidra.trace.model.Trace$TraceThreadChangeType@492b06c4



        def __init__(self): ...



        def cast(self, __a0: ghidra.framework.model.DomainObjectChangeRecord) -> ghidra.trace.util.TraceChangeRecord: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        @staticmethod
        def getName(__a0: int) -> unicode: ...

        def getSubType(self) -> int: ...

        def getType(self) -> int: ...

        def hashCode(self) -> int: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def toString(self) -> unicode: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    def addCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def addConsumer(self, __a0: object) -> bool: ...

    def addListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def addProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def addSynchronizedDomainObject(self, __a0: ghidra.framework.model.DomainObject) -> None: ...

    def addTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def canLock(self) -> bool: ...

    def canRedo(self) -> bool: ...

    def canSave(self) -> bool: ...

    def canUndo(self) -> bool: ...

    def clearUndo(self) -> None: ...

    def createPrivateEventQueue(self, __a0: ghidra.framework.model.DomainObjectListener, __a1: int) -> ghidra.framework.model.EventQueueID: ...

    def createProgramView(self, __a0: long) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    def createTimeViewport(self) -> ghidra.trace.model.TraceTimeViewport: ...

    def endTransaction(self, __a0: int, __a1: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def flushEvents(self) -> None: ...

    def flushPrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> None: ...

    def forceLock(self, __a0: bool, __a1: unicode) -> None: ...

    def getAddressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    def getAllProgramViews(self) -> java.util.Collection: ...

    def getAllRedoNames(self) -> List[object]: ...

    def getAllUndoNames(self) -> List[object]: ...

    def getBaseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    def getBaseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    def getBaseLanguage(self) -> ghidra.program.model.lang.Language: ...

    def getBookmarkManager(self) -> ghidra.trace.model.bookmark.TraceBookmarkManager: ...

    def getBreakpointManager(self) -> ghidra.trace.model.breakpoint.TraceBreakpointManager: ...

    def getClass(self) -> java.lang.Class: ...

    def getCodeManager(self) -> ghidra.trace.model.listing.TraceCodeManager: ...

    def getConsumerList(self) -> java.util.ArrayList: ...

    def getCurrentTransactionInfo(self) -> ghidra.framework.model.TransactionInfo: ...

    def getDataTypeManager(self) -> ghidra.program.model.data.DataTypeManager: ...

    def getDescription(self) -> unicode: ...

    def getDomainFile(self) -> ghidra.framework.model.DomainFile: ...

    def getEmulatorCacheVersion(self) -> long: ...

    def getEquateManager(self) -> ghidra.trace.model.symbol.TraceEquateManager: ...

    def getFixedProgramView(self, __a0: long) -> ghidra.trace.model.program.TraceProgramView: ...

    def getMemoryManager(self) -> ghidra.trace.model.memory.TraceMemoryManager: ...

    def getMetadata(self) -> java.util.Map: ...

    def getModificationNumber(self) -> long: ...

    def getModuleManager(self) -> ghidra.trace.model.modules.TraceModuleManager: ...

    def getName(self) -> unicode: ...

    def getObjectManager(self) -> ghidra.trace.model.target.TraceObjectManager: ...

    def getOptions(self, __a0: unicode) -> ghidra.framework.options.Options: ...

    def getOptionsNames(self) -> List[object]: ...

    def getPlatformManager(self) -> ghidra.trace.model.guest.TracePlatformManager: ...

    def getProgramView(self) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    def getRedoName(self) -> unicode: ...

    def getReferenceManager(self) -> ghidra.trace.model.symbol.TraceReferenceManager: ...

    def getRegisterContextManager(self) -> ghidra.trace.model.context.TraceRegisterContextManager: ...

    def getStackManager(self) -> ghidra.trace.model.stack.TraceStackManager: ...

    def getStaticMappingManager(self) -> ghidra.trace.model.modules.TraceStaticMappingManager: ...

    def getSymbolManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    def getSynchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    def getThreadManager(self) -> ghidra.trace.model.thread.TraceThreadManager: ...

    def getTimeManager(self) -> ghidra.trace.model.time.TraceTimeManager: ...

    def getUndoName(self) -> unicode: ...

    def hasExclusiveAccess(self) -> bool: ...

    def hasTerminatedTransaction(self) -> bool: ...

    def hashCode(self) -> int: ...

    def isChangeable(self) -> bool: ...

    def isChanged(self) -> bool: ...

    def isClosed(self) -> bool: ...

    @staticmethod
    def isLegacy(__a0: ghidra.trace.model.Trace) -> bool: ...

    def isLocked(self) -> bool: ...

    def isSendingEvents(self) -> bool: ...

    def isTemporary(self) -> bool: ...

    def isUsedBy(self, __a0: object) -> bool: ...

    def lock(self, __a0: unicode) -> bool: ...

    def lockRead(self) -> ghidra.util.LockHold: ...

    def lockWrite(self) -> ghidra.util.LockHold: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def openTransaction(self, __a0: unicode) -> db.Transaction: ...

    def redo(self) -> None: ...

    def release(self, __a0: object) -> None: ...

    def releaseSynchronizedDomainObject(self) -> None: ...

    def removeCloseListener(self, __a0: ghidra.framework.model.DomainObjectClosedListener) -> None: ...

    def removeListener(self, __a0: ghidra.framework.model.DomainObjectListener) -> None: ...

    def removePrivateEventQueue(self, __a0: ghidra.framework.model.EventQueueID) -> bool: ...

    def removeProgramViewListener(self, __a0: ghidra.trace.model.Trace.TraceProgramViewListener) -> None: ...

    def removeTransactionListener(self, __a0: ghidra.framework.model.TransactionListener) -> None: ...

    def save(self, __a0: unicode, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def saveToPackedFile(self, __a0: java.io.File, __a1: ghidra.util.task.TaskMonitor) -> None: ...

    def setEmulatorCacheVersion(self, __a0: long) -> None: ...

    def setEventsEnabled(self, __a0: bool) -> None: ...

    def setName(self, __a0: unicode) -> None: ...

    def setTemporary(self, __a0: bool) -> None: ...

    @overload
    def startTransaction(self, __a0: unicode) -> int: ...

    @overload
    def startTransaction(self, __a0: unicode, __a1: ghidra.framework.model.AbortedTransactionListener) -> int: ...

    def toString(self) -> unicode: ...

    def undo(self) -> None: ...

    def unlock(self) -> None: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @overload
    def withTransaction(self, __a0: unicode, __a1: utility.function.ExceptionalCallback) -> None: ...

    @overload
    def withTransaction(self, __a0: unicode, __a1: utility.function.ExceptionalSupplier) -> object: ...

    @property
    def addressPropertyManager(self) -> ghidra.trace.model.property.TraceAddressPropertyManager: ...

    @property
    def allProgramViews(self) -> java.util.Collection: ...

    @property
    def allRedoNames(self) -> List[object]: ...

    @property
    def allUndoNames(self) -> List[object]: ...

    @property
    def baseAddressFactory(self) -> ghidra.program.model.address.AddressFactory: ...

    @property
    def baseCompilerSpec(self) -> ghidra.program.model.lang.CompilerSpec: ...

    @property
    def baseLanguage(self) -> ghidra.program.model.lang.Language: ...

    @property
    def bookmarkManager(self) -> ghidra.trace.model.bookmark.TraceBookmarkManager: ...

    @property
    def breakpointManager(self) -> ghidra.trace.model.breakpoint.TraceBreakpointManager: ...

    @property
    def changeable(self) -> bool: ...

    @property
    def changed(self) -> bool: ...

    @property
    def closed(self) -> bool: ...

    @property
    def codeManager(self) -> ghidra.trace.model.listing.TraceCodeManager: ...

    @property
    def consumerList(self) -> java.util.ArrayList: ...

    @property
    def currentTransactionInfo(self) -> ghidra.framework.model.TransactionInfo: ...

    @property
    def dataTypeManager(self) -> ghidra.trace.model.data.TraceBasedDataTypeManager: ...

    @property
    def description(self) -> unicode: ...

    @property
    def domainFile(self) -> ghidra.framework.model.DomainFile: ...

    @property
    def emulatorCacheVersion(self) -> long: ...

    @emulatorCacheVersion.setter
    def emulatorCacheVersion(self, value: long) -> None: ...

    @property
    def equateManager(self) -> ghidra.trace.model.symbol.TraceEquateManager: ...

    @property
    def eventsEnabled(self) -> None: ...  # No getter available.

    @eventsEnabled.setter
    def eventsEnabled(self, value: bool) -> None: ...

    @property
    def locked(self) -> bool: ...

    @property
    def memoryManager(self) -> ghidra.trace.model.memory.TraceMemoryManager: ...

    @property
    def metadata(self) -> java.util.Map: ...

    @property
    def modificationNumber(self) -> long: ...

    @property
    def moduleManager(self) -> ghidra.trace.model.modules.TraceModuleManager: ...

    @property
    def name(self) -> unicode: ...

    @name.setter
    def name(self, value: unicode) -> None: ...

    @property
    def objectManager(self) -> ghidra.trace.model.target.TraceObjectManager: ...

    @property
    def optionsNames(self) -> List[object]: ...

    @property
    def platformManager(self) -> ghidra.trace.model.guest.TracePlatformManager: ...

    @property
    def programView(self) -> ghidra.trace.model.program.TraceVariableSnapProgramView: ...

    @property
    def redoName(self) -> unicode: ...

    @property
    def referenceManager(self) -> ghidra.trace.model.symbol.TraceReferenceManager: ...

    @property
    def registerContextManager(self) -> ghidra.trace.model.context.TraceRegisterContextManager: ...

    @property
    def sendingEvents(self) -> bool: ...

    @property
    def stackManager(self) -> ghidra.trace.model.stack.TraceStackManager: ...

    @property
    def staticMappingManager(self) -> ghidra.trace.model.modules.TraceStaticMappingManager: ...

    @property
    def symbolManager(self) -> ghidra.trace.model.symbol.TraceSymbolManager: ...

    @property
    def synchronizedDomainObjects(self) -> List[ghidra.framework.model.DomainObject]: ...

    @property
    def temporary(self) -> bool: ...

    @temporary.setter
    def temporary(self, value: bool) -> None: ...

    @property
    def threadManager(self) -> ghidra.trace.model.thread.TraceThreadManager: ...

    @property
    def timeManager(self) -> ghidra.trace.model.time.TraceTimeManager: ...

    @property
    def undoName(self) -> unicode: ...