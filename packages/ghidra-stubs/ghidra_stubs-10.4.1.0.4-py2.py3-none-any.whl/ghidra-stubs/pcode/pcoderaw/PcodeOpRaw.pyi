from typing import List
import ghidra.pcode.opbehavior
import ghidra.program.model.address
import ghidra.program.model.pcode
import java.lang
import java.util


class PcodeOpRaw(ghidra.program.model.pcode.PcodeOp):




    def __init__(self, __a0: ghidra.program.model.pcode.PcodeOp): ...



    @staticmethod
    def decode(__a0: ghidra.program.model.pcode.Decoder, __a1: ghidra.program.model.pcode.PcodeFactory) -> ghidra.program.model.pcode.PcodeOp: ...

    def encodeRaw(self, __a0: ghidra.program.model.pcode.Encoder, __a1: ghidra.program.model.address.AddressFactory) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getBasicIter(self) -> java.util.Iterator: ...

    def getBehavior(self) -> ghidra.pcode.opbehavior.OpBehavior: ...

    def getClass(self) -> java.lang.Class: ...

    def getInput(self, __a0: int) -> ghidra.program.model.pcode.Varnode: ...

    def getInputs(self) -> List[ghidra.program.model.pcode.Varnode]: ...

    def getInsertIter(self) -> java.util.Iterator: ...

    @overload
    def getMnemonic(self) -> unicode: ...

    @overload
    @staticmethod
    def getMnemonic(__a0: int) -> unicode: ...

    def getNumInputs(self) -> int: ...

    @overload
    def getOpcode(self) -> int: ...

    @overload
    @staticmethod
    def getOpcode(__a0: unicode) -> int: ...

    def getOutput(self) -> ghidra.program.model.pcode.Varnode: ...

    def getParent(self) -> ghidra.program.model.pcode.PcodeBlockBasic: ...

    def getSeqnum(self) -> ghidra.program.model.pcode.SequenceNumber: ...

    def getSlot(self, __a0: ghidra.program.model.pcode.Varnode) -> int: ...

    def hashCode(self) -> int: ...

    def insertInput(self, __a0: ghidra.program.model.pcode.Varnode, __a1: int) -> None: ...

    def isAssignment(self) -> bool: ...

    def isDead(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def removeInput(self, __a0: int) -> None: ...

    def setInput(self, __a0: ghidra.program.model.pcode.Varnode, __a1: int) -> None: ...

    def setOpcode(self, __a0: int) -> None: ...

    def setOrder(self, __a0: int) -> None: ...

    def setOutput(self, __a0: ghidra.program.model.pcode.Varnode) -> None: ...

    def setTime(self, __a0: int) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def behavior(self) -> ghidra.pcode.opbehavior.OpBehavior: ...