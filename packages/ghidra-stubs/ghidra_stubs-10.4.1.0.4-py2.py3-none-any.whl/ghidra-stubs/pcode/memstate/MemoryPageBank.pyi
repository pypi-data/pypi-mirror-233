from typing import List
import ghidra.pcode.memstate
import ghidra.program.model.address
import java.lang


class MemoryPageBank(ghidra.pcode.memstate.MemoryBank):




    def __init__(self, __a0: ghidra.program.model.address.AddressSpace, __a1: bool, __a2: int, __a3: ghidra.pcode.memstate.MemoryFaultHandler): ...



    @staticmethod
    def constructValue(__a0: List[int], __a1: int, __a2: int, __a3: bool) -> long: ...

    @staticmethod
    def deconstructValue(__a0: List[int], __a1: int, __a2: long, __a3: int, __a4: bool) -> None: ...

    def equals(self, __a0: object) -> bool: ...

    def getChunk(self, __a0: long, __a1: int, __a2: List[int], __a3: bool) -> int: ...

    def getClass(self) -> java.lang.Class: ...

    def getInitializedMaskSize(self) -> int: ...

    def getMemoryFaultHandler(self) -> ghidra.pcode.memstate.MemoryFaultHandler: ...

    def getPageSize(self) -> int: ...

    def getSpace(self) -> ghidra.program.model.address.AddressSpace: ...

    def hashCode(self) -> int: ...

    def isBigEndian(self) -> bool: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def setChunk(self, __a0: long, __a1: int, __a2: List[int]) -> None: ...

    def setInitialized(self, __a0: long, __a1: int, __a2: bool) -> None: ...

    def toString(self) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

