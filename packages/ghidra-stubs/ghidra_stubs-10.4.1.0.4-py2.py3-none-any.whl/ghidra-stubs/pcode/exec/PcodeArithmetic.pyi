from typing import List
import ghidra.pcode.exec
import ghidra.program.model.lang
import ghidra.program.model.pcode
import java.lang
import java.util


class PcodeArithmetic(object):
    SIZEOF_SIZEOF: int = 8




    class Purpose(java.lang.Enum):
        BRANCH: ghidra.pcode.exec.PcodeArithmetic.Purpose = BRANCH
        CONDITION: ghidra.pcode.exec.PcodeArithmetic.Purpose = CONDITION
        CONTEXT: ghidra.pcode.exec.PcodeArithmetic.Purpose = CONTEXT
        DECODE: ghidra.pcode.exec.PcodeArithmetic.Purpose = DECODE
        INSPECT: ghidra.pcode.exec.PcodeArithmetic.Purpose = INSPECT
        LOAD: ghidra.pcode.exec.PcodeArithmetic.Purpose = LOAD
        OTHER: ghidra.pcode.exec.PcodeArithmetic.Purpose = OTHER
        STORE: ghidra.pcode.exec.PcodeArithmetic.Purpose = STORE







        @overload
        def compareTo(self, __a0: java.lang.Enum) -> int: ...

        @overload
        def compareTo(self, __a0: object) -> int: ...

        def describeConstable(self) -> java.util.Optional: ...

        def equals(self, __a0: object) -> bool: ...

        def getClass(self) -> java.lang.Class: ...

        def getDeclaringClass(self) -> java.lang.Class: ...

        def hashCode(self) -> int: ...

        def name(self) -> unicode: ...

        def notify(self) -> None: ...

        def notifyAll(self) -> None: ...

        def ordinal(self) -> int: ...

        def reason(self) -> ghidra.pcode.exec.PcodeExecutorStatePiece.Reason: ...

        def toString(self) -> unicode: ...

        @overload
        @staticmethod
        def valueOf(__a0: unicode) -> ghidra.pcode.exec.PcodeArithmetic.Purpose: ...

        @overload
        @staticmethod
        def valueOf(__a0: java.lang.Class, __a1: unicode) -> java.lang.Enum: ...

        @staticmethod
        def values() -> List[ghidra.pcode.exec.PcodeArithmetic.Purpose]: ...

        @overload
        def wait(self) -> None: ...

        @overload
        def wait(self, __a0: long) -> None: ...

        @overload
        def wait(self, __a0: long, __a1: int) -> None: ...







    @overload
    def binaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: object, __a2: object) -> object: ...

    @overload
    def binaryOp(self, __a0: int, __a1: int, __a2: int, __a3: object, __a4: int, __a5: object) -> object: ...

    def equals(self, __a0: object) -> bool: ...

    @overload
    def fromConst(self, __a0: List[int]) -> object: ...

    @overload
    def fromConst(self, __a0: long, __a1: int) -> object: ...

    @overload
    def fromConst(self, __a0: long, __a1: int) -> object: ...

    @overload
    def fromConst(self, __a0: long, __a1: int, __a2: bool) -> object: ...

    def getClass(self) -> java.lang.Class: ...

    def getEndian(self) -> ghidra.program.model.lang.Endian: ...

    def hashCode(self) -> int: ...

    def isTrue(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> bool: ...

    def modAfterLoad(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object) -> object: ...

    def modBeforeStore(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object) -> object: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def ptrAdd(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object, __a5: int) -> object: ...

    def ptrSub(self, __a0: int, __a1: int, __a2: object, __a3: int, __a4: object) -> object: ...

    def sizeOf(self, __a0: object) -> long: ...

    def sizeOfAbstract(self, __a0: object) -> object: ...

    def toBigInteger(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> long: ...

    def toConcrete(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> List[int]: ...

    def toLong(self, __a0: object, __a1: ghidra.pcode.exec.PcodeArithmetic.Purpose) -> long: ...

    def toString(self) -> unicode: ...

    @overload
    def unaryOp(self, __a0: ghidra.program.model.pcode.PcodeOp, __a1: object) -> object: ...

    @overload
    def unaryOp(self, __a0: int, __a1: int, __a2: int, __a3: object) -> object: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def endian(self) -> ghidra.program.model.lang.Endian: ...