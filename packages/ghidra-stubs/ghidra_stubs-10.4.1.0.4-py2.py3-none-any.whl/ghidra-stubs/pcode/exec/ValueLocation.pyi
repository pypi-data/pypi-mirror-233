import ghidra.pcode.exec
import ghidra.program.model.address
import ghidra.program.model.lang
import ghidra.program.model.pcode
import java.lang


class ValueLocation(object):




    @overload
    def __init__(self, __a0: List[ghidra.program.model.pcode.Varnode]): ...

    @overload
    def __init__(self, __a0: List[object]): ...



    def equals(self, __a0: object) -> bool: ...

    @staticmethod
    def fromConst(__a0: long, __a1: int) -> ghidra.pcode.exec.ValueLocation: ...

    @staticmethod
    def fromVarnode(__a0: ghidra.program.model.address.Address, __a1: int) -> ghidra.pcode.exec.ValueLocation: ...

    def getAddress(self) -> ghidra.program.model.address.Address: ...

    def getClass(self) -> java.lang.Class: ...

    def getConst(self) -> long: ...

    def hashCode(self) -> int: ...

    def intOr(self, __a0: ghidra.pcode.exec.ValueLocation) -> ghidra.pcode.exec.ValueLocation: ...

    def isEmpty(self) -> bool: ...

    def nodeCount(self) -> int: ...

    def notify(self) -> None: ...

    def notifyAll(self) -> None: ...

    def shiftLeft(self, __a0: int) -> ghidra.pcode.exec.ValueLocation: ...

    def size(self) -> int: ...

    @overload
    def toString(self) -> unicode: ...

    @overload
    def toString(self, __a0: ghidra.program.model.lang.Language) -> unicode: ...

    @staticmethod
    def vnToString(__a0: ghidra.program.model.pcode.Varnode, __a1: ghidra.program.model.lang.Language) -> unicode: ...

    @overload
    def wait(self) -> None: ...

    @overload
    def wait(self, __a0: long) -> None: ...

    @overload
    def wait(self, __a0: long, __a1: int) -> None: ...

    @property
    def address(self) -> ghidra.program.model.address.Address: ...

    @property
    def const(self) -> long: ...

    @property
    def empty(self) -> bool: ...