# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from perian import schemas  # noqa: F401


class ApiModelsMemory(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            size = schemas.NumberSchema
        
            @staticmethod
            def unit() -> typing.Type['MemoryUnit']:
                return MemoryUnit
        
            @staticmethod
            def bandwidth() -> typing.Type['ApiModelsBandwidth']:
                return ApiModelsBandwidth
        
            @staticmethod
            def interface() -> typing.Type['MemoryInterface']:
                return MemoryInterface
            __annotations__ = {
                "size": size,
                "unit": unit,
                "bandwidth": bandwidth,
                "interface": interface,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["size"]) -> MetaOapg.properties.size: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit"]) -> 'MemoryUnit': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bandwidth"]) -> 'ApiModelsBandwidth': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["interface"]) -> 'MemoryInterface': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["size", "unit", "bandwidth", "interface", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["size"]) -> typing.Union[MetaOapg.properties.size, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit"]) -> typing.Union['MemoryUnit', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bandwidth"]) -> typing.Union['ApiModelsBandwidth', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["interface"]) -> typing.Union['MemoryInterface', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["size", "unit", "bandwidth", "interface", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        size: typing.Union[MetaOapg.properties.size, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        unit: typing.Union['MemoryUnit', schemas.Unset] = schemas.unset,
        bandwidth: typing.Union['ApiModelsBandwidth', schemas.Unset] = schemas.unset,
        interface: typing.Union['MemoryInterface', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiModelsMemory':
        return super().__new__(
            cls,
            *_args,
            size=size,
            unit=unit,
            bandwidth=bandwidth,
            interface=interface,
            _configuration=_configuration,
            **kwargs,
        )

from perian.model.api_models_bandwidth import ApiModelsBandwidth
from perian.model.memory_interface import MemoryInterface
from perian.model.memory_unit import MemoryUnit
