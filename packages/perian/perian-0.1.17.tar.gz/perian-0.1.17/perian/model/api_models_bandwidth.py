# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from perian import schemas  # noqa: F401


class ApiModelsBandwidth(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            speed = schemas.NumberSchema
        
            @staticmethod
            def unit() -> typing.Type['BandwidthUnits']:
                return BandwidthUnits
        
            @staticmethod
            def sla() -> typing.Type['BandwidthSla']:
                return BandwidthSla
        
            @staticmethod
            def limit() -> typing.Type['BandwidthLimits']:
                return BandwidthLimits
            __annotations__ = {
                "speed": speed,
                "unit": unit,
                "sla": sla,
                "limit": limit,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["speed"]) -> MetaOapg.properties.speed: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["unit"]) -> 'BandwidthUnits': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sla"]) -> 'BandwidthSla': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["limit"]) -> 'BandwidthLimits': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["speed", "unit", "sla", "limit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["speed"]) -> typing.Union[MetaOapg.properties.speed, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["unit"]) -> typing.Union['BandwidthUnits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sla"]) -> typing.Union['BandwidthSla', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["limit"]) -> typing.Union['BandwidthLimits', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["speed", "unit", "sla", "limit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        speed: typing.Union[MetaOapg.properties.speed, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        unit: typing.Union['BandwidthUnits', schemas.Unset] = schemas.unset,
        sla: typing.Union['BandwidthSla', schemas.Unset] = schemas.unset,
        limit: typing.Union['BandwidthLimits', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiModelsBandwidth':
        return super().__new__(
            cls,
            *_args,
            speed=speed,
            unit=unit,
            sla=sla,
            limit=limit,
            _configuration=_configuration,
            **kwargs,
        )

from perian.model.bandwidth_limits import BandwidthLimits
from perian.model.bandwidth_sla import BandwidthSla
from perian.model.bandwidth_units import BandwidthUnits
