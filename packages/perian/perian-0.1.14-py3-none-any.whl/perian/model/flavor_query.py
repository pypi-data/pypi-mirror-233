# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from perian import schemas  # noqa: F401


class FlavorQuery(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def pid() -> typing.Type['IdQuery']:
                return IdQuery
        
            @staticmethod
            def provider() -> typing.Type['ProviderQuery']:
                return ProviderQuery
        
            @staticmethod
            def region() -> typing.Type['RegionQuery']:
                return RegionQuery
        
            @staticmethod
            def reference_id() -> typing.Type['ReferenceIdQuery']:
                return ReferenceIdQuery
        
            @staticmethod
            def description() -> typing.Type['DescriptionQuery']:
                return DescriptionQuery
        
            @staticmethod
            def cpu() -> typing.Type['CpuQuery']:
                return CpuQuery
        
            @staticmethod
            def gpu() -> typing.Type['GpuQuery']:
                return GpuQuery
        
            @staticmethod
            def ram() -> typing.Type['MemoryQuery']:
                return MemoryQuery
        
            @staticmethod
            def storage() -> typing.Type['StorageQuery']:
                return StorageQuery
        
            @staticmethod
            def network() -> typing.Type['NetworkQuery']:
                return NetworkQuery
        
            @staticmethod
            def price() -> typing.Type['PriceQuery']:
                return PriceQuery
        
            @staticmethod
            def availability() -> typing.Type['AvailabilityQuery']:
                return AvailabilityQuery
        
            @staticmethod
            def type() -> typing.Type['TypeQuery']:
                return TypeQuery
            __annotations__ = {
                "pid": pid,
                "provider": provider,
                "region": region,
                "reference_id": reference_id,
                "description": description,
                "cpu": cpu,
                "gpu": gpu,
                "ram": ram,
                "storage": storage,
                "network": network,
                "price": price,
                "availability": availability,
                "type": type,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pid"]) -> 'IdQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["provider"]) -> 'ProviderQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["region"]) -> 'RegionQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference_id"]) -> 'ReferenceIdQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> 'DescriptionQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cpu"]) -> 'CpuQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["gpu"]) -> 'GpuQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ram"]) -> 'MemoryQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["storage"]) -> 'StorageQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["network"]) -> 'NetworkQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["price"]) -> 'PriceQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["availability"]) -> 'AvailabilityQuery': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type"]) -> 'TypeQuery': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pid", "provider", "region", "reference_id", "description", "cpu", "gpu", "ram", "storage", "network", "price", "availability", "type", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pid"]) -> typing.Union['IdQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["provider"]) -> typing.Union['ProviderQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["region"]) -> typing.Union['RegionQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference_id"]) -> typing.Union['ReferenceIdQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union['DescriptionQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cpu"]) -> typing.Union['CpuQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["gpu"]) -> typing.Union['GpuQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ram"]) -> typing.Union['MemoryQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["storage"]) -> typing.Union['StorageQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["network"]) -> typing.Union['NetworkQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["price"]) -> typing.Union['PriceQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["availability"]) -> typing.Union['AvailabilityQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type"]) -> typing.Union['TypeQuery', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pid", "provider", "region", "reference_id", "description", "cpu", "gpu", "ram", "storage", "network", "price", "availability", "type", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        pid: typing.Union['IdQuery', schemas.Unset] = schemas.unset,
        provider: typing.Union['ProviderQuery', schemas.Unset] = schemas.unset,
        region: typing.Union['RegionQuery', schemas.Unset] = schemas.unset,
        reference_id: typing.Union['ReferenceIdQuery', schemas.Unset] = schemas.unset,
        description: typing.Union['DescriptionQuery', schemas.Unset] = schemas.unset,
        cpu: typing.Union['CpuQuery', schemas.Unset] = schemas.unset,
        gpu: typing.Union['GpuQuery', schemas.Unset] = schemas.unset,
        ram: typing.Union['MemoryQuery', schemas.Unset] = schemas.unset,
        storage: typing.Union['StorageQuery', schemas.Unset] = schemas.unset,
        network: typing.Union['NetworkQuery', schemas.Unset] = schemas.unset,
        price: typing.Union['PriceQuery', schemas.Unset] = schemas.unset,
        availability: typing.Union['AvailabilityQuery', schemas.Unset] = schemas.unset,
        type: typing.Union['TypeQuery', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'FlavorQuery':
        return super().__new__(
            cls,
            *_args,
            pid=pid,
            provider=provider,
            region=region,
            reference_id=reference_id,
            description=description,
            cpu=cpu,
            gpu=gpu,
            ram=ram,
            storage=storage,
            network=network,
            price=price,
            availability=availability,
            type=type,
            _configuration=_configuration,
            **kwargs,
        )

from perian.model.availability_query import AvailabilityQuery
from perian.model.cpu_query import CpuQuery
from perian.model.description_query import DescriptionQuery
from perian.model.gpu_query import GpuQuery
from perian.model.id_query import IdQuery
from perian.model.memory_query import MemoryQuery
from perian.model.network_query import NetworkQuery
from perian.model.price_query import PriceQuery
from perian.model.provider_query import ProviderQuery
from perian.model.reference_id_query import ReferenceIdQuery
from perian.model.region_query import RegionQuery
from perian.model.storage_query import StorageQuery
from perian.model.type_query import TypeQuery
