# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from perian import schemas  # noqa: F401


class ApiModelsProvider(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "name",
            "location",
            "name_short",
        }
        
        class properties:
            name = schemas.StrSchema
            name_short = schemas.StrSchema
        
            @staticmethod
            def location() -> typing.Type['ProviderLocation']:
                return ProviderLocation
            
            
            class regions(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['Region']:
                        return Region
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['Region'], typing.List['Region']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'regions':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'Region':
                    return super().__getitem__(i)
        
            @staticmethod
            def status() -> typing.Type['Status']:
                return Status
            
            
            class capabilities(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['ProviderCapabilities']:
                        return ProviderCapabilities
            
                def __new__(
                    cls,
                    _arg: typing.Union[typing.Tuple['ProviderCapabilities'], typing.List['ProviderCapabilities']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'capabilities':
                    return super().__new__(
                        cls,
                        _arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'ProviderCapabilities':
                    return super().__getitem__(i)
            __annotations__ = {
                "name": name,
                "name_short": name_short,
                "location": location,
                "regions": regions,
                "status": status,
                "capabilities": capabilities,
            }
    
    name: MetaOapg.properties.name
    location: 'ProviderLocation'
    name_short: MetaOapg.properties.name_short
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name_short"]) -> MetaOapg.properties.name_short: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["location"]) -> 'ProviderLocation': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["regions"]) -> MetaOapg.properties.regions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> 'Status': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["capabilities"]) -> MetaOapg.properties.capabilities: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "name_short", "location", "regions", "status", "capabilities", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name_short"]) -> MetaOapg.properties.name_short: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["location"]) -> 'ProviderLocation': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["regions"]) -> typing.Union[MetaOapg.properties.regions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union['Status', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["capabilities"]) -> typing.Union[MetaOapg.properties.capabilities, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "name_short", "location", "regions", "status", "capabilities", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, ],
        location: 'ProviderLocation',
        name_short: typing.Union[MetaOapg.properties.name_short, str, ],
        regions: typing.Union[MetaOapg.properties.regions, list, tuple, schemas.Unset] = schemas.unset,
        status: typing.Union['Status', schemas.Unset] = schemas.unset,
        capabilities: typing.Union[MetaOapg.properties.capabilities, list, tuple, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ApiModelsProvider':
        return super().__new__(
            cls,
            *_args,
            name=name,
            location=location,
            name_short=name_short,
            regions=regions,
            status=status,
            capabilities=capabilities,
            _configuration=_configuration,
            **kwargs,
        )

from perian.model.provider_capabilities import ProviderCapabilities
from perian.model.provider_location import ProviderLocation
from perian.model.region import Region
from perian.model.status import Status
