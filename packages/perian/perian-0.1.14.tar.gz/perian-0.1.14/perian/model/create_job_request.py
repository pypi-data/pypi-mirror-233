# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from perian import schemas  # noqa: F401


class CreateJobRequest(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            flavor_id = schemas.UUIDSchema
            
            
            class os_storage_config(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            OSStorageConfig,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'os_storage_config':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
            
            
            class docker_run_parameters(
                schemas.ComposedSchema,
            ):
            
            
                class MetaOapg:
                    
                    @classmethod
                    @functools.lru_cache()
                    def all_of(cls):
                        # we need this here to make our import statements work
                        # we must store _composed_schemas in here so the code is only run
                        # when we invoke this method. If we kept this at the class
                        # level we would get an error because the class level
                        # code would be run when this module is imported, and these composed
                        # classes don't exist yet because their module has not finished
                        # loading
                        return [
                            DockerRunParameters,
                        ]
            
            
                def __new__(
                    cls,
                    *_args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                    **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                ) -> 'docker_run_parameters':
                    return super().__new__(
                        cls,
                        *_args,
                        _configuration=_configuration,
                        **kwargs,
                    )
        
            @staticmethod
            def docker_registry_credentials() -> typing.Type['DockerRegistryCredentials']:
                return DockerRegistryCredentials
            __annotations__ = {
                "flavor_id": flavor_id,
                "os_storage_config": os_storage_config,
                "docker_run_parameters": docker_run_parameters,
                "docker_registry_credentials": docker_registry_credentials,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flavor_id"]) -> MetaOapg.properties.flavor_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["os_storage_config"]) -> MetaOapg.properties.os_storage_config: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docker_run_parameters"]) -> MetaOapg.properties.docker_run_parameters: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["docker_registry_credentials"]) -> 'DockerRegistryCredentials': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["flavor_id", "os_storage_config", "docker_run_parameters", "docker_registry_credentials", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flavor_id"]) -> typing.Union[MetaOapg.properties.flavor_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["os_storage_config"]) -> typing.Union[MetaOapg.properties.os_storage_config, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docker_run_parameters"]) -> typing.Union[MetaOapg.properties.docker_run_parameters, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["docker_registry_credentials"]) -> typing.Union['DockerRegistryCredentials', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["flavor_id", "os_storage_config", "docker_run_parameters", "docker_registry_credentials", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        flavor_id: typing.Union[MetaOapg.properties.flavor_id, str, uuid.UUID, schemas.Unset] = schemas.unset,
        os_storage_config: typing.Union[MetaOapg.properties.os_storage_config, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        docker_run_parameters: typing.Union[MetaOapg.properties.docker_run_parameters, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, schemas.Unset] = schemas.unset,
        docker_registry_credentials: typing.Union['DockerRegistryCredentials', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreateJobRequest':
        return super().__new__(
            cls,
            *_args,
            flavor_id=flavor_id,
            os_storage_config=os_storage_config,
            docker_run_parameters=docker_run_parameters,
            docker_registry_credentials=docker_registry_credentials,
            _configuration=_configuration,
            **kwargs,
        )

from perian.model.docker_registry_credentials import DockerRegistryCredentials
from perian.model.docker_run_parameters import DockerRunParameters
from perian.model.os_storage_config import OSStorageConfig
