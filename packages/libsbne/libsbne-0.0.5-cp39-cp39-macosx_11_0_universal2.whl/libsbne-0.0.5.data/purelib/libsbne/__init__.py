# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _libsbne
else:
    import _libsbne

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


import weakref

class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _libsbne.delete_SwigPyIterator

    def value(self):
        return _libsbne.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _libsbne.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _libsbne.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _libsbne.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _libsbne.SwigPyIterator_equal(self, x)

    def copy(self):
        return _libsbne.SwigPyIterator_copy(self)

    def next(self):
        return _libsbne.SwigPyIterator_next(self)

    def __next__(self):
        return _libsbne.SwigPyIterator___next__(self)

    def previous(self):
        return _libsbne.SwigPyIterator_previous(self)

    def advance(self, n):
        return _libsbne.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _libsbne.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _libsbne.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _libsbne.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _libsbne.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _libsbne.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _libsbne.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _libsbne:
_libsbne.SwigPyIterator_swigregister(SwigPyIterator)

class unordered_map_string_string(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _libsbne.unordered_map_string_string_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _libsbne.unordered_map_string_string___nonzero__(self)

    def __bool__(self):
        return _libsbne.unordered_map_string_string___bool__(self)

    def __len__(self):
        return _libsbne.unordered_map_string_string___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        return _libsbne.unordered_map_string_string___getitem__(self, key)

    def __delitem__(self, key):
        return _libsbne.unordered_map_string_string___delitem__(self, key)

    def has_key(self, key):
        return _libsbne.unordered_map_string_string_has_key(self, key)

    def keys(self):
        return _libsbne.unordered_map_string_string_keys(self)

    def values(self):
        return _libsbne.unordered_map_string_string_values(self)

    def items(self):
        return _libsbne.unordered_map_string_string_items(self)

    def __contains__(self, key):
        return _libsbne.unordered_map_string_string___contains__(self, key)

    def key_iterator(self):
        return _libsbne.unordered_map_string_string_key_iterator(self)

    def value_iterator(self):
        return _libsbne.unordered_map_string_string_value_iterator(self)

    def __setitem__(self, *args):
        return _libsbne.unordered_map_string_string___setitem__(self, *args)

    def asdict(self):
        return _libsbne.unordered_map_string_string_asdict(self)

    def __init__(self, *args):
        _libsbne.unordered_map_string_string_swiginit(self, _libsbne.new_unordered_map_string_string(*args))

    def empty(self):
        return _libsbne.unordered_map_string_string_empty(self)

    def size(self):
        return _libsbne.unordered_map_string_string_size(self)

    def swap(self, v):
        return _libsbne.unordered_map_string_string_swap(self, v)

    def begin(self):
        return _libsbne.unordered_map_string_string_begin(self)

    def end(self):
        return _libsbne.unordered_map_string_string_end(self)

    def clear(self):
        return _libsbne.unordered_map_string_string_clear(self)

    def get_allocator(self):
        return _libsbne.unordered_map_string_string_get_allocator(self)

    def count(self, x):
        return _libsbne.unordered_map_string_string_count(self, x)

    def erase(self, *args):
        return _libsbne.unordered_map_string_string_erase(self, *args)

    def find(self, x):
        return _libsbne.unordered_map_string_string_find(self, x)
    __swig_destroy__ = _libsbne.delete_unordered_map_string_string

# Register unordered_map_string_string in _libsbne:
_libsbne.unordered_map_string_string_swigregister(unordered_map_string_string)

pi = _libsbne.pi
lLendingSize = _libsbne.lLendingSize
cReactionRadius = _libsbne.cReactionRadius
minSpeciesBoxWidth = _libsbne.minSpeciesBoxWidth
minSpeciesBoxHeight = _libsbne.minSpeciesBoxHeight
maxSpeciesBoxWidth = _libsbne.maxSpeciesBoxWidth
maxSpeciesBoxHeight = _libsbne.maxSpeciesBoxHeight

def compareChar(c1, c2):
    return _libsbne.compareChar(c1, c2)

def stringCompare(str1, str2):
    return _libsbne.stringCompare(str1, str2)

def getKeyValue(info, key):
    return _libsbne.getKeyValue(info, key)

def isNumber(str):
    return _libsbne.isNumber(str)

def isBoolean(str):
    return _libsbne.isBoolean(str)

def stringToBoolean(str):
    return _libsbne.stringToBoolean(str)

def ne_doc_readSBML(filename):
    return _libsbne.ne_doc_readSBML(filename)

def ne_doc_writeSBML(doc, filename):
    return _libsbne.ne_doc_writeSBML(doc, filename)

def ne_get(infoList):
    return _libsbne.ne_get(infoList)

def ne_set(infoList):
    return _libsbne.ne_set(infoList)
class LPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.LPoint_swiginit(self, _libsbne.new_LPoint(*args))

    def setId(self, id):
        return _libsbne.LPoint_setId(self, id)

    def getId(self):
        return _libsbne.LPoint_getId(self)

    def isSetId(self):
        return _libsbne.LPoint_isSetId(self)

    def setX(self, x):
        return _libsbne.LPoint_setX(self, x)

    def x(self):
        return _libsbne.LPoint_x(self)

    def setY(self, y):
        return _libsbne.LPoint_setY(self, y)

    def y(self):
        return _libsbne.LPoint_y(self)

    def setZ(self, z):
        return _libsbne.LPoint_setZ(self, z)

    def z(self):
        return _libsbne.LPoint_z(self)

    def __neg__(self):
        return _libsbne.LPoint___neg__(self)

    def mag(self):
        return _libsbne.LPoint_mag(self)

    def __iadd__(self, p):
        return _libsbne.LPoint___iadd__(self, p)

    def __isub__(self, p):
        return _libsbne.LPoint___isub__(self, p)

    def shift(self, dx, dy, dz=0):
        return _libsbne.LPoint_shift(self, dx, dy, dz)

    def toString(self):
        return _libsbne.LPoint_toString(self)
    __swig_destroy__ = _libsbne.delete_LPoint

# Register LPoint in _libsbne:
_libsbne.LPoint_swigregister(LPoint)


def pointMin(u, v):
    return _libsbne.pointMin(u, v)

def pointMax(u, v):
    return _libsbne.pointMax(u, v)

def __sub__(p, q):
    return _libsbne.__sub__(p, q)

def __add__(p, q):
    return _libsbne.__add__(p, q)

def __mul__(*args):
    return _libsbne.__mul__(*args)

def __truediv__(p, s):
    return _libsbne.__truediv__(p, s)
class LBox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.LBox_swiginit(self, _libsbne.new_LBox(*args))

    def setId(self, id):
        return _libsbne.LBox_setId(self, id)

    def getId(self):
        return _libsbne.LBox_getId(self)

    def isSetId(self):
        return _libsbne.LBox_isSetId(self)

    def setX(self, x):
        return _libsbne.LBox_setX(self, x)

    def x(self):
        return _libsbne.LBox_x(self)

    def setY(self, y):
        return _libsbne.LBox_setY(self, y)

    def y(self):
        return _libsbne.LBox_y(self)

    def setZ(self, z):
        return _libsbne.LBox_setZ(self, z)

    def z(self):
        return _libsbne.LBox_z(self)

    def setWidth(self, width):
        return _libsbne.LBox_setWidth(self, width)

    def width(self):
        return _libsbne.LBox_width(self)

    def setHeight(self, height):
        return _libsbne.LBox_setHeight(self, height)

    def height(self):
        return _libsbne.LBox_height(self)

    def setDepth(self, depth):
        return _libsbne.LBox_setDepth(self, depth)

    def depth(self):
        return _libsbne.LBox_depth(self)

    def setUpperLeftCorner(self, p):
        return _libsbne.LBox_setUpperLeftCorner(self, p)

    def upperLeftCorner(self):
        return _libsbne.LBox_upperLeftCorner(self)

    def upperRightCorner(self):
        return _libsbne.LBox_upperRightCorner(self)

    def bottomLeftCorner(self):
        return _libsbne.LBox_bottomLeftCorner(self)

    def bottomRightCorner(self):
        return _libsbne.LBox_bottomRightCorner(self)

    def center(self):
        return _libsbne.LBox_center(self)

    def diagonal(self):
        return _libsbne.LBox_diagonal(self)

    def maxDimension(self):
        return _libsbne.LBox_maxDimension(self)

    def minDimension(self):
        return _libsbne.LBox_minDimension(self)

    def area(self):
        return _libsbne.LBox_area(self)

    def extendWidth(self, addedWidth):
        return _libsbne.LBox_extendWidth(self, addedWidth)

    def extendHeight(self, addedHeight):
        return _libsbne.LBox_extendHeight(self, addedHeight)

    def extendDepth(self, addedDepth):
        return _libsbne.LBox_extendDepth(self, addedDepth)

    def shiftPosition(self, dx, dy, dz=0):
        return _libsbne.LBox_shiftPosition(self, dx, dy, dz)
    __swig_destroy__ = _libsbne.delete_LBox

# Register LBox in _libsbne:
_libsbne.LBox_swigregister(LBox)


def packBoxesIntoOptimalBox(startP, boxes):
    return _libsbne.packBoxesIntoOptimalBox(startP, boxes)
GRP_OBJ_CMP = _libsbne.GRP_OBJ_CMP
GRP_OBJ_SPC = _libsbne.GRP_OBJ_SPC
GRP_OBJ_RXN = _libsbne.GRP_OBJ_RXN
GRP_OBJ_SPC_RFC = _libsbne.GRP_OBJ_SPC_RFC
GRP_OBJ_TXT = _libsbne.GRP_OBJ_TXT
NUM_GrphObjType = _libsbne.NUM_GrphObjType
RXN_ROLE_SUBSTRATE = _libsbne.RXN_ROLE_SUBSTRATE
RXN_ROLE_PRODUCT = _libsbne.RXN_ROLE_PRODUCT
RXN_ROLE_SIDESUBSTRATE = _libsbne.RXN_ROLE_SIDESUBSTRATE
RXN_ROLE_SIDEPRODUCT = _libsbne.RXN_ROLE_SIDEPRODUCT
RXN_ROLE_MODIFIER = _libsbne.RXN_ROLE_MODIFIER
RXN_ROLE_ACTIVATOR = _libsbne.RXN_ROLE_ACTIVATOR
RXN_ROLE_INHIBITOR = _libsbne.RXN_ROLE_INHIBITOR
NUM_RxnRoleType = _libsbne.NUM_RxnRoleType
Quad_I_1 = _libsbne.Quad_I_1
Quad_I_2 = _libsbne.Quad_I_2
Quad_II_1 = _libsbne.Quad_II_1
Quad_II_2 = _libsbne.Quad_II_2
Quad_III_1 = _libsbne.Quad_III_1
Quad_III_2 = _libsbne.Quad_III_2
Quad_IV_1 = _libsbne.Quad_IV_1
Quad_IV_2 = _libsbne.Quad_IV_2
TOP_SIDE = _libsbne.TOP_SIDE
RIGHT_SIDE = _libsbne.RIGHT_SIDE
BOTTOM_SIDE = _libsbne.BOTTOM_SIDE
LEFT_SIDE = _libsbne.LEFT_SIDE
UP_END_SIDE = _libsbne.UP_END_SIDE
DOWN_END_SIDE = _libsbne.DOWN_END_SIDE
DOWN_START_SIDE = _libsbne.DOWN_START_SIDE
UP_START_SIDE = _libsbne.UP_START_SIDE
END_END = _libsbne.END_END
START_END = _libsbne.START_END

def rxnRoleToString(role):
    return _libsbne.rxnRoleToString(role)

def SBMLRoleToRxnRole(role):
    return _libsbne.SBMLRoleToRxnRole(role)

def angleToQuadrant(angle):
    return _libsbne.angleToQuadrant(angle)

def networkFromModel(model, net):
    return _libsbne.networkFromModel(model, net)

def networkFromLayout(layout, net):
    return _libsbne.networkFromLayout(layout, net)

def getLineInfo(c, line):
    return _libsbne.getLineInfo(c, line)
class NetworkElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.NetworkElement_swiginit(self, _libsbne.new_NetworkElement(*args))

    def setId(self, id):
        return _libsbne.NetworkElement_setId(self, id)

    def getId(self):
        return _libsbne.NetworkElement_getId(self)

    def isSetId(self):
        return _libsbne.NetworkElement_isSetId(self)

    def setName(self, name):
        return _libsbne.NetworkElement_setName(self, name)

    def getName(self):
        return _libsbne.NetworkElement_getName(self)

    def isSetName(self):
        return _libsbne.NetworkElement_isSetName(self)

    def setMetaId(self, metaid):
        return _libsbne.NetworkElement_setMetaId(self, metaid)

    def getMetaId(self):
        return _libsbne.NetworkElement_getMetaId(self)

    def isSetMetaId(self):
        return _libsbne.NetworkElement_isSetMetaId(self)
    __swig_destroy__ = _libsbne.delete_NetworkElement

# Register NetworkElement in _libsbne:
_libsbne.NetworkElement_swigregister(NetworkElement)

class Network(NetworkElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.Network_swiginit(self, _libsbne.new_Network(*args))

    def compartmentsBegin(self):
        return _libsbne.Network_compartmentsBegin(self)

    def compartmentsEnd(self):
        return _libsbne.Network_compartmentsEnd(self)

    def speciesBegin(self):
        return _libsbne.Network_speciesBegin(self)

    def speciesEnd(self):
        return _libsbne.Network_speciesEnd(self)

    def reactionsBegin(self):
        return _libsbne.Network_reactionsBegin(self)

    def reactionsEnd(self):
        return _libsbne.Network_reactionsEnd(self)

    def textsBegin(self):
        return _libsbne.Network_textsBegin(self)

    def textsEnd(self):
        return _libsbne.Network_textsEnd(self)

    def gObjectsBegin(self):
        return _libsbne.Network_gObjectsBegin(self)

    def gObjectsEnd(self):
        return _libsbne.Network_gObjectsEnd(self)

    def addCompartment(self, c):
        return _libsbne.Network_addCompartment(self, c)

    def removeCompartment(self, compartmentIndex):
        return _libsbne.Network_removeCompartment(self, compartmentIndex)

    def setCompartments(self, cv):
        return _libsbne.Network_setCompartments(self, cv)

    def getCompartments(self):
        return _libsbne.Network_getCompartments(self)

    def getNumCompartments(self):
        return _libsbne.Network_getNumCompartments(self)

    def findCompartmentById(self, id):
        return _libsbne.Network_findCompartmentById(self, id)

    def findCompartmentIndexById(self, id):
        return _libsbne.Network_findCompartmentIndexById(self, id)

    def findCompartmentByGlyphId(self, glyphId):
        return _libsbne.Network_findCompartmentByGlyphId(self, glyphId)

    def findCompartmentIndexByGlyphId(self, glyphId):
        return _libsbne.Network_findCompartmentIndexByGlyphId(self, glyphId)

    def getCompartmentUniqueId(self):
        return _libsbne.Network_getCompartmentUniqueId(self)

    def getCompartmentUniqueGlyphId(self, id):
        return _libsbne.Network_getCompartmentUniqueGlyphId(self, id)

    def addSpecies(self, s):
        return _libsbne.Network_addSpecies(self, s)

    def removeSpecies(self, speciesIndex):
        return _libsbne.Network_removeSpecies(self, speciesIndex)

    def setSpecies(self, sv):
        return _libsbne.Network_setSpecies(self, sv)

    def getSpecies(self):
        return _libsbne.Network_getSpecies(self)

    def getNumSpecies(self):
        return _libsbne.Network_getNumSpecies(self)

    def findSpeciesById(self, id):
        return _libsbne.Network_findSpeciesById(self, id)

    def findSpeciesIndexById(self, id):
        return _libsbne.Network_findSpeciesIndexById(self, id)

    def findSpeciesByGlyphId(self, glyphId):
        return _libsbne.Network_findSpeciesByGlyphId(self, glyphId)

    def findSpeciesIndexByGlyphId(self, glyphId):
        return _libsbne.Network_findSpeciesIndexByGlyphId(self, glyphId)

    def getSpeciesUniqueId(self):
        return _libsbne.Network_getSpeciesUniqueId(self)

    def getSpeciesUniqueGlyphId(self, id):
        return _libsbne.Network_getSpeciesUniqueGlyphId(self, id)

    def addReaction(self, r):
        return _libsbne.Network_addReaction(self, r)

    def removeReaction(self, reactionIndex):
        return _libsbne.Network_removeReaction(self, reactionIndex)

    def setReactions(self, rv):
        return _libsbne.Network_setReactions(self, rv)

    def getReactions(self):
        return _libsbne.Network_getReactions(self)

    def getNumReactions(self):
        return _libsbne.Network_getNumReactions(self)

    def findReactionById(self, id):
        return _libsbne.Network_findReactionById(self, id)

    def findReactionIndexById(self, id):
        return _libsbne.Network_findReactionIndexById(self, id)

    def findReactionByGlyphId(self, glyphId):
        return _libsbne.Network_findReactionByGlyphId(self, glyphId)

    def findReactionIndexByGlyphId(self, glyphId):
        return _libsbne.Network_findReactionIndexByGlyphId(self, glyphId)

    def getReactionUniqueId(self):
        return _libsbne.Network_getReactionUniqueId(self)

    def getReactionUniqueGlyphId(self, id):
        return _libsbne.Network_getReactionUniqueGlyphId(self, id)

    def addText(self, t):
        return _libsbne.Network_addText(self, t)

    def removeText(self, textIndex):
        return _libsbne.Network_removeText(self, textIndex)

    def setTexts(self, tv):
        return _libsbne.Network_setTexts(self, tv)

    def getTexts(self):
        return _libsbne.Network_getTexts(self)

    def getNumTexts(self):
        return _libsbne.Network_getNumTexts(self)

    def findTextByGlyphId(self, glyphId):
        return _libsbne.Network_findTextByGlyphId(self, glyphId)

    def findTextIndexByGlyphId(self, glyphId):
        return _libsbne.Network_findTextIndexByGlyphId(self, glyphId)

    def findTextByGraphicalObjectId(self, gOId):
        return _libsbne.Network_findTextByGraphicalObjectId(self, gOId)

    def findTextIndexByGraphicalObjectId(self, gOId):
        return _libsbne.Network_findTextIndexByGraphicalObjectId(self, gOId)

    def findTextByOriginOfTextId(self, gOId):
        return _libsbne.Network_findTextByOriginOfTextId(self, gOId)

    def findTextIndexByOriginOfTextId(self, gOId):
        return _libsbne.Network_findTextIndexByOriginOfTextId(self, gOId)

    def getTextUniqueGlyphId(self):
        return _libsbne.Network_getTextUniqueGlyphId(self)

    def addGObject(self, o):
        return _libsbne.Network_addGObject(self, o)

    def removeGObject(self, gObjectIndex):
        return _libsbne.Network_removeGObject(self, gObjectIndex)

    def setGObjects(self, ov):
        return _libsbne.Network_setGObjects(self, ov)

    def getGObjects(self):
        return _libsbne.Network_getGObjects(self)

    def getNumGObjects(self):
        return _libsbne.Network_getNumGObjects(self)

    def findGObjectById(self, id):
        return _libsbne.Network_findGObjectById(self, id)

    def findGObjectIndexById(self, id):
        return _libsbne.Network_findGObjectIndexById(self, id)

    def findGObjectByGlyphId(self, glyphId):
        return _libsbne.Network_findGObjectByGlyphId(self, glyphId)

    def findGObjectIndexByGlyphId(self, glyphId):
        return _libsbne.Network_findGObjectIndexByGlyphId(self, glyphId)

    def getGObjectUniqueGlyphId(self):
        return _libsbne.Network_getGObjectUniqueGlyphId(self)

    def findNetworkElement(self, id):
        return _libsbne.Network_findNetworkElement(self, id)

    def setBox(self, x, y, width, height):
        return _libsbne.Network_setBox(self, x, y, width, height)

    def getBox(self):
        return _libsbne.Network_getBox(self)

    def isSetBox(self):
        return _libsbne.Network_isSetBox(self)

    def isLayoutSpecified(self):
        return _libsbne.Network_isLayoutSpecified(self)

    def setLayoutSpecified(self, value):
        return _libsbne.Network_setLayoutSpecified(self, value)
    __swig_destroy__ = _libsbne.delete_Network

# Register Network in _libsbne:
_libsbne.Network_swigregister(Network)

class NGraphicalObject(NetworkElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.NGraphicalObject_swiginit(self, _libsbne.new_NGraphicalObject(*args))

    def textsBegin(self):
        return _libsbne.NGraphicalObject_textsBegin(self)

    def textsEnd(self):
        return _libsbne.NGraphicalObject_textsEnd(self)

    def getType(self):
        return _libsbne.NGraphicalObject_getType(self)

    def setGlyphId(self, glyphId):
        return _libsbne.NGraphicalObject_setGlyphId(self, glyphId)

    def getGlyphId(self):
        return _libsbne.NGraphicalObject_getGlyphId(self)

    def isSetGlyphId(self):
        return _libsbne.NGraphicalObject_isSetGlyphId(self)

    def setMatchWithGlyph(self, value):
        return _libsbne.NGraphicalObject_setMatchWithGlyph(self, value)

    def isMatchWithGlyph(self):
        return _libsbne.NGraphicalObject_isMatchWithGlyph(self)

    def setObjectRole(self, role):
        return _libsbne.NGraphicalObject_setObjectRole(self, role)

    def getObjectRole(self):
        return _libsbne.NGraphicalObject_getObjectRole(self)

    def isSetObjectRole(self):
        return _libsbne.NGraphicalObject_isSetObjectRole(self)

    def setBox(self, box):
        return _libsbne.NGraphicalObject_setBox(self, box)

    def unSetBox(self, removeBox):
        return _libsbne.NGraphicalObject_unSetBox(self, removeBox)

    def getBox(self):
        return _libsbne.NGraphicalObject_getBox(self)

    def isSetBox(self):
        return _libsbne.NGraphicalObject_isSetBox(self)

    def addText(self, t):
        return _libsbne.NGraphicalObject_addText(self, t)

    def removeText(self, textIndex):
        return _libsbne.NGraphicalObject_removeText(self, textIndex)

    def setTexts(self, tv):
        return _libsbne.NGraphicalObject_setTexts(self, tv)

    def getTexts(self):
        return _libsbne.NGraphicalObject_getTexts(self)

    def getNumTexts(self):
        return _libsbne.NGraphicalObject_getNumTexts(self)

    def findTextByGlyphId(self, glyphId):
        return _libsbne.NGraphicalObject_findTextByGlyphId(self, glyphId)

    def findTextIndexByGlyphId(self, glyphId):
        return _libsbne.NGraphicalObject_findTextIndexByGlyphId(self, glyphId)

    def setUsed(self, value):
        return _libsbne.NGraphicalObject_setUsed(self, value)

    def isUsed(self):
        return _libsbne.NGraphicalObject_isUsed(self)

    def setLockedPosition(self, value):
        return _libsbne.NGraphicalObject_setLockedPosition(self, value)

    def isLockedPosition(self):
        return _libsbne.NGraphicalObject_isLockedPosition(self)
    __swig_destroy__ = _libsbne.delete_NGraphicalObject

# Register NGraphicalObject in _libsbne:
_libsbne.NGraphicalObject_swigregister(NGraphicalObject)

class NCompartment(NGraphicalObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.NCompartment_swiginit(self, _libsbne.new_NCompartment(*args))

    def speciesBegin(self):
        return _libsbne.NCompartment_speciesBegin(self)

    def speciesEnd(self):
        return _libsbne.NCompartment_speciesEnd(self)

    def reactionsBegin(self):
        return _libsbne.NCompartment_reactionsBegin(self)

    def reactionsEnd(self):
        return _libsbne.NCompartment_reactionsEnd(self)

    def addSpecies(self, s):
        return _libsbne.NCompartment_addSpecies(self, s)

    def removeSpecies(self, speciesIndex):
        return _libsbne.NCompartment_removeSpecies(self, speciesIndex)

    def setSpecies(self, sv):
        return _libsbne.NCompartment_setSpecies(self, sv)

    def getSpecies(self):
        return _libsbne.NCompartment_getSpecies(self)

    def getNumSpecies(self):
        return _libsbne.NCompartment_getNumSpecies(self)

    def findSpeciesById(self, id):
        return _libsbne.NCompartment_findSpeciesById(self, id)

    def findSpeciesIndexById(self, id):
        return _libsbne.NCompartment_findSpeciesIndexById(self, id)

    def findSpeciesByGlyphId(self, glyphId):
        return _libsbne.NCompartment_findSpeciesByGlyphId(self, glyphId)

    def findSpeciesIndexByGlyphId(self, glyphId):
        return _libsbne.NCompartment_findSpeciesIndexByGlyphId(self, glyphId)

    def addReaction(self, r):
        return _libsbne.NCompartment_addReaction(self, r)

    def removeReaction(self, reactionIndex):
        return _libsbne.NCompartment_removeReaction(self, reactionIndex)

    def setReactions(self, rv):
        return _libsbne.NCompartment_setReactions(self, rv)

    def getReactions(self):
        return _libsbne.NCompartment_getReactions(self)

    def getNumReactions(self):
        return _libsbne.NCompartment_getNumReactions(self)

    def findReactionById(self, id):
        return _libsbne.NCompartment_findReactionById(self, id)

    def findReactionIndexById(self, id):
        return _libsbne.NCompartment_findReactionIndexById(self, id)

    def findReactionByGlyphId(self, glyphId):
        return _libsbne.NCompartment_findReactionByGlyphId(self, glyphId)

    def findReactionIndexByGlyphId(self, glyphId):
        return _libsbne.NCompartment_findReactionIndexByGlyphId(self, glyphId)

    def setOrder(self, order):
        return _libsbne.NCompartment_setOrder(self, order)

    def getOrder(self):
        return _libsbne.NCompartment_getOrder(self)

    def isSetOrder(self):
        return _libsbne.NCompartment_isSetOrder(self)

    def shiftItems(self, dx, dy):
        return _libsbne.NCompartment_shiftItems(self, dx, dy)
    __swig_destroy__ = _libsbne.delete_NCompartment

# Register NCompartment in _libsbne:
_libsbne.NCompartment_swigregister(NCompartment)

class NSpecies(NGraphicalObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.NSpecies_swiginit(self, _libsbne.new_NSpecies(*args))

    def rMembersBegin(self):
        return _libsbne.NSpecies_rMembersBegin(self)

    def rMembersEnd(self):
        return _libsbne.NSpecies_rMembersEnd(self)

    def rSideBegin(self):
        return _libsbne.NSpecies_rSideBegin(self)

    def rSideEnd(self):
        return _libsbne.NSpecies_rSideEnd(self)

    def setCompartment(self, compartmentId):
        return _libsbne.NSpecies_setCompartment(self, compartmentId)

    def getCompartment(self):
        return _libsbne.NSpecies_getCompartment(self)

    def isSetCompartment(self):
        return _libsbne.NSpecies_isSetCompartment(self)

    def addReactionMember(self, r, angle=0.0, isMainReaction=False):
        return _libsbne.NSpecies_addReactionMember(self, r, angle, isMainReaction)

    def removeReactionMember(self, reactionId):
        return _libsbne.NSpecies_removeReactionMember(self, reactionId)

    def getReactionMembers(self):
        return _libsbne.NSpecies_getReactionMembers(self)

    def setReactionMembers(self, rmv):
        return _libsbne.NSpecies_setReactionMembers(self, rmv)

    def getNumReactionMembers(self):
        return _libsbne.NSpecies_getNumReactionMembers(self)

    def findReactionMemberById(self, reactionId):
        return _libsbne.NSpecies_findReactionMemberById(self, reactionId)

    def findReactionMemberByGlyphId(self, reactionGlyphId):
        return _libsbne.NSpecies_findReactionMemberByGlyphId(self, reactionGlyphId)

    def addReferencedSide(self, side):
        return _libsbne.NSpecies_addReferencedSide(self, side)

    def addToReferencedSide(self, sr, side):
        return _libsbne.NSpecies_addToReferencedSide(self, sr, side)

    def removeReferencedSide(self, side):
        return _libsbne.NSpecies_removeReferencedSide(self, side)

    def removeFromReferencedSide(self, sr, side):
        return _libsbne.NSpecies_removeFromReferencedSide(self, sr, side)

    def getSideSpeciesReferences(self, side):
        return _libsbne.NSpecies_getSideSpeciesReferences(self, side)

    def setReferencedSide(self, rsv):
        return _libsbne.NSpecies_setReferencedSide(self, rsv)

    def getReferencedSides(self):
        return _libsbne.NSpecies_getReferencedSides(self)

    def getNumRSides(self):
        return _libsbne.NSpecies_getNumRSides(self)

    def setPseudoSpecies(self, value):
        return _libsbne.NSpecies_setPseudoSpecies(self, value)

    def isPseudoSpecies(self):
        return _libsbne.NSpecies_isPseudoSpecies(self)
    __swig_destroy__ = _libsbne.delete_NSpecies

# Register NSpecies in _libsbne:
_libsbne.NSpecies_swigregister(NSpecies)

class NReaction(NGraphicalObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.NReaction_swiginit(self, _libsbne.new_NReaction(*args))

    def sReferencesBegin(self):
        return _libsbne.NReaction_sReferencesBegin(self)

    def sReferencesEnd(self):
        return _libsbne.NReaction_sReferencesEnd(self)

    def subSReferencesBegin(self):
        return _libsbne.NReaction_subSReferencesBegin(self)

    def subSReferencesEnd(self):
        return _libsbne.NReaction_subSReferencesEnd(self)

    def speciesBegin(self):
        return _libsbne.NReaction_speciesBegin(self)

    def speciesEnd(self):
        return _libsbne.NReaction_speciesEnd(self)

    def subSpeciesBegin(self):
        return _libsbne.NReaction_subSpeciesBegin(self)

    def subSpeciesEnd(self):
        return _libsbne.NReaction_subSpeciesEnd(self)

    def pseudoSpeciesBegin(self):
        return _libsbne.NReaction_pseudoSpeciesBegin(self)

    def pseudoSpeciesEnd(self):
        return _libsbne.NReaction_pseudoSpeciesEnd(self)

    def rSideBegin(self):
        return _libsbne.NReaction_rSideBegin(self)

    def rSideEnd(self):
        return _libsbne.NReaction_rSideEnd(self)

    def rEndsBegin(self):
        return _libsbne.NReaction_rEndsBegin(self)

    def rEndsEnd(self):
        return _libsbne.NReaction_rEndsEnd(self)

    def connectedRBegin(self):
        return _libsbne.NReaction_connectedRBegin(self)

    def connectedREnd(self):
        return _libsbne.NReaction_connectedREnd(self)

    def subReactionsBegin(self):
        return _libsbne.NReaction_subReactionsBegin(self)

    def subReactionsEnd(self):
        return _libsbne.NReaction_subReactionsEnd(self)

    def rLayersBegin(self):
        return _libsbne.NReaction_rLayersBegin(self)

    def rLayersEnd(self):
        return _libsbne.NReaction_rLayersEnd(self)

    def setCompartment(self, compartmentId):
        return _libsbne.NReaction_setCompartment(self, compartmentId)

    def getCompartment(self):
        return _libsbne.NReaction_getCompartment(self)

    def isSetCompartment(self):
        return _libsbne.NReaction_isSetCompartment(self)

    def findCompartment(self):
        return _libsbne.NReaction_findCompartment(self)

    def addSpeciesReference(self, sr):
        return _libsbne.NReaction_addSpeciesReference(self, sr)

    def removeSpeciesReference(self, sReferenceIndex):
        return _libsbne.NReaction_removeSpeciesReference(self, sReferenceIndex)

    def setSpeciesReferences(self, srv):
        return _libsbne.NReaction_setSpeciesReferences(self, srv)

    def getSpeciesReferences(self):
        return _libsbne.NReaction_getSpeciesReferences(self)

    def getNumSpeciesReferences(self):
        return _libsbne.NReaction_getNumSpeciesReferences(self)

    def findSpeciesReferenceById(self, id):
        return _libsbne.NReaction_findSpeciesReferenceById(self, id)

    def findSpeciesReferenceIndexById(self, id):
        return _libsbne.NReaction_findSpeciesReferenceIndexById(self, id)

    def findSpeciesReferenceByGlyphId(self, glyphId):
        return _libsbne.NReaction_findSpeciesReferenceByGlyphId(self, glyphId)

    def findSpeciesReferenceIndexByGlyphId(self, glyphId):
        return _libsbne.NReaction_findSpeciesReferenceIndexByGlyphId(self, glyphId)

    def getSpeciesReferenceUniqueId(self):
        return _libsbne.NReaction_getSpeciesReferenceUniqueId(self)

    def getSpeciesReferenceUniqueGlyphId(self, id):
        return _libsbne.NReaction_getSpeciesReferenceUniqueGlyphId(self, id)

    def addSubSpeciesReference(self, ssr):
        return _libsbne.NReaction_addSubSpeciesReference(self, ssr)

    def removeSubSpeciesReference(self, subSReferenceIndex):
        return _libsbne.NReaction_removeSubSpeciesReference(self, subSReferenceIndex)

    def setSubSpeciesReferences(self, ssrv):
        return _libsbne.NReaction_setSubSpeciesReferences(self, ssrv)

    def getSubSpeciesReference(self):
        return _libsbne.NReaction_getSubSpeciesReference(self)

    def getNumSubSpeciesReferences(self):
        return _libsbne.NReaction_getNumSubSpeciesReferences(self)

    def findSubSpeciesReferenceById(self, id):
        return _libsbne.NReaction_findSubSpeciesReferenceById(self, id)

    def findSubSpeciesReferenceIndexById(self, id):
        return _libsbne.NReaction_findSubSpeciesReferenceIndexById(self, id)

    def addSpecies(self, s):
        return _libsbne.NReaction_addSpecies(self, s)

    def removeSpecies(self, speciesIndex):
        return _libsbne.NReaction_removeSpecies(self, speciesIndex)

    def setSpecies(self, sv):
        return _libsbne.NReaction_setSpecies(self, sv)

    def getSpecies(self):
        return _libsbne.NReaction_getSpecies(self)

    def getNumSpecies(self):
        return _libsbne.NReaction_getNumSpecies(self)

    def findSpeciesById(self, id):
        return _libsbne.NReaction_findSpeciesById(self, id)

    def findSpeciesIndexById(self, id):
        return _libsbne.NReaction_findSpeciesIndexById(self, id)

    def findSpeciesByGlyphId(self, glyphId):
        return _libsbne.NReaction_findSpeciesByGlyphId(self, glyphId)

    def findSpeciesIndexByGlyphId(self, glyphId):
        return _libsbne.NReaction_findSpeciesIndexByGlyphId(self, glyphId)

    def addSubSpecies(self, ss):
        return _libsbne.NReaction_addSubSpecies(self, ss)

    def removeSubSpecies(self, subSpeciesIndex):
        return _libsbne.NReaction_removeSubSpecies(self, subSpeciesIndex)

    def setSubSpecies(self, ssv):
        return _libsbne.NReaction_setSubSpecies(self, ssv)

    def getSubSpecies(self):
        return _libsbne.NReaction_getSubSpecies(self)

    def getNumSubSpecies(self):
        return _libsbne.NReaction_getNumSubSpecies(self)

    def findSubSpeciesById(self, id):
        return _libsbne.NReaction_findSubSpeciesById(self, id)

    def findSubSpeciesIndexById(self, id):
        return _libsbne.NReaction_findSubSpeciesIndexById(self, id)

    def addPseudoSpecies(self, ps):
        return _libsbne.NReaction_addPseudoSpecies(self, ps)

    def removePseudoSpecies(self, pseudoSpeciesIndex):
        return _libsbne.NReaction_removePseudoSpecies(self, pseudoSpeciesIndex)

    def setPseudoSpecies(self, psv):
        return _libsbne.NReaction_setPseudoSpecies(self, psv)

    def getPseudoSpecies(self):
        return _libsbne.NReaction_getPseudoSpecies(self)

    def getNumPseudoSpecies(self):
        return _libsbne.NReaction_getNumPseudoSpecies(self)

    def findPseudoSpeciesById(self, id):
        return _libsbne.NReaction_findPseudoSpeciesById(self, id)

    def findPseudoSpeciesIndexById(self, id):
        return _libsbne.NReaction_findPseudoSpeciesIndexById(self, id)

    def generatePseudoSpeciesId(self, *args):
        return _libsbne.NReaction_generatePseudoSpeciesId(self, *args)

    def generatePseudoSpeciesUniqueId(self, mutualSpecies):
        return _libsbne.NReaction_generatePseudoSpeciesUniqueId(self, mutualSpecies)

    def setCurve(self, curve):
        return _libsbne.NReaction_setCurve(self, curve)

    def unSetCurve(self, removeCurve):
        return _libsbne.NReaction_unSetCurve(self, removeCurve)

    def getCurve(self):
        return _libsbne.NReaction_getCurve(self)

    def isSetCurve(self):
        return _libsbne.NReaction_isSetCurve(self)

    def addReferencedSide(self, sr, side):
        return _libsbne.NReaction_addReferencedSide(self, sr, side)

    def removeFromReferencedSide(self, sr, side):
        return _libsbne.NReaction_removeFromReferencedSide(self, sr, side)

    def getSideSpeciesReferences(self, side):
        return _libsbne.NReaction_getSideSpeciesReferences(self, side)

    def setReferencedSide(self, rsv):
        return _libsbne.NReaction_setReferencedSide(self, rsv)

    def getReferencedSides(self):
        return _libsbne.NReaction_getReferencedSides(self)

    def getNumRSides(self):
        return _libsbne.NReaction_getNumRSides(self)

    def addReferencedEnd(self, sr, end):
        return _libsbne.NReaction_addReferencedEnd(self, sr, end)

    def removeFromReferencedEnd(self, sr, end):
        return _libsbne.NReaction_removeFromReferencedEnd(self, sr, end)

    def getEndSpeciesReferences(self, end):
        return _libsbne.NReaction_getEndSpeciesReferences(self, end)

    def setReferencedEnd(self, rev):
        return _libsbne.NReaction_setReferencedEnd(self, rev)

    def getReferencedEnds(self):
        return _libsbne.NReaction_getReferencedEnds(self)

    def getNumREnds(self):
        return _libsbne.NReaction_getNumREnds(self)

    def addConnectedReaction(self, *args):
        return _libsbne.NReaction_addConnectedReaction(self, *args)

    def setPseudoSpeciesOfConnectedReaction(self, r, pseudoSpecies):
        return _libsbne.NReaction_setPseudoSpeciesOfConnectedReaction(self, r, pseudoSpecies)

    def removeConnectedReaction(self, r):
        return _libsbne.NReaction_removeConnectedReaction(self, r)

    def removeSpeciesFromConnectedReaction(self, r, s):
        return _libsbne.NReaction_removeSpeciesFromConnectedReaction(self, r, s)

    def unSetPseudoSpeciesFromConnectedReaction(self, r):
        return _libsbne.NReaction_unSetPseudoSpeciesFromConnectedReaction(self, r)

    def getConnectedReactions(self):
        return _libsbne.NReaction_getConnectedReactions(self)

    def setConnectedReactions(self, crv):
        return _libsbne.NReaction_setConnectedReactions(self, crv)

    def getNumConnectedReactions(self):
        return _libsbne.NReaction_getNumConnectedReactions(self)

    def findConnectedReactionByReactionId(self, reactionId):
        return _libsbne.NReaction_findConnectedReactionByReactionId(self, reactionId)

    def findConnectedReactionByReactionGlyphId(self, reactionGlyphId):
        return _libsbne.NReaction_findConnectedReactionByReactionGlyphId(self, reactionGlyphId)

    def findConnectedReactionsBySpeciesId(self, speciesId):
        return _libsbne.NReaction_findConnectedReactionsBySpeciesId(self, speciesId)

    def findConnectedReactionsBySpeciesGlyphId(self, speciesId):
        return _libsbne.NReaction_findConnectedReactionsBySpeciesGlyphId(self, speciesId)

    def addSubReaction(self, sr):
        return _libsbne.NReaction_addSubReaction(self, sr)

    def removeSubReaction(self, subReactionIndex):
        return _libsbne.NReaction_removeSubReaction(self, subReactionIndex)

    def setSubReactions(self, srv):
        return _libsbne.NReaction_setSubReactions(self, srv)

    def getSubReactions(self):
        return _libsbne.NReaction_getSubReactions(self)

    def getNumSubReactions(self):
        return _libsbne.NReaction_getNumSubReactions(self)

    def findSubReactionById(self, id):
        return _libsbne.NReaction_findSubReactionById(self, id)

    def findSubReactionIndexById(self, id):
        return _libsbne.NReaction_findSubReactionIndexById(self, id)

    def findSubReactionByGlyphId(self, glyphId):
        return _libsbne.NReaction_findSubReactionByGlyphId(self, glyphId)

    def findSubReactionIndexByGlyphId(self, glyphId):
        return _libsbne.NReaction_findSubReactionIndexByGlyphId(self, glyphId)

    def addReactionLayer(self):
        return _libsbne.NReaction_addReactionLayer(self)

    def addSpeciesToVacancy(self, s, speciesAngle):
        return _libsbne.NReaction_addSpeciesToVacancy(self, s, speciesAngle)

    def removeSpeciesFromVacancy(self, s, speciesAngle):
        return _libsbne.NReaction_removeSpeciesFromVacancy(self, s, speciesAngle)

    def findSpeciesAddress(self, s):
        return _libsbne.NReaction_findSpeciesAddress(self, s)

    def findSpeciesLayer(self, s):
        return _libsbne.NReaction_findSpeciesLayer(self, s)

    def transferSpeciesToNextLayerVacancy(self, s, speciesAngle):
        return _libsbne.NReaction_transferSpeciesToNextLayerVacancy(self, s, speciesAngle)

    def getNumOccupiedReactionsOfSpecies(self, s):
        return _libsbne.NReaction_getNumOccupiedReactionsOfSpecies(self, s)

    def addSubReactionToVacancy(self, *args):
        return _libsbne.NReaction_addSubReactionToVacancy(self, *args)

    def removeSubReactionFromVacancy(self, *args):
        return _libsbne.NReaction_removeSubReactionFromVacancy(self, *args)

    def findSubReactionAddress(self, subR):
        return _libsbne.NReaction_findSubReactionAddress(self, subR)

    def findSubReactionLayer(self, subR):
        return _libsbne.NReaction_findSubReactionLayer(self, subR)

    def addSpeciesReferenceToCircumferenceVacancy(self, sr, pseudoSpecies, numOfTrasferringSteps):
        return _libsbne.NReaction_addSpeciesReferenceToCircumferenceVacancy(self, sr, pseudoSpecies, numOfTrasferringSteps)

    def removeSpeciesReferenceFromCircumferenceVacancy(self, sr):
        return _libsbne.NReaction_removeSpeciesReferenceFromCircumferenceVacancy(self, sr)

    def getManhatanPathOfSpeciesReference(self, sr, pseudoSpecies, numRadialTransferringSteps, numAngularTransferringSteps):
        return _libsbne.NReaction_getManhatanPathOfSpeciesReference(self, sr, pseudoSpecies, numRadialTransferringSteps, numAngularTransferringSteps)

    def getReactionLayers(self):
        return _libsbne.NReaction_getReactionLayers(self)

    def getNumReactionLayers(self):
        return _libsbne.NReaction_getNumReactionLayers(self)

    def setCenter(self, centerP):
        return _libsbne.NReaction_setCenter(self, centerP)

    def getCenter(self):
        return _libsbne.NReaction_getCenter(self)

    def isSetCenter(self):
        return _libsbne.NReaction_isSetCenter(self)

    def setRadius(self, radius):
        return _libsbne.NReaction_setRadius(self, radius)

    def getRadius(self):
        return _libsbne.NReaction_getRadius(self)

    def isSetRadius(self):
        return _libsbne.NReaction_isSetRadius(self)

    def setDirectionAngle(self, directionAngle):
        return _libsbne.NReaction_setDirectionAngle(self, directionAngle)

    def getDirectionAngle(self):
        return _libsbne.NReaction_getDirectionAngle(self)

    def isSetDirectionAngle(self):
        return _libsbne.NReaction_isSetDirectionAngle(self)

    def setSpeciesStartAngle(self, angle):
        return _libsbne.NReaction_setSpeciesStartAngle(self, angle)

    def getSpeciesStartAngle(self):
        return _libsbne.NReaction_getSpeciesStartAngle(self)

    def isSetSpeciesStartAngle(self):
        return _libsbne.NReaction_isSetSpeciesStartAngle(self)

    def shiftItems(self, dx, dy):
        return _libsbne.NReaction_shiftItems(self, dx, dy)

    def calculateExtents(self):
        return _libsbne.NReaction_calculateExtents(self)

    def getExtentBox(self):
        return _libsbne.NReaction_getExtentBox(self)
    __swig_destroy__ = _libsbne.delete_NReaction

# Register NReaction in _libsbne:
_libsbne.NReaction_swigregister(NReaction)

class NSpeciesReference(NGraphicalObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.NSpeciesReference_swiginit(self, _libsbne.new_NSpeciesReference(*args))

    def setSpecies(self, r, s):
        return _libsbne.NSpeciesReference_setSpecies(self, r, s)

    def getSpecies(self):
        return _libsbne.NSpeciesReference_getSpecies(self)

    def isSetSpecies(self):
        return _libsbne.NSpeciesReference_isSetSpecies(self)

    def getReaction(self):
        return _libsbne.NSpeciesReference_getReaction(self)

    def isSetReaction(self):
        return _libsbne.NSpeciesReference_isSetReaction(self)

    def setCurve(self, s):
        return _libsbne.NSpeciesReference_setCurve(self, s)

    def unSetCurve(self, removeCurve):
        return _libsbne.NSpeciesReference_unSetCurve(self, removeCurve)

    def getCurve(self):
        return _libsbne.NSpeciesReference_getCurve(self)

    def isSetCurve(self):
        return _libsbne.NSpeciesReference_isSetCurve(self)

    def setRole(self, role):
        return _libsbne.NSpeciesReference_setRole(self, role)

    def getRole(self):
        return _libsbne.NSpeciesReference_getRole(self)

    def isSetRole(self):
        return _libsbne.NSpeciesReference_isSetRole(self)

    def setQuadrant(self, quadrant):
        return _libsbne.NSpeciesReference_setQuadrant(self, quadrant)

    def getQuadrant(self):
        return _libsbne.NSpeciesReference_getQuadrant(self)

    def isSetQuadrant(self):
        return _libsbne.NSpeciesReference_isSetQuadrant(self)

    def setStartPoint(self, startPoint):
        return _libsbne.NSpeciesReference_setStartPoint(self, startPoint)

    def getStartPoint(self):
        return _libsbne.NSpeciesReference_getStartPoint(self)

    def isSetStartPoint(self):
        return _libsbne.NSpeciesReference_isSetStartPoint(self)

    def setEndPoint(self, endPoint):
        return _libsbne.NSpeciesReference_setEndPoint(self, endPoint)

    def getEndPoint(self):
        return _libsbne.NSpeciesReference_getEndPoint(self)

    def isSetEndPoint(self):
        return _libsbne.NSpeciesReference_isSetEndPoint(self)
    __swig_destroy__ = _libsbne.delete_NSpeciesReference

# Register NSpeciesReference in _libsbne:
_libsbne.NSpeciesReference_swigregister(NSpeciesReference)

class NText(NGraphicalObject):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.NText_swiginit(self, _libsbne.new_NText(*args))

    def setGraphicalObjectId(self, graphicalObjectId):
        return _libsbne.NText_setGraphicalObjectId(self, graphicalObjectId)

    def getGraphicalObjectId(self):
        return _libsbne.NText_getGraphicalObjectId(self)

    def isSetGraphicalObjectId(self):
        return _libsbne.NText_isSetGraphicalObjectId(self)

    def setText(self, text):
        return _libsbne.NText_setText(self, text)

    def unSetText(self):
        return _libsbne.NText_unSetText(self)

    def getText(self):
        return _libsbne.NText_getText(self)

    def isSetText(self):
        return _libsbne.NText_isSetText(self)

    def setOriginOfTextId(self, originOfTextId):
        return _libsbne.NText_setOriginOfTextId(self, originOfTextId)

    def getOriginOfTextId(self):
        return _libsbne.NText_getOriginOfTextId(self)

    def isSetOriginOfTextId(self):
        return _libsbne.NText_isSetOriginOfTextId(self)
    __swig_destroy__ = _libsbne.delete_NText

# Register NText in _libsbne:
_libsbne.NText_swigregister(NText)

class LCurve(NetworkElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.LCurve_swiginit(self, _libsbne.new_LCurve(*args))

    def elementsBegin(self):
        return _libsbne.LCurve_elementsBegin(self)

    def elementsEnd(self):
        return _libsbne.LCurve_elementsEnd(self)

    def addToListOfElementsEnd(self, l):
        return _libsbne.LCurve_addToListOfElementsEnd(self, l)

    def addToListOfElements(self, l, index):
        return _libsbne.LCurve_addToListOfElements(self, l, index)

    def removeFromListOfElements(self, index):
        return _libsbne.LCurve_removeFromListOfElements(self, index)

    def clearListOfElements(self):
        return _libsbne.LCurve_clearListOfElements(self)

    def getListOfElements(self):
        return _libsbne.LCurve_getListOfElements(self)

    def getNumElements(self):
        return _libsbne.LCurve_getNumElements(self)

    def findElementById(self, id):
        return _libsbne.LCurve_findElementById(self, id)

    def findElementIndexById(self, id):
        return _libsbne.LCurve_findElementIndexById(self, id)

    def getElementUniqueId(self):
        return _libsbne.LCurve_getElementUniqueId(self)

    def shiftPosition(self, dx, dy):
        return _libsbne.LCurve_shiftPosition(self, dx, dy)

    def getExtentBox(self):
        return _libsbne.LCurve_getExtentBox(self)
    __swig_destroy__ = _libsbne.delete_LCurve

# Register LCurve in _libsbne:
_libsbne.LCurve_swigregister(LCurve)

class LLineSegment(NetworkElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.LLineSegment_swiginit(self, _libsbne.new_LLineSegment(*args))

    def setStart(self, p):
        return _libsbne.LLineSegment_setStart(self, p)

    def getStart(self):
        return _libsbne.LLineSegment_getStart(self)

    def isSetStart(self):
        return _libsbne.LLineSegment_isSetStart(self)

    def setEnd(self, p):
        return _libsbne.LLineSegment_setEnd(self, p)

    def getEnd(self):
        return _libsbne.LLineSegment_getEnd(self)

    def isSetEnd(self):
        return _libsbne.LLineSegment_isSetEnd(self)

    def isCubicBezier(self):
        return _libsbne.LLineSegment_isCubicBezier(self)
    __swig_destroy__ = _libsbne.delete_LLineSegment

# Register LLineSegment in _libsbne:
_libsbne.LLineSegment_swigregister(LLineSegment)

class LCubicBezier(LLineSegment):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.LCubicBezier_swiginit(self, _libsbne.new_LCubicBezier(*args))

    def setBasePoint1(self, p):
        return _libsbne.LCubicBezier_setBasePoint1(self, p)

    def getBasePoint1(self):
        return _libsbne.LCubicBezier_getBasePoint1(self)

    def isSetBasePoint1(self):
        return _libsbne.LCubicBezier_isSetBasePoint1(self)

    def setBasePoint2(self, p):
        return _libsbne.LCubicBezier_setBasePoint2(self, p)

    def getBasePoint2(self):
        return _libsbne.LCubicBezier_getBasePoint2(self)

    def isSetBasePoint2(self):
        return _libsbne.LCubicBezier_isSetBasePoint2(self)

    def setArcLike(self, value):
        return _libsbne.LCubicBezier_setArcLike(self, value)

    def isArcLike(self):
        return _libsbne.LCubicBezier_isArcLike(self)

    def isCubicBezier(self):
        return _libsbne.LCubicBezier_isCubicBezier(self)
    __swig_destroy__ = _libsbne.delete_LCubicBezier

# Register LCubicBezier in _libsbne:
_libsbne.LCubicBezier_swigregister(LCubicBezier)

class ReactionLayer(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, layer, numReactionSpecies, reactionStartAngle):
        _libsbne.ReactionLayer_swiginit(self, _libsbne.new_ReactionLayer(layer, numReactionSpecies, reactionStartAngle))

    def vacanciesBegin(self):
        return _libsbne.ReactionLayer_vacanciesBegin(self)

    def vacanciesEnd(self):
        return _libsbne.ReactionLayer_vacanciesEnd(self)

    def cVacanciesBegin(self):
        return _libsbne.ReactionLayer_cVacanciesBegin(self)

    def cVacanciesEnd(self):
        return _libsbne.ReactionLayer_cVacanciesEnd(self)

    def getLayer(self):
        return _libsbne.ReactionLayer_getLayer(self)

    def addToVacancy(self, *args):
        return _libsbne.ReactionLayer_addToVacancy(self, *args)

    def removeFromVacancy(self, *args):
        return _libsbne.ReactionLayer_removeFromVacancy(self, *args)

    def swapSpecies(self, s1, s2):
        return _libsbne.ReactionLayer_swapSpecies(self, s1, s2)

    def findVacancy(self, *args):
        return _libsbne.ReactionLayer_findVacancy(self, *args)

    def numOfOccupiedReactionInVacancy(self, vacancyIndex):
        return _libsbne.ReactionLayer_numOfOccupiedReactionInVacancy(self, vacancyIndex)

    def getNumVacancies(self):
        return _libsbne.ReactionLayer_getNumVacancies(self)

    def addToCircumferenceVacancy(self, *args):
        return _libsbne.ReactionLayer_addToCircumferenceVacancy(self, *args)

    def checkCircumferenceVacancy(self, reactionVacancyIndex, numOfAngualrTrasferringSteps):
        return _libsbne.ReactionLayer_checkCircumferenceVacancy(self, reactionVacancyIndex, numOfAngualrTrasferringSteps)

    def removeFromCircumferenceVacancy(self, sr):
        return _libsbne.ReactionLayer_removeFromCircumferenceVacancy(self, sr)

    def addToRadialVacancy(self, sr, reactionVacancyIndex):
        return _libsbne.ReactionLayer_addToRadialVacancy(self, sr, reactionVacancyIndex)

    def checkRadialVacancy(self, reactionVacancyIndex):
        return _libsbne.ReactionLayer_checkRadialVacancy(self, reactionVacancyIndex)

    def removeFromRadialVacancy(self, sr):
        return _libsbne.ReactionLayer_removeFromRadialVacancy(self, sr)
    __swig_destroy__ = _libsbne.delete_ReactionLayer

# Register ReactionLayer in _libsbne:
_libsbne.ReactionLayer_swigregister(ReactionLayer)

class spcReferencedSide(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    side = property(_libsbne.spcReferencedSide_side_get, _libsbne.spcReferencedSide_side_set)
    speciesReferences = property(_libsbne.spcReferencedSide_speciesReferences_get, _libsbne.spcReferencedSide_speciesReferences_set)

    def __init__(self):
        _libsbne.spcReferencedSide_swiginit(self, _libsbne.new_spcReferencedSide())
    __swig_destroy__ = _libsbne.delete_spcReferencedSide

# Register spcReferencedSide in _libsbne:
_libsbne.spcReferencedSide_swigregister(spcReferencedSide)

class reactionMember(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    angle = property(_libsbne.reactionMember_angle_get, _libsbne.reactionMember_angle_set)
    reaction = property(_libsbne.reactionMember_reaction_get, _libsbne.reactionMember_reaction_set)
    isMainReaction = property(_libsbne.reactionMember_isMainReaction_get, _libsbne.reactionMember_isMainReaction_set)

    def __init__(self):
        _libsbne.reactionMember_swiginit(self, _libsbne.new_reactionMember())
    __swig_destroy__ = _libsbne.delete_reactionMember

# Register reactionMember in _libsbne:
_libsbne.reactionMember_swigregister(reactionMember)

class rxnReferencedSide(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    side = property(_libsbne.rxnReferencedSide_side_get, _libsbne.rxnReferencedSide_side_set)
    speciesReferences = property(_libsbne.rxnReferencedSide_speciesReferences_get, _libsbne.rxnReferencedSide_speciesReferences_set)

    def __init__(self):
        _libsbne.rxnReferencedSide_swiginit(self, _libsbne.new_rxnReferencedSide())
    __swig_destroy__ = _libsbne.delete_rxnReferencedSide

# Register rxnReferencedSide in _libsbne:
_libsbne.rxnReferencedSide_swigregister(rxnReferencedSide)

class referencedEnd(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    end = property(_libsbne.referencedEnd_end_get, _libsbne.referencedEnd_end_set)
    speciesReferences = property(_libsbne.referencedEnd_speciesReferences_get, _libsbne.referencedEnd_speciesReferences_set)

    def __init__(self):
        _libsbne.referencedEnd_swiginit(self, _libsbne.new_referencedEnd())
    __swig_destroy__ = _libsbne.delete_referencedEnd

# Register referencedEnd in _libsbne:
_libsbne.referencedEnd_swigregister(referencedEnd)

class connectedReaction(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    species = property(_libsbne.connectedReaction_species_get, _libsbne.connectedReaction_species_set)
    pseudoSpecies = property(_libsbne.connectedReaction_pseudoSpecies_get, _libsbne.connectedReaction_pseudoSpecies_set)
    reaction = property(_libsbne.connectedReaction_reaction_get, _libsbne.connectedReaction_reaction_set)

    def __init__(self):
        _libsbne.connectedReaction_swiginit(self, _libsbne.new_connectedReaction())
    __swig_destroy__ = _libsbne.delete_connectedReaction

# Register connectedReaction in _libsbne:
_libsbne.connectedReaction_swigregister(connectedReaction)

class radialVacancy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    sReferences = property(_libsbne.radialVacancy_sReferences_get, _libsbne.radialVacancy_sReferences_set)

    def __init__(self):
        _libsbne.radialVacancy_swiginit(self, _libsbne.new_radialVacancy())
    __swig_destroy__ = _libsbne.delete_radialVacancy

# Register radialVacancy in _libsbne:
_libsbne.radialVacancy_swigregister(radialVacancy)

class vacancy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    angle = property(_libsbne.vacancy_angle_get, _libsbne.vacancy_angle_set)
    species = property(_libsbne.vacancy_species_get, _libsbne.vacancy_species_set)
    reactions = property(_libsbne.vacancy_reactions_get, _libsbne.vacancy_reactions_set)
    rVacancy = property(_libsbne.vacancy_rVacancy_get, _libsbne.vacancy_rVacancy_set)

    def __init__(self):
        _libsbne.vacancy_swiginit(self, _libsbne.new_vacancy())
    __swig_destroy__ = _libsbne.delete_vacancy

# Register vacancy in _libsbne:
_libsbne.vacancy_swigregister(vacancy)

class circumferenceVacancy(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    startVacancy = property(_libsbne.circumferenceVacancy_startVacancy_get, _libsbne.circumferenceVacancy_startVacancy_set)
    endVacancy = property(_libsbne.circumferenceVacancy_endVacancy_get, _libsbne.circumferenceVacancy_endVacancy_set)
    sReferences = property(_libsbne.circumferenceVacancy_sReferences_get, _libsbne.circumferenceVacancy_sReferences_set)

    def __init__(self):
        _libsbne.circumferenceVacancy_swiginit(self, _libsbne.new_circumferenceVacancy())
    __swig_destroy__ = _libsbne.delete_circumferenceVacancy

# Register circumferenceVacancy in _libsbne:
_libsbne.circumferenceVacancy_swigregister(circumferenceVacancy)


def setCurve(curve, startPoint, basePoint1, basePoint2, endPoint):
    return _libsbne.setCurve(curve, startPoint, basePoint1, basePoint2, endPoint)

def locateCompartmentItems(net, c):
    return _libsbne.locateCompartmentItems(net, c)

def locateUnusedSpecies(r, s, usedSpeciesSAngle, usedSpeciesEAngle, lastUsedSpeciesIndex, index):
    return _libsbne.locateUnusedSpecies(r, s, usedSpeciesSAngle, usedSpeciesEAngle, lastUsedSpeciesIndex, index)

def locateUsedSpecies(r, s, usedSpeciesSAngle, usedSpeciesEAngle, index):
    return _libsbne.locateUsedSpecies(r, s, usedSpeciesSAngle, usedSpeciesEAngle, index)

def locateSReference(r, sr):
    return _libsbne.locateSReference(r, sr)

def setReactionCurve(r):
    return _libsbne.setReactionCurve(r)

def locateReactionSpecies(net, mR, r, locatedMainReactionSpecies):
    return _libsbne.locateReactionSpecies(net, mR, r, locatedMainReactionSpecies)

def neighborMutualSpecies(cR, mutualSpecies):
    return _libsbne.neighborMutualSpecies(cR, mutualSpecies)

def neighborTwoSpecies(cR, index1, index2):
    return _libsbne.neighborTwoSpecies(cR, index1, index2)

def swapSpeciesPositions(s1, s2):
    return _libsbne.swapSpeciesPositions(s1, s2)

def setSubReactionToReaction(mR, cR, r, mutualSpecies):
    return _libsbne.setSubReactionToReaction(mR, cR, r, mutualSpecies)

def identifyMainAndSubReactions(c):
    return _libsbne.identifyMainAndSubReactions(c)

def addReferencedSideToSpecies(r, s, angle):
    return _libsbne.addReferencedSideToSpecies(r, s, angle)

def getPseudoSpecies(mR, cR, mutualSpecies):
    return _libsbne.getPseudoSpecies(mR, cR, mutualSpecies)

def adjustSpeciesBoxPosition(s, angle):
    return _libsbne.adjustSpeciesBoxPosition(s, angle)

def getSpeciesBoxOriginalPosition(*args):
    return _libsbne.getSpeciesBoxOriginalPosition(*args)

def findTheSameSpecies(sv1, sv2):
    return _libsbne.findTheSameSpecies(sv1, sv2)

def packReactionsIntoCompartment(c):
    return _libsbne.packReactionsIntoCompartment(c)

def packCompartmentsIntoNetwork(net):
    return _libsbne.packCompartmentsIntoNetwork(net)

def locateReactionSpeciesReferences(r):
    return _libsbne.locateReactionSpeciesReferences(r)

def getSReferenceSpeciesSide(speciesBoxPoint, mReactionInnerLayerPoint):
    return _libsbne.getSReferenceSpeciesSide(speciesBoxPoint, mReactionInnerLayerPoint)

def getSReferenceSpeciesBoxPoint(s, sr, side):
    return _libsbne.getSReferenceSpeciesBoxPoint(s, sr, side)

def getSReferenceReactionEndPoint(r, sRAngle, rxnEnd):
    return _libsbne.getSReferenceReactionEndPoint(r, sRAngle, rxnEnd)

def getSReferenceReactionSidePoint(r, sRAngle, rxnSide):
    return _libsbne.getSReferenceReactionSidePoint(r, sRAngle, rxnSide)

def setSpeciesReferenceCurve(mR, r, sr, pseudoSpecies, speciesSide, rxnEnd, rxnSide):
    return _libsbne.setSpeciesReferenceCurve(mR, r, sr, pseudoSpecies, speciesSide, rxnEnd, rxnSide)

def extendCurve(*args):
    return _libsbne.extendCurve(*args)

def calculateCurvePointsFeatures(mR, r, pseudoSpecies, sr, pseudoPoint, basePoint1, basePoint2, mReactionOuterLayerPoint, mReactionInnerLayerPoint, offsetOnLayer, offsetOnReaction, offsetOnReactionSign, numTransferringSteps):
    return _libsbne.calculateCurvePointsFeatures(mR, r, pseudoSpecies, sr, pseudoPoint, basePoint1, basePoint2, mReactionOuterLayerPoint, mReactionInnerLayerPoint, offsetOnLayer, offsetOnReaction, offsetOnReactionSign, numTransferringSteps)

def convertManhatanPathToPoints(mR, species, manhatanPath):
    return _libsbne.convertManhatanPathToPoints(mR, species, manhatanPath)
class LayoutInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    net = property(_libsbne.LayoutInfo_net_get, _libsbne.LayoutInfo_net_set)
    level = property(_libsbne.LayoutInfo_level_get, _libsbne.LayoutInfo_level_set)
    version = property(_libsbne.LayoutInfo_version_get, _libsbne.LayoutInfo_version_set)

    def __init__(self):
        _libsbne.LayoutInfo_swiginit(self, _libsbne.new_LayoutInfo())
    __swig_destroy__ = _libsbne.delete_LayoutInfo

# Register LayoutInfo in _libsbne:
_libsbne.LayoutInfo_swigregister(LayoutInfo)


def populateLineInfo(LLineSegment, lineSegment):
    return _libsbne.populateLineInfo(LLineSegment, lineSegment)

def ne_doc_processLayoutInfo(doc):
    return _libsbne.ne_doc_processLayoutInfo(doc)

def ne_doc_populateSBMLdocWithLayoutInfo(doc, l):
    return _libsbne.ne_doc_populateSBMLdocWithLayoutInfo(doc, l)

def ne_li_getNetwork(l):
    return _libsbne.ne_li_getNetwork(l)

def ne_li_setNetwork(l, net):
    return _libsbne.ne_li_setNetwork(l, net)

def ne_li_addLayoutFeaturesToNetowrk(l):
    return _libsbne.ne_li_addLayoutFeaturesToNetowrk(l)

def ne_ne_isSetId(nE):
    return _libsbne.ne_ne_isSetId(nE)

def ne_ne_getId(nE):
    return _libsbne.ne_ne_getId(nE)

def ne_ne_isSetName(nE):
    return _libsbne.ne_ne_isSetName(nE)

def ne_ne_getName(nE):
    return _libsbne.ne_ne_getName(nE)

def ne_ne_isSetMetaId(nE):
    return _libsbne.ne_ne_isSetMetaId(nE)

def ne_ne_getMetaId(nE):
    return _libsbne.ne_ne_getMetaId(nE)

def ne_net_get(net, infoList):
    return _libsbne.ne_net_get(net, infoList)

def ne_net_set(net, infoList):
    return _libsbne.ne_net_set(net, infoList)

def ne_net_isLayoutSpecified(net):
    return _libsbne.ne_net_isLayoutSpecified(net)

def ne_net_getNumCompartments(net):
    return _libsbne.ne_net_getNumCompartments(net)

def ne_net_getCompartment(net, index):
    return _libsbne.ne_net_getCompartment(net, index)

def ne_net_getCompartments(net):
    return _libsbne.ne_net_getCompartments(net)

def ne_net_getNumSpecies(net):
    return _libsbne.ne_net_getNumSpecies(net)

def ne_net_getSpecies(*args):
    return _libsbne.ne_net_getSpecies(*args)

def ne_net_getNumReactions(net):
    return _libsbne.ne_net_getNumReactions(net)

def ne_net_getReaction(net, index):
    return _libsbne.ne_net_getReaction(net, index)

def ne_net_getReactions(net):
    return _libsbne.ne_net_getReactions(net)

def ne_net_getNetworkElement(net, id):
    return _libsbne.ne_net_getNetworkElement(net, id)

def ne_go_get(gO, infoList):
    return _libsbne.ne_go_get(gO, infoList)

def ne_go_set(gO, infoList):
    return _libsbne.ne_go_set(gO, infoList)

def ne_go_isSetGlyphId(gO):
    return _libsbne.ne_go_isSetGlyphId(gO)

def ne_go_getGlyphId(gO):
    return _libsbne.ne_go_getGlyphId(gO)

def ne_go_setGlyphId(net, gO, gOId):
    return _libsbne.ne_go_setGlyphId(net, gO, gOId)

def ne_go_getNumTexts(gO):
    return _libsbne.ne_go_getNumTexts(gO)

def ne_go_getText(*args):
    return _libsbne.ne_go_getText(*args)

def ne_go_getTexts(gO):
    return _libsbne.ne_go_getTexts(gO)

def ne_go_addText(*args):
    return _libsbne.ne_go_addText(*args)

def ne_go_removeText(net, gO, index):
    return _libsbne.ne_go_removeText(net, gO, index)

def ne_go_isSetBoundingBox(gO):
    return _libsbne.ne_go_isSetBoundingBox(gO)

def ne_go_getBoundingBox(gO):
    return _libsbne.ne_go_getBoundingBox(gO)

def ne_go_setBoundingBox(gO, b):
    return _libsbne.ne_go_setBoundingBox(gO, b)

def ne_go_unSetBoundingBox(gO, remove):
    return _libsbne.ne_go_unSetBoundingBox(gO, remove)

def ne_go_getType(gO):
    return _libsbne.ne_go_getType(gO)

def ne_cmp_get(c, infoList):
    return _libsbne.ne_cmp_get(c, infoList)

def ne_cmp_set(c, infoList):
    return _libsbne.ne_cmp_set(c, infoList)

def ne_spc_get(s, infoList):
    return _libsbne.ne_spc_get(s, infoList)

def ne_spc_set(s, infoList):
    return _libsbne.ne_spc_set(s, infoList)

def ne_spc_updateBoundingBox(s, positionX, positionY, dimensionWidth, dimensionHeight):
    return _libsbne.ne_spc_updateBoundingBox(s, positionX, positionY, dimensionWidth, dimensionHeight)

def ne_spc_isSetCompartment(s):
    return _libsbne.ne_spc_isSetCompartment(s)

def ne_spc_getCompartment(s):
    return _libsbne.ne_spc_getCompartment(s)

def ne_rxn_get(r, infoList):
    return _libsbne.ne_rxn_get(r, infoList)

def ne_rxn_set(r, infoList):
    return _libsbne.ne_rxn_set(r, infoList)

def ne_rxn_isSetCompartment(r):
    return _libsbne.ne_rxn_isSetCompartment(r)

def ne_rxn_getCompartment(r):
    return _libsbne.ne_rxn_getCompartment(r)

def ne_rxn_findCompartment(r):
    return _libsbne.ne_rxn_findCompartment(r)

def ne_rxn_getNumSpeciesReferences(r):
    return _libsbne.ne_rxn_getNumSpeciesReferences(r)

def ne_rxn_getSpeciesReference(r, index):
    return _libsbne.ne_rxn_getSpeciesReference(r, index)

def ne_rxn_getSpeciesReferences(r):
    return _libsbne.ne_rxn_getSpeciesReferences(r)

def ne_rxn_isSetCurve(r):
    return _libsbne.ne_rxn_isSetCurve(r)

def ne_rxn_getCurve(r):
    return _libsbne.ne_rxn_getCurve(r)

def ne_rxn_setCurve(r, c):
    return _libsbne.ne_rxn_setCurve(r, c)

def ne_rxn_unSetCurve(r, remove):
    return _libsbne.ne_rxn_unSetCurve(r, remove)

def ne_rxn_getExtentBox(r):
    return _libsbne.ne_rxn_getExtentBox(r)

def ne_sr_get(sr, infoList):
    return _libsbne.ne_sr_get(sr, infoList)

def ne_sr_set(sr, infoList):
    return _libsbne.ne_sr_set(sr, infoList)

def ne_sr_isSetReaction(sR):
    return _libsbne.ne_sr_isSetReaction(sR)

def ne_sr_getReaction(sR):
    return _libsbne.ne_sr_getReaction(sR)

def ne_sr_isSetSpecies(sR):
    return _libsbne.ne_sr_isSetSpecies(sR)

def ne_sr_getSpecies(sR):
    return _libsbne.ne_sr_getSpecies(sR)

def ne_sr_isSetRole(sR):
    return _libsbne.ne_sr_isSetRole(sR)

def ne_sr_getRoleAsString(sR):
    return _libsbne.ne_sr_getRoleAsString(sR)

def ne_sr_isSetCurve(sR):
    return _libsbne.ne_sr_isSetCurve(sR)

def ne_sr_getCurve(sR):
    return _libsbne.ne_sr_getCurve(sR)

def ne_sr_setCurve(sR, c):
    return _libsbne.ne_sr_setCurve(sR, c)

def ne_sr_unSetCurve(sR, remove):
    return _libsbne.ne_sr_unSetCurve(sR, remove)

def ne_gtxt_get(t, infoList):
    return _libsbne.ne_gtxt_get(t, infoList)

def ne_gtxt_set(t, infoList):
    return _libsbne.ne_gtxt_set(t, infoList)

def ne_gtxt_isSetGraphicalObjectId(t):
    return _libsbne.ne_gtxt_isSetGraphicalObjectId(t)

def ne_gtxt_getGraphicalObjectId(t):
    return _libsbne.ne_gtxt_getGraphicalObjectId(t)

def ne_gtxt_setGraphicalObjectId(t, id):
    return _libsbne.ne_gtxt_setGraphicalObjectId(t, id)

def ne_gtxt_isSetPlainText(t):
    return _libsbne.ne_gtxt_isSetPlainText(t)

def ne_gtxt_getPlainText(t):
    return _libsbne.ne_gtxt_getPlainText(t)

def ne_gtxt_setPlainText(t, plainText):
    return _libsbne.ne_gtxt_setPlainText(t, plainText)

def ne_gtxt_unSetPlainText(t):
    return _libsbne.ne_gtxt_unSetPlainText(t)

def ne_gtxt_isSetOriginOfTextId(t):
    return _libsbne.ne_gtxt_isSetOriginOfTextId(t)

def ne_gtxt_getOriginOfTextId(t):
    return _libsbne.ne_gtxt_getOriginOfTextId(t)

def ne_gtxt_setOriginOfTextId(t, id):
    return _libsbne.ne_gtxt_setOriginOfTextId(t, id)

def ne_crv_get(c, infoList):
    return _libsbne.ne_crv_get(c, infoList)

def ne_crv_set(c, infoList):
    return _libsbne.ne_crv_set(c, infoList)

def ne_crv_getNumElements(c):
    return _libsbne.ne_crv_getNumElements(c)

def ne_crv_getElement(c, index):
    return _libsbne.ne_crv_getElement(c, index)

def ne_crv_getElements(c):
    return _libsbne.ne_crv_getElements(c)

def ne_crv_addElement(c, index=-1, startpoint=None, endpoint=None, basepoint1=None, basepoint2=None):
    return _libsbne.ne_crv_addElement(c, index, startpoint, endpoint, basepoint1, basepoint2)

def ne_crv_removeElement(c, index):
    return _libsbne.ne_crv_removeElement(c, index)

def ne_crv_getExtentBox(c):
    return _libsbne.ne_crv_getExtentBox(c)

def ne_ls_get(l, infoList):
    return _libsbne.ne_ls_get(l, infoList)

def ne_ls_set(l, infoList):
    return _libsbne.ne_ls_set(l, infoList)

def ne_ls_isSetStart(l):
    return _libsbne.ne_ls_isSetStart(l)

def ne_ls_getStart(l):
    return _libsbne.ne_ls_getStart(l)

def ne_ls_setStart(line, p):
    return _libsbne.ne_ls_setStart(line, p)

def ne_ls_isSetEnd(l):
    return _libsbne.ne_ls_isSetEnd(l)

def ne_ls_getEnd(l):
    return _libsbne.ne_ls_getEnd(l)

def ne_ls_setEnd(line, p):
    return _libsbne.ne_ls_setEnd(line, p)

def ne_ls_isCubicBezier(l):
    return _libsbne.ne_ls_isCubicBezier(l)

def ne_cb_isSetBasePoint1(l):
    return _libsbne.ne_cb_isSetBasePoint1(l)

def ne_cb_getBasePoint1(l):
    return _libsbne.ne_cb_getBasePoint1(l)

def ne_cb_setBasePoint1(line, p):
    return _libsbne.ne_cb_setBasePoint1(line, p)

def ne_cb_isSetBasePoint2(l):
    return _libsbne.ne_cb_isSetBasePoint2(l)

def ne_cb_getBasePoint2(l):
    return _libsbne.ne_cb_getBasePoint2(l)

def ne_cb_setBasePoint2(line, p):
    return _libsbne.ne_cb_setBasePoint2(line, p)

def ne_bb_get(b, infoList):
    return _libsbne.ne_bb_get(b, infoList)

def ne_bb_set(b, infoList):
    return _libsbne.ne_bb_set(b, infoList)

def ne_bb_getX(b):
    return _libsbne.ne_bb_getX(b)

def ne_bb_setX(b, x):
    return _libsbne.ne_bb_setX(b, x)

def ne_bb_getY(b):
    return _libsbne.ne_bb_getY(b)

def ne_bb_setY(b, y):
    return _libsbne.ne_bb_setY(b, y)

def ne_bb_getWidth(b):
    return _libsbne.ne_bb_getWidth(b)

def ne_bb_setWidth(b, width):
    return _libsbne.ne_bb_setWidth(b, width)

def ne_bb_getHeight(b):
    return _libsbne.ne_bb_getHeight(b)

def ne_bb_setHeight(b, height):
    return _libsbne.ne_bb_setHeight(b, height)

def ne_point_get(p, infoList):
    return _libsbne.ne_point_get(p, infoList)

def ne_point_set(p, infoList):
    return _libsbne.ne_point_set(p, infoList)

def ne_point_getX(p):
    return _libsbne.ne_point_getX(p)

def ne_point_setX(p, x):
    return _libsbne.ne_point_setX(p, x)

def ne_point_getY(p):
    return _libsbne.ne_point_getY(p)

def ne_point_setY(p, y):
    return _libsbne.ne_point_setY(p, y)
class RAVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.RAVector_swiginit(self, _libsbne.new_RAVector(*args))

    def setA(self, a):
        return _libsbne.RAVector_setA(self, a)

    def a(self):
        return _libsbne.RAVector_a(self)

    def setR(self, r):
        return _libsbne.RAVector_setR(self, r)

    def r(self):
        return _libsbne.RAVector_r(self)

    def __neg__(self):
        return _libsbne.RAVector___neg__(self)

    def toString(self):
        return _libsbne.RAVector_toString(self)

    @staticmethod
    def stringToRAVector(str):
        return _libsbne.RAVector_stringToRAVector(str)
    __swig_destroy__ = _libsbne.delete_RAVector

# Register RAVector in _libsbne:
_libsbne.RAVector_swigregister(RAVector)

def RAVector_stringToRAVector(str):
    return _libsbne.RAVector_stringToRAVector(str)

class RPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.RPoint_swiginit(self, _libsbne.new_RPoint(*args))

    def setId(self, id):
        return _libsbne.RPoint_setId(self, id)

    def getId(self):
        return _libsbne.RPoint_getId(self)

    def isSetId(self):
        return _libsbne.RPoint_isSetId(self)

    def setX(self, x):
        return _libsbne.RPoint_setX(self, x)

    def x(self):
        return _libsbne.RPoint_x(self)

    def setY(self, y):
        return _libsbne.RPoint_setY(self, y)

    def y(self):
        return _libsbne.RPoint_y(self)

    def setZ(self, z):
        return _libsbne.RPoint_setZ(self, z)

    def z(self):
        return _libsbne.RPoint_z(self)

    def __neg__(self):
        return _libsbne.RPoint___neg__(self)

    def toString(self):
        return _libsbne.RPoint_toString(self)
    __swig_destroy__ = _libsbne.delete_RPoint

# Register RPoint in _libsbne:
_libsbne.RPoint_swigregister(RPoint)

class Affine2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.Affine2d_swiginit(self, _libsbne.new_Affine2d(*args))

    def setElement(self, r, c, value):
        return _libsbne.Affine2d_setElement(self, r, c, value)

    def element(self, r, c):
        return _libsbne.Affine2d_element(self, r, c)

    def invert(self):
        return _libsbne.Affine2d_invert(self)

    def determinent(self):
        return _libsbne.Affine2d_determinent(self)

    def __truediv__(self, *args):
        return _libsbne.Affine2d___truediv__(self, *args)
    __div__ = __truediv__



    def __mul__(self, *args):
        return _libsbne.Affine2d___mul__(self, *args)
    __swig_destroy__ = _libsbne.delete_Affine2d

# Register Affine2d in _libsbne:
_libsbne.Affine2d_swigregister(Affine2d)

ST_TYPE_COMP = _libsbne.ST_TYPE_COMP
ST_TYPE_SPC = _libsbne.ST_TYPE_SPC
ST_TYPE_RXN = _libsbne.ST_TYPE_RXN
ST_TYPE_SPC_REF = _libsbne.ST_TYPE_SPC_REF
ST_TYPE_TXT = _libsbne.ST_TYPE_TXT
ST_TYPE_GNR = _libsbne.ST_TYPE_GNR
ST_TYPE_GRP_OBJ = _libsbne.ST_TYPE_GRP_OBJ
ST_TYPE_ANY = _libsbne.ST_TYPE_ANY
NUM_StyleType = _libsbne.NUM_StyleType
CLR_STR_WHITE = _libsbne.CLR_STR_WHITE
CLR_STR_BLACK = _libsbne.CLR_STR_BLACK
CLR_STR_RED = _libsbne.CLR_STR_RED
CLR_STR_DARK_RED = _libsbne.CLR_STR_DARK_RED
CLR_STR_GREEN = _libsbne.CLR_STR_GREEN
CLR_STR_DARK_GREEN = _libsbne.CLR_STR_DARK_GREEN
CLR_STR_BLUE = _libsbne.CLR_STR_BLUE
CLR_STR_DARK_BLUE = _libsbne.CLR_STR_DARK_BLUE
CLR_STR_CYAN = _libsbne.CLR_STR_CYAN
CLR_STR_DARK_CYAN = _libsbne.CLR_STR_DARK_CYAN
CLR_STR_MAGENTA = _libsbne.CLR_STR_MAGENTA
CLR_STR_DARK_MAGENTA = _libsbne.CLR_STR_DARK_MAGENTA
CLR_STR_YELLOW = _libsbne.CLR_STR_YELLOW
CLR_STR_DARK_YELLOW = _libsbne.CLR_STR_DARK_YELLOW
CLR_STR_GRAY = _libsbne.CLR_STR_GRAY
CLR_STR_DARK_GRAY = _libsbne.CLR_STR_DARK_GRAY
CLR_STR_LIGHT_GRAY = _libsbne.CLR_STR_LIGHT_GRAY
CLR_STR_NONE = _libsbne.CLR_STR_NONE
NUM_ColorString = _libsbne.NUM_ColorString
GRD_SPR_MTH_PAD = _libsbne.GRD_SPR_MTH_PAD
GRD_SPR_MTH_RFL = _libsbne.GRD_SPR_MTH_RFL
GRD_SPR_MTH_RPT = _libsbne.GRD_SPR_MTH_RPT
NUM_GradientSpreadMethod = _libsbne.NUM_GradientSpreadMethod
FIL_RUL_NON_ZER = _libsbne.FIL_RUL_NON_ZER
FIL_RUL_EVN_ODD = _libsbne.FIL_RUL_EVN_ODD
NUM_FillRule = _libsbne.NUM_FillRule
FNT_FMLY_SRF = _libsbne.FNT_FMLY_SRF
FNT_FMLY_SNS_SRF = _libsbne.FNT_FMLY_SNS_SRF
FNT_FMLY_MNO_SPC = _libsbne.FNT_FMLY_MNO_SPC
NUM_FontFamily = _libsbne.NUM_FontFamily
FNT_WGHT_BLD = _libsbne.FNT_WGHT_BLD
FNT_WGHT_NRM = _libsbne.FNT_WGHT_NRM
NUM_FontWeight = _libsbne.NUM_FontWeight
FNT_STL_ITLC = _libsbne.FNT_STL_ITLC
FNT_STL_NRM = _libsbne.FNT_STL_NRM
NUM_FontStyle = _libsbne.NUM_FontStyle
HTXT_ANCH_STRT = _libsbne.HTXT_ANCH_STRT
HTXT_ANCH_MDL = _libsbne.HTXT_ANCH_MDL
HTXT_ANCH_END = _libsbne.HTXT_ANCH_END
NUM_HTextAnchor = _libsbne.NUM_HTextAnchor
VTXT_ANCH_TOP = _libsbne.VTXT_ANCH_TOP
VTXT_ANCH_MDL = _libsbne.VTXT_ANCH_MDL
VTXT_ANCH_BTM = _libsbne.VTXT_ANCH_BTM
VTXT_ANCH_BLNE = _libsbne.VTXT_ANCH_BLNE
NUM_VTextAnchor = _libsbne.NUM_VTextAnchor
GRP_ELT_SHPE_IMG = _libsbne.GRP_ELT_SHPE_IMG
GRP_ELT_SHPE_CRV = _libsbne.GRP_ELT_SHPE_CRV
GRP_ELT_SHPE_TXT = _libsbne.GRP_ELT_SHPE_TXT
GRP_ELT_SHPE_REC = _libsbne.GRP_ELT_SHPE_REC
GRP_ELT_SHPE_ELP = _libsbne.GRP_ELT_SHPE_ELP
GRP_ELT_SHPE_PLG = _libsbne.GRP_ELT_SHPE_PLG
NUM_RenderGroupElementShape = _libsbne.NUM_RenderGroupElementShape

def styleTypeToStr(s):
    return _libsbne.styleTypeToStr(s)

def styleTypeForGraphicalObjectType(g):
    return _libsbne.styleTypeForGraphicalObjectType(g)

def colorStringToStr(c):
    return _libsbne.colorStringToStr(c)

def colorStringToHexStr(c):
    return _libsbne.colorStringToHexStr(c)

def gSMethodToStr(g):
    return _libsbne.gSMethodToStr(g)

def fillRuleToStr(f):
    return _libsbne.fillRuleToStr(f)

def fontFamilyToStr(f):
    return _libsbne.fontFamilyToStr(f)

def fontWeightToStr(f):
    return _libsbne.fontWeightToStr(f)

def fontStyleToStr(f):
    return _libsbne.fontStyleToStr(f)

def hTextAnchorToStr(h):
    return _libsbne.hTextAnchorToStr(h)

def vTextAnchorToStr(v):
    return _libsbne.vTextAnchorToStr(v)

def rGroupElementToStr(s):
    return _libsbne.rGroupElementToStr(s)

def veneerFromRender(ren, ven):
    return _libsbne.veneerFromRender(ren, ven)

def getRenderGroup(rg):
    return _libsbne.getRenderGroup(rg)

def getRenderPoint(rp):
    return _libsbne.getRenderPoint(rp)

def getRenderCubicBezier(rcb):
    return _libsbne.getRenderCubicBezier(rcb)
class VeneerElement(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VeneerElement_swiginit(self, _libsbne.new_VeneerElement(*args))

    def setId(self, id):
        return _libsbne.VeneerElement_setId(self, id)

    def getId(self):
        return _libsbne.VeneerElement_getId(self)

    def isSetId(self):
        return _libsbne.VeneerElement_isSetId(self)

    def setName(self, name):
        return _libsbne.VeneerElement_setName(self, name)

    def getName(self):
        return _libsbne.VeneerElement_getName(self)

    def isSetName(self):
        return _libsbne.VeneerElement_isSetName(self)

    def setMetaId(self, metaid):
        return _libsbne.VeneerElement_setMetaId(self, metaid)

    def getMetaId(self):
        return _libsbne.VeneerElement_getMetaId(self)

    def isSetMetaId(self):
        return _libsbne.VeneerElement_isSetMetaId(self)
    __swig_destroy__ = _libsbne.delete_VeneerElement

# Register VeneerElement in _libsbne:
_libsbne.VeneerElement_swigregister(VeneerElement)

class Veneer(VeneerElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.Veneer_swiginit(self, _libsbne.new_Veneer(*args))

    def colorsBegin(self):
        return _libsbne.Veneer_colorsBegin(self)

    def colorsEnd(self):
        return _libsbne.Veneer_colorsEnd(self)

    def gradientsBegin(self):
        return _libsbne.Veneer_gradientsBegin(self)

    def gradientsEnd(self):
        return _libsbne.Veneer_gradientsEnd(self)

    def stylesBegin(self):
        return _libsbne.Veneer_stylesBegin(self)

    def stylesEnd(self):
        return _libsbne.Veneer_stylesEnd(self)

    def lineEndingsBegin(self):
        return _libsbne.Veneer_lineEndingsBegin(self)

    def lineEndingsEnd(self):
        return _libsbne.Veneer_lineEndingsEnd(self)

    def addColor(self, c):
        return _libsbne.Veneer_addColor(self, c)

    def removeColor(self, colorIndex):
        return _libsbne.Veneer_removeColor(self, colorIndex)

    def setColors(self, cv):
        return _libsbne.Veneer_setColors(self, cv)

    def getColors(self):
        return _libsbne.Veneer_getColors(self)

    def getNumColors(self):
        return _libsbne.Veneer_getNumColors(self)

    def findColorById(self, id):
        return _libsbne.Veneer_findColorById(self, id)

    def findColorIndexById(self, id):
        return _libsbne.Veneer_findColorIndexById(self, id)

    def getColorUniqueId(self):
        return _libsbne.Veneer_getColorUniqueId(self)

    def addGradient(self, g):
        return _libsbne.Veneer_addGradient(self, g)

    def removeGradient(self, gradientIndex):
        return _libsbne.Veneer_removeGradient(self, gradientIndex)

    def setGradients(self, gv):
        return _libsbne.Veneer_setGradients(self, gv)

    def getGradients(self):
        return _libsbne.Veneer_getGradients(self)

    def getNumGradients(self):
        return _libsbne.Veneer_getNumGradients(self)

    def findGradientById(self, id):
        return _libsbne.Veneer_findGradientById(self, id)

    def findGradientIndexById(self, id):
        return _libsbne.Veneer_findGradientIndexById(self, id)

    def getGradientUniqueId(self):
        return _libsbne.Veneer_getGradientUniqueId(self)

    def addStyle(self, s):
        return _libsbne.Veneer_addStyle(self, s)

    def removeStyle(self, styleIndex):
        return _libsbne.Veneer_removeStyle(self, styleIndex)

    def setStyles(self, sv):
        return _libsbne.Veneer_setStyles(self, sv)

    def getStyles(self):
        return _libsbne.Veneer_getStyles(self)

    def getNumStyles(self):
        return _libsbne.Veneer_getNumStyles(self)

    def findStyleById(self, id):
        return _libsbne.Veneer_findStyleById(self, id)

    def findStyleIndexById(self, id):
        return _libsbne.Veneer_findStyleIndexById(self, id)

    def findStyleByRoleListMember(self, role):
        return _libsbne.Veneer_findStyleByRoleListMember(self, role)

    def findStyleIndexByRoleListMember(self, role):
        return _libsbne.Veneer_findStyleIndexByRoleListMember(self, role)

    def findStyleByTypeListMember(self, type):
        return _libsbne.Veneer_findStyleByTypeListMember(self, type)

    def findStyleIndexByTypeListMember(self, type):
        return _libsbne.Veneer_findStyleIndexByTypeListMember(self, type)

    def findStyleByIdListMember(self, id):
        return _libsbne.Veneer_findStyleByIdListMember(self, id)

    def findStyleIndexByIdListMember(self, id):
        return _libsbne.Veneer_findStyleIndexByIdListMember(self, id)

    def getStyleUniqueId(self):
        return _libsbne.Veneer_getStyleUniqueId(self)

    def addLineEnding(self, l):
        return _libsbne.Veneer_addLineEnding(self, l)

    def removeLineEnding(self, lineEndingIndex):
        return _libsbne.Veneer_removeLineEnding(self, lineEndingIndex)

    def setLineEndings(self, lv):
        return _libsbne.Veneer_setLineEndings(self, lv)

    def getLineEndings(self):
        return _libsbne.Veneer_getLineEndings(self)

    def getNumLineEndings(self):
        return _libsbne.Veneer_getNumLineEndings(self)

    def findLineEndingById(self, id):
        return _libsbne.Veneer_findLineEndingById(self, id)

    def findLineEndingIndexById(self, id):
        return _libsbne.Veneer_findLineEndingIndexById(self, id)

    def getLineEndingUniqueId(self, *args):
        return _libsbne.Veneer_getLineEndingUniqueId(self, *args)

    def setBackgroundColor(self, bColor):
        return _libsbne.Veneer_setBackgroundColor(self, bColor)

    def getBackgroundColor(self):
        return _libsbne.Veneer_getBackgroundColor(self)

    def isSetBackgroundColor(self):
        return _libsbne.Veneer_isSetBackgroundColor(self)

    def isRenderSpecified(self):
        return _libsbne.Veneer_isRenderSpecified(self)

    def setRenderSpecified(self, value):
        return _libsbne.Veneer_setRenderSpecified(self, value)
    __swig_destroy__ = _libsbne.delete_Veneer

# Register Veneer in _libsbne:
_libsbne.Veneer_swigregister(Veneer)

class VColorDefinition(VeneerElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VColorDefinition_swiginit(self, _libsbne.new_VColorDefinition(*args))

    def setValue(self, value):
        return _libsbne.VColorDefinition_setValue(self, value)

    def getValue(self):
        return _libsbne.VColorDefinition_getValue(self)

    def isSetValue(self):
        return _libsbne.VColorDefinition_isSetValue(self)
    __swig_destroy__ = _libsbne.delete_VColorDefinition

# Register VColorDefinition in _libsbne:
_libsbne.VColorDefinition_swigregister(VColorDefinition)

class VGradientBase(VeneerElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VGradientBase_swiginit(self, _libsbne.new_VGradientBase(*args))

    def stopsBegin(self):
        return _libsbne.VGradientBase_stopsBegin(self)

    def stopsEnd(self):
        return _libsbne.VGradientBase_stopsEnd(self)

    def setSpreadMehtod(self, spreadMethod):
        return _libsbne.VGradientBase_setSpreadMehtod(self, spreadMethod)

    def getSpreadMethod(self):
        return _libsbne.VGradientBase_getSpreadMethod(self)

    def isSetSpreadMethod(self):
        return _libsbne.VGradientBase_isSetSpreadMethod(self)

    def addToStops(self, stop):
        return _libsbne.VGradientBase_addToStops(self, stop)

    def removeStop(self, stopIndex):
        return _libsbne.VGradientBase_removeStop(self, stopIndex)

    def setStops(self, sv):
        return _libsbne.VGradientBase_setStops(self, sv)

    def getStops(self):
        return _libsbne.VGradientBase_getStops(self)

    def getNumStops(self):
        return _libsbne.VGradientBase_getNumStops(self)

    def findStopById(self, id):
        return _libsbne.VGradientBase_findStopById(self, id)

    def findStopIndexById(self, id):
        return _libsbne.VGradientBase_findStopIndexById(self, id)

    def findStopByColor(self, sColor):
        return _libsbne.VGradientBase_findStopByColor(self, sColor)

    def findStopIndexByColor(self, sColor):
        return _libsbne.VGradientBase_findStopIndexByColor(self, sColor)

    def getStopUniqueId(self):
        return _libsbne.VGradientBase_getStopUniqueId(self)

    def sortStops(self):
        return _libsbne.VGradientBase_sortStops(self)
    __swig_destroy__ = _libsbne.delete_VGradientBase

# Register VGradientBase in _libsbne:
_libsbne.VGradientBase_swigregister(VGradientBase)

class VLinearGradient(VGradientBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VLinearGradient_swiginit(self, _libsbne.new_VLinearGradient(*args))

    def setX1(self, r):
        return _libsbne.VLinearGradient_setX1(self, r)

    def getX1(self):
        return _libsbne.VLinearGradient_getX1(self)

    def isSetX1(self):
        return _libsbne.VLinearGradient_isSetX1(self)

    def setY1(self, r):
        return _libsbne.VLinearGradient_setY1(self, r)

    def getY1(self):
        return _libsbne.VLinearGradient_getY1(self)

    def isSetY1(self):
        return _libsbne.VLinearGradient_isSetY1(self)

    def setZ1(self, r):
        return _libsbne.VLinearGradient_setZ1(self, r)

    def getZ1(self):
        return _libsbne.VLinearGradient_getZ1(self)

    def isSetZ1(self):
        return _libsbne.VLinearGradient_isSetZ1(self)

    def setX2(self, r):
        return _libsbne.VLinearGradient_setX2(self, r)

    def getX2(self):
        return _libsbne.VLinearGradient_getX2(self)

    def isSetX2(self):
        return _libsbne.VLinearGradient_isSetX2(self)

    def setY2(self, r):
        return _libsbne.VLinearGradient_setY2(self, r)

    def getY2(self):
        return _libsbne.VLinearGradient_getY2(self)

    def isSetY2(self):
        return _libsbne.VLinearGradient_isSetY2(self)

    def setZ2(self, r):
        return _libsbne.VLinearGradient_setZ2(self, r)

    def getZ2(self):
        return _libsbne.VLinearGradient_getZ2(self)

    def isSetZ2(self):
        return _libsbne.VLinearGradient_isSetZ2(self)
    __swig_destroy__ = _libsbne.delete_VLinearGradient

# Register VLinearGradient in _libsbne:
_libsbne.VLinearGradient_swigregister(VLinearGradient)

class VRadialGradient(VGradientBase):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VRadialGradient_swiginit(self, _libsbne.new_VRadialGradient(*args))

    def setCx(self, r):
        return _libsbne.VRadialGradient_setCx(self, r)

    def getCx(self):
        return _libsbne.VRadialGradient_getCx(self)

    def isSetCx(self):
        return _libsbne.VRadialGradient_isSetCx(self)

    def setCy(self, r):
        return _libsbne.VRadialGradient_setCy(self, r)

    def getCy(self):
        return _libsbne.VRadialGradient_getCy(self)

    def isSetCy(self):
        return _libsbne.VRadialGradient_isSetCy(self)

    def setCz(self, r):
        return _libsbne.VRadialGradient_setCz(self, r)

    def getCz(self):
        return _libsbne.VRadialGradient_getCz(self)

    def isSetCz(self):
        return _libsbne.VRadialGradient_isSetCz(self)

    def setFx(self, r):
        return _libsbne.VRadialGradient_setFx(self, r)

    def getFx(self):
        return _libsbne.VRadialGradient_getFx(self)

    def isSetFx(self):
        return _libsbne.VRadialGradient_isSetFx(self)

    def setFy(self, r):
        return _libsbne.VRadialGradient_setFy(self, r)

    def getFy(self):
        return _libsbne.VRadialGradient_getFy(self)

    def isSetFy(self):
        return _libsbne.VRadialGradient_isSetFy(self)

    def setFz(self, r):
        return _libsbne.VRadialGradient_setFz(self, r)

    def getFz(self):
        return _libsbne.VRadialGradient_getFz(self)

    def isSetFz(self):
        return _libsbne.VRadialGradient_isSetFz(self)

    def setR(self, r):
        return _libsbne.VRadialGradient_setR(self, r)

    def getR(self):
        return _libsbne.VRadialGradient_getR(self)

    def isSetR(self):
        return _libsbne.VRadialGradient_isSetR(self)
    __swig_destroy__ = _libsbne.delete_VRadialGradient

# Register VRadialGradient in _libsbne:
_libsbne.VRadialGradient_swigregister(VRadialGradient)

class VTransformation2D(VeneerElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VTransformation2D_swiginit(self, _libsbne.new_VTransformation2D(*args))

    def getShape(self):
        return _libsbne.VTransformation2D_getShape(self)

    def getShapeAsString(self):
        return _libsbne.VTransformation2D_getShapeAsString(self)

    def setTransform(self, *args):
        return _libsbne.VTransformation2D_setTransform(self, *args)

    def updateTransform(self, *args):
        return _libsbne.VTransformation2D_updateTransform(self, *args)

    def getTransform(self, *args):
        return _libsbne.VTransformation2D_getTransform(self, *args)

    def isSetTransform(self):
        return _libsbne.VTransformation2D_isSetTransform(self)

    def setAffine2D(self, a, b, c, d, e, f):
        return _libsbne.VTransformation2D_setAffine2D(self, a, b, c, d, e, f)

    def updateAffine2D(self, r, c, value):
        return _libsbne.VTransformation2D_updateAffine2D(self, r, c, value)

    def getAffine2D(self):
        return _libsbne.VTransformation2D_getAffine2D(self)

    def translate(self, tx, ty):
        return _libsbne.VTransformation2D_translate(self, tx, ty)

    def scale(self, sx, sy):
        return _libsbne.VTransformation2D_scale(self, sx, sy)

    def rotate(self, alpha):
        return _libsbne.VTransformation2D_rotate(self, alpha)

    def skewX(self, alpha):
        return _libsbne.VTransformation2D_skewX(self, alpha)

    def skewY(self, beta):
        return _libsbne.VTransformation2D_skewY(self, beta)
    __swig_destroy__ = _libsbne.delete_VTransformation2D

# Register VTransformation2D in _libsbne:
_libsbne.VTransformation2D_swigregister(VTransformation2D)

class VGraphicalPrimitive1D(VTransformation2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VGraphicalPrimitive1D_swiginit(self, _libsbne.new_VGraphicalPrimitive1D(*args))

    def dashArrayBegin(self):
        return _libsbne.VGraphicalPrimitive1D_dashArrayBegin(self)

    def dashArrayEnd(self):
        return _libsbne.VGraphicalPrimitive1D_dashArrayEnd(self)

    def setStroke(self, stroke):
        return _libsbne.VGraphicalPrimitive1D_setStroke(self, stroke)

    def getStroke(self):
        return _libsbne.VGraphicalPrimitive1D_getStroke(self)

    def isSetStroke(self):
        return _libsbne.VGraphicalPrimitive1D_isSetStroke(self)

    def setStrokeWidth(self, sWidth):
        return _libsbne.VGraphicalPrimitive1D_setStrokeWidth(self, sWidth)

    def getStrokeWidth(self):
        return _libsbne.VGraphicalPrimitive1D_getStrokeWidth(self)

    def isSetStrokeWidth(self):
        return _libsbne.VGraphicalPrimitive1D_isSetStrokeWidth(self)

    def addToDashArrayEnd(self, element):
        return _libsbne.VGraphicalPrimitive1D_addToDashArrayEnd(self, element)

    def addToDashArray(self, element, index):
        return _libsbne.VGraphicalPrimitive1D_addToDashArray(self, element, index)

    def replaceElementInDashArray(self, element, index):
        return _libsbne.VGraphicalPrimitive1D_replaceElementInDashArray(self, element, index)

    def removeElementFromDashArray(self, index):
        return _libsbne.VGraphicalPrimitive1D_removeElementFromDashArray(self, index)

    def setDashArray(self, dashArray):
        return _libsbne.VGraphicalPrimitive1D_setDashArray(self, dashArray)

    def getDashArray(self):
        return _libsbne.VGraphicalPrimitive1D_getDashArray(self)

    def isSetDashArray(self):
        return _libsbne.VGraphicalPrimitive1D_isSetDashArray(self)

    @staticmethod
    def stringToDashArray(str):
        return _libsbne.VGraphicalPrimitive1D_stringToDashArray(str)

    @staticmethod
    def dashArrayToString(dav):
        return _libsbne.VGraphicalPrimitive1D_dashArrayToString(dav)
    __swig_destroy__ = _libsbne.delete_VGraphicalPrimitive1D

# Register VGraphicalPrimitive1D in _libsbne:
_libsbne.VGraphicalPrimitive1D_swigregister(VGraphicalPrimitive1D)

def VGraphicalPrimitive1D_stringToDashArray(str):
    return _libsbne.VGraphicalPrimitive1D_stringToDashArray(str)

def VGraphicalPrimitive1D_dashArrayToString(dav):
    return _libsbne.VGraphicalPrimitive1D_dashArrayToString(dav)

class VGraphicalPrimitive2D(VGraphicalPrimitive1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VGraphicalPrimitive2D_swiginit(self, _libsbne.new_VGraphicalPrimitive2D(*args))

    def setFill(self, fill):
        return _libsbne.VGraphicalPrimitive2D_setFill(self, fill)

    def getFill(self):
        return _libsbne.VGraphicalPrimitive2D_getFill(self)

    def isSetFill(self):
        return _libsbne.VGraphicalPrimitive2D_isSetFill(self)

    def setFillRule(self, fillRule):
        return _libsbne.VGraphicalPrimitive2D_setFillRule(self, fillRule)

    def getFillRule(self):
        return _libsbne.VGraphicalPrimitive2D_getFillRule(self)

    def isSetFillRule(self):
        return _libsbne.VGraphicalPrimitive2D_isSetFillRule(self)
    __swig_destroy__ = _libsbne.delete_VGraphicalPrimitive2D

# Register VGraphicalPrimitive2D in _libsbne:
_libsbne.VGraphicalPrimitive2D_swigregister(VGraphicalPrimitive2D)

class VImage(VTransformation2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VImage_swiginit(self, _libsbne.new_VImage(*args))

    def setX(self, x):
        return _libsbne.VImage_setX(self, x)

    def getX(self):
        return _libsbne.VImage_getX(self)

    def isSetX(self):
        return _libsbne.VImage_isSetX(self)

    def setY(self, y):
        return _libsbne.VImage_setY(self, y)

    def getY(self):
        return _libsbne.VImage_getY(self)

    def isSetY(self):
        return _libsbne.VImage_isSetY(self)

    def setZ(self, z):
        return _libsbne.VImage_setZ(self, z)

    def getZ(self):
        return _libsbne.VImage_getZ(self)

    def isSetZ(self):
        return _libsbne.VImage_isSetZ(self)

    def setWidth(self, width):
        return _libsbne.VImage_setWidth(self, width)

    def getWidth(self):
        return _libsbne.VImage_getWidth(self)

    def isSetWidth(self):
        return _libsbne.VImage_isSetWidth(self)

    def setHeight(self, height):
        return _libsbne.VImage_setHeight(self, height)

    def getHeight(self):
        return _libsbne.VImage_getHeight(self)

    def isSetHeight(self):
        return _libsbne.VImage_isSetHeight(self)

    def setHref(self, href):
        return _libsbne.VImage_setHref(self, href)

    def getHref(self):
        return _libsbne.VImage_getHref(self)

    def isSetHref(self):
        return _libsbne.VImage_isSetHref(self)
    __swig_destroy__ = _libsbne.delete_VImage

# Register VImage in _libsbne:
_libsbne.VImage_swigregister(VImage)

class RCurve(VGraphicalPrimitive1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.RCurve_swiginit(self, _libsbne.new_RCurve(*args))

    def elementsBegin(self):
        return _libsbne.RCurve_elementsBegin(self)

    def elementsEnd(self):
        return _libsbne.RCurve_elementsEnd(self)

    def setStartHead(self, startHead):
        return _libsbne.RCurve_setStartHead(self, startHead)

    def getStartHead(self):
        return _libsbne.RCurve_getStartHead(self)

    def isSetStartHead(self):
        return _libsbne.RCurve_isSetStartHead(self)

    def setEndHead(self, endHead):
        return _libsbne.RCurve_setEndHead(self, endHead)

    def getEndHead(self):
        return _libsbne.RCurve_getEndHead(self)

    def isSetEndHead(self):
        return _libsbne.RCurve_isSetEndHead(self)

    def addToListOfElementsEnd(self, rp):
        return _libsbne.RCurve_addToListOfElementsEnd(self, rp)

    def addToListOfElements(self, rp, index):
        return _libsbne.RCurve_addToListOfElements(self, rp, index)

    def removeFromListOfElements(self, index):
        return _libsbne.RCurve_removeFromListOfElements(self, index)

    def clearListOfElements(self):
        return _libsbne.RCurve_clearListOfElements(self)

    def getListOfElements(self):
        return _libsbne.RCurve_getListOfElements(self)

    def getNumElements(self):
        return _libsbne.RCurve_getNumElements(self)

    def findElementById(self, id):
        return _libsbne.RCurve_findElementById(self, id)

    def findElementIndexById(self, id):
        return _libsbne.RCurve_findElementIndexById(self, id)

    def getElementUniqueId(self):
        return _libsbne.RCurve_getElementUniqueId(self)
    __swig_destroy__ = _libsbne.delete_RCurve

# Register RCurve in _libsbne:
_libsbne.RCurve_swigregister(RCurve)

class VText(VGraphicalPrimitive1D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VText_swiginit(self, _libsbne.new_VText(*args))

    def setX(self, x):
        return _libsbne.VText_setX(self, x)

    def getX(self):
        return _libsbne.VText_getX(self)

    def isSetX(self):
        return _libsbne.VText_isSetX(self)

    def setY(self, y):
        return _libsbne.VText_setY(self, y)

    def getY(self):
        return _libsbne.VText_getY(self)

    def isSetY(self):
        return _libsbne.VText_isSetY(self)

    def setZ(self, z):
        return _libsbne.VText_setZ(self, z)

    def getZ(self):
        return _libsbne.VText_getZ(self)

    def isSetZ(self):
        return _libsbne.VText_isSetZ(self)

    def setFontSize(self, fSize):
        return _libsbne.VText_setFontSize(self, fSize)

    def getFontSize(self):
        return _libsbne.VText_getFontSize(self)

    def isSetFontSize(self):
        return _libsbne.VText_isSetFontSize(self)

    def setFontFamily(self, fFamily):
        return _libsbne.VText_setFontFamily(self, fFamily)

    def getFontFamily(self):
        return _libsbne.VText_getFontFamily(self)

    def isSetFontFamily(self):
        return _libsbne.VText_isSetFontFamily(self)

    def setFontWeight(self, fWeight):
        return _libsbne.VText_setFontWeight(self, fWeight)

    def getFontWeight(self):
        return _libsbne.VText_getFontWeight(self)

    def isSetFontWeight(self):
        return _libsbne.VText_isSetFontWeight(self)

    def setFontStyle(self, fStyle):
        return _libsbne.VText_setFontStyle(self, fStyle)

    def getFontStyle(self):
        return _libsbne.VText_getFontStyle(self)

    def isSetFontStyle(self):
        return _libsbne.VText_isSetFontStyle(self)

    def setHTextAnchor(self, hTAnchor):
        return _libsbne.VText_setHTextAnchor(self, hTAnchor)

    def getHTextAnchor(self):
        return _libsbne.VText_getHTextAnchor(self)

    def isSetHTextAnchor(self):
        return _libsbne.VText_isSetHTextAnchor(self)

    def setVTextAnchor(self, vTAnchor):
        return _libsbne.VText_setVTextAnchor(self, vTAnchor)

    def getVTextAnchor(self):
        return _libsbne.VText_getVTextAnchor(self)

    def isSetVTextAnchor(self):
        return _libsbne.VText_isSetVTextAnchor(self)
    __swig_destroy__ = _libsbne.delete_VText

# Register VText in _libsbne:
_libsbne.VText_swigregister(VText)

class VRectangle(VGraphicalPrimitive2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VRectangle_swiginit(self, _libsbne.new_VRectangle(*args))

    def setX(self, x):
        return _libsbne.VRectangle_setX(self, x)

    def getX(self):
        return _libsbne.VRectangle_getX(self)

    def isSetX(self):
        return _libsbne.VRectangle_isSetX(self)

    def setY(self, y):
        return _libsbne.VRectangle_setY(self, y)

    def getY(self):
        return _libsbne.VRectangle_getY(self)

    def isSetY(self):
        return _libsbne.VRectangle_isSetY(self)

    def setZ(self, z):
        return _libsbne.VRectangle_setZ(self, z)

    def getZ(self):
        return _libsbne.VRectangle_getZ(self)

    def isSetZ(self):
        return _libsbne.VRectangle_isSetZ(self)

    def setWidth(self, width):
        return _libsbne.VRectangle_setWidth(self, width)

    def getWidth(self):
        return _libsbne.VRectangle_getWidth(self)

    def isSetWidth(self):
        return _libsbne.VRectangle_isSetWidth(self)

    def setHeight(self, height):
        return _libsbne.VRectangle_setHeight(self, height)

    def getHeight(self):
        return _libsbne.VRectangle_getHeight(self)

    def isSetHeight(self):
        return _libsbne.VRectangle_isSetHeight(self)

    def setRX(self, rx):
        return _libsbne.VRectangle_setRX(self, rx)

    def getRX(self):
        return _libsbne.VRectangle_getRX(self)

    def isSetRX(self):
        return _libsbne.VRectangle_isSetRX(self)

    def setRY(self, ry):
        return _libsbne.VRectangle_setRY(self, ry)

    def getRY(self):
        return _libsbne.VRectangle_getRY(self)

    def isSetRY(self):
        return _libsbne.VRectangle_isSetRY(self)

    def setRatio(self, ratio):
        return _libsbne.VRectangle_setRatio(self, ratio)

    def unSetRatio(self):
        return _libsbne.VRectangle_unSetRatio(self)

    def getRatio(self):
        return _libsbne.VRectangle_getRatio(self)

    def isSetRatio(self):
        return _libsbne.VRectangle_isSetRatio(self)
    __swig_destroy__ = _libsbne.delete_VRectangle

# Register VRectangle in _libsbne:
_libsbne.VRectangle_swigregister(VRectangle)

class VEllipse(VGraphicalPrimitive2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VEllipse_swiginit(self, _libsbne.new_VEllipse(*args))

    def setCX(self, cx):
        return _libsbne.VEllipse_setCX(self, cx)

    def getCX(self):
        return _libsbne.VEllipse_getCX(self)

    def isSetCX(self):
        return _libsbne.VEllipse_isSetCX(self)

    def setCY(self, cy):
        return _libsbne.VEllipse_setCY(self, cy)

    def getCY(self):
        return _libsbne.VEllipse_getCY(self)

    def isSetCY(self):
        return _libsbne.VEllipse_isSetCY(self)

    def setCZ(self, cz):
        return _libsbne.VEllipse_setCZ(self, cz)

    def getCZ(self):
        return _libsbne.VEllipse_getCZ(self)

    def isSetCZ(self):
        return _libsbne.VEllipse_isSetCZ(self)

    def setRX(self, rx):
        return _libsbne.VEllipse_setRX(self, rx)

    def getRX(self):
        return _libsbne.VEllipse_getRX(self)

    def isSetRX(self):
        return _libsbne.VEllipse_isSetRX(self)

    def setRY(self, ry):
        return _libsbne.VEllipse_setRY(self, ry)

    def getRY(self):
        return _libsbne.VEllipse_getRY(self)

    def isSetRY(self):
        return _libsbne.VEllipse_isSetRY(self)

    def setRatio(self, ratio):
        return _libsbne.VEllipse_setRatio(self, ratio)

    def unSetRatio(self):
        return _libsbne.VEllipse_unSetRatio(self)

    def getRatio(self):
        return _libsbne.VEllipse_getRatio(self)

    def isSetRatio(self):
        return _libsbne.VEllipse_isSetRatio(self)
    __swig_destroy__ = _libsbne.delete_VEllipse

# Register VEllipse in _libsbne:
_libsbne.VEllipse_swigregister(VEllipse)

class VPolygon(VGraphicalPrimitive2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VPolygon_swiginit(self, _libsbne.new_VPolygon(*args))

    def elementsBegin(self):
        return _libsbne.VPolygon_elementsBegin(self)

    def elementsEnd(self):
        return _libsbne.VPolygon_elementsEnd(self)

    def addToListOfElementsEnd(self, rp):
        return _libsbne.VPolygon_addToListOfElementsEnd(self, rp)

    def addToListOfElements(self, rp, index):
        return _libsbne.VPolygon_addToListOfElements(self, rp, index)

    def removeFromListOfElements(self, index):
        return _libsbne.VPolygon_removeFromListOfElements(self, index)

    def clearListOfElements(self):
        return _libsbne.VPolygon_clearListOfElements(self)

    def getListOfElements(self):
        return _libsbne.VPolygon_getListOfElements(self)

    def getNumElements(self):
        return _libsbne.VPolygon_getNumElements(self)

    def findElementById(self, id):
        return _libsbne.VPolygon_findElementById(self, id)

    def findElementIndexById(self, id):
        return _libsbne.VPolygon_findElementIndexById(self, id)

    def getElementUniqueId(self):
        return _libsbne.VPolygon_getElementUniqueId(self)
    __swig_destroy__ = _libsbne.delete_VPolygon

# Register VPolygon in _libsbne:
_libsbne.VPolygon_swigregister(VPolygon)

class VRenderGroup(VGraphicalPrimitive2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VRenderGroup_swiginit(self, _libsbne.new_VRenderGroup(*args))

    def elementsBegin(self):
        return _libsbne.VRenderGroup_elementsBegin(self)

    def elementsEnd(self):
        return _libsbne.VRenderGroup_elementsEnd(self)

    def setStartHead(self, startHead):
        return _libsbne.VRenderGroup_setStartHead(self, startHead)

    def unSetStartHead(self):
        return _libsbne.VRenderGroup_unSetStartHead(self)

    def getStartHead(self):
        return _libsbne.VRenderGroup_getStartHead(self)

    def isSetStartHead(self):
        return _libsbne.VRenderGroup_isSetStartHead(self)

    def setEndHead(self, endHead):
        return _libsbne.VRenderGroup_setEndHead(self, endHead)

    def unSetEndHead(self):
        return _libsbne.VRenderGroup_unSetEndHead(self)

    def getEndHead(self):
        return _libsbne.VRenderGroup_getEndHead(self)

    def isSetEndHead(self):
        return _libsbne.VRenderGroup_isSetEndHead(self)

    def setFontSize(self, fSize):
        return _libsbne.VRenderGroup_setFontSize(self, fSize)

    def getFontSize(self):
        return _libsbne.VRenderGroup_getFontSize(self)

    def isSetFontSize(self):
        return _libsbne.VRenderGroup_isSetFontSize(self)

    def setFontFamily(self, fFamily):
        return _libsbne.VRenderGroup_setFontFamily(self, fFamily)

    def getFontFamily(self):
        return _libsbne.VRenderGroup_getFontFamily(self)

    def isSetFontFamily(self):
        return _libsbne.VRenderGroup_isSetFontFamily(self)

    def setFontWeight(self, fWeight):
        return _libsbne.VRenderGroup_setFontWeight(self, fWeight)

    def getFontWeight(self):
        return _libsbne.VRenderGroup_getFontWeight(self)

    def isSetFontWeight(self):
        return _libsbne.VRenderGroup_isSetFontWeight(self)

    def setFontStyle(self, fStyle):
        return _libsbne.VRenderGroup_setFontStyle(self, fStyle)

    def getFontStyle(self):
        return _libsbne.VRenderGroup_getFontStyle(self)

    def isSetFontStyle(self):
        return _libsbne.VRenderGroup_isSetFontStyle(self)

    def setHTextAnchor(self, hTAnchor):
        return _libsbne.VRenderGroup_setHTextAnchor(self, hTAnchor)

    def getHTextAnchor(self):
        return _libsbne.VRenderGroup_getHTextAnchor(self)

    def isSetHTextAnchor(self):
        return _libsbne.VRenderGroup_isSetHTextAnchor(self)

    def setVTextAnchor(self, vTAnchor):
        return _libsbne.VRenderGroup_setVTextAnchor(self, vTAnchor)

    def getVTextAnchor(self):
        return _libsbne.VRenderGroup_getVTextAnchor(self)

    def isSetVTextAnchor(self):
        return _libsbne.VRenderGroup_isSetVTextAnchor(self)

    def addToListOfElements(self, t):
        return _libsbne.VRenderGroup_addToListOfElements(self, t)

    def removeFromListOfElements(self, index):
        return _libsbne.VRenderGroup_removeFromListOfElements(self, index)

    def clearListOfElements(self):
        return _libsbne.VRenderGroup_clearListOfElements(self)

    def getListOfElements(self):
        return _libsbne.VRenderGroup_getListOfElements(self)

    def setListOfElements(self, ev):
        return _libsbne.VRenderGroup_setListOfElements(self, ev)

    def isSetListOfElements(self):
        return _libsbne.VRenderGroup_isSetListOfElements(self)

    def getNumElements(self):
        return _libsbne.VRenderGroup_getNumElements(self)

    def findElementById(self, id):
        return _libsbne.VRenderGroup_findElementById(self, id)

    def findElementIndexById(self, id):
        return _libsbne.VRenderGroup_findElementIndexById(self, id)

    def findElementByShape(self, shape):
        return _libsbne.VRenderGroup_findElementByShape(self, shape)

    def getElementUniqueId(self):
        return _libsbne.VRenderGroup_getElementUniqueId(self)
    __swig_destroy__ = _libsbne.delete_VRenderGroup

# Register VRenderGroup in _libsbne:
_libsbne.VRenderGroup_swigregister(VRenderGroup)

class VGlobalStyle(VeneerElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VGlobalStyle_swiginit(self, _libsbne.new_VGlobalStyle(*args))

    def roleListBegin(self):
        return _libsbne.VGlobalStyle_roleListBegin(self)

    def roleListEnd(self):
        return _libsbne.VGlobalStyle_roleListEnd(self)

    def typeListBegin(self):
        return _libsbne.VGlobalStyle_typeListBegin(self)

    def typeListEnd(self):
        return _libsbne.VGlobalStyle_typeListEnd(self)

    def setRoleList(self, roleList):
        return _libsbne.VGlobalStyle_setRoleList(self, roleList)

    def addToRoleList(self, role):
        return _libsbne.VGlobalStyle_addToRoleList(self, role)

    def removeFromRoleList(self, role):
        return _libsbne.VGlobalStyle_removeFromRoleList(self, role)

    def clearRoleList(self):
        return _libsbne.VGlobalStyle_clearRoleList(self)

    def getRoleList(self):
        return _libsbne.VGlobalStyle_getRoleList(self)

    def isSetRoleList(self):
        return _libsbne.VGlobalStyle_isSetRoleList(self)

    def setTypeList(self, typeList):
        return _libsbne.VGlobalStyle_setTypeList(self, typeList)

    def addToTypeList(self, type):
        return _libsbne.VGlobalStyle_addToTypeList(self, type)

    def removeFromTypeList(self, type):
        return _libsbne.VGlobalStyle_removeFromTypeList(self, type)

    def clearTypeList(self):
        return _libsbne.VGlobalStyle_clearTypeList(self)

    def getTypeList(self):
        return _libsbne.VGlobalStyle_getTypeList(self)

    def isSetTypeList(self):
        return _libsbne.VGlobalStyle_isSetTypeList(self)

    def setGroup(self, g):
        return _libsbne.VGlobalStyle_setGroup(self, g)

    def getGroup(self):
        return _libsbne.VGlobalStyle_getGroup(self)

    def isSetGroup(self):
        return _libsbne.VGlobalStyle_isSetGroup(self)
    __swig_destroy__ = _libsbne.delete_VGlobalStyle

# Register VGlobalStyle in _libsbne:
_libsbne.VGlobalStyle_swigregister(VGlobalStyle)

class VLocalStyle(VGlobalStyle):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VLocalStyle_swiginit(self, _libsbne.new_VLocalStyle(*args))

    def idListBegin(self):
        return _libsbne.VLocalStyle_idListBegin(self)

    def idListEnd(self):
        return _libsbne.VLocalStyle_idListEnd(self)

    def setIdList(self, idList):
        return _libsbne.VLocalStyle_setIdList(self, idList)

    def addToIdList(self, id):
        return _libsbne.VLocalStyle_addToIdList(self, id)

    def removeFromIdList(self, id):
        return _libsbne.VLocalStyle_removeFromIdList(self, id)

    def clearIdList(self):
        return _libsbne.VLocalStyle_clearIdList(self)

    def getIdList(self):
        return _libsbne.VLocalStyle_getIdList(self)

    def isSetIdList(self):
        return _libsbne.VLocalStyle_isSetIdList(self)
    __swig_destroy__ = _libsbne.delete_VLocalStyle

# Register VLocalStyle in _libsbne:
_libsbne.VLocalStyle_swigregister(VLocalStyle)

class VLineEnding(VGraphicalPrimitive2D):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VLineEnding_swiginit(self, _libsbne.new_VLineEnding(*args))

    def setBox(self, b):
        return _libsbne.VLineEnding_setBox(self, b)

    def getBox(self):
        return _libsbne.VLineEnding_getBox(self)

    def isSetBox(self):
        return _libsbne.VLineEnding_isSetBox(self)

    def setGroup(self, g):
        return _libsbne.VLineEnding_setGroup(self, g)

    def getGroup(self):
        return _libsbne.VLineEnding_getGroup(self)

    def isSetGroup(self):
        return _libsbne.VLineEnding_isSetGroup(self)

    def setEnableRotationMapping(self, enable):
        return _libsbne.VLineEnding_setEnableRotationMapping(self, enable)

    def getEnableRotationMapping(self):
        return _libsbne.VLineEnding_getEnableRotationMapping(self)

    def isSetEnableRotationMapping(self):
        return _libsbne.VLineEnding_isSetEnableRotationMapping(self)

    def setAsLocalLineEnding(self, isLocal):
        return _libsbne.VLineEnding_setAsLocalLineEnding(self, isLocal)

    def isLocalLineEnding(self):
        return _libsbne.VLineEnding_isLocalLineEnding(self)
    __swig_destroy__ = _libsbne.delete_VLineEnding

# Register VLineEnding in _libsbne:
_libsbne.VLineEnding_swigregister(VLineEnding)

class VGradientStop(VeneerElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.VGradientStop_swiginit(self, _libsbne.new_VGradientStop(*args))

    def setOffset(self, offset):
        return _libsbne.VGradientStop_setOffset(self, offset)

    def getOffset(self):
        return _libsbne.VGradientStop_getOffset(self)

    def isSetOffset(self):
        return _libsbne.VGradientStop_isSetOffset(self)

    def setStopColor(self, color):
        return _libsbne.VGradientStop_setStopColor(self, color)

    def getStopColor(self):
        return _libsbne.VGradientStop_getStopColor(self)

    def isSetStopColor(self):
        return _libsbne.VGradientStop_isSetStopColor(self)
    __swig_destroy__ = _libsbne.delete_VGradientStop

# Register VGradientStop in _libsbne:
_libsbne.VGradientStop_swigregister(VGradientStop)

class RenPoint(VeneerElement):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.RenPoint_swiginit(self, _libsbne.new_RenPoint(*args))

    def setRPoint(self, rp):
        return _libsbne.RenPoint_setRPoint(self, rp)

    def getRPoint(self):
        return _libsbne.RenPoint_getRPoint(self)

    def isSetRPoint(self):
        return _libsbne.RenPoint_isSetRPoint(self)

    def isRenderCubicBezier(self):
        return _libsbne.RenPoint_isRenderCubicBezier(self)
    __swig_destroy__ = _libsbne.delete_RenPoint

# Register RenPoint in _libsbne:
_libsbne.RenPoint_swigregister(RenPoint)

class RCubicBezier(RenPoint):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _libsbne.RCubicBezier_swiginit(self, _libsbne.new_RCubicBezier(*args))

    def setBasePoint1(self, rp):
        return _libsbne.RCubicBezier_setBasePoint1(self, rp)

    def getBasePoint1(self):
        return _libsbne.RCubicBezier_getBasePoint1(self)

    def isSetBasePoint1(self):
        return _libsbne.RCubicBezier_isSetBasePoint1(self)

    def setBasePoint2(self, rp):
        return _libsbne.RCubicBezier_setBasePoint2(self, rp)

    def getBasePoint2(self):
        return _libsbne.RCubicBezier_getBasePoint2(self)

    def isSetBasePoint2(self):
        return _libsbne.RCubicBezier_isSetBasePoint2(self)

    def isRenderCubicBezier(self):
        return _libsbne.RCubicBezier_isRenderCubicBezier(self)
    __swig_destroy__ = _libsbne.delete_RCubicBezier

# Register RCubicBezier in _libsbne:
_libsbne.RCubicBezier_swigregister(RCubicBezier)

class RenderInfo(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    ven = property(_libsbne.RenderInfo_ven_get, _libsbne.RenderInfo_ven_set)
    majorVersion = property(_libsbne.RenderInfo_majorVersion_get, _libsbne.RenderInfo_majorVersion_set)
    minorVersion = property(_libsbne.RenderInfo_minorVersion_get, _libsbne.RenderInfo_minorVersion_set)
    level = property(_libsbne.RenderInfo_level_get, _libsbne.RenderInfo_level_set)
    version = property(_libsbne.RenderInfo_version_get, _libsbne.RenderInfo_version_set)

    def __init__(self):
        _libsbne.RenderInfo_swiginit(self, _libsbne.new_RenderInfo())
    __swig_destroy__ = _libsbne.delete_RenderInfo

# Register RenderInfo in _libsbne:
_libsbne.RenderInfo_swigregister(RenderInfo)


def ne_grp_populateRenderGroup(grp):
    return _libsbne.ne_grp_populateRenderGroup(grp)

def ne_doc_processRenderInfo(doc):
    return _libsbne.ne_doc_processRenderInfo(doc)

def ne_doc_populateSBMLdocWithRenderInfo(doc, r):
    return _libsbne.ne_doc_populateSBMLdocWithRenderInfo(doc, r)

def ne_ri_getVeneer(r):
    return _libsbne.ne_ri_getVeneer(r)

def ne_ri_setVeneer(r, ven):
    return _libsbne.ne_ri_setVeneer(r, ven)

def ne_ri_addDefaultRenderFeaturesToVeneer(r):
    return _libsbne.ne_ri_addDefaultRenderFeaturesToVeneer(r)

def ne_ve_isSetId(vE):
    return _libsbne.ne_ve_isSetId(vE)

def ne_ve_getId(vE):
    return _libsbne.ne_ve_getId(vE)

def ne_ve_setId(ven, vE, elementId):
    return _libsbne.ne_ve_setId(ven, vE, elementId)

def ne_ve_isSetName(vE):
    return _libsbne.ne_ve_isSetName(vE)

def ne_ve_getName(vE):
    return _libsbne.ne_ve_getName(vE)

def ne_ve_setName(vE, name):
    return _libsbne.ne_ve_setName(vE, name)

def ne_ve_isSetMetaId(vE):
    return _libsbne.ne_ve_isSetMetaId(vE)

def ne_ve_getMetaId(vE):
    return _libsbne.ne_ve_getMetaId(vE)

def ne_ve_setMetaId(vE, metaid):
    return _libsbne.ne_ve_setMetaId(vE, metaid)

def ne_ven_get(*args):
    return _libsbne.ne_ven_get(*args)

def ne_ven_set(*args):
    return _libsbne.ne_ven_set(*args)

def ne_ven_isRenderSpecified(ven):
    return _libsbne.ne_ven_isRenderSpecified(ven)

def ne_ven_isSetBackgroundColor(ven):
    return _libsbne.ne_ven_isSetBackgroundColor(ven)

def ne_ven_getBackgroundColor(ven):
    return _libsbne.ne_ven_getBackgroundColor(ven)

def ne_ven_setBackgroundColor(ven, color):
    return _libsbne.ne_ven_setBackgroundColor(ven, color)

def ne_ven_getNumColors(ven):
    return _libsbne.ne_ven_getNumColors(ven)

def ne_ven_getColor(*args):
    return _libsbne.ne_ven_getColor(*args)

def ne_ven_getColors(ven):
    return _libsbne.ne_ven_getColors(ven)

def ne_ven_addNewColor(*args):
    return _libsbne.ne_ven_addNewColor(*args)

def ne_ven_getNumGradients(ven):
    return _libsbne.ne_ven_getNumGradients(ven)

def ne_ven_getGradient(*args):
    return _libsbne.ne_ven_getGradient(*args)

def ne_ven_getGradients(ven):
    return _libsbne.ne_ven_getGradients(ven)

def ne_ven_getNumLineEndings(ven):
    return _libsbne.ne_ven_getNumLineEndings(ven)

def ne_ven_getLineEnding(*args):
    return _libsbne.ne_ven_getLineEnding(*args)

def ne_ven_getLineEndings(ven):
    return _libsbne.ne_ven_getLineEndings(ven)

def ne_ven_addNewLineEnding(*args):
    return _libsbne.ne_ven_addNewLineEnding(*args)

def ne_ven_getLocalLineEndingFromGlobalLineEnding(ven, gLineEnding):
    return _libsbne.ne_ven_getLocalLineEndingFromGlobalLineEnding(ven, gLineEnding)

def ne_ven_getNumStyles(ven):
    return _libsbne.ne_ven_getNumStyles(ven)

def ne_ven_getStyle(*args):
    return _libsbne.ne_ven_getStyle(*args)

def ne_ven_getStyles(ven):
    return _libsbne.ne_ven_getStyles(ven)

def ne_ven_addNewGlobalStyle(*args):
    return _libsbne.ne_ven_addNewGlobalStyle(*args)

def ne_ven_addNewLocalStyle(*args):
    return _libsbne.ne_ven_addNewLocalStyle(*args)

def ne_ven_findStyle(*args):
    return _libsbne.ne_ven_findStyle(*args)

def ne_ven_getLocalStyleFromGlobalStyle(ven, gO, gStyle):
    return _libsbne.ne_ven_getLocalStyleFromGlobalStyle(ven, gO, gStyle)

def ne_clr_get(c, infoList):
    return _libsbne.ne_clr_get(c, infoList)

def ne_clr_set(c, infoList):
    return _libsbne.ne_clr_set(c, infoList)

def ne_clr_isSetValue(c):
    return _libsbne.ne_clr_isSetValue(c)

def ne_clr_getValue(c):
    return _libsbne.ne_clr_getValue(c)

def ne_clr_setValue(c, value):
    return _libsbne.ne_clr_setValue(c, value)

def ne_grd_get(g, infoList):
    return _libsbne.ne_grd_get(g, infoList)

def ne_grd_set(g, infoList):
    return _libsbne.ne_grd_set(g, infoList)

def ne_grd_isSetSpreadMethod(g):
    return _libsbne.ne_grd_isSetSpreadMethod(g)

def ne_grd_getSpreadMethod(g):
    return _libsbne.ne_grd_getSpreadMethod(g)

def ne_grd_setSpreadMethod(g, spreadmethod):
    return _libsbne.ne_grd_setSpreadMethod(g, spreadmethod)

def ne_grd_getNumStops(g):
    return _libsbne.ne_grd_getNumStops(g)

def ne_grd_getStop(g, index):
    return _libsbne.ne_grd_getStop(g, index)

def ne_grd_isLinearGradient(g):
    return _libsbne.ne_grd_isLinearGradient(g)

def ne_grd_isRadialGradient(g):
    return _libsbne.ne_grd_isRadialGradient(g)

def ne_grd_isSetX1(g):
    return _libsbne.ne_grd_isSetX1(g)

def ne_grd_getX1(g):
    return _libsbne.ne_grd_getX1(g)

def ne_grd_setX1(g, x1):
    return _libsbne.ne_grd_setX1(g, x1)

def ne_grd_isSetY1(g):
    return _libsbne.ne_grd_isSetY1(g)

def ne_grd_getY1(g):
    return _libsbne.ne_grd_getY1(g)

def ne_grd_setY1(g, y1):
    return _libsbne.ne_grd_setY1(g, y1)

def ne_grd_isSetX2(g):
    return _libsbne.ne_grd_isSetX2(g)

def ne_grd_getX2(g):
    return _libsbne.ne_grd_getX2(g)

def ne_grd_setX2(g, x2):
    return _libsbne.ne_grd_setX2(g, x2)

def ne_grd_isSetY2(g):
    return _libsbne.ne_grd_isSetY2(g)

def ne_grd_getY2(g):
    return _libsbne.ne_grd_getY2(g)

def ne_grd_setY2(g, y2):
    return _libsbne.ne_grd_setY2(g, y2)

def ne_grd_isSetCx(g):
    return _libsbne.ne_grd_isSetCx(g)

def ne_grd_getCx(g):
    return _libsbne.ne_grd_getCx(g)

def ne_grd_setCx(g, cx):
    return _libsbne.ne_grd_setCx(g, cx)

def ne_grd_isSetCy(g):
    return _libsbne.ne_grd_isSetCy(g)

def ne_grd_getCy(g):
    return _libsbne.ne_grd_getCy(g)

def ne_grd_setCy(g, cy):
    return _libsbne.ne_grd_setCy(g, cy)

def ne_grd_isSetFx(g):
    return _libsbne.ne_grd_isSetFx(g)

def ne_grd_getFx(g):
    return _libsbne.ne_grd_getFx(g)

def ne_grd_setFx(g, fx):
    return _libsbne.ne_grd_setFx(g, fx)

def ne_grd_isSetFy(g):
    return _libsbne.ne_grd_isSetFy(g)

def ne_grd_getFy(g):
    return _libsbne.ne_grd_getFy(g)

def ne_grd_setFy(g, fy):
    return _libsbne.ne_grd_setFy(g, fy)

def ne_grd_isSetR(g):
    return _libsbne.ne_grd_isSetR(g)

def ne_grd_getR(g):
    return _libsbne.ne_grd_getR(g)

def ne_grd_setR(g, r):
    return _libsbne.ne_grd_setR(g, r)

def ne_gstp_get(s, infoList):
    return _libsbne.ne_gstp_get(s, infoList)

def ne_gstp_set(s, infoList):
    return _libsbne.ne_gstp_set(s, infoList)

def ne_gstp_isSetOffset(s):
    return _libsbne.ne_gstp_isSetOffset(s)

def ne_gstp_getOffset(s):
    return _libsbne.ne_gstp_getOffset(s)

def ne_gstp_setOffset(s, offset):
    return _libsbne.ne_gstp_setOffset(s, offset)

def ne_gstp_isSetColor(s):
    return _libsbne.ne_gstp_isSetColor(s)

def ne_gstp_getColor(s):
    return _libsbne.ne_gstp_getColor(s)

def ne_gstp_setColor(s, color):
    return _libsbne.ne_gstp_setColor(s, color)

def ne_le_get(lE, infoList):
    return _libsbne.ne_le_get(lE, infoList)

def ne_le_set(lE, infoList):
    return _libsbne.ne_le_set(lE, infoList)

def ne_le_setLineEndingValues(ven, lE, role):
    return _libsbne.ne_le_setLineEndingValues(ven, lE, role)

def ne_le_isSetBoundingBox(lE):
    return _libsbne.ne_le_isSetBoundingBox(lE)

def ne_le_getBoundingBox(lE):
    return _libsbne.ne_le_getBoundingBox(lE)

def ne_le_setBoundingBox(lE, b):
    return _libsbne.ne_le_setBoundingBox(lE, b)

def ne_le_isSetGroup(lE):
    return _libsbne.ne_le_isSetGroup(lE)

def ne_le_getGroup(lE):
    return _libsbne.ne_le_getGroup(lE)

def ne_le_setGroup(lE, g):
    return _libsbne.ne_le_setGroup(lE, g)

def ne_le_isSetEnableRotation(lE):
    return _libsbne.ne_le_isSetEnableRotation(lE)

def ne_le_getEnableRotation(lE):
    return _libsbne.ne_le_getEnableRotation(lE)

def ne_le_enableRotation(lE, enable):
    return _libsbne.ne_le_enableRotation(lE, enable)

def ne_stl_get(s, infoList):
    return _libsbne.ne_stl_get(s, infoList)

def ne_stl_set(s, infoList):
    return _libsbne.ne_stl_set(s, infoList)

def ne_stl_setStyleValues(*args):
    return _libsbne.ne_stl_setStyleValues(*args)

def ne_stl_isSetGroup(s):
    return _libsbne.ne_stl_isSetGroup(s)

def ne_stl_getGroup(s):
    return _libsbne.ne_stl_getGroup(s)

def ne_stl_setGroup(s, g):
    return _libsbne.ne_stl_setGroup(s, g)

def ne_stl_addToTypeList(s, type):
    return _libsbne.ne_stl_addToTypeList(s, type)

def ne_stl_addToRoleList(s, role):
    return _libsbne.ne_stl_addToRoleList(s, role)

def ne_stl_addToIdList(s, gOId):
    return _libsbne.ne_stl_addToIdList(s, gOId)

def ne_grp_get(g, infoList):
    return _libsbne.ne_grp_get(g, infoList)

def ne_grp_set(g, infoList):
    return _libsbne.ne_grp_set(g, infoList)

def ne_grp_isSetStrokeColor(g):
    return _libsbne.ne_grp_isSetStrokeColor(g)

def ne_grp_getStrokeColor(g):
    return _libsbne.ne_grp_getStrokeColor(g)

def ne_grp_setStrokeColor(g, color):
    return _libsbne.ne_grp_setStrokeColor(g, color)

def ne_grp_isSetStrokeWidth(g):
    return _libsbne.ne_grp_isSetStrokeWidth(g)

def ne_grp_getStrokeWidth(g):
    return _libsbne.ne_grp_getStrokeWidth(g)

def ne_grp_setStrokeWidth(g, width):
    return _libsbne.ne_grp_setStrokeWidth(g, width)

def ne_grp_isSetStrokeDashArray(g):
    return _libsbne.ne_grp_isSetStrokeDashArray(g)

def ne_grp_getNumStrokeDashes(g):
    return _libsbne.ne_grp_getNumStrokeDashes(g)

def ne_grp_getStrokeDash(g, index):
    return _libsbne.ne_grp_getStrokeDash(g, index)

def ne_grp_getStrokeDashArray(g):
    return _libsbne.ne_grp_getStrokeDashArray(g)

def ne_grp_setStrokeDashArray(g, dashArray):
    return _libsbne.ne_grp_setStrokeDashArray(g, dashArray)

def ne_grp_isSetFillColor(g):
    return _libsbne.ne_grp_isSetFillColor(g)

def ne_grp_getFillColor(g):
    return _libsbne.ne_grp_getFillColor(g)

def ne_grp_setFillColor(g, color):
    return _libsbne.ne_grp_setFillColor(g, color)

def ne_grp_isSetFillRule(g):
    return _libsbne.ne_grp_isSetFillRule(g)

def ne_grp_getFillRule(g):
    return _libsbne.ne_grp_getFillRule(g)

def ne_grp_setFillRule(g, fillrule):
    return _libsbne.ne_grp_setFillRule(g, fillrule)

def ne_grp_isSetFontFamily(g):
    return _libsbne.ne_grp_isSetFontFamily(g)

def ne_grp_getFontFamily(g):
    return _libsbne.ne_grp_getFontFamily(g)

def ne_grp_setFontFamily(g, fontfamily):
    return _libsbne.ne_grp_setFontFamily(g, fontfamily)

def ne_grp_isSetFontSize(g):
    return _libsbne.ne_grp_isSetFontSize(g)

def ne_grp_getFontSize(g):
    return _libsbne.ne_grp_getFontSize(g)

def ne_grp_setFontSize(g, fontsize):
    return _libsbne.ne_grp_setFontSize(g, fontsize)

def ne_grp_isSetFontStyle(g):
    return _libsbne.ne_grp_isSetFontStyle(g)

def ne_grp_getFontStyle(g):
    return _libsbne.ne_grp_getFontStyle(g)

def ne_grp_setFontStyle(g, fontstyle):
    return _libsbne.ne_grp_setFontStyle(g, fontstyle)

def ne_grp_isSetFontWeight(g):
    return _libsbne.ne_grp_isSetFontWeight(g)

def ne_grp_getFontWeight(g):
    return _libsbne.ne_grp_getFontWeight(g)

def ne_grp_setFontWeight(g, fontweight):
    return _libsbne.ne_grp_setFontWeight(g, fontweight)

def ne_grp_isSetHTextAnchor(g):
    return _libsbne.ne_grp_isSetHTextAnchor(g)

def ne_grp_getHTextAnchor(g):
    return _libsbne.ne_grp_getHTextAnchor(g)

def ne_grp_setHTextAnchor(g, anchor):
    return _libsbne.ne_grp_setHTextAnchor(g, anchor)

def ne_grp_isSetVTextAnchor(g):
    return _libsbne.ne_grp_isSetVTextAnchor(g)

def ne_grp_getVTextAnchor(g):
    return _libsbne.ne_grp_getVTextAnchor(g)

def ne_grp_setVTextAnchor(g, anchor):
    return _libsbne.ne_grp_setVTextAnchor(g, anchor)

def ne_grp_isSetStartHead(g):
    return _libsbne.ne_grp_isSetStartHead(g)

def ne_grp_getStartHead(g):
    return _libsbne.ne_grp_getStartHead(g)

def ne_grp_setStartHead(g, head):
    return _libsbne.ne_grp_setStartHead(g, head)

def ne_grp_isSetEndHead(g):
    return _libsbne.ne_grp_isSetEndHead(g)

def ne_grp_getEndHead(g):
    return _libsbne.ne_grp_getEndHead(g)

def ne_grp_setEndHead(g, head):
    return _libsbne.ne_grp_setEndHead(g, head)

def ne_grp_getNumGeometricShapes(g):
    return _libsbne.ne_grp_getNumGeometricShapes(g)

def ne_grp_getGeometricShape(g, index):
    return _libsbne.ne_grp_getGeometricShape(g, index)

def ne_grp_removeGeometricShape(g, index):
    return _libsbne.ne_grp_removeGeometricShape(g, index)

def ne_grp_removeGeometricShapes(g):
    return _libsbne.ne_grp_removeGeometricShapes(g)

def ne_grp_addGeometricShape(*args):
    return _libsbne.ne_grp_addGeometricShape(*args)

def ne_gs_get(gS, infoList):
    return _libsbne.ne_gs_get(gS, infoList)

def ne_gs_set(gS, infoList):
    return _libsbne.ne_gs_set(gS, infoList)

def ne_gs_getShape(gS):
    return _libsbne.ne_gs_getShape(gS)

def ne_gs_setShapeFeatures(gS, numvertices, href, lineending):
    return _libsbne.ne_gs_setShapeFeatures(gS, numvertices, href, lineending)

def ne_gs_isSetStrokeColor(gS):
    return _libsbne.ne_gs_isSetStrokeColor(gS)

def ne_gs_getStrokeColor(gS):
    return _libsbne.ne_gs_getStrokeColor(gS)

def ne_gs_setStrokeColor(gS, color):
    return _libsbne.ne_gs_setStrokeColor(gS, color)

def ne_gs_isSetStrokeWidth(gS):
    return _libsbne.ne_gs_isSetStrokeWidth(gS)

def ne_gs_getStrokeWidth(gS):
    return _libsbne.ne_gs_getStrokeWidth(gS)

def ne_gs_setStrokeWidth(gS, width):
    return _libsbne.ne_gs_setStrokeWidth(gS, width)

def ne_gs_isSetStrokeDashArray(gS):
    return _libsbne.ne_gs_isSetStrokeDashArray(gS)

def ne_gs_getNumStrokeDashes(gS):
    return _libsbne.ne_gs_getNumStrokeDashes(gS)

def ne_gs_getStrokeDash(gS, index):
    return _libsbne.ne_gs_getStrokeDash(gS, index)

def ne_gs_getStrokeDashArray(gS):
    return _libsbne.ne_gs_getStrokeDashArray(gS)

def ne_gs_setStrokeDashArray(gS, dasharray):
    return _libsbne.ne_gs_setStrokeDashArray(gS, dasharray)

def ne_gs_isSetFillColor(gS):
    return _libsbne.ne_gs_isSetFillColor(gS)

def ne_gs_getFillColor(gS):
    return _libsbne.ne_gs_getFillColor(gS)

def ne_gs_setFillColor(gS, color):
    return _libsbne.ne_gs_setFillColor(gS, color)

def ne_gs_isSetFillRule(gS):
    return _libsbne.ne_gs_isSetFillRule(gS)

def ne_gs_getFillRule(gS):
    return _libsbne.ne_gs_getFillRule(gS)

def ne_gs_setFillRule(gS, fillrule):
    return _libsbne.ne_gs_setFillRule(gS, fillrule)

def ne_img_get(gS, infoList):
    return _libsbne.ne_img_get(gS, infoList)

def ne_img_set(gS, infoList):
    return _libsbne.ne_img_set(gS, infoList)

def ne_img_isSetPositionX(gS):
    return _libsbne.ne_img_isSetPositionX(gS)

def ne_img_getPositionX(gS):
    return _libsbne.ne_img_getPositionX(gS)

def ne_img_setPositionX(gS, x):
    return _libsbne.ne_img_setPositionX(gS, x)

def ne_img_isSetPositionY(gS):
    return _libsbne.ne_img_isSetPositionY(gS)

def ne_img_getPositionY(gS):
    return _libsbne.ne_img_getPositionY(gS)

def ne_img_setPositionY(gS, y):
    return _libsbne.ne_img_setPositionY(gS, y)

def ne_img_isSetDimensionWidth(gS):
    return _libsbne.ne_img_isSetDimensionWidth(gS)

def ne_img_getDimensionWidth(gS):
    return _libsbne.ne_img_getDimensionWidth(gS)

def ne_img_setDimensionWidth(gS, width):
    return _libsbne.ne_img_setDimensionWidth(gS, width)

def ne_img_isSetDimensionHeight(gS):
    return _libsbne.ne_img_isSetDimensionHeight(gS)

def ne_img_getDimensionHeight(gS):
    return _libsbne.ne_img_getDimensionHeight(gS)

def ne_img_setDimensionHeight(gS, height):
    return _libsbne.ne_img_setDimensionHeight(gS, height)

def ne_img_isSetHref(gS):
    return _libsbne.ne_img_isSetHref(gS)

def ne_img_getHref(gS):
    return _libsbne.ne_img_getHref(gS)

def ne_img_setHref(gS, href):
    return _libsbne.ne_img_setHref(gS, href)

def ne_rc_get(gS, infoList):
    return _libsbne.ne_rc_get(gS, infoList)

def ne_rc_set(gS, infoList):
    return _libsbne.ne_rc_set(gS, infoList)

def ne_rc_getNumVertices(gS):
    return _libsbne.ne_rc_getNumVertices(gS)

def ne_rc_getVertex(gS, index):
    return _libsbne.ne_rc_getVertex(gS, index)

def ne_rc_addVertex(gS, point=None, basePoint1=None, basePoint2=None, index=-1):
    return _libsbne.ne_rc_addVertex(gS, point, basePoint1, basePoint2, index)

def ne_rc_removeVertex(gS, index):
    return _libsbne.ne_rc_removeVertex(gS, index)

def ne_rc_isSetStartHead(gS):
    return _libsbne.ne_rc_isSetStartHead(gS)

def ne_rc_getStartHead(gS):
    return _libsbne.ne_rc_getStartHead(gS)

def ne_rc_setStartHead(gS, head):
    return _libsbne.ne_rc_setStartHead(gS, head)

def ne_rc_isSetEndHead(gS):
    return _libsbne.ne_rc_isSetEndHead(gS)

def ne_rc_getEndHead(gS):
    return _libsbne.ne_rc_getEndHead(gS)

def ne_rc_setEndHead(gS, head):
    return _libsbne.ne_rc_setEndHead(gS, head)

def ne_txt_get(gS, infoList):
    return _libsbne.ne_txt_get(gS, infoList)

def ne_txt_set(gS, infoList):
    return _libsbne.ne_txt_set(gS, infoList)

def ne_txt_isSetPositionX(gS):
    return _libsbne.ne_txt_isSetPositionX(gS)

def ne_txt_getPositionX(gS):
    return _libsbne.ne_txt_getPositionX(gS)

def ne_txt_setPositionX(gS, x):
    return _libsbne.ne_txt_setPositionX(gS, x)

def ne_txt_isSetPositionY(gS):
    return _libsbne.ne_txt_isSetPositionY(gS)

def ne_txt_getPositionY(gS):
    return _libsbne.ne_txt_getPositionY(gS)

def ne_txt_setPositionY(gS, y):
    return _libsbne.ne_txt_setPositionY(gS, y)

def ne_txt_isSetFontFamily(gS):
    return _libsbne.ne_txt_isSetFontFamily(gS)

def ne_txt_getFontFamily(gS):
    return _libsbne.ne_txt_getFontFamily(gS)

def ne_txt_setFontFamily(gS, fontfamily):
    return _libsbne.ne_txt_setFontFamily(gS, fontfamily)

def ne_txt_isSetFontSize(gS):
    return _libsbne.ne_txt_isSetFontSize(gS)

def ne_txt_getFontSize(gS):
    return _libsbne.ne_txt_getFontSize(gS)

def ne_txt_setFontSize(gS, fontsize):
    return _libsbne.ne_txt_setFontSize(gS, fontsize)

def ne_txt_isSetFontStyle(gS):
    return _libsbne.ne_txt_isSetFontStyle(gS)

def ne_txt_getFontStyle(gS):
    return _libsbne.ne_txt_getFontStyle(gS)

def ne_txt_setFontStyle(gS, fontstyle):
    return _libsbne.ne_txt_setFontStyle(gS, fontstyle)

def ne_txt_isSetFontWeight(gS):
    return _libsbne.ne_txt_isSetFontWeight(gS)

def ne_txt_getFontWeight(gS):
    return _libsbne.ne_txt_getFontWeight(gS)

def ne_txt_setFontWeight(gS, fontweight):
    return _libsbne.ne_txt_setFontWeight(gS, fontweight)

def ne_txt_isSetHTextAnchor(gS):
    return _libsbne.ne_txt_isSetHTextAnchor(gS)

def ne_txt_getHTextAnchor(gS):
    return _libsbne.ne_txt_getHTextAnchor(gS)

def ne_txt_setHTextAnchor(gS, anchor):
    return _libsbne.ne_txt_setHTextAnchor(gS, anchor)

def ne_txt_isSetVTextAnchor(gS):
    return _libsbne.ne_txt_isSetVTextAnchor(gS)

def ne_txt_getVTextAnchor(gS):
    return _libsbne.ne_txt_getVTextAnchor(gS)

def ne_txt_setVTextAnchor(gS, anchor):
    return _libsbne.ne_txt_setVTextAnchor(gS, anchor)

def ne_rec_get(gS, infoList):
    return _libsbne.ne_rec_get(gS, infoList)

def ne_rec_set(gS, infoList):
    return _libsbne.ne_rec_set(gS, infoList)

def ne_rec_isSetPositionX(gS):
    return _libsbne.ne_rec_isSetPositionX(gS)

def ne_rec_getPositionX(gS):
    return _libsbne.ne_rec_getPositionX(gS)

def ne_rec_setPositionX(gS, x):
    return _libsbne.ne_rec_setPositionX(gS, x)

def ne_rec_isSetPositionY(gS):
    return _libsbne.ne_rec_isSetPositionY(gS)

def ne_rec_getPositionY(gS):
    return _libsbne.ne_rec_getPositionY(gS)

def ne_rec_setPositionY(gS, y):
    return _libsbne.ne_rec_setPositionY(gS, y)

def ne_rec_isSetDimensionWidth(gS):
    return _libsbne.ne_rec_isSetDimensionWidth(gS)

def ne_rec_getDimensionWidth(gS):
    return _libsbne.ne_rec_getDimensionWidth(gS)

def ne_rec_setDimensionWidth(gS, width):
    return _libsbne.ne_rec_setDimensionWidth(gS, width)

def ne_rec_isSetDimensionHeight(gS):
    return _libsbne.ne_rec_isSetDimensionHeight(gS)

def ne_rec_getDimensionHeight(gS):
    return _libsbne.ne_rec_getDimensionHeight(gS)

def ne_rec_setDimensionHeight(gS, height):
    return _libsbne.ne_rec_setDimensionHeight(gS, height)

def ne_rec_isSetCornerCurvatureRX(gS):
    return _libsbne.ne_rec_isSetCornerCurvatureRX(gS)

def ne_rec_getCornerCurvatureRX(gS):
    return _libsbne.ne_rec_getCornerCurvatureRX(gS)

def ne_rec_setCornerCurvatureRX(gS, rx):
    return _libsbne.ne_rec_setCornerCurvatureRX(gS, rx)

def ne_rec_isSetCornerCurvatureRY(gS):
    return _libsbne.ne_rec_isSetCornerCurvatureRY(gS)

def ne_rec_getCornerCurvatureRY(gS):
    return _libsbne.ne_rec_getCornerCurvatureRY(gS)

def ne_rec_setCornerCurvatureRY(gS, ry):
    return _libsbne.ne_rec_setCornerCurvatureRY(gS, ry)

def ne_rec_isSetRatio(gS):
    return _libsbne.ne_rec_isSetRatio(gS)

def ne_rec_getRatio(gS):
    return _libsbne.ne_rec_getRatio(gS)

def ne_rec_setRatio(gS, ratio):
    return _libsbne.ne_rec_setRatio(gS, ratio)

def ne_elp_get(gS, infoList):
    return _libsbne.ne_elp_get(gS, infoList)

def ne_elp_set(gS, infoList):
    return _libsbne.ne_elp_set(gS, infoList)

def ne_elp_isSetPositionCX(gS):
    return _libsbne.ne_elp_isSetPositionCX(gS)

def ne_elp_getPositionCX(gS):
    return _libsbne.ne_elp_getPositionCX(gS)

def ne_elp_setPositionCX(gS, cx):
    return _libsbne.ne_elp_setPositionCX(gS, cx)

def ne_elp_isSetPositionCY(gS):
    return _libsbne.ne_elp_isSetPositionCY(gS)

def ne_elp_getPositionCY(gS):
    return _libsbne.ne_elp_getPositionCY(gS)

def ne_elp_setPositionCY(gS, cy):
    return _libsbne.ne_elp_setPositionCY(gS, cy)

def ne_elp_isSetDimensionRX(gS):
    return _libsbne.ne_elp_isSetDimensionRX(gS)

def ne_elp_getDimensionRX(gS):
    return _libsbne.ne_elp_getDimensionRX(gS)

def ne_elp_setDimensionRX(gS, rx):
    return _libsbne.ne_elp_setDimensionRX(gS, rx)

def ne_elp_isSetDimensionRY(gS):
    return _libsbne.ne_elp_isSetDimensionRY(gS)

def ne_elp_getDimensionRY(gS):
    return _libsbne.ne_elp_getDimensionRY(gS)

def ne_elp_setDimensionRY(gS, ry):
    return _libsbne.ne_elp_setDimensionRY(gS, ry)

def ne_elp_isSetRatio(gS):
    return _libsbne.ne_elp_isSetRatio(gS)

def ne_elp_getRatio(gS):
    return _libsbne.ne_elp_getRatio(gS)

def ne_elp_setRatio(gS, ratio):
    return _libsbne.ne_elp_setRatio(gS, ratio)

def ne_plg_get(gS, infoList):
    return _libsbne.ne_plg_get(gS, infoList)

def ne_plg_set(gS, infoList):
    return _libsbne.ne_plg_set(gS, infoList)

def ne_plg_getNumVertices(gS):
    return _libsbne.ne_plg_getNumVertices(gS)

def ne_plg_getVertex(gS, index):
    return _libsbne.ne_plg_getVertex(gS, index)

def ne_plg_addVertex(gS, point=None, basepoint1=None, basepoint2=None, index=-1):
    return _libsbne.ne_plg_addVertex(gS, point, basepoint1, basepoint2, index)

def ne_plg_removeVertex(gS, index):
    return _libsbne.ne_plg_removeVertex(gS, index)

def ne_vrx_get(rp, infoList):
    return _libsbne.ne_vrx_get(rp, infoList)

def ne_vrx_set(rp, infoList):
    return _libsbne.ne_vrx_set(rp, infoList)

def ne_vrx_getRenderPoint(rP):
    return _libsbne.ne_vrx_getRenderPoint(rP)

def ne_vrx_setRenderPoint(rp, point):
    return _libsbne.ne_vrx_setRenderPoint(rp, point)

def ne_vrx_isRenderCubicBezier(rP):
    return _libsbne.ne_vrx_isRenderCubicBezier(rP)

def ne_vrx_getBasePoint1(rP):
    return _libsbne.ne_vrx_getBasePoint1(rP)

def ne_vrx_setBasePoint1(rp, point):
    return _libsbne.ne_vrx_setBasePoint1(rp, point)

def ne_vrx_getBasePoint2(rP):
    return _libsbne.ne_vrx_getBasePoint2(rP)

def ne_vrx_setBasePoint2(rp, point):
    return _libsbne.ne_vrx_setBasePoint2(rp, point)

def ne_rp_get(point, infoList):
    return _libsbne.ne_rp_get(point, infoList)

def ne_rp_set(point, infoList):
    return _libsbne.ne_rp_set(point, infoList)

def ne_rp_getX(point):
    return _libsbne.ne_rp_getX(point)

def ne_rp_setX(point, x):
    return _libsbne.ne_rp_setX(point, x)

def ne_rp_getY(point):
    return _libsbne.ne_rp_getY(point)

def ne_rp_setY(point, y):
    return _libsbne.ne_rp_setY(point, y)

def ne_rav_getAbsoluteValue(rAV):
    return _libsbne.ne_rav_getAbsoluteValue(rAV)

def ne_rav_setAbsoluteValue(rAV, abs):
    return _libsbne.ne_rav_setAbsoluteValue(rAV, abs)

def ne_rav_getRelativeValue(rAV):
    return _libsbne.ne_rav_getRelativeValue(rAV)

def ne_rav_setRelativeValue(rAV, rel):
    return _libsbne.ne_rav_setRelativeValue(rAV, rel)


