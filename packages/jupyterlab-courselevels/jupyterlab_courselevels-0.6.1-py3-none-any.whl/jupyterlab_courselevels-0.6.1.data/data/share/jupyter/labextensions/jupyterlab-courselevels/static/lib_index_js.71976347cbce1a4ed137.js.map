{"version":3,"file":"lib_index_js.71976347cbce1a4ed137.js","mappings":";;;;;;;;;;;;;;;AAAA;AACwD;AACxD;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI,iEAAe;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,OAAO,EAAE,UAAU;AACnD,iCAAiC,MAAM;AACvC;AACA;AACA,wBAAwB,OAAO,EAAE,YAAY,IAAI,kBAAkB,IAAI,MAAM;AAC7E;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;AC5CA;AACA;AACA;AACA;AACuD;AACC;AACA;AACH;AACgC;AAClB;AACjB;AAClD;AACA;AACA;AACA,eAAe,iEAAe,EAAE,kEAAgB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,kEAAM;AAC9B,wBAAwB,qEAAS;AACjC;AACA;AACA,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC;AACA;AACA;AACA,wBAAwB,kEAAM;AAC9B,wBAAwB,qEAAS;AACjC;AACA;AACA,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC;AACA;AACA;AACA,wBAAwB,kEAAM;AAC9B,wBAAwB,qEAAS;AACjC;AACA;AACA,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC,wBAAwB,qEAAS;AACjC;AACA;AACA;AACA,oBAAoB,qEAAS;AAC7B,oBAAoB,qEAAS;AAC7B,oBAAoB,qEAAS;AAC7B;AACA;AACA;AACA,YAAY,0EAAc,kBAAkB,6DAAK;AACjD;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,MAAM;AACzD;AACA,iCAAiC,OAAO;AACxC;AACA,aAAa;AACb,8BAA8B,mCAAmC;AACjE,yCAAyC,2DAA2D;AACpG;AACA;AACA,YAAY,0EAAc,kBAAkB,6DAAK;AACjD,gBAAgB,qEAAS;AACzB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,mCAAmC;AAC7D,qCAAqC,gEAAgE;AACrG;AACA,YAAY,0EAAc,kBAAkB,6DAAK;AACjD,gBAAgB,qEAAS;AACzB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,0BAA0B,mCAAmC;AAC7D,qCAAqC,gEAAgE;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAa;AAChD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,kEAAkB;AAC7C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAa;AAChD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,kEAAkB;AAC7C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAa;AAChD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,kEAAkB;AAC7C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,mCAAmC,+DAAa;AAChD;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,2BAA2B,kEAAkB;AAC7C;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,WAAW;AAC1C,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,+DAAiB;AACrC;AACA,aAAa;AACb,8BAA8B,mCAAmC;AACjE;AACA,6CAA6C,2DAA2D;AACxG;AACA;AACA;AACA;AACA,iEAAe,MAAM,EAAC","sources":["webpack://jupyterlab-courselevels/./lib/admonitions.js","webpack://jupyterlab-courselevels/./lib/index.js"],"sourcesContent":["/* eslint-disable prettier/prettier */\nimport { NotebookActions, } from '@jupyterlab/notebook';\nconst FENCE = '````';\n/* works on the active cell */\nexport const toggle_admonition = (notebook, admonition) => {\n    const activeCell = notebook === null || notebook === void 0 ? void 0 : notebook.activeCell;\n    if (activeCell === undefined) {\n        return;\n    }\n    const model = activeCell === null || activeCell === void 0 ? void 0 : activeCell.model;\n    if (model === undefined) {\n        return;\n    }\n    NotebookActions.changeCellType(notebook, 'markdown');\n    let cell_source = model.sharedModel.getSource();\n    // remove trailing newlines\n    while (cell_source.endsWith('\\n')) {\n        cell_source = cell_source.slice(0, -1);\n    }\n    // does it start with an admonition?\n    const turning_off = cell_source.startsWith(FENCE);\n    console.debug('admonition: turning_off', turning_off);\n    // a function that removes any initial white line, and any trailing white line\n    // a line is considered white if it is empty or only contains whitespace\n    const tidy = (dirty) => {\n        const lines = dirty.split('\\n');\n        while (lines.length != 0 && lines[0].match(/^\\s*$/)) {\n            lines.shift();\n        }\n        while (lines.length != 0 && lines[lines.length - 1].match(/^\\s*$/)) {\n            lines.pop();\n        }\n        return lines.join('\\n');\n    };\n    let new_source;\n    if (turning_off) {\n        new_source = tidy(cell_source\n            .replace(RegExp(`^${FENCE} *{[a-zA-Z]+}`), '')\n            .replace(RegExp(`\\n${FENCE}$`), ''));\n    }\n    else {\n        new_source = `${FENCE}{${admonition}}\\n${tidy(cell_source)}\\n${FENCE}`;\n    }\n    model.sharedModel.setSource(new_source);\n};\n","/*\n * for attaching keybindings later on, see\n * https://towardsdatascience.com/how-to-customize-jupyterlab-keyboard-shortcuts-72321f73753d\n */\nimport { ICommandPalette } from '@jupyterlab/apputils';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { DisposableDelegate } from '@lumino/disposable';\nimport { ToolbarButton } from '@jupyterlab/apputils';\nimport { md_has, md_insert, md_remove, md_toggle } from 'jupyterlab-celltagsclasses';\nimport { Scope, apply_on_cells } from 'jupyterlab-celltagsclasses';\nimport { toggle_admonition } from './admonitions';\nconst plugin = {\n    id: 'jupyterlab-courselevels:plugin',\n    autoStart: true,\n    requires: [ICommandPalette, INotebookTracker],\n    activate: (app, palette, notebookTracker) => {\n        console.log('extension jupyterlab-courselevels is activating');\n        // https://lumino.readthedocs.io/en/1.x/api/commands/interfaces/commandregistry.ikeybindingoptions.html\n        // The supported modifiers are: Accel, Alt, Cmd, Ctrl, and Shift. The Accel\n        // modifier is translated to Cmd on Mac and Ctrl on all other platforms. The\n        // Cmd modifier is ignored on non-Mac platforms.\n        // Alt is option on mac\n        const cell_toggle_level = (cell, level) => {\n            switch (level) {\n                case 'basic':\n                    if (md_has(cell, 'tags', 'level_basic')) {\n                        md_remove(cell, 'tags', 'level_basic');\n                    }\n                    else {\n                        md_insert(cell, 'tags', 'level_basic');\n                        md_remove(cell, 'tags', 'level_intermediate');\n                        md_remove(cell, 'tags', 'level_advanced');\n                    }\n                    break;\n                case 'intermediate':\n                    if (md_has(cell, 'tags', 'level_intermediate')) {\n                        md_remove(cell, 'tags', 'level_intermediate');\n                    }\n                    else {\n                        md_remove(cell, 'tags', 'level_basic');\n                        md_insert(cell, 'tags', 'level_intermediate');\n                        md_remove(cell, 'tags', 'level_advanced');\n                    }\n                    break;\n                case 'advanced':\n                    if (md_has(cell, 'tags', 'level_advanced')) {\n                        md_remove(cell, 'tags', 'level_advanced');\n                    }\n                    else {\n                        md_remove(cell, 'tags', 'level_basic');\n                        md_remove(cell, 'tags', 'level_intermediate');\n                        md_insert(cell, 'tags', 'level_advanced');\n                    }\n                    break;\n                default:\n                    md_remove(cell, 'tags', 'level_basic');\n                    md_remove(cell, 'tags', 'level_intermediate');\n                    md_remove(cell, 'tags', 'level_advanced');\n            }\n        };\n        const toggle_level = (level) => {\n            apply_on_cells(notebookTracker, Scope.Active, (cell) => {\n                cell_toggle_level(cell, level);\n            });\n        };\n        let command;\n        for (const [level, key] of [\n            ['basic', 'Ctrl X'],\n            ['intermediate', 'Ctrl Y'],\n            ['advanced', 'Ctrl Z'],\n        ]) {\n            command = `courselevels:toggle-level-${level}`;\n            app.commands.addCommand(command, {\n                label: `toggle ${level} level`,\n                execute: () => toggle_level(level)\n            });\n            palette.addItem({ command, category: 'CourseLevels' });\n            app.commands.addKeyBinding({ command, keys: ['Ctrl \\\\', key], selector: '.jp-Notebook' });\n        }\n        const toggle_frame = () => {\n            apply_on_cells(notebookTracker, Scope.Active, (cell) => {\n                md_toggle(cell, 'tags', 'framed_cell');\n            });\n        };\n        command = 'courselevels:toggle-frame';\n        app.commands.addCommand(command, {\n            label: 'toggle frame',\n            execute: () => toggle_frame()\n        });\n        palette.addItem({ command, category: 'CourseLevels' });\n        app.commands.addKeyBinding({ command, keys: ['Ctrl \\\\', 'Ctrl M'], selector: '.jp-Notebook' });\n        const toggle_licence = () => {\n            apply_on_cells(notebookTracker, Scope.Active, (cell) => {\n                md_toggle(cell, 'tags', 'licence');\n            });\n        };\n        command = 'courselevels:toggle-licence';\n        app.commands.addCommand(command, {\n            label: 'toggle licence',\n            execute: () => toggle_licence()\n        });\n        palette.addItem({ command, category: 'CourseLevels' });\n        app.commands.addKeyBinding({ command, keys: ['Ctrl \\\\', 'Ctrl L'], selector: '.jp-Notebook' });\n        // the buttons in the toolbar\n        const find_spacer = (panel) => {\n            let index = 0;\n            for (const child of panel.toolbar.children()) {\n                if (child.node.classList.contains('jp-Toolbar-spacer')) {\n                    return index;\n                }\n                else {\n                    index += 1;\n                }\n            }\n            return 0;\n        };\n        class BasicButton {\n            createNew(panel, context) {\n                const button = new ToolbarButton({\n                    className: 'courselevels-button',\n                    iconClass: 'far fa-hand-pointer',\n                    onClick: () => toggle_level('basic'),\n                    tooltip: 'Toggle basic level',\n                });\n                // compute where to insert it\n                const index = find_spacer(panel);\n                panel.toolbar.insertItem(index, 'basicLevel', button);\n                return new DisposableDelegate(() => {\n                    button.dispose();\n                });\n            }\n        }\n        app.docRegistry.addWidgetExtension('Notebook', new BasicButton());\n        class IntermediateButton {\n            createNew(panel, context) {\n                const button = new ToolbarButton({\n                    className: 'courselevels-button',\n                    iconClass: 'far fa-hand-peace',\n                    onClick: () => toggle_level('intermediate'),\n                    tooltip: 'Toggle intermediate level',\n                });\n                // compute where to insert it\n                const index = find_spacer(panel);\n                panel.toolbar.insertItem(index, 'intermediateLevel', button);\n                return new DisposableDelegate(() => {\n                    button.dispose();\n                });\n            }\n        }\n        app.docRegistry.addWidgetExtension('Notebook', new IntermediateButton());\n        class AdvancedButton {\n            createNew(panel, context) {\n                const button = new ToolbarButton({\n                    className: 'courselevels-button',\n                    iconClass: 'far fa-hand-spock',\n                    onClick: () => toggle_level('advanced'),\n                    tooltip: 'Toggle advanced level',\n                });\n                // compute where to insert it\n                const index = find_spacer(panel);\n                panel.toolbar.insertItem(index, 'advancedLevel', button);\n                return new DisposableDelegate(() => {\n                    button.dispose();\n                });\n            }\n        }\n        app.docRegistry.addWidgetExtension('Notebook', new AdvancedButton());\n        class FrameButton {\n            createNew(panel, context) {\n                const button = new ToolbarButton({\n                    className: 'courselevels-button',\n                    iconClass: 'fas fa-crop-alt',\n                    onClick: () => toggle_frame(),\n                    tooltip: 'Toggle frame around cell',\n                });\n                // compute where to insert it\n                const index = find_spacer(panel);\n                panel.toolbar.insertItem(index, 'frameLevel', button);\n                return new DisposableDelegate(() => {\n                    button.dispose();\n                });\n            }\n        }\n        app.docRegistry.addWidgetExtension('Notebook', new FrameButton());\n        // admonitions\n        for (const [name, key] of [\n            ['admonition', 'Ctrl A'],\n            ['tip', 'Ctrl T'],\n            ['note', 'Ctrl N'],\n            ['attention', null],\n            ['caution', null],\n            ['danger', null],\n            ['error', null],\n            ['hint', null],\n            ['important', null],\n            ['seealso', null],\n            ['warning', null],\n        ]) {\n            // need to cast because name is typed as string | null ?!?\n            const admonition = name;\n            command = 'courselevels:toggle-admonition';\n            let label = 'toggle admonition';\n            if (admonition !== 'admonition') {\n                command += `-${admonition}`;\n                label += ` ${admonition}`;\n            }\n            app.commands.addCommand(command, {\n                label,\n                execute: () => {\n                    var _a;\n                    const notebook = (_a = notebookTracker.currentWidget) === null || _a === void 0 ? void 0 : _a.content;\n                    if (notebook === undefined) {\n                        return;\n                    }\n                    toggle_admonition(notebook, admonition);\n                }\n            });\n            palette.addItem({ command, category: 'CourseLevels' });\n            if (key !== null) {\n                app.commands.addKeyBinding({ command, keys: ['Ctrl \\\\', key], selector: '.jp-Notebook' });\n            }\n        }\n    }\n};\nexport default plugin;\n"],"names":[],"sourceRoot":""}