{"version":3,"file":"169.cef3529703a799341c51.js?v=cef3529703a799341c51","mappings":"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","sources":["webpack://jupyterlab-broccoli-turtle/./lib/toolbox_basic.js","webpack://jupyterlab-broccoli-turtle/./lib/blocks.js","webpack://jupyterlab-broccoli-turtle/./lib/utils.js","webpack://jupyterlab-broccoli-turtle/./lib/toolbox_turtle.js","webpack://jupyterlab-broccoli-turtle/./lib/python/func.js","webpack://jupyterlab-broccoli-turtle/./lib/javascript/func.js","webpack://jupyterlab-broccoli-turtle/./lib/index.js","webpack://jupyterlab-broccoli-turtle/./lib/msg/ lazy ^\\.\\/.*\\.js$ namespace object"],"sourcesContent":["//\nexport const TOOLBOX_BASIC = {\n    kind: 'categoryToolbox',\n    contents: [\n        {\n            kind: 'category',\n            name: '%{BKY_TOOLBOX_LOGIC}',\n            colour: '210',\n            contents: [\n                {\n                    kind: 'block',\n                    type: 'controls_if'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_compare'\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_operation',\n                    blockxml: `<block type='logic_operation'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_negate',\n                    blockxml: `<block type='logic_negate'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_boolean',\n                    blockxml: `<block type='logic_boolean'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_null',\n                    blockxml: `<block type='logic_null'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'logic_ternary',\n                    blockxml: `<block type='logic_ternary'></block>`\n                }\n            ]\n        },\n        {\n            kind: 'category',\n            name: '%{BKY_TOOLBOX_LOOPS}',\n            colour: '120',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'controls_repeat_ext',\n                    blockxml: `<block type='controls_repeat_ext'>\n               <value name='TIMES'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>10</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'controls_whileUntil',\n                    blockxml: `<block type='controls_whileUntil'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'controls_for',\n                    blockxml: `<block type='controls_for'>\n               <value name='FROM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n               <value name='TO'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>10</field>\n                 </shadow>\n               </value>\n               <value name='BY'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'controls_forEach',\n                    blockxml: `<block type='controls_forEach'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'controls_flow_statements',\n                    blockxml: `<block type='controls_flow_statements'></block>`\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: '%{BKY_TOOLBOX_MATH}',\n            colour: '230',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'math_number',\n                    blockxml: `<block type='math_number'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_arithmetic',\n                    blockxml: `<block type='math_arithmetic'>\n               <value name='A'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n               <value name='B'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_single',\n                    blockxml: `<block type='math_single'>\n               <value name='NUM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>9</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_trig',\n                    blockxml: `<block type='math_trig'>\n               <value name='NUM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>45</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_constant',\n                    blockxml: `<block type='math_constant'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_number_property',\n                    blockxml: `<block type='math_number_property'>\n               <value name='NUMBER_TO_CHECK'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>0</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_change',\n                    blockxml: `<block type='math_change'>\n               <value name='DELTA'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_round',\n                    blockxml: `<block type='math_round'>\n               <value name='NUM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>3.1</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_on_list',\n                    blockxml: `<block type='math_on_list'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_modulo',\n                    blockxml: `<block type='math_modulo'>\n               <value name='DIVIDEND'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>64</field>\n                 </shadow>\n               </value>\n               <value name='DIVISOR'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>10</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_constrain',\n                    blockxml: `<block type='math_constrain'>\n              <value name='VALUE'>\n                <shadow type='math_number'>\n                  <field name='NUM'>50</field>\n                </shadow>\n              </value>\n              <value name='LOW'>\n                <shadow type='math_number'>\n                  <field name='NUM'>1</field>\n                </shadow>\n              </value>\n              <value name='HIGH'>\n                <shadow type='math_number'>\n                  <field name='NUM'>100</field>\n                </shadow>\n              </value>\n            </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_random_int',\n                    blockxml: `<block type='math_random_int'>\n               <value name='FROM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>1</field>\n                 </shadow>\n               </value>\n               <value name='TO'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>100</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'math_random_float',\n                    blockxml: `<block type='math_random_float'></block>`\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: '%{BKY_TOOLBOX_TEXT}',\n            colour: '160',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'text',\n                    blockxml: `<block type='text'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_join',\n                    blockxml: `<block type='text_join'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_append',\n                    blockxml: `<block type='text_append'>\n               <value name='TEXT'>\n                 <shadow type='text'></shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_length',\n                    blockxml: `<block type='text_length'>\n               <value name='VALUE'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_isEmpty',\n                    blockxml: `<block type='text_isEmpty'>\n               <value name='VALUE'>\n                 <shadow type='text'>\n                   <field name='TEXT'></field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_indexOf',\n                    blockxml: `<block type='text_indexOf'>\n               <value name='VALUE'>\n                 <block type='variables_get'>\n                   <field name='VAR'>text</field>\n                 </block>\n               </value>\n               <value name='FIND'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_charAt',\n                    blockxml: `<block type='text_charAt'>\n               <value name='VALUE'>\n                 <block type='variables_get'>\n                   <field name='VAR'>text</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_getSubstring',\n                    blockxml: `<block type='text_getSubstring'>\n               <value name='STRING'>\n                 <block type='variables_get'>\n                   <field name='VAR'>text</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_changeCase',\n                    blockxml: `<block type='text_changeCase'>\n               <value name='TEXT'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_trim',\n                    blockxml: `<block type='text_trim'>\n               <value name='TEXT'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_print',\n                    blockxml: `<block type='text_print'>\n               <value name='TEXT'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'text_prompt_ext',\n                    blockxml: `<block type='text_prompt_ext'>\n               <value name='TEXT'>\n                 <shadow type='text'>\n                   <field name='TEXT'>abc</field>\n                 </shadow>\n               </value>\n             </block>`\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: '%{BKY_TOOLBOX_LISTS}',\n            colour: '260',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_create_with',\n                    blockxml: `<block type='lists_create_with'>\n               <mutation items='0'></mutation>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_create_with',\n                    blockxml: `<block type='lists_create_with'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_repeat',\n                    blockxml: `<block type='lists_repeat'>\n               <value name='NUM'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>5</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_length',\n                    blockxml: `<block type='lists_length'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_isEmpty',\n                    blockxml: `<block type='lists_isEmpty'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_indexOf',\n                    blockxml: `<block type='lists_indexOf'>\n               <value name='VALUE'>\n                 <block type='variables_get'>\n                   <field name='VAR'>list</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_getIndex',\n                    blockxml: `<block type='lists_getIndex'>\n               <value name='VALUE'>\n                 <block type='variables_get'>\n                   <field name='VAR'>list</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_setIndex',\n                    blockxml: `<block type='lists_setIndex'>\n               <value name='LIST'>\n                 <block type='variables_get'>\n                   <field name='VAR'>list</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_getSublist',\n                    blockxml: `<block type='lists_getSublist'>\n               <value name='LIST'>\n                 <block type='variables_get'>\n                   <field name='VAR'>list</field>\n                 </block>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_split',\n                    blockxml: `<block type='lists_split'>\n               <value name='DELIM'>\n                 <shadow type='text'>\n                   <field name='TEXT'>,</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'lists_sort',\n                    blockxml: `<block type='lists_sort'></block>`\n                }\n            ]\n        },\n        {\n            kind: 'CATEGORY',\n            name: '%{BKY_TOOLBOX_COLOR}',\n            colour: '20',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'colour_picker',\n                    blockxml: `<block type='colour_picker'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'colour_random',\n                    blockxml: `<block type='colour_random'></block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'colour_rgb',\n                    blockxml: `<block type='colour_rgb'>\n               <value name='RED'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>100</field>\n                 </shadow>\n               </value>\n               <value name='GREEN'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>50</field>\n                 </shadow>\n               </value>\n               <value name='BLUE'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>0</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'colour_blend',\n                    blockxml: `<block type='colour_blend'>\n               <value name='COLOUR1'>\n                 <shadow type='colour_picker'>\n                   <field name='COLOUR'>#ff0000</field>\n                 </shadow>\n               </value>\n             <value name='COLOUR2'>\n               <shadow type='colour_picker'>\n                 <field name='COLOUR'>#3333ff</field>\n               </shadow>\n             </value>\n             <value name='RATIO'>\n               <shadow type='math_number'>\n                 <field name='NUM'>0.5</field>\n               </shadow>\n             </value>\n           </block>`\n                }\n            ]\n        },\n        {\n            kind: 'SEP'\n        },\n        {\n            kind: 'CATEGORY',\n            custom: 'VARIABLE',\n            colour: '330',\n            name: '%{BKY_TOOLBOX_VARIABLES}'\n        },\n        {\n            kind: 'CATEGORY',\n            custom: 'PROCEDURE',\n            colour: '290',\n            name: '%{BKY_TOOLBOX_FUNCTIONS}'\n        },\n    ]\n};\n//# sourceMappingURL=toolbox_basic.js.map","import * as Blockly from 'blockly';\nimport { ToolboxUtils } from './utils';\nimport { TOOLBOX_BASIC } from './toolbox_basic';\nimport { TOOLBOX_TURTLE } from './toolbox_turtle';\n//\nconst toolboxUtils = new ToolboxUtils();\nexport const TOOLBOX = toolboxUtils.add(TOOLBOX_TURTLE, TOOLBOX_BASIC, 2);\n// Init\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'turtle_init',\n        'message0': '%{BKY_BLOCK_TURTLE_INIT}  %1 %{BKY_BLOCK_TURTLE_XSIZE}  %2 %{BKY_BLOCK_TURTLE_YSIZE}  %3',\n        'args0': [\n            {\n                'type': 'input_dummy'\n            },\n            {\n                'type': 'input_value',\n                'name': 'XSIZE',\n                'check': 'Number',\n                'align': 'RIGHT'\n            },\n            {\n                'type': 'input_value',\n                'name': 'YSIZE',\n                'check': 'Number',\n                'align': 'RIGHT'\n            }\n        ],\n        'nextStatement': null,\n        'colour': 5,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n// Turtle Speed\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'turtle_speed',\n        'message0': '%{BKY_BLOCK_TURTLE_SPEED}  %1',\n        'args0': [\n            {\n                'type': 'input_value',\n                'name': 'VAL',\n                'check': 'Number'\n            }\n        ],\n        'previousStatement': null,\n        'nextStatement': null,\n        'colour': 290,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n// Line Width\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'turtle_line_width',\n        'message0': '%{BKY_BLOCK_TURTLE_WIDTH}  %1',\n        'args0': [\n            {\n                'type': 'input_value',\n                'name': 'VAL',\n                'check': 'Number'\n            }\n        ],\n        'previousStatement': null,\n        'nextStatement': null,\n        'colour': 290,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n// Line Color\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'turtle_line_color',\n        'message0': '%{BKY_BLOCK_TURTLE_COLOR}  %1',\n        'args0': [\n            {\n                'type': 'input_value',\n                'name': 'VAL',\n                'check': 'Colour'\n            }\n        ],\n        'previousStatement': null,\n        'nextStatement': null,\n        'colour': 290,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n// Line HSV Color\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'turtle_line_hsv',\n        'message0': '%{BKY_BLOCK_TURTLE_HSV} %1' +\n            '%{BKY_BLOCK_TURTLE_HSV_S}  %2' +\n            '%{BKY_BLOCK_TURTLE_HSV_V}  %3',\n        'args0': [\n            {\n                'type': 'input_value',\n                'name': 'H',\n                'check': 'Number',\n                'align': 'RIGHT',\n            },\n            {\n                'type': 'input_value',\n                'name': 'S',\n                'check': 'Number',\n                'align': 'RIGHT',\n            },\n            {\n                'type': 'input_value',\n                'name': 'V',\n                'check': 'Number',\n                'align': 'RIGHT',\n            },\n        ],\n        'previousStatement': null,\n        'nextStatement': null,\n        'colour': 290,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n// Pen Up\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'turtle_pen_up',\n        'message0': '%{BKY_BLOCK_TURTLE_PEN_UP}',\n        'previousStatement': null,\n        'nextStatement': null,\n        'colour': 50,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n// Pen Down\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'turtle_pen_down',\n        'message0': '%{BKY_BLOCK_TURTLE_PEN_DOWN}',\n        'previousStatement': null,\n        'nextStatement': null,\n        'colour': 50,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n// Foward\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'turtle_forward',\n        'message0': '%{BKY_BLOCK_TURTLE_FORWARD}  %1',\n        'args0': [\n            {\n                'type': 'input_value',\n                'name': 'VAL',\n                'check': 'Number'\n            }\n        ],\n        'previousStatement': null,\n        'nextStatement': null,\n        'colour': 200,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n// Turn Right\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'turtle_turn_right',\n        'message0': '%{BKY_BLOCK_TURTLE_TURN_RIGHT}  %1',\n        'args0': [\n            {\n                'type': 'input_value',\n                'name': 'VAL',\n                'check': 'Number'\n            }\n        ],\n        'previousStatement': null,\n        'nextStatement': null,\n        'colour': 200,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n// Turn Left\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'turtle_turn_left',\n        'message0': '%{BKY_BLOCK_TURTLE_TURN_LEFT}  %1',\n        'args0': [\n            {\n                'type': 'input_value',\n                'name': 'VAL',\n                'check': 'Number'\n            }\n        ],\n        'previousStatement': null,\n        'nextStatement': null,\n        'colour': 200,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n// Move to\nBlockly.defineBlocksWithJsonArray([{\n        'type': 'turtle_move',\n        'message0': '%{BKY_BLOCK_TURTLE_MOVE}  %1 %{BKY_BLOCK_TURTLE_XPOS}  %2 %{BKY_BLOCK_TURTLE_YPOS}  %3',\n        'args0': [\n            {\n                'type': 'input_dummy'\n            },\n            {\n                'type': 'input_value',\n                'name': 'XPOS',\n                'check': 'Number',\n                'align': 'RIGHT'\n            },\n            {\n                'type': 'input_value',\n                'name': 'YPOS',\n                'check': 'Number',\n                'align': 'RIGHT'\n            }\n        ],\n        'previousStatement': null,\n        'nextStatement': null,\n        'colour': 200,\n        'tooltip': '',\n        'helpUrl': ''\n    }]);\n//# sourceMappingURL=blocks.js.map","//\nexport class ToolboxUtils {\n    constructor() { }\n    add(a, b, num) {\n        //\n        if (a.kind !== b.kind)\n            undefined;\n        const c = { kind: a.kind, contents: new Array };\n        const a_len = a.contents.length;\n        const b_len = b.contents.length;\n        for (let i = 0; i < a_len; i++) {\n            c.contents[i] = a.contents[i];\n        }\n        // separator\n        for (let i = 0; i < num; i++) {\n            c.contents[a_len + i] = { kind: 'SEP' };\n        }\n        for (let i = 0; i < b_len; i++) {\n            c.contents[a_len + num + i] = b.contents[i];\n        }\n        return c;\n    }\n}\n//# sourceMappingURL=utils.js.map","export const TOOLBOX_TURTLE = {\n    kind: 'categoryToolbox',\n    contents: [\n        {\n            kind: 'CATEGORY',\n            name: '%{BKY_TOOLBOX_TURTLE}',\n            colour: '5',\n            contents: [\n                {\n                    kind: 'BLOCK',\n                    type: 'turtle_init',\n                    blockxml: `<block type='turtle_init'>\n               <value name='XSIZE'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>640</field>\n                 </shadow>\n               </value>\n               <value name='YSIZE'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>400</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'turtle_speed',\n                    blockxml: `<block type='turtle_speed'>\n               <value name='VAL'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>2</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'turtle_line_width',\n                    blockxml: `<block type='turtle_line_width'>\n               <value name='VAL'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>2</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'turtle_line_color',\n                    blockxml: `<block type='turtle_line_color'>\n               <value name='VAL'>\n                 <shadow type='colour_picker'>\n                   <field name='COLOUR'>#000000</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'turtle_line_hsv',\n                    blockxml: `<block type='turtle_line_hsv'>\n               <value name='H'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>0</field>\n                 </shadow>\n               </value>\n               <value name='S'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>0.45</field>\n                 </shadow>\n               </value>\n               <value name='V'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>0.65</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'turtle_pen_down',\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'turtle_pen_up',\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'turtle_forward',\n                    blockxml: `<block type='turtle_forward'>\n               <value name='VAL'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>100</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'turtle_turn_right',\n                    blockxml: `<block type='turtle_turn_right'>\n               <value name='VAL'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>90</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'turtle_turn_left',\n                    blockxml: `<block type='turtle_turn_left'>\n               <value name='VAL'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>90</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n                {\n                    kind: 'BLOCK',\n                    type: 'turtle_move',\n                    blockxml: `<block type='turtle_move'>\n               <value name='XPOS'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>0</field>\n                 </shadow>\n               </value>\n               <value name='YPOS'>\n                 <shadow type='math_number'>\n                   <field name='NUM'>0</field>\n                 </shadow>\n               </value>\n             </block>`\n                },\n            ]\n        }\n    ]\n};\n//# sourceMappingURL=toolbox_turtle.js.map","import { pythonGenerator as BlocklyGene } from 'blockly/python';\nconst Order = {\n    ATOMIC: 0,\n    COLLECTION: 1,\n    STRING_CONVERSION: 1,\n    MEMBER: 2.1,\n    FUNCTION_CALL: 2.2,\n    EXPONENTIATION: 3,\n    UNARY_SIGN: 4,\n    BITWISE_NOT: 4,\n    MULTIPLICATIVE: 5,\n    ADDITIVE: 6,\n    BITWISE_SHIFT: 7,\n    BITWISE_AND: 8,\n    BITWISE_XOR: 9,\n    BITWISE_OR: 10,\n    RELATIONAL: 11,\n    LOGICAL_NOT: 12,\n    LOGICAL_AND: 13,\n    LOGICAL_OR: 14,\n    CONDITIONAL: 15,\n    LAMBDA: 16,\n    NONE: 99, // (...)\n};\n//\n//const notImplementedMsg = 'Not implemented at this Kernel';\nexport function turtle_init(block) {\n    const xsz = BlocklyGene.valueToCode(block, 'XSIZE', Order.NONE) || \"''\";\n    const ysz = BlocklyGene.valueToCode(block, 'YSIZE', Order.NONE) || \"''\";\n    const msg = 'from jbturtle import *\\n' +\n        'from math import * \\n\\n' +\n        'turtle = JBTurtle(' + xsz + ', ' + ysz + ')\\n';\n    return msg;\n}\n;\nexport function turtle_speed(block) {\n    const val = BlocklyGene.valueToCode(block, 'VAL', Order.NONE) || \"''\";\n    return 'turtle.speed(' + val + ')\\n';\n}\n;\nexport function turtle_line_width(block) {\n    const val = BlocklyGene.valueToCode(block, 'VAL', Order.NONE) || \"''\";\n    return 'turtle.line_width(' + val + ')\\n';\n}\n;\nexport function turtle_line_color(block) {\n    const val = BlocklyGene.valueToCode(block, 'VAL', Order.NONE) || \"''\";\n    return 'turtle.line_color(' + val + ')\\n';\n}\n;\nexport function turtle_line_hsv(block) {\n    const hh = BlocklyGene.valueToCode(block, 'H', Order.NONE) || \"''\";\n    const ss = BlocklyGene.valueToCode(block, 'S', Order.NONE) || \"''\";\n    const vv = BlocklyGene.valueToCode(block, 'V', Order.NONE) || \"''\";\n    return 'turtle.line_hsv(' + hh + ', ' + ss + ', ' + vv + ')\\n';\n}\n;\nexport function turtle_pen_up(block) {\n    return 'turtle.pen_up()\\n';\n}\n;\nexport function turtle_pen_down(block) {\n    return 'turtle.pen_down()\\n';\n}\n;\nexport function turtle_forward(block) {\n    const val = BlocklyGene.valueToCode(block, 'VAL', Order.NONE) || \"''\";\n    return 'turtle.forward(' + val + ')\\n';\n}\n;\nexport function turtle_turn_right(block) {\n    const val = BlocklyGene.valueToCode(block, 'VAL', Order.NONE) || \"''\";\n    return 'turtle.turn_right(' + val + ')\\n';\n}\n;\nexport function turtle_turn_left(block) {\n    const val = BlocklyGene.valueToCode(block, 'VAL', Order.NONE) || \"''\";\n    return 'turtle.turn_left(' + val + ')\\n';\n}\n;\nexport function turtle_move(block) {\n    const xp = BlocklyGene.valueToCode(block, 'XPOS', Order.NONE) || \"''\";\n    const yp = BlocklyGene.valueToCode(block, 'YPOS', Order.NONE) || \"''\";\n    return 'turtle.move(' + xp + ', ' + yp + ')\\n';\n}\n;\n/**/\n//# sourceMappingURL=func.js.map","import { javascriptGenerator as BlocklyGene } from 'blockly/javascript';\nconst Order = {\n    ATOMIC: 0,\n    NEW: 1.1,\n    MEMBER: 1.2,\n    FUNCTION_CALL: 2,\n    INCREMENT: 3,\n    DECREMENT: 3,\n    BITWISE_NOT: 4.1,\n    UNARY_PLUS: 4.2,\n    UNARY_NEGATION: 4.3,\n    LOGICAL_NOT: 4.4,\n    TYPEOF: 4.5,\n    VOID: 4.6,\n    DELETE: 4.7,\n    AWAIT: 4.8,\n    EXPONENTIATION: 5.0,\n    MULTIPLICATION: 5.1,\n    DIVISION: 5.2,\n    MODULUS: 5.3,\n    SUBTRACTION: 6.1,\n    ADDITION: 6.2,\n    BITWISE_SHIFT: 7,\n    RELATIONAL: 8,\n    IN: 8,\n    INSTANCEOF: 8,\n    EQUALITY: 9,\n    BITWISE_AND: 10,\n    BITWISE_XOR: 11,\n    BITWISE_OR: 12,\n    LOGICAL_AND: 13,\n    LOGICAL_OR: 14,\n    CONDITIONAL: 15,\n    ASSIGNMENT: 16,\n    YIELD: 17,\n    COMMA: 18,\n    NONE: 99, // (...)\n};\nconst notImplementedMsg = 'Not implemented at this Kernel';\nexport function turtle_init(block) {\n    alert(notImplementedMsg);\n    return 'console.log(' + notImplementedMsg + ');\\n';\n}\n;\n//# sourceMappingURL=func.js.map","import { IBlocklyRegistry } from 'jupyterlab-broccoli';\nimport { ITranslator, nullTranslator } from '@jupyterlab/translation';\nimport { TOOLBOX } from './blocks';\nimport * as func_python from './python/func.js';\nimport * as func_js from './javascript/func.js';\n//import * as func_lua from './lua/func.js';\n//import * as func_dart from './dart/func.js';\n//import * as func_php from './php/func.js';\n/**\n * Initialization data for the jupyterlab-broccoli-turtle extension.\n */\nconst plugin = {\n    id: 'jupyterlab-broccoli-turtle:plugin',\n    autoStart: true,\n    requires: [IBlocklyRegistry, ITranslator],\n    activate: (app, register, translator) => {\n        console.log('JupyterLab extension jupyterlab-broccoli-turtle is activated!');\n        // Localization \n        const language = register.language;\n        import(`./msg/${language}.js`)\n            .catch(() => {\n            if (language !== 'En') {\n                import(`./msg/En.js`)\n                    .catch(() => { });\n            }\n        });\n        const trans = (translator || nullTranslator).load('jupyterlab');\n        register.registerToolbox(trans.__('turtle'), TOOLBOX);\n        register.registerCodes('python', func_python);\n        register.registerCodes('javascript', func_js);\n        //register.registerCodes('lua', func_lua);\n        //register.registerCodes('dart', func_dart);\n        //register.registerCodes('php', func_php);\n    }\n};\nexport default plugin;\n//# sourceMappingURL=index.js.map","var map = {\n\t\"./En.js\": [\n\t\t695,\n\t\t695\n\t],\n\t\"./Jp.js\": [\n\t\t534,\n\t\t534\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 4815;\nmodule.exports = webpackAsyncContext;"],"names":["TOOLBOX","constructor","add","a","b","num","kind","c","contents","Array","a_len","length","b_len","i","name","colour","type","blockxml","custom","Order","ATOMIC","COLLECTION","STRING_CONVERSION","MEMBER","FUNCTION_CALL","EXPONENTIATION","UNARY_SIGN","BITWISE_NOT","MULTIPLICATIVE","ADDITIVE","BITWISE_SHIFT","BITWISE_AND","BITWISE_XOR","BITWISE_OR","RELATIONAL","LOGICAL_NOT","LOGICAL_AND","LOGICAL_OR","CONDITIONAL","LAMBDA","NONE","turtle_init","block","valueToCode","turtle_speed","turtle_line_width","turtle_line_color","turtle_line_hsv","turtle_pen_up","turtle_pen_down","turtle_forward","turtle_turn_right","turtle_turn_left","turtle_move","notImplementedMsg","alert","id","autoStart","requires","IBlocklyRegistry","ITranslator","activate","app","register","translator","console","log","language","catch","trans","nullTranslator","load","registerToolbox","__","registerCodes","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","keys","Object","module","exports"],"sourceRoot":""}