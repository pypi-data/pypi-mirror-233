{
    "code_snippets": [
        {
            "lang": "C++",
            "langSlug": "cpp",
            "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Java",
            "langSlug": "java",
            "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Python",
            "langSlug": "python",
            "code": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        ",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Python3",
            "langSlug": "python3",
            "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        ",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "C",
            "langSlug": "c",
            "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n\n}",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "C#",
            "langSlug": "csharp",
            "code": "public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "JavaScript",
            "langSlug": "javascript",
            "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "TypeScript",
            "langSlug": "typescript",
            "code": "function twoSum(nums: number[], target: number): number[] {\n\n};",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "PHP",
            "langSlug": "php",
            "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Swift",
            "langSlug": "swift",
            "code": "class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Kotlin",
            "langSlug": "kotlin",
            "code": "class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Dart",
            "langSlug": "dart",
            "code": "class Solution {\n  List<int> twoSum(List<int> nums, int target) {\n\n  }\n}",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Go",
            "langSlug": "golang",
            "code": "func twoSum(nums []int, target int) []int {\n    \n}",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Ruby",
            "langSlug": "ruby",
            "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n    \nend",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Scala",
            "langSlug": "scala",
            "code": "object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Rust",
            "langSlug": "rust",
            "code": "impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Racket",
            "langSlug": "racket",
            "code": "(define/contract (two-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Erlang",
            "langSlug": "erlang",
            "code": "-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Nums, Target) ->\n  .",
            "__typename": "CodeSnippetNode"
        },
        {
            "lang": "Elixir",
            "langSlug": "elixir",
            "code": "defmodule Solution do\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\n  def two_sum(nums, target) do\n\n  end\nend",
            "__typename": "CodeSnippetNode"
        }
    ],
    "difficulty": "Easy",
    "question_id": "1",
    "question": "Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\nYou can return the answer in any order.\n \nExample 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n\nExample 2:\n\nInput: nums = [3,2,4], target = 6\nOutput: [1,2]\n\nExample 3:\n\nInput: nums = [3,3], target = 6\nOutput: [0,1]\n\n \nConstraints:\n\n`2 <= nums.length <= 104`\n`-109 <= nums[i] <= 109`\n`-109 <= target <= 109`\nOnly one valid answer exists.\n\n \nFollow-up: Can you come up with an algorithm that is less than `O(n2)` time complexity?",
    "test_case": "[2,7,11,15]\n9",
    "title": "Two Sum"
}
