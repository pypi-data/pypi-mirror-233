# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class GHGBuildingRank(Model):
    """GHGBuildingRank.

    :param place_info:
    :type place_info: ~energycap.sdk.models.PlaceInfo
    :param place_size: The place size
    :type place_size: int
    :param place_size_unit:
    :type place_size_unit: ~energycap.sdk.models.UnitChild
    :param emissions: The overall Greenhouse Gas emissions
    :type emissions: float
    :param scope1_emissions: The Greenhouse Gas emissions from Scope 1
    :type scope1_emissions: float
    :param scope2_emissions: The Greenhouse Gas emissions from Scope 2
    :type scope2_emissions: float
    :param scope3_emissions: The Greenhouse Gas emissions from Scope 3
    :type scope3_emissions: float
    :param emissions_unit:
    :type emissions_unit: ~energycap.sdk.models.UnitChild
    :param intensity: The Greenhouse Gas intensity. Emissions/Place Size
    :type intensity: float
    :param type: The item type
    :type type: str
    :param id: The item identifier
    :type id: int
    :param display: The item display name
    :type display: str
    :param secondary_display: The item formated value
    :type secondary_display: str
    :param value: The item value
    :type value: float
    """

    _attribute_map = {
        'place_info': {'key': 'placeInfo', 'type': 'PlaceInfo'},
        'place_size': {'key': 'placeSize', 'type': 'int'},
        'place_size_unit': {'key': 'placeSizeUnit', 'type': 'UnitChild'},
        'emissions': {'key': 'emissions', 'type': 'float'},
        'scope1_emissions': {'key': 'scope1Emissions', 'type': 'float'},
        'scope2_emissions': {'key': 'scope2Emissions', 'type': 'float'},
        'scope3_emissions': {'key': 'scope3Emissions', 'type': 'float'},
        'emissions_unit': {'key': 'emissionsUnit', 'type': 'UnitChild'},
        'intensity': {'key': 'intensity', 'type': 'float'},
        'type': {'key': 'type', 'type': 'str'},
        'id': {'key': 'id', 'type': 'int'},
        'display': {'key': 'display', 'type': 'str'},
        'secondary_display': {'key': 'secondaryDisplay', 'type': 'str'},
        'value': {'key': 'value', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(GHGBuildingRank, self).__init__(**kwargs)
        self.place_info = kwargs.get('place_info', None)
        self.place_size = kwargs.get('place_size', None)
        self.place_size_unit = kwargs.get('place_size_unit', None)
        self.emissions = kwargs.get('emissions', None)
        self.scope1_emissions = kwargs.get('scope1_emissions', None)
        self.scope2_emissions = kwargs.get('scope2_emissions', None)
        self.scope3_emissions = kwargs.get('scope3_emissions', None)
        self.emissions_unit = kwargs.get('emissions_unit', None)
        self.intensity = kwargs.get('intensity', None)
        self.type = kwargs.get('type', None)
        self.id = kwargs.get('id', None)
        self.display = kwargs.get('display', None)
        self.secondary_display = kwargs.get('secondary_display', None)
        self.value = kwargs.get('value', None)
