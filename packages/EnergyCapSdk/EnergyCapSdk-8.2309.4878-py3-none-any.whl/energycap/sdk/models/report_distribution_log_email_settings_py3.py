# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ReportDistributionLogEmailSettings(Model):
    """ReportDistributionLogEmailSettings.

    :param sent_from_email: The email address the the email was sent from
    :type sent_from_email: str
    :param recipient_user_groups: The list of user groups with members that
     should receive the report
    :type recipient_user_groups:
     list[~energycap.sdk.models.UserGroupWithMembers]
    :param reply_to_email: The email address the receiver should reply to
    :type reply_to_email: str
    :param email_subject: The subject line of the email
    :type email_subject: str
    :param email_message: The body of the email
    :type email_message: str
    :param report_format: Format of the report (EnergyCAP currently supports
     PDF, Word, Excel, and CSV)
    :type report_format: str
    :param schedule_type:
    :type schedule_type:
     ~energycap.sdk.models.ReportSubscriptionScheduleTypeChild
    :param day_indicator:
    :type day_indicator:
     ~energycap.sdk.models.ReportSubscriptionDayIndicatorChild
    :param only_send_if_data: Indicates whether or not to email a report if it
     contains no data.
     When set to true, the subscribed report will not be emailed, if the report
     does not contain data.
     When set to false, if the requested report has no data, it will still be
     sent.
    :type only_send_if_data: bool
    """

    _attribute_map = {
        'sent_from_email': {'key': 'sentFromEmail', 'type': 'str'},
        'recipient_user_groups': {'key': 'recipientUserGroups', 'type': '[UserGroupWithMembers]'},
        'reply_to_email': {'key': 'replyToEmail', 'type': 'str'},
        'email_subject': {'key': 'emailSubject', 'type': 'str'},
        'email_message': {'key': 'emailMessage', 'type': 'str'},
        'report_format': {'key': 'reportFormat', 'type': 'str'},
        'schedule_type': {'key': 'scheduleType', 'type': 'ReportSubscriptionScheduleTypeChild'},
        'day_indicator': {'key': 'dayIndicator', 'type': 'ReportSubscriptionDayIndicatorChild'},
        'only_send_if_data': {'key': 'onlySendIfData', 'type': 'bool'},
    }

    def __init__(self, *, sent_from_email: str=None, recipient_user_groups=None, reply_to_email: str=None, email_subject: str=None, email_message: str=None, report_format: str=None, schedule_type=None, day_indicator=None, only_send_if_data: bool=None, **kwargs) -> None:
        super(ReportDistributionLogEmailSettings, self).__init__(**kwargs)
        self.sent_from_email = sent_from_email
        self.recipient_user_groups = recipient_user_groups
        self.reply_to_email = reply_to_email
        self.email_subject = email_subject
        self.email_message = email_message
        self.report_format = report_format
        self.schedule_type = schedule_type
        self.day_indicator = day_indicator
        self.only_send_if_data = only_send_if_data
