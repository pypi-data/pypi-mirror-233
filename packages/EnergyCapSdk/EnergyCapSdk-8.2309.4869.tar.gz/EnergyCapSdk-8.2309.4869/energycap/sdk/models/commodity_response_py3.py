# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class CommodityResponse(Model):
    """CommodityResponse.

    :param commodity_id: The commodity identifier
    :type commodity_id: int
    :param commodity_code: The commodity code
    :type commodity_code: str
    :param commodity_info: The commodity info
    :type commodity_info: str
    :param abbreviation: Three letter abbreviation code to represent the
     commodity
    :type abbreviation: str
    :param description: The commodity description
    :type description: str
    :param icon:
    :type icon: ~energycap.sdk.models.Icon
    :param commodity_category:
    :type commodity_category: ~energycap.sdk.models.CommodityCategory
    :param use_rollup_unit:
    :type use_rollup_unit: ~energycap.sdk.models.UnitChild
    :param demand_rollup_unit:
    :type demand_rollup_unit: ~energycap.sdk.models.UnitChild
    :param include_in_energy_reporting: Indicates if the commodity should be
     included in Energy reporting
    :type include_in_energy_reporting: bool
    :param energy_reporting_unit_conversion_multiplier: The multiplier to
     convert from the commodity rollup unit to the energy use reporting unit
    :type energy_reporting_unit_conversion_multiplier: float
    :param in_use: Indicates if the commodity is in use on a meter/emissions
     source
    :type in_use: bool
    :param is_system_commodity: Indicates if the commodity is a system-level
     commodity
    :type is_system_commodity: bool
    """

    _attribute_map = {
        'commodity_id': {'key': 'commodityId', 'type': 'int'},
        'commodity_code': {'key': 'commodityCode', 'type': 'str'},
        'commodity_info': {'key': 'commodityInfo', 'type': 'str'},
        'abbreviation': {'key': 'abbreviation', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'icon': {'key': 'icon', 'type': 'Icon'},
        'commodity_category': {'key': 'commodityCategory', 'type': 'CommodityCategory'},
        'use_rollup_unit': {'key': 'useRollupUnit', 'type': 'UnitChild'},
        'demand_rollup_unit': {'key': 'demandRollupUnit', 'type': 'UnitChild'},
        'include_in_energy_reporting': {'key': 'includeInEnergyReporting', 'type': 'bool'},
        'energy_reporting_unit_conversion_multiplier': {'key': 'energyReportingUnitConversionMultiplier', 'type': 'float'},
        'in_use': {'key': 'inUse', 'type': 'bool'},
        'is_system_commodity': {'key': 'isSystemCommodity', 'type': 'bool'},
    }

    def __init__(self, *, commodity_id: int=None, commodity_code: str=None, commodity_info: str=None, abbreviation: str=None, description: str=None, icon=None, commodity_category=None, use_rollup_unit=None, demand_rollup_unit=None, include_in_energy_reporting: bool=None, energy_reporting_unit_conversion_multiplier: float=None, in_use: bool=None, is_system_commodity: bool=None, **kwargs) -> None:
        super(CommodityResponse, self).__init__(**kwargs)
        self.commodity_id = commodity_id
        self.commodity_code = commodity_code
        self.commodity_info = commodity_info
        self.abbreviation = abbreviation
        self.description = description
        self.icon = icon
        self.commodity_category = commodity_category
        self.use_rollup_unit = use_rollup_unit
        self.demand_rollup_unit = demand_rollup_unit
        self.include_in_energy_reporting = include_in_energy_reporting
        self.energy_reporting_unit_conversion_multiplier = energy_reporting_unit_conversion_multiplier
        self.in_use = in_use
        self.is_system_commodity = is_system_commodity
