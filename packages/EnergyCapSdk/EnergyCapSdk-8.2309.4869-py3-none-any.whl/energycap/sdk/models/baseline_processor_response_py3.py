# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class BaselineProcessorResponse(Model):
    """BaselineProcessorResponse.

    :param include_in_cap: Indicates if the meter will be included in savings
     calculations
    :type include_in_cap: bool
    :param adjust_area: Indicates if floor area adjustments should be made
    :type adjust_area: bool
    :param adjusted_cost_type:
    :type adjusted_cost_type: ~energycap.sdk.models.AdjustedCostTypeResponse
    :param adjust_winter: Indicates if winter weather adjustments should be
     made
    :type adjust_winter: bool
    :param adjust_summer: Indicates if summer weather adjustments should be
     made
    :type adjust_summer: bool
    :param baseline_months: Number of months in the baseline
     Setting this to anything other than 12 will turn off weather adjustments
     irregardless of the settings in adjustWinter and adjustSummer
    :type baseline_months: int
    :param baseline_start_date: Baseline start date
    :type baseline_start_date: datetime
    :param savings_start_date: Savings Period start date
    :type savings_start_date: datetime
    :param use_extended_weather: Indicates if extended weather should be used.
     Extended weather uses additional months prior to the baseline start date
     to determine weather sensitivity.
    :type use_extended_weather: bool
    :param extended_weather_start_date: Start Date of the extended weather.
     This should be 1, 2 or 3 years prior to the baseline start date.
     Extended weather uses additional months prior to the baseline start date
     to determine weather sensitivity.
    :type extended_weather_start_date: datetime
    :param cooling_temp: Cooling balance point
    :type cooling_temp: int
    :param cooling_intercept: Cooling intercept
    :type cooling_intercept: float
    :param cooling_max_degree_days: Cooling max Degree Days
    :type cooling_max_degree_days: float
    :param cooling_max_use: Cooling max use
    :type cooling_max_use: float
    :param cooling_r2: Cooling R2
    :type cooling_r2: float
    :param adjusted_cooling_r2:
    :type adjusted_cooling_r2: float
    :param cooling_min_r2: Cooling minimum R2
    :type cooling_min_r2: float
    :param cooling_calculated_r2: Cooling calculated R2
    :type cooling_calculated_r2: float
    :param cooling_slope: Cooling slope
    :type cooling_slope: float
    :param cooling_std_dev: Cooling standard deviation
    :type cooling_std_dev: float
    :param cooling_cvrmse: Cooling CVRMSE
    :type cooling_cvrmse: float
    :param cooling_ndb: Cooling NDB
    :type cooling_ndb: float
    :param cooling_standard_error: Cooling standard error
    :type cooling_standard_error: float
    :param cooling_base_tstat: Cooling base T-stat
    :type cooling_base_tstat: float
    :param cooling_weather_tstat: Cooling weather T-stat
    :type cooling_weather_tstat: float
    :param cooling_fsu: Cooling FSU
    :type cooling_fsu: float
    :param heating_temp: Heating balance point
    :type heating_temp: int
    :param heating_intercept: Heating intercept
    :type heating_intercept: float
    :param heating_max_degree_days: Heating maximum Degree Days
    :type heating_max_degree_days: float
    :param heating_max_use: Heating maximum use
    :type heating_max_use: float
    :param heating_r2: Heating R2
    :type heating_r2: float
    :param adjusted_heating_r2:
    :type adjusted_heating_r2: float
    :param heating_min_r2: Heating minimum R2
    :type heating_min_r2: float
    :param heating_calculated_r2: Heating calculated R2
    :type heating_calculated_r2: float
    :param heating_slope: Heating slope
    :type heating_slope: float
    :param heating_std_dev: Heating standard deviation
    :type heating_std_dev: float
    :param heating_cvrmse: Heating CVRMSE
    :type heating_cvrmse: float
    :param heating_ndb: Heating NDB
    :type heating_ndb: float
    :param heating_standard_error: Heating standard error
    :type heating_standard_error: float
    :param heating_base_tstat: Heating base T-stat
    :type heating_base_tstat: float
    :param heating_weather_tstat: Heating weather T-stat
    :type heating_weather_tstat: float
    :param heating_fsu: Heating FSU
    :type heating_fsu: float
    :param native_use_unit:
    :type native_use_unit: ~energycap.sdk.models.UnitChild
    :param baseline_bills: Indicates whether or not each bill in the baseline
     should be included in the baseline regression
    :type baseline_bills:
     list[~energycap.sdk.models.BaselineProcessorResponseBaselineBill]
    """

    _attribute_map = {
        'include_in_cap': {'key': 'includeInCAP', 'type': 'bool'},
        'adjust_area': {'key': 'adjustArea', 'type': 'bool'},
        'adjusted_cost_type': {'key': 'adjustedCostType', 'type': 'AdjustedCostTypeResponse'},
        'adjust_winter': {'key': 'adjustWinter', 'type': 'bool'},
        'adjust_summer': {'key': 'adjustSummer', 'type': 'bool'},
        'baseline_months': {'key': 'baselineMonths', 'type': 'int'},
        'baseline_start_date': {'key': 'baselineStartDate', 'type': 'iso-8601'},
        'savings_start_date': {'key': 'savingsStartDate', 'type': 'iso-8601'},
        'use_extended_weather': {'key': 'useExtendedWeather', 'type': 'bool'},
        'extended_weather_start_date': {'key': 'extendedWeatherStartDate', 'type': 'iso-8601'},
        'cooling_temp': {'key': 'coolingTemp', 'type': 'int'},
        'cooling_intercept': {'key': 'coolingIntercept', 'type': 'float'},
        'cooling_max_degree_days': {'key': 'coolingMaxDegreeDays', 'type': 'float'},
        'cooling_max_use': {'key': 'coolingMaxUse', 'type': 'float'},
        'cooling_r2': {'key': 'coolingR2', 'type': 'float'},
        'adjusted_cooling_r2': {'key': 'adjustedCoolingR2', 'type': 'float'},
        'cooling_min_r2': {'key': 'coolingMinR2', 'type': 'float'},
        'cooling_calculated_r2': {'key': 'coolingCalculatedR2', 'type': 'float'},
        'cooling_slope': {'key': 'coolingSlope', 'type': 'float'},
        'cooling_std_dev': {'key': 'coolingStdDev', 'type': 'float'},
        'cooling_cvrmse': {'key': 'coolingCVRMSE', 'type': 'float'},
        'cooling_ndb': {'key': 'coolingNDB', 'type': 'float'},
        'cooling_standard_error': {'key': 'coolingStandardError', 'type': 'float'},
        'cooling_base_tstat': {'key': 'coolingBaseTStat', 'type': 'float'},
        'cooling_weather_tstat': {'key': 'coolingWeatherTStat', 'type': 'float'},
        'cooling_fsu': {'key': 'coolingFSU', 'type': 'float'},
        'heating_temp': {'key': 'heatingTemp', 'type': 'int'},
        'heating_intercept': {'key': 'heatingIntercept', 'type': 'float'},
        'heating_max_degree_days': {'key': 'heatingMaxDegreeDays', 'type': 'float'},
        'heating_max_use': {'key': 'heatingMaxUse', 'type': 'float'},
        'heating_r2': {'key': 'heatingR2', 'type': 'float'},
        'adjusted_heating_r2': {'key': 'adjustedHeatingR2', 'type': 'float'},
        'heating_min_r2': {'key': 'heatingMinR2', 'type': 'float'},
        'heating_calculated_r2': {'key': 'heatingCalculatedR2', 'type': 'float'},
        'heating_slope': {'key': 'heatingSlope', 'type': 'float'},
        'heating_std_dev': {'key': 'heatingStdDev', 'type': 'float'},
        'heating_cvrmse': {'key': 'heatingCVRMSE', 'type': 'float'},
        'heating_ndb': {'key': 'heatingNDB', 'type': 'float'},
        'heating_standard_error': {'key': 'heatingStandardError', 'type': 'float'},
        'heating_base_tstat': {'key': 'heatingBaseTStat', 'type': 'float'},
        'heating_weather_tstat': {'key': 'heatingWeatherTStat', 'type': 'float'},
        'heating_fsu': {'key': 'heatingFSU', 'type': 'float'},
        'native_use_unit': {'key': 'nativeUseUnit', 'type': 'UnitChild'},
        'baseline_bills': {'key': 'baselineBills', 'type': '[BaselineProcessorResponseBaselineBill]'},
    }

    def __init__(self, *, include_in_cap: bool=None, adjust_area: bool=None, adjusted_cost_type=None, adjust_winter: bool=None, adjust_summer: bool=None, baseline_months: int=None, baseline_start_date=None, savings_start_date=None, use_extended_weather: bool=None, extended_weather_start_date=None, cooling_temp: int=None, cooling_intercept: float=None, cooling_max_degree_days: float=None, cooling_max_use: float=None, cooling_r2: float=None, adjusted_cooling_r2: float=None, cooling_min_r2: float=None, cooling_calculated_r2: float=None, cooling_slope: float=None, cooling_std_dev: float=None, cooling_cvrmse: float=None, cooling_ndb: float=None, cooling_standard_error: float=None, cooling_base_tstat: float=None, cooling_weather_tstat: float=None, cooling_fsu: float=None, heating_temp: int=None, heating_intercept: float=None, heating_max_degree_days: float=None, heating_max_use: float=None, heating_r2: float=None, adjusted_heating_r2: float=None, heating_min_r2: float=None, heating_calculated_r2: float=None, heating_slope: float=None, heating_std_dev: float=None, heating_cvrmse: float=None, heating_ndb: float=None, heating_standard_error: float=None, heating_base_tstat: float=None, heating_weather_tstat: float=None, heating_fsu: float=None, native_use_unit=None, baseline_bills=None, **kwargs) -> None:
        super(BaselineProcessorResponse, self).__init__(**kwargs)
        self.include_in_cap = include_in_cap
        self.adjust_area = adjust_area
        self.adjusted_cost_type = adjusted_cost_type
        self.adjust_winter = adjust_winter
        self.adjust_summer = adjust_summer
        self.baseline_months = baseline_months
        self.baseline_start_date = baseline_start_date
        self.savings_start_date = savings_start_date
        self.use_extended_weather = use_extended_weather
        self.extended_weather_start_date = extended_weather_start_date
        self.cooling_temp = cooling_temp
        self.cooling_intercept = cooling_intercept
        self.cooling_max_degree_days = cooling_max_degree_days
        self.cooling_max_use = cooling_max_use
        self.cooling_r2 = cooling_r2
        self.adjusted_cooling_r2 = adjusted_cooling_r2
        self.cooling_min_r2 = cooling_min_r2
        self.cooling_calculated_r2 = cooling_calculated_r2
        self.cooling_slope = cooling_slope
        self.cooling_std_dev = cooling_std_dev
        self.cooling_cvrmse = cooling_cvrmse
        self.cooling_ndb = cooling_ndb
        self.cooling_standard_error = cooling_standard_error
        self.cooling_base_tstat = cooling_base_tstat
        self.cooling_weather_tstat = cooling_weather_tstat
        self.cooling_fsu = cooling_fsu
        self.heating_temp = heating_temp
        self.heating_intercept = heating_intercept
        self.heating_max_degree_days = heating_max_degree_days
        self.heating_max_use = heating_max_use
        self.heating_r2 = heating_r2
        self.adjusted_heating_r2 = adjusted_heating_r2
        self.heating_min_r2 = heating_min_r2
        self.heating_calculated_r2 = heating_calculated_r2
        self.heating_slope = heating_slope
        self.heating_std_dev = heating_std_dev
        self.heating_cvrmse = heating_cvrmse
        self.heating_ndb = heating_ndb
        self.heating_standard_error = heating_standard_error
        self.heating_base_tstat = heating_base_tstat
        self.heating_weather_tstat = heating_weather_tstat
        self.heating_fsu = heating_fsu
        self.native_use_unit = native_use_unit
        self.baseline_bills = baseline_bills
