# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class GHGYearlyEmissions(Model):
    """GHGYearlyEmissions.

    :param year: The year this data belongs to.
    :type year: str
    :param total_yearly_emissions: The total emissions for this year, in CO2
     Equivalent
    :type total_yearly_emissions: float
    :param target_performance_percentage: A percentage value that represents
     how close to the target year this year's data is. A positive value
     means the current year is over the target, a negative value means the
     current year is under the target.
     Field is null if target data is not available.
    :type target_performance_percentage: float
    :param yearly_emissions_by_gas_type: The total emissions for this year,
     grouped by gas type.
    :type yearly_emissions_by_gas_type:
     list[~energycap.sdk.models.GHGGroupEmissions]
    :param yearly_emissions_by_group: The total emissions for this year,
     grouped by Scope, Commodity, or Scope Category.
    :type yearly_emissions_by_group:
     list[~energycap.sdk.models.GHGGroupEmissions]
    """

    _attribute_map = {
        'year': {'key': 'year', 'type': 'str'},
        'total_yearly_emissions': {'key': 'totalYearlyEmissions', 'type': 'float'},
        'target_performance_percentage': {'key': 'targetPerformancePercentage', 'type': 'float'},
        'yearly_emissions_by_gas_type': {'key': 'yearlyEmissionsByGasType', 'type': '[GHGGroupEmissions]'},
        'yearly_emissions_by_group': {'key': 'yearlyEmissionsByGroup', 'type': '[GHGGroupEmissions]'},
    }

    def __init__(self, **kwargs):
        super(GHGYearlyEmissions, self).__init__(**kwargs)
        self.year = kwargs.get('year', None)
        self.total_yearly_emissions = kwargs.get('total_yearly_emissions', None)
        self.target_performance_percentage = kwargs.get('target_performance_percentage', None)
        self.yearly_emissions_by_gas_type = kwargs.get('yearly_emissions_by_gas_type', None)
        self.yearly_emissions_by_group = kwargs.get('yearly_emissions_by_group', None)
