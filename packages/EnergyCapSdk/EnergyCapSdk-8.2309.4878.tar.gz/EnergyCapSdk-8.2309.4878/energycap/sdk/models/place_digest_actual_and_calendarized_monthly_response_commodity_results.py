# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class PlaceDigestActualAndCalendarizedMonthlyResponseCommodityResults(Model):
    """PlaceDigestActualAndCalendarizedMonthlyResponseCommodityResults.

    :param period_name: Calendar Period Name
    :type period_name: str
    :param calendar_period: Calendar Period
    :type calendar_period: int
    :param calendar_year: Calendar Year
    :type calendar_year: int
    :param fiscal_period: Fiscal Period
    :type fiscal_period: int
    :param fiscal_year: Fiscal Year
    :type fiscal_year: int
    :param total_cost: Total Cost
    :type total_cost: float
    :param cumulative_total_cost: Cumulative Total Cost
    :type cumulative_total_cost: float
    :param common_use: Common Use
    :type common_use: float
    :param cumulative_common_use: Cumulative Common Use
    :type cumulative_common_use: float
    :param common_use_unit_cost: Common Use Unit Cost
    :type common_use_unit_cost: float
    :param global_use: Global Use
    :type global_use: float
    :param cumulative_global_use:
    :type cumulative_global_use: float
    :param global_use_unit_cost: Global Use Unit Cost
    :type global_use_unit_cost: float
    :param common_demand: Common Demand
    :type common_demand: float
    :param common_demand_unit_cost: Common Demand Unit Cost
    :type common_demand_unit_cost: float
    """

    _attribute_map = {
        'period_name': {'key': 'periodName', 'type': 'str'},
        'calendar_period': {'key': 'calendarPeriod', 'type': 'int'},
        'calendar_year': {'key': 'calendarYear', 'type': 'int'},
        'fiscal_period': {'key': 'fiscalPeriod', 'type': 'int'},
        'fiscal_year': {'key': 'fiscalYear', 'type': 'int'},
        'total_cost': {'key': 'totalCost', 'type': 'float'},
        'cumulative_total_cost': {'key': 'cumulativeTotalCost', 'type': 'float'},
        'common_use': {'key': 'commonUse', 'type': 'float'},
        'cumulative_common_use': {'key': 'cumulativeCommonUse', 'type': 'float'},
        'common_use_unit_cost': {'key': 'commonUseUnitCost', 'type': 'float'},
        'global_use': {'key': 'globalUse', 'type': 'float'},
        'cumulative_global_use': {'key': 'cumulativeGlobalUse', 'type': 'float'},
        'global_use_unit_cost': {'key': 'globalUseUnitCost', 'type': 'float'},
        'common_demand': {'key': 'commonDemand', 'type': 'float'},
        'common_demand_unit_cost': {'key': 'commonDemandUnitCost', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(PlaceDigestActualAndCalendarizedMonthlyResponseCommodityResults, self).__init__(**kwargs)
        self.period_name = kwargs.get('period_name', None)
        self.calendar_period = kwargs.get('calendar_period', None)
        self.calendar_year = kwargs.get('calendar_year', None)
        self.fiscal_period = kwargs.get('fiscal_period', None)
        self.fiscal_year = kwargs.get('fiscal_year', None)
        self.total_cost = kwargs.get('total_cost', None)
        self.cumulative_total_cost = kwargs.get('cumulative_total_cost', None)
        self.common_use = kwargs.get('common_use', None)
        self.cumulative_common_use = kwargs.get('cumulative_common_use', None)
        self.common_use_unit_cost = kwargs.get('common_use_unit_cost', None)
        self.global_use = kwargs.get('global_use', None)
        self.cumulative_global_use = kwargs.get('cumulative_global_use', None)
        self.global_use_unit_cost = kwargs.get('global_use_unit_cost', None)
        self.common_demand = kwargs.get('common_demand', None)
        self.common_demand_unit_cost = kwargs.get('common_demand_unit_cost', None)
