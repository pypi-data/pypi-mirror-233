# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class BodylineChild(Model):
    """BodylineChild.

    :param body_line_id: The bodyline identifier
    :type body_line_id: int
    :param account_id: The account identifier
    :type account_id: int
    :param meter_id: The meter identifier
    :type meter_id: int
    :param display_order: The display order
    :type display_order: int
    :param caption: The caption
    :type caption: str
    :param value: The bodyline's value
    :type value: float
    :param value_is_info_only:
    :type value_is_info_only: bool
    :param cost: The cost attributed to the bodyline
    :type cost: float
    :param cost_is_info_only: Is the cost value counted towards the overall
     total cost or info only
    :type cost_is_info_only: bool
    :param value_unit:
    :type value_unit: ~energycap.sdk.models.UnitChild
    :param cost_unit:
    :type cost_unit: ~energycap.sdk.models.UnitChild
    :param observation_type:
    :type observation_type: ~energycap.sdk.models.ObservationTypeChild
    :param general_ledger:
    :type general_ledger: ~energycap.sdk.models.GeneralLedgerChild
    """

    _attribute_map = {
        'body_line_id': {'key': 'bodyLineId', 'type': 'int'},
        'account_id': {'key': 'accountId', 'type': 'int'},
        'meter_id': {'key': 'meterId', 'type': 'int'},
        'display_order': {'key': 'displayOrder', 'type': 'int'},
        'caption': {'key': 'caption', 'type': 'str'},
        'value': {'key': 'value', 'type': 'float'},
        'value_is_info_only': {'key': 'valueIsInfoOnly', 'type': 'bool'},
        'cost': {'key': 'cost', 'type': 'float'},
        'cost_is_info_only': {'key': 'costIsInfoOnly', 'type': 'bool'},
        'value_unit': {'key': 'valueUnit', 'type': 'UnitChild'},
        'cost_unit': {'key': 'costUnit', 'type': 'UnitChild'},
        'observation_type': {'key': 'observationType', 'type': 'ObservationTypeChild'},
        'general_ledger': {'key': 'generalLedger', 'type': 'GeneralLedgerChild'},
    }

    def __init__(self, **kwargs):
        super(BodylineChild, self).__init__(**kwargs)
        self.body_line_id = kwargs.get('body_line_id', None)
        self.account_id = kwargs.get('account_id', None)
        self.meter_id = kwargs.get('meter_id', None)
        self.display_order = kwargs.get('display_order', None)
        self.caption = kwargs.get('caption', None)
        self.value = kwargs.get('value', None)
        self.value_is_info_only = kwargs.get('value_is_info_only', None)
        self.cost = kwargs.get('cost', None)
        self.cost_is_info_only = kwargs.get('cost_is_info_only', None)
        self.value_unit = kwargs.get('value_unit', None)
        self.cost_unit = kwargs.get('cost_unit', None)
        self.observation_type = kwargs.get('observation_type', None)
        self.general_ledger = kwargs.get('general_ledger', None)
