# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class MeterDigestNormalizedMonthlyResponseResults(Model):
    """MeterDigestNormalizedMonthlyResponseResults.

    :param period_name: Calendar Period Name
    :type period_name: str
    :param calendar_period: Calendar Period
    :type calendar_period: int
    :param calendar_year: Calendar Year
    :type calendar_year: int
    :param fiscal_period: Fiscal Period
    :type fiscal_period: int
    :param fiscal_year: Fiscal Year
    :type fiscal_year: int
    :param days: The number of days in the period
    :type days: int
    :param cumulative_native_use: Cumulative Native Use
    :type cumulative_native_use: float
    :param native_use: Native Use
    :type native_use: float
    :param common_use: Common Use
    :type common_use: float
    :param native_actual_demand: Native Actual Demand
    :type native_actual_demand: float
    :param native_billed_demand: Native Billed Demand
    :type native_billed_demand: float
    :param load_factor: Load Factor
    :type load_factor: float
    """

    _attribute_map = {
        'period_name': {'key': 'periodName', 'type': 'str'},
        'calendar_period': {'key': 'calendarPeriod', 'type': 'int'},
        'calendar_year': {'key': 'calendarYear', 'type': 'int'},
        'fiscal_period': {'key': 'fiscalPeriod', 'type': 'int'},
        'fiscal_year': {'key': 'fiscalYear', 'type': 'int'},
        'days': {'key': 'days', 'type': 'int'},
        'cumulative_native_use': {'key': 'cumulativeNativeUse', 'type': 'float'},
        'native_use': {'key': 'nativeUse', 'type': 'float'},
        'common_use': {'key': 'commonUse', 'type': 'float'},
        'native_actual_demand': {'key': 'nativeActualDemand', 'type': 'float'},
        'native_billed_demand': {'key': 'nativeBilledDemand', 'type': 'float'},
        'load_factor': {'key': 'loadFactor', 'type': 'float'},
    }

    def __init__(self, **kwargs):
        super(MeterDigestNormalizedMonthlyResponseResults, self).__init__(**kwargs)
        self.period_name = kwargs.get('period_name', None)
        self.calendar_period = kwargs.get('calendar_period', None)
        self.calendar_year = kwargs.get('calendar_year', None)
        self.fiscal_period = kwargs.get('fiscal_period', None)
        self.fiscal_year = kwargs.get('fiscal_year', None)
        self.days = kwargs.get('days', None)
        self.cumulative_native_use = kwargs.get('cumulative_native_use', None)
        self.native_use = kwargs.get('native_use', None)
        self.common_use = kwargs.get('common_use', None)
        self.native_actual_demand = kwargs.get('native_actual_demand', None)
        self.native_billed_demand = kwargs.get('native_billed_demand', None)
        self.load_factor = kwargs.get('load_factor', None)
