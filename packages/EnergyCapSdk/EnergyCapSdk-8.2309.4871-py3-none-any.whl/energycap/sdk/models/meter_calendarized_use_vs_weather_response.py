# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class MeterCalendarizedUseVsWeatherResponse(Model):
    """MeterCalendarizedUseVsWeatherResponse.

    :param year: The year
    :type year: int
    :param is_heating_weather_sensitive: Is heating weather sensitive?
    :type is_heating_weather_sensitive: bool
    :param winter_balance_point: Heating needed below this temperature
    :type winter_balance_point: int
    :param heating_base_use_per_day: The total base heating use per day
    :type heating_base_use_per_day: float
    :param heating_weather_factor: The heating weather factor
    :type heating_weather_factor: float
    :param is_cooling_weather_sensitive: Is cooling weather sensitive?
    :type is_cooling_weather_sensitive: bool
    :param summer_balance_point: Cooling needed above this temperature
    :type summer_balance_point: int
    :param cooling_base_use_per_day: The total base cooling use per day
    :type cooling_base_use_per_day: float
    :param cooling_weather_factor: The cooling weather factor
    :type cooling_weather_factor: float
    :param use_unit:
    :type use_unit: ~energycap.sdk.models.UnitChild
    """

    _attribute_map = {
        'year': {'key': 'year', 'type': 'int'},
        'is_heating_weather_sensitive': {'key': 'isHeatingWeatherSensitive', 'type': 'bool'},
        'winter_balance_point': {'key': 'winterBalancePoint', 'type': 'int'},
        'heating_base_use_per_day': {'key': 'heatingBaseUsePerDay', 'type': 'float'},
        'heating_weather_factor': {'key': 'heatingWeatherFactor', 'type': 'float'},
        'is_cooling_weather_sensitive': {'key': 'isCoolingWeatherSensitive', 'type': 'bool'},
        'summer_balance_point': {'key': 'summerBalancePoint', 'type': 'int'},
        'cooling_base_use_per_day': {'key': 'coolingBaseUsePerDay', 'type': 'float'},
        'cooling_weather_factor': {'key': 'coolingWeatherFactor', 'type': 'float'},
        'use_unit': {'key': 'useUnit', 'type': 'UnitChild'},
    }

    def __init__(self, **kwargs):
        super(MeterCalendarizedUseVsWeatherResponse, self).__init__(**kwargs)
        self.year = kwargs.get('year', None)
        self.is_heating_weather_sensitive = kwargs.get('is_heating_weather_sensitive', None)
        self.winter_balance_point = kwargs.get('winter_balance_point', None)
        self.heating_base_use_per_day = kwargs.get('heating_base_use_per_day', None)
        self.heating_weather_factor = kwargs.get('heating_weather_factor', None)
        self.is_cooling_weather_sensitive = kwargs.get('is_cooling_weather_sensitive', None)
        self.summer_balance_point = kwargs.get('summer_balance_point', None)
        self.cooling_base_use_per_day = kwargs.get('cooling_base_use_per_day', None)
        self.cooling_weather_factor = kwargs.get('cooling_weather_factor', None)
        self.use_unit = kwargs.get('use_unit', None)
