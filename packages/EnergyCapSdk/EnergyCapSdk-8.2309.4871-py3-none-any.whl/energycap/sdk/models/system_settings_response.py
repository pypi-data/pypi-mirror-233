# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class SystemSettingsResponse(Model):
    """SystemSettingsResponse.

    :param organization_name: The organization name
    :type organization_name: str
    :param display_organization_name_in_header: Indicates whether or not
     organization name should be displayed in the application header
    :type display_organization_name_in_header: bool
    :param organization_logo: The organization logo
     May be a base64-encoded PNG, JPG, or SVG image or a URI for an image
     hosted online
     A null value will clear the saved image
    :type organization_logo: str
    :param automatic_logout_minutes: Number of minutes after which users will
     be automatically logged out
    :type automatic_logout_minutes: int
    :param default_country: Default country for new users
    :type default_country: str
    :param default_meter_time_zone:
    :type default_meter_time_zone: ~energycap.sdk.models.TimeZoneResponse
    :param default_date_format: Default date format for new users
    :type default_date_format: str
    :param default_topmost_place:
    :type default_topmost_place: ~energycap.sdk.models.PlaceChild
    :param default_cost_center:
    :type default_cost_center: ~energycap.sdk.models.CostCenterChild
    :param default_collection:
    :type default_collection: ~energycap.sdk.models.CollectionChild
    :param default_user_role:
    :type default_user_role: ~energycap.sdk.models.SystemUserRoleChild
    :param months_to_exclude_from_charts: Number of months to exclude from
     powerview charts
    :type months_to_exclude_from_charts: int
    """

    _attribute_map = {
        'organization_name': {'key': 'organizationName', 'type': 'str'},
        'display_organization_name_in_header': {'key': 'displayOrganizationNameInHeader', 'type': 'bool'},
        'organization_logo': {'key': 'organizationLogo', 'type': 'str'},
        'automatic_logout_minutes': {'key': 'automaticLogoutMinutes', 'type': 'int'},
        'default_country': {'key': 'defaultCountry', 'type': 'str'},
        'default_meter_time_zone': {'key': 'defaultMeterTimeZone', 'type': 'TimeZoneResponse'},
        'default_date_format': {'key': 'defaultDateFormat', 'type': 'str'},
        'default_topmost_place': {'key': 'defaultTopmostPlace', 'type': 'PlaceChild'},
        'default_cost_center': {'key': 'defaultCostCenter', 'type': 'CostCenterChild'},
        'default_collection': {'key': 'defaultCollection', 'type': 'CollectionChild'},
        'default_user_role': {'key': 'defaultUserRole', 'type': 'SystemUserRoleChild'},
        'months_to_exclude_from_charts': {'key': 'monthsToExcludeFromCharts', 'type': 'int'},
    }

    def __init__(self, **kwargs):
        super(SystemSettingsResponse, self).__init__(**kwargs)
        self.organization_name = kwargs.get('organization_name', None)
        self.display_organization_name_in_header = kwargs.get('display_organization_name_in_header', None)
        self.organization_logo = kwargs.get('organization_logo', None)
        self.automatic_logout_minutes = kwargs.get('automatic_logout_minutes', None)
        self.default_country = kwargs.get('default_country', None)
        self.default_meter_time_zone = kwargs.get('default_meter_time_zone', None)
        self.default_date_format = kwargs.get('default_date_format', None)
        self.default_topmost_place = kwargs.get('default_topmost_place', None)
        self.default_cost_center = kwargs.get('default_cost_center', None)
        self.default_collection = kwargs.get('default_collection', None)
        self.default_user_role = kwargs.get('default_user_role', None)
        self.months_to_exclude_from_charts = kwargs.get('months_to_exclude_from_charts', None)
