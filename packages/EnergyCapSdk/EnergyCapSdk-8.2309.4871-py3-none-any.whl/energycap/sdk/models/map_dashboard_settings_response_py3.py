# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class MapDashboardSettingsResponse(Model):
    """MapDashboardSettingsResponse.

    :param title: The title of the dashboard. Maximum length of 255
     characters.
    :type title: str
    :param description: The description of the dashboard. Maximum length of
     255 characters.
    :type description: str
    :param show_cost: Flag to indicate if Cost data is shown on the dashboard.
    :type show_cost: bool
    :param show_use: Flag to indicate if Use data is shown on the dashboard.
    :type show_use: bool
    :param show_ghg: Flag to indicate if Greenhouse Gas data is shown on the
     dashboard.
    :type show_ghg: bool
    :param map_dashboard_filters: Filters applied to the dashboard.
    :type map_dashboard_filters: list[~energycap.sdk.models.FilterResponse]
    :param global_commodity_display: Display order for commodities. Applied
     individually to Cost, Use, and GHG Emissions.
     Highest - Order displayed commodities in order of Highest Cost/Use/GHG
     Emissions
     Lowest - Order displayed commodities in order Lowest Cost/Use/GHG
     Emissions
     Fixed - Display up to 5 fixed commodities for each data type.
    :type global_commodity_display: str
    :param fixed_commodities: List of Commodities to display for Cost, Use,
     and GHG, if applicable. Empty if GlobalCommodityDisplay is set to
     "Highest" or "Lowest".
    :type fixed_commodities: list[~energycap.sdk.models.CommodityChild]
    """

    _attribute_map = {
        'title': {'key': 'title', 'type': 'str'},
        'description': {'key': 'description', 'type': 'str'},
        'show_cost': {'key': 'showCost', 'type': 'bool'},
        'show_use': {'key': 'showUse', 'type': 'bool'},
        'show_ghg': {'key': 'showGHG', 'type': 'bool'},
        'map_dashboard_filters': {'key': 'mapDashboardFilters', 'type': '[FilterResponse]'},
        'global_commodity_display': {'key': 'globalCommodityDisplay', 'type': 'str'},
        'fixed_commodities': {'key': 'fixedCommodities', 'type': '[CommodityChild]'},
    }

    def __init__(self, *, title: str=None, description: str=None, show_cost: bool=None, show_use: bool=None, show_ghg: bool=None, map_dashboard_filters=None, global_commodity_display: str=None, fixed_commodities=None, **kwargs) -> None:
        super(MapDashboardSettingsResponse, self).__init__(**kwargs)
        self.title = title
        self.description = description
        self.show_cost = show_cost
        self.show_use = show_use
        self.show_ghg = show_ghg
        self.map_dashboard_filters = map_dashboard_filters
        self.global_commodity_display = global_commodity_display
        self.fixed_commodities = fixed_commodities
