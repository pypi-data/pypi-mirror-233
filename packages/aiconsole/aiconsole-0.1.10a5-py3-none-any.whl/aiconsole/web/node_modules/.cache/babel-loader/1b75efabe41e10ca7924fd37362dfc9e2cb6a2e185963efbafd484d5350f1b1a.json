{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDebouncedValue } from '@mantine/hooks';\nimport { create } from 'zustand';\nexport const usePromptStore = create((set, get) => ({\n  strategy: undefined,\n  mode: 'QUALITY',\n  manuals: [{\n    id: 'Linkedin',\n    usage: 'Usage',\n    content: 'Content'\n  }],\n  messages: [],\n  setMessages: newMessages => set(state => ({\n    messages: newMessages\n  })),\n  removeMessage: index => set(state => ({\n    messages: state.messages.filter((_, i) => i !== index)\n  })),\n  messagesWithPrompt: () => {\n    return [...get().messages, {\n      role: 'user',\n      content: get().getPrompt()\n    }];\n  },\n  doAnalysis: async () => {\n    let response = await fetch(`http://${window.location.hostname}:8000/analyse`, {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messagesWithPrompt(),\n        mode: get().mode\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    let data = await response.json();\n    set(state => ({\n      strategy: data.strategy,\n      manuals: data.manuals,\n      usedTokens: data.usedTokens,\n      availableTokens: data.availableTokens\n    }));\n  },\n  doGPT: async () => {\n    var _response$body;\n    let response = await fetch(`http://${window.location.hostname}:8000/gpt`, {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messages,\n        mode: get().mode\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const reader = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.getReader();\n    const decoder = new TextDecoder('utf-8');\n    let newMessages = [...get().messages, {\n      role: 'assistant',\n      content: ''\n    }];\n    while (true) {\n      const {\n        value,\n        done\n      } = (await (reader === null || reader === void 0 ? void 0 : reader.read())) || {\n        value: undefined,\n        done: true\n      };\n      let text = decoder.decode(value);\n      if (text.includes('§§§§§CLEAR§§§§§')) {\n        newMessages[newMessages.length - 1].content = '';\n        //delete everything up to $$$CLEAR$$$ in text\n        text = text.substring(text.indexOf('§§§§§CLEAR§§§§§') + 15);\n      }\n      newMessages[newMessages.length - 1].content += text;\n      get().setMessages(newMessages.slice());\n      //console.log(newMessages);\n\n      if (done) {\n        break;\n      }\n    }\n  },\n  getPrompt: () => {\n    return get().promptHistory[get().promptIndex];\n  },\n  analysisTimeoutId: undefined,\n  requestAnalysis: () => {\n    if (get().analysisTimeoutId) {\n      clearTimeout(get().analysisTimeoutId);\n    }\n    const timeoutId = setTimeout(() => {\n      get().doAnalysis();\n    }, 500);\n    set(state => ({\n      analysisTimeoutId: timeoutId\n    }));\n  },\n  usedTokens: 32,\n  availableTokens: 8000,\n  promptHistory: [''],\n  promptIndex: 0,\n  historyUp: () => set(state => ({\n    promptIndex: Math.min(state.promptHistory.length - 1, state.promptIndex + 1)\n  })),\n  historyDown: () => set(state => ({\n    promptIndex: Math.max(0, state.promptIndex - 1)\n  })),\n  editPrompt: prompt => {\n    set(state => ({\n      promptHistory: [...state.promptHistory.slice(0, state.promptIndex), prompt, ...state.promptHistory.slice(state.promptIndex + 1, state.promptHistory.length)]\n    }));\n    get().requestAnalysis();\n  },\n  newPrompt: () => set(state => ({\n    promptHistory: ['', ...state.promptHistory],\n    promptIndex: 0\n  }))\n}));\nexport function useDebouncedPrompt() {\n  _s();\n  const prompt = usePromptStore(state => state.promptHistory[state.promptIndex]).trim();\n  const [debouncedPrompt] = useDebouncedValue(prompt, 150, {\n    leading: true\n  });\n  return debouncedPrompt;\n}\n_s(useDebouncedPrompt, \"X4qn8ZpkGMRvkHk5aWvkWtvJexM=\", false, function () {\n  return [usePromptStore, useDebouncedValue];\n});","map":{"version":3,"names":["useDebouncedValue","create","usePromptStore","set","get","strategy","undefined","mode","manuals","id","usage","content","messages","setMessages","newMessages","state","removeMessage","index","filter","_","i","messagesWithPrompt","role","getPrompt","doAnalysis","response","fetch","window","location","hostname","method","body","JSON","stringify","headers","data","json","usedTokens","availableTokens","doGPT","_response$body","reader","getReader","decoder","TextDecoder","value","done","read","text","decode","includes","length","substring","indexOf","slice","promptHistory","promptIndex","analysisTimeoutId","requestAnalysis","clearTimeout","timeoutId","setTimeout","historyUp","Math","min","historyDown","max","editPrompt","prompt","newPrompt","useDebouncedPrompt","_s","trim","debouncedPrompt","leading"],"sources":["/Users/maciel/Projects/aiconsole/web/src/workspace/prompt_store.ts"],"sourcesContent":["import { useDebouncedValue } from '@mantine/hooks';\nimport { create } from 'zustand';\n\nexport type GPTMessage = {\n  role: string;\n  content: string;\n};\n\nexport type Manual = {\n  id: string;\n  usage: string;\n  content: string;\n};\n\nexport type Strategy = {\n  id: string;\n  usage: string;\n  content: string;\n};\n\n\nexport type GPTMode = 'QUALITY' | 'FAST';\n\ntype PromptStore = {\n  strategy?: Strategy;\n  mode: GPTMode;\n  manuals: Manual[];\n  messages: GPTMessage[];\n  setMessages: (newMessages: GPTMessage[]) => void;\n  removeMessage: (index: number) => void;\n\n  usedTokens: number;\n  availableTokens: number;\n\n  promptHistory: string[];\n  promptIndex: number;\n\n  historyUp: () => void;\n  historyDown: () => void;\n  newPrompt: () => void;\n  editPrompt: (prompt: string) => void;\n  getPrompt: () => string;\n\n  requestAnalysis: () => void;\n  doAnalysis: () => void;\n  analysisTimeoutId: NodeJS.Timeout | undefined;\n\n  doGPT: () => void;\n\n  messagesWithPrompt: () => GPTMessage[];\n};\n\nexport const usePromptStore = create<PromptStore>((set, get) => ({\n  strategy: undefined,\n  mode: 'QUALITY',\n  manuals: [\n    {\n      id: 'Linkedin',\n      usage: 'Usage',\n      content: 'Content',\n    },\n  ],\n  messages: [],\n  setMessages: (newMessages: GPTMessage[]) =>\n    set((state) => ({\n      messages: newMessages,\n    })),\n  removeMessage: (index: number) =>\n    set((state) => ({\n      messages: state.messages.filter((_, i) => i !== index),\n    })),\n\n  messagesWithPrompt: () => {\n    return [...get().messages, { role: 'user', content: get().getPrompt() }];\n  },\n\n  doAnalysis: async () => {\n    let response = await fetch(`http://${window.location.hostname}:8000/analyse`, {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messagesWithPrompt(),\n        mode: get().mode,\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    let data = await response.json();\n\n    set((state) => ({\n      strategy: data.strategy,\n      manuals: data.manuals,\n      usedTokens: data.usedTokens,\n      availableTokens: data.availableTokens,\n    }));\n  },\n\n  doGPT: async () => {\n    let response = await fetch(`http://${window.location.hostname}:8000/gpt`, {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messages,\n        mode: get().mode\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const reader = response.body?.getReader();\n    const decoder = new TextDecoder('utf-8');\n\n    let newMessages = [...get().messages, { role: 'assistant', content: '' }];\n\n    while (true) {\n      const { value, done } = (await reader?.read()) || { value: undefined, done: true };\n\n      let text = decoder.decode(value);\n      if (text.includes('§§§§§CLEAR§§§§§')) {\n        newMessages[newMessages.length - 1].content = '';\n        //delete everything up to $$$CLEAR$$$ in text\n        text = text.substring(text.indexOf('§§§§§CLEAR§§§§§') + 15);\n      }\n\n      newMessages[newMessages.length - 1].content += text;\n      get().setMessages(newMessages.slice());\n      //console.log(newMessages);\n\n      if (done) {\n        break;\n      }\n    }\n  },\n\n  getPrompt: () => {\n    return get().promptHistory[get().promptIndex];\n  },\n\n  analysisTimeoutId: undefined,\n  requestAnalysis: () => {\n    if (get().analysisTimeoutId) {\n      clearTimeout(get().analysisTimeoutId);\n    }\n\n    const timeoutId = setTimeout(() => {\n      get().doAnalysis();\n    }, 500);\n\n    set((state) => ({\n      analysisTimeoutId: timeoutId,\n    }));\n  },\n\n  usedTokens: 32,\n  availableTokens: 8000,\n  promptHistory: [''],\n  promptIndex: 0,\n  historyUp: () =>\n    set((state) => ({\n      promptIndex: Math.min(state.promptHistory.length - 1, state.promptIndex + 1),\n    })),\n  historyDown: () => set((state) => ({ promptIndex: Math.max(0, state.promptIndex - 1) })),\n  editPrompt: (prompt) => {\n    set((state) => ({\n      promptHistory: [\n        ...state.promptHistory.slice(0, state.promptIndex),\n        prompt,\n        ...state.promptHistory.slice(state.promptIndex + 1, state.promptHistory.length),\n      ],\n    }));\n    get().requestAnalysis();\n  },\n  newPrompt: () =>\n    set((state) => ({\n      promptHistory: ['', ...state.promptHistory],\n      promptIndex: 0,\n    })),\n}));\n\nexport function useDebouncedPrompt() {\n  const prompt = usePromptStore((state) => state.promptHistory[state.promptIndex]).trim();\n  const [debouncedPrompt] = useDebouncedValue(prompt, 150, { leading: true });\n\n  return debouncedPrompt;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}