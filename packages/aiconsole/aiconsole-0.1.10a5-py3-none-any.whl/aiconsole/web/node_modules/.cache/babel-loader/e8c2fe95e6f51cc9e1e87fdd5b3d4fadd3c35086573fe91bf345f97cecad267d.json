{"ast":null,"code":"var _jsxFileName = \"/Users/maciel/Projects/ai-console/web/src/app.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useState, useRef, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport CodeBlock from \"./code_block\";\nimport { CommandInput } from \"./components/command_input\";\n//import \"highlight.js/styles/dracula.css\"; // use dracula.css as highlight.js theme\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  }, [messages]);\n  const handleSubmit = useCallback(async prompt => {\n    let newMessages = [...messages, {\n      role: \"user\",\n      content: prompt\n    }];\n    setMessages(newMessages);\n    let postRequest = async messages => {\n      console.log(messages);\n      return await fetch(`http://${window.location.hostname}:8000/gpt4`, {\n        method: \"POST\",\n        body: JSON.stringify({\n          messages: messages,\n          model_type: \"gpt-4\"\n        }),\n        headers: {\n          \"Content-Type\": \"application/json\"\n        }\n      });\n    };\n    let handleResponse = async (messages, response) => {\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let newMessages = [...messages, {\n        role: \"assistant\",\n        content: \"\"\n      }];\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        const text = decoder.decode(value);\n        newMessages[newMessages.length - 1].content += text;\n        setMessages(newMessages.slice());\n        console.log(newMessages);\n        if (done) {\n          break;\n        }\n      }\n    };\n    let response = await postRequest(newMessages);\n    await handleResponse(newMessages, response);\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App flex flex-col fixed top-0 left-0 bottom-0 right-0 p-5 justify-between\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow overflow-y-auto flex flex-col\",\n      ref: messagesEndRef,\n      children: messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"max-w-900px w-full px-5 py-3 rounded-lg bg-black-alpha-70 backdrop-blur-sm border-black-alpha-40 shadow-lg \",\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            components: {\n              code: ({\n                node,\n                ...props\n              }) => /*#__PURE__*/_jsxDEV(CodeBlock, {\n                language: props.lang,\n                val: node.children.map(e => e.value).join(\" \")\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 23\n              }, this)\n            },\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: /*#__PURE__*/_jsxDEV(CommandInput, {\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"w5ed+o9TT3pZkEF+XKO6BV2EXnM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useState","useRef","useEffect","ReactMarkdown","CodeBlock","CommandInput","jsxDEV","_jsxDEV","App","_s","messages","setMessages","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSubmit","prompt","newMessages","role","content","postRequest","console","log","fetch","window","location","hostname","method","body","JSON","stringify","model_type","headers","handleResponse","response","reader","getReader","decoder","TextDecoder","value","done","read","text","decode","length","slice","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","components","code","node","props","language","lang","val","e","join","onSubmit","_c","$RefreshReg$"],"sources":["/Users/maciel/Projects/ai-console/web/src/app.tsx"],"sourcesContent":["import { useCallback, useState, useRef, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport CodeBlock from \"./code_block\";\nimport { CommandInput } from \"./components/command_input\";\n//import \"highlight.js/styles/dracula.css\"; // use dracula.css as highlight.js theme\n\ntype Message = {\n  role: string;\n  content: string;\n};\n\nfunction App() {\n  const [messages, setMessages] = useState<Message[]>([]);\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\nuseEffect(() => {\n  messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\n}, [messages]); \nconst handleSubmit = useCallback(\n    async (prompt: string) => {\n      let newMessages = [...messages, { role: \"user\", content: prompt }];\n      setMessages(newMessages);\n\n      let postRequest = async (messages: Message[]) => {\n        console.log(messages);\n        return await fetch(`http://${window.location.hostname}:8000/gpt4`, {\n          method: \"POST\",\n          body: JSON.stringify({\n            messages: messages,\n            model_type: \"gpt-4\",\n          }),\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n        });\n      };\n\n      let handleResponse = async (messages: Message[], response: any) => {\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder(\"utf-8\");\n\n        let newMessages = [...messages, { role: \"assistant\", content: \"\" }];\n\n        while (true) {\n          const { value, done } = await reader.read();\n\n          const text = decoder.decode(value);\n          newMessages[newMessages.length - 1].content += text;\n          setMessages(newMessages.slice());\n          console.log(newMessages);\n\n          if (done) {\n            break;\n          }\n        }\n      };\n\n      let response = await postRequest(newMessages);\n\n      await handleResponse(newMessages, response);\n    },\n    [messages]\n  );\n\n  return (\n    <div className=\"App flex flex-col fixed top-0 left-0 bottom-0 right-0 p-5 justify-between\">\n      <div className=\"flex-grow overflow-y-auto flex flex-col\" ref={messagesEndRef}>\n        \n          {messages.length === 0 ? (\n            <div>No messages</div>\n          ) : (\n            <div>\n              {messages.map((message, index) => (\n                <div key={index} className=\"max-w-900px w-full px-5 py-3 rounded-lg bg-black-alpha-70 backdrop-blur-sm border-black-alpha-40 shadow-lg \">\n                <ReactMarkdown\n                  components={{\n                    code: ({ node, ...props }) => (\n                      <CodeBlock\n                        language={props.lang}\n                        val={node.children\n                          .map((e) => (e as any).value)\n                          .join(\" \")}\n                      />\n                    ),\n                  }}\n                >\n                  {message.content}\n                </ReactMarkdown>\n                </div>\n              ))}\n            </div>\n          )}\n      </div>\n      <div className=\"\">\n        <CommandInput onSubmit={handleSubmit} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}