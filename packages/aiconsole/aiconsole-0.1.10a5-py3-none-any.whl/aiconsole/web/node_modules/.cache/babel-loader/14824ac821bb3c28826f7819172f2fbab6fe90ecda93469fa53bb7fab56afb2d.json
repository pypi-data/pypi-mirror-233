{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useDebouncedValue } from '@mantine/hooks';\nimport { create } from 'zustand';\nexport const usePromptStore = create((set, get) => ({\n  strategy: 'Strat1',\n  mode: \"QUALITY\",\n  manuals: [{\n    name: \"Linkedin\",\n    usage: \"Usage\",\n    content: \"Content\"\n  }],\n  messages: [],\n  setMessages: newMessages => set(state => ({\n    messages: newMessages\n  })),\n  removeMessage: index => set(state => ({\n    messages: state.messages.filter((_, i) => i !== index)\n  })),\n  requestAnalysis: () => {\n    fetch('/analyse', {\n      body: JSON.stringify({\n        messages: get().messages,\n        mode: get().mode\n      })\n    }).then(response => response.json()).then(data => {\n      set(state => ({\n        strategy: data.strategy,\n        manuals: data.manuals,\n        usedTokens: data.usedTokens,\n        availableTokens: data.availableTokens\n      }));\n    });\n  },\n  usedTokens: 32,\n  availableTokens: 8000,\n  promptHistory: [''],\n  promptIndex: 0,\n  historyUp: () => set(state => ({\n    promptIndex: Math.min(state.promptHistory.length - 1, state.promptIndex + 1)\n  })),\n  historyDown: () => set(state => ({\n    promptIndex: Math.max(0, state.promptIndex - 1)\n  })),\n  editPrompt: prompt => set(state => ({\n    promptHistory: [...state.promptHistory.slice(0, state.promptIndex), prompt, ...state.promptHistory.slice(state.promptIndex + 1, state.promptHistory.length)]\n  })),\n  newPrompt: () => set(state => ({\n    promptHistory: ['', ...state.promptHistory],\n    promptIndex: 0\n  }))\n}));\nexport function usePrompt() {\n  _s();\n  return usePromptStore(state => state.promptHistory[state.promptIndex]);\n}\n_s(usePrompt, \"Qk/FDLVJNL1huXi0C7D+I67GGE4=\", false, function () {\n  return [usePromptStore];\n});\nexport function useDebouncedPrompt() {\n  _s2();\n  const prompt = usePromptStore(state => state.promptHistory[state.promptIndex]).trim();\n  const [debouncedPrompt] = useDebouncedValue(prompt, 150, {\n    leading: true\n  });\n  return debouncedPrompt;\n}\n_s2(useDebouncedPrompt, \"X4qn8ZpkGMRvkHk5aWvkWtvJexM=\", false, function () {\n  return [usePromptStore, useDebouncedValue];\n});","map":{"version":3,"names":["useDebouncedValue","create","usePromptStore","set","get","strategy","mode","manuals","name","usage","content","messages","setMessages","newMessages","state","removeMessage","index","filter","_","i","requestAnalysis","fetch","body","JSON","stringify","then","response","json","data","usedTokens","availableTokens","promptHistory","promptIndex","historyUp","Math","min","length","historyDown","max","editPrompt","prompt","slice","newPrompt","usePrompt","_s","useDebouncedPrompt","_s2","trim","debouncedPrompt","leading"],"sources":["/Users/maciel/Projects/aiconsole/web/src/workspace/prompt_store.ts"],"sourcesContent":["import { useDebouncedValue } from '@mantine/hooks';\nimport { create } from 'zustand';\n\nexport type GPTMessage = {\n  role: string;\n  content: string;\n};\n\nexport type Manual = {\n  name: string;\n  usage: string;\n  content: string;\n}\n\nexport type GPTMode = \"QUALITY\" | \"FAST\"\n\ntype PromptStore = {\n  strategy: string;\n  mode: GPTMode;\n  manuals: Manual[];\n  messages: GPTMessage[];\n  setMessages: (newMessages: GPTMessage[]) => void;\n  removeMessage: (index: number) => void;\n\n  usedTokens: number,\n  availableTokens: number,\n\n  promptHistory: string[];\n  promptIndex: number;\n\n  historyUp: () => void;\n  historyDown: () => void;\n  newPrompt: () => void;\n  editPrompt: (prompt: string) => void;\n};\n\nexport const usePromptStore = create<PromptStore>((set, get) => ({\n  strategy: 'Strat1',\n  mode: \"QUALITY\",\n  manuals: [\n    {\n      name: \"Linkedin\",\n      usage: \"Usage\",\n      content: \"Content\",\n    }\n  ],\n  messages: [],\n  setMessages: (newMessages: GPTMessage[]) =>\n    set((state) => ({\n      messages: newMessages\n    })),\n  removeMessage: (index: number) => \n    set((state) => ({\n      messages: state.messages.filter((_, i) => i !== index)\n    })),\n\n\n  requestAnalysis: () => {\n    fetch('/analyse', {\n      body: JSON.stringify({\n        messages: get().messages,\n        mode: get().mode,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        set((state) => ({\n          strategy: data.strategy,\n          manuals: data.manuals,\n          usedTokens: data.usedTokens,\n          availableTokens: data.availableTokens,\n        }));\n      });\n  },\n\n  usedTokens: 32,\n  availableTokens: 8000,\n  promptHistory: [''],\n  promptIndex: 0,\n  historyUp: () => set((state) => ({ promptIndex: Math.min(state.promptHistory.length - 1, state.promptIndex + 1) })),\n  historyDown: () => set((state) => ({ promptIndex: Math.max(0, state.promptIndex - 1) })),\n  editPrompt: (prompt) =>\n    set((state) => ({\n      promptHistory: [...state.promptHistory.slice(0, state.promptIndex),  prompt, ...state.promptHistory.slice(state.promptIndex + 1, state.promptHistory.length)],\n    })),\n  newPrompt: () =>\n    set((state) => ({\n      promptHistory: ['', ...state.promptHistory],\n      promptIndex: 0,\n    })),\n}));\n\nexport function usePrompt() {\n  return usePromptStore((state) => state.promptHistory[state.promptIndex]);\n}\n\nexport function useDebouncedPrompt() {\n  const prompt = usePromptStore((state) => state.promptHistory[state.promptIndex]).trim();\n  const [debouncedPrompt] = useDebouncedValue(prompt, 150, { leading: true });\n\n  return debouncedPrompt;\n}\n"],"mappings":";;AAAA,SAASA,iBAAiB,QAAQ,gBAAgB;AAClD,SAASC,MAAM,QAAQ,SAAS;AAmChC,OAAO,MAAMC,cAAc,GAAGD,MAAM,CAAc,CAACE,GAAG,EAAEC,GAAG,MAAM;EAC/DC,QAAQ,EAAE,QAAQ;EAClBC,IAAI,EAAE,SAAS;EACfC,OAAO,EAAE,CACP;IACEC,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE,OAAO;IACdC,OAAO,EAAE;EACX,CAAC,CACF;EACDC,QAAQ,EAAE,EAAE;EACZC,WAAW,EAAGC,WAAyB,IACrCV,GAAG,CAAEW,KAAK,KAAM;IACdH,QAAQ,EAAEE;EACZ,CAAC,CAAC,CAAC;EACLE,aAAa,EAAGC,KAAa,IAC3Bb,GAAG,CAAEW,KAAK,KAAM;IACdH,QAAQ,EAAEG,KAAK,CAACH,QAAQ,CAACM,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,KAAKH,KAAK;EACvD,CAAC,CAAC,CAAC;EAGLI,eAAe,EAAEA,CAAA,KAAM;IACrBC,KAAK,CAAC,UAAU,EAAE;MAChBC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBb,QAAQ,EAAEP,GAAG,CAAC,CAAC,CAACO,QAAQ;QACxBL,IAAI,EAAEF,GAAG,CAAC,CAAC,CAACE;MACd,CAAC;IACH,CAAC,CAAC,CACCmB,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACdzB,GAAG,CAAEW,KAAK,KAAM;QACdT,QAAQ,EAAEuB,IAAI,CAACvB,QAAQ;QACvBE,OAAO,EAAEqB,IAAI,CAACrB,OAAO;QACrBsB,UAAU,EAAED,IAAI,CAACC,UAAU;QAC3BC,eAAe,EAAEF,IAAI,CAACE;MACxB,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;EACN,CAAC;EAEDD,UAAU,EAAE,EAAE;EACdC,eAAe,EAAE,IAAI;EACrBC,aAAa,EAAE,CAAC,EAAE,CAAC;EACnBC,WAAW,EAAE,CAAC;EACdC,SAAS,EAAEA,CAAA,KAAM9B,GAAG,CAAEW,KAAK,KAAM;IAAEkB,WAAW,EAAEE,IAAI,CAACC,GAAG,CAACrB,KAAK,CAACiB,aAAa,CAACK,MAAM,GAAG,CAAC,EAAEtB,KAAK,CAACkB,WAAW,GAAG,CAAC;EAAE,CAAC,CAAC,CAAC;EACnHK,WAAW,EAAEA,CAAA,KAAMlC,GAAG,CAAEW,KAAK,KAAM;IAAEkB,WAAW,EAAEE,IAAI,CAACI,GAAG,CAAC,CAAC,EAAExB,KAAK,CAACkB,WAAW,GAAG,CAAC;EAAE,CAAC,CAAC,CAAC;EACxFO,UAAU,EAAGC,MAAM,IACjBrC,GAAG,CAAEW,KAAK,KAAM;IACdiB,aAAa,EAAE,CAAC,GAAGjB,KAAK,CAACiB,aAAa,CAACU,KAAK,CAAC,CAAC,EAAE3B,KAAK,CAACkB,WAAW,CAAC,EAAGQ,MAAM,EAAE,GAAG1B,KAAK,CAACiB,aAAa,CAACU,KAAK,CAAC3B,KAAK,CAACkB,WAAW,GAAG,CAAC,EAAElB,KAAK,CAACiB,aAAa,CAACK,MAAM,CAAC;EAC9J,CAAC,CAAC,CAAC;EACLM,SAAS,EAAEA,CAAA,KACTvC,GAAG,CAAEW,KAAK,KAAM;IACdiB,aAAa,EAAE,CAAC,EAAE,EAAE,GAAGjB,KAAK,CAACiB,aAAa,CAAC;IAC3CC,WAAW,EAAE;EACf,CAAC,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,OAAO,SAASW,SAASA,CAAA,EAAG;EAAAC,EAAA;EAC1B,OAAO1C,cAAc,CAAEY,KAAK,IAAKA,KAAK,CAACiB,aAAa,CAACjB,KAAK,CAACkB,WAAW,CAAC,CAAC;AAC1E;AAACY,EAAA,CAFeD,SAAS;EAAA,QAChBzC,cAAc;AAAA;AAGvB,OAAO,SAAS2C,kBAAkBA,CAAA,EAAG;EAAAC,GAAA;EACnC,MAAMN,MAAM,GAAGtC,cAAc,CAAEY,KAAK,IAAKA,KAAK,CAACiB,aAAa,CAACjB,KAAK,CAACkB,WAAW,CAAC,CAAC,CAACe,IAAI,CAAC,CAAC;EACvF,MAAM,CAACC,eAAe,CAAC,GAAGhD,iBAAiB,CAACwC,MAAM,EAAE,GAAG,EAAE;IAAES,OAAO,EAAE;EAAK,CAAC,CAAC;EAE3E,OAAOD,eAAe;AACxB;AAACF,GAAA,CALeD,kBAAkB;EAAA,QACjB3C,cAAc,EACHF,iBAAiB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}