{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDebouncedValue } from '@mantine/hooks';\nimport { create } from 'zustand';\nexport const usePromptStore = create((set, get) => ({\n  strategy: undefined,\n  mode: 'QUALITY',\n  manuals: [],\n  messages: [],\n  setMessages: newMessages => set(state => ({\n    messages: newMessages\n  })),\n  removeMessage: index => set(state => ({\n    messages: state.messages.filter((_, i) => i !== index)\n  })),\n  messagesWithPrompt: () => {\n    return [...get().messages, {\n      role: 'user',\n      content: get().getPrompt()\n    }];\n  },\n  fetchAbortController: undefined,\n  // Initialize fetchAbortController as undefined\n\n  doGPT: async () => {\n    var _response$body;\n    let response = await fetch(`http://${window.location.hostname}:8000/gpt`, {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messages,\n        relevant_manuals: get().manuals,\n        mode: get().mode\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const reader = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.getReader();\n    const decoder = new TextDecoder('utf-8');\n    let newMessages = [...get().messages, {\n      role: 'assistant',\n      content: ''\n    }];\n    while (true) {\n      const {\n        value,\n        done\n      } = (await (reader === null || reader === void 0 ? void 0 : reader.read())) || {\n        value: undefined,\n        done: true\n      };\n      let text = decoder.decode(value);\n      if (text.includes('§§§§§CLEAR§§§§§')) {\n        newMessages[newMessages.length - 1].content = '';\n        //delete everything up to $$$CLEAR$$$ in text\n        text = text.substring(text.indexOf('§§§§§CLEAR§§§§§') + 15);\n      }\n      newMessages[newMessages.length - 1].content += text;\n      get().setMessages(newMessages.slice());\n      //console.log(newMessages);\n\n      if (done) {\n        break;\n      }\n    }\n  },\n  getPrompt: () => {\n    return get().promptHistory[get().promptIndex];\n  },\n  analysisTimeoutId: undefined,\n  requestAnalysis: () => {\n    // Create new AbortController instance for every new analysis request\n    const abortController = new AbortController();\n    set(state => ({\n      fetchAbortController: abortController\n    }));\n    if (get().analysisTimeoutId) {\n      clearTimeout(get().analysisTimeoutId);\n    }\n    const timeoutId = setTimeout(() => {\n      get().doAnalysis();\n    }, 1000);\n    set(state => ({\n      analysisTimeoutId: timeoutId\n    }));\n  },\n  doAnalysis: async () => {\n    var _get$fetchAbortContro;\n    if ((_get$fetchAbortContro = get().fetchAbortController) !== null && _get$fetchAbortContro !== void 0 && _get$fetchAbortContro.signal.aborted) {\n      // If existing fetch operation has been aborted, stop proceeding\n      return;\n    }\n    let response;\n    try {\n      var _get$fetchAbortContro2;\n      response = await fetch(`http://${window.location.hostname}:8000/analyse`, {\n        method: 'POST',\n        body: JSON.stringify({\n          messages: get().messagesWithPrompt(),\n          mode: get().mode\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        signal: (_get$fetchAbortContro2 = get().fetchAbortController) === null || _get$fetchAbortContro2 === void 0 ? void 0 : _get$fetchAbortContro2.signal // Passing abort signal to fetch operation\n      });\n    } catch (err) {\n      if (err.name === 'AbortError') {\n        console.log('Fetch operation aborted');\n        return;\n      } else {\n        throw err;\n      }\n    }\n    let data = await response.json();\n    set(state => ({\n      strategy: data.strategy,\n      manuals: data.manuals,\n      usedTokens: data.usedTokens,\n      availableTokens: data.availableTokens\n    }));\n  },\n  usedTokens: 0,\n  availableTokens: 0,\n  promptHistory: [''],\n  promptIndex: 0,\n  historyUp: () => set(state => ({\n    promptIndex: Math.min(state.promptHistory.length - 1, state.promptIndex + 1)\n  })),\n  historyDown: () => set(state => ({\n    promptIndex: Math.max(0, state.promptIndex - 1)\n  })),\n  editPrompt: prompt => {\n    set(state => ({\n      promptHistory: [...state.promptHistory.slice(0, state.promptIndex), prompt, ...state.promptHistory.slice(state.promptIndex + 1, state.promptHistory.length)]\n    }));\n    get().requestAnalysis();\n  },\n  newPrompt: () => set(state => ({\n    promptHistory: ['', ...state.promptHistory],\n    promptIndex: 0\n  }))\n}));\nexport function useDebouncedPrompt() {\n  _s();\n  const prompt = usePromptStore(state => state.promptHistory[state.promptIndex]).trim();\n  const [debouncedPrompt] = useDebouncedValue(prompt, 150, {\n    leading: true\n  });\n  return debouncedPrompt;\n}\n_s(useDebouncedPrompt, \"X4qn8ZpkGMRvkHk5aWvkWtvJexM=\", false, function () {\n  return [usePromptStore, useDebouncedValue];\n});","map":{"version":3,"names":["useDebouncedValue","create","usePromptStore","set","get","strategy","undefined","mode","manuals","messages","setMessages","newMessages","state","removeMessage","index","filter","_","i","messagesWithPrompt","role","content","getPrompt","fetchAbortController","doGPT","_response$body","response","fetch","window","location","hostname","method","body","JSON","stringify","relevant_manuals","headers","reader","getReader","decoder","TextDecoder","value","done","read","text","decode","includes","length","substring","indexOf","slice","promptHistory","promptIndex","analysisTimeoutId","requestAnalysis","abortController","AbortController","clearTimeout","timeoutId","setTimeout","doAnalysis","_get$fetchAbortContro","signal","aborted","_get$fetchAbortContro2","err","name","console","log","data","json","usedTokens","availableTokens","historyUp","Math","min","historyDown","max","editPrompt","prompt","newPrompt","useDebouncedPrompt","_s","trim","debouncedPrompt","leading"],"sources":["/Users/maciel/Projects/aiconsole/web/src/workspace/prompt_store.ts"],"sourcesContent":["import { useDebouncedValue } from '@mantine/hooks';\nimport { create } from 'zustand';\n\nexport type GPTMessage = {\n  role: string;\n  content: string;\n};\n\nexport type Manual = {\n  id: string;\n  usage: string;\n  content: string;\n};\n\nexport type Strategy = {\n  id: string;\n  usage: string;\n  content: string;\n};\n\n\nexport type GPTMode = 'QUALITY' | 'FAST';\n\ntype PromptStore = {\n  strategy?: Strategy;\n  mode: GPTMode;\n  manuals: Manual[];\n  messages: GPTMessage[];\n  setMessages: (newMessages: GPTMessage[]) => void;\n  removeMessage: (index: number) => void;\n\n  usedTokens: number;\n  availableTokens: number;\n\n  promptHistory: string[];\n  promptIndex: number;\n\n  historyUp: () => void;\n  historyDown: () => void;\n  newPrompt: () => void;\n  editPrompt: (prompt: string) => void;\n  getPrompt: () => string;\n\n  requestAnalysis: () => void;\n  doAnalysis: () => void;\n  analysisTimeoutId: NodeJS.Timeout | undefined;\n\n  doGPT: () => void;\n\n  messagesWithPrompt: () => GPTMessage[];\n\n  fetchAbortController: AbortController | undefined; // New property to handle fetch operation cancellation\n\n};\n\nexport const usePromptStore = create<PromptStore>((set, get) => ({\n  strategy: undefined,\n  mode: 'QUALITY',\n  manuals: [],\n  messages: [],\n  setMessages: (newMessages: GPTMessage[]) =>\n    set((state) => ({\n      messages: newMessages,\n    })),\n  removeMessage: (index: number) =>\n    set((state) => ({\n      messages: state.messages.filter((_, i) => i !== index),\n    })),\n\n  messagesWithPrompt: () => {\n    return [...get().messages, { role: 'user', content: get().getPrompt() }];\n  },\n\n  fetchAbortController: undefined, // Initialize fetchAbortController as undefined\n\n  \n\n  \n  \n\n  doGPT: async () => {\n    let response = await fetch(`http://${window.location.hostname}:8000/gpt`, {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messages,\n        relevant_manuals: get().manuals,\n\n        mode: get().mode\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const reader = response.body?.getReader();\n    const decoder = new TextDecoder('utf-8');\n\n    let newMessages = [...get().messages, { role: 'assistant', content: '' }];\n\n    while (true) {\n      const { value, done } = (await reader?.read()) || { value: undefined, done: true };\n\n      let text = decoder.decode(value);\n      if (text.includes('§§§§§CLEAR§§§§§')) {\n        newMessages[newMessages.length - 1].content = '';\n        //delete everything up to $$$CLEAR$$$ in text\n        text = text.substring(text.indexOf('§§§§§CLEAR§§§§§') + 15);\n      }\n\n      newMessages[newMessages.length - 1].content += text;\n      get().setMessages(newMessages.slice());\n      //console.log(newMessages);\n\n      if (done) {\n        break;\n      }\n    }\n  },\n\n  getPrompt: () => {\n    return get().promptHistory[get().promptIndex];\n  },\n\n  analysisTimeoutId: undefined,\n  \n  requestAnalysis: () => {\n    // Create new AbortController instance for every new analysis request\n    const abortController = new AbortController();\n    \n    set((state) => ({\n      fetchAbortController: abortController \n    }));\n    \n    if (get().analysisTimeoutId) {\n      clearTimeout(get().analysisTimeoutId);\n    }\n\n    const timeoutId = setTimeout(() => {\n      get().doAnalysis();\n    }, 1000);\n\n    set((state) => ({\n      analysisTimeoutId: timeoutId,\n    }));\n  },\n\n  doAnalysis: async () => {\n    if (get().fetchAbortController?.signal.aborted) { // If existing fetch operation has been aborted, stop proceeding\n      return;\n    }\n\n    let response;\n    try {\n      response = await fetch(`http://${window.location.hostname}:8000/analyse`, {\n        method: 'POST',\n        body: JSON.stringify({\n          messages: get().messagesWithPrompt(),\n          mode: get().mode,\n        }),\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        signal: get().fetchAbortController?.signal // Passing abort signal to fetch operation\n      });\n    } catch (err) {\n      if ((err as any).name === 'AbortError') {  \n        console.log('Fetch operation aborted'); \n        return;\n      } else {\n        throw err;\n      }\n    }\n\n\n    let data = await response.json();\n\n    set((state) => ({\n      strategy: data.strategy,\n      manuals: data.manuals,\n      usedTokens: data.usedTokens,\n      availableTokens: data.availableTokens,\n    }));\n  },\n\n  usedTokens: 0,\n  availableTokens: 0,\n  promptHistory: [''],\n  promptIndex: 0,\n  historyUp: () =>\n    set((state) => ({\n      promptIndex: Math.min(state.promptHistory.length - 1, state.promptIndex + 1),\n    })),\n  historyDown: () => set((state) => ({ promptIndex: Math.max(0, state.promptIndex - 1) })),\n  editPrompt: (prompt) => {\n    set((state) => ({\n      promptHistory: [\n        ...state.promptHistory.slice(0, state.promptIndex),\n        prompt,\n        ...state.promptHistory.slice(state.promptIndex + 1, state.promptHistory.length),\n      ],\n    }));\n    get().requestAnalysis();\n  },\n  newPrompt: () =>\n    set((state) => ({\n      promptHistory: ['', ...state.promptHistory],\n      promptIndex: 0,\n    })),\n}));\n\nexport function useDebouncedPrompt() {\n  const prompt = usePromptStore((state) => state.promptHistory[state.promptIndex]).trim();\n  const [debouncedPrompt] = useDebouncedValue(prompt, 150, { leading: true });\n\n  return debouncedPrompt;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}