{"ast":null,"code":"var _jsxFileName = \"/Users/maciel/Projects/ai-console/web/src/app.tsx\",\n  _s = $RefreshSig$();\nimport { useCallback, useState, useRef, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport CodeBlock from './code_block';\nimport { CommandInput } from './components/command_input';\n//import \"highlight.js/styles/dracula.css\"; // use dracula.css as highlight.js theme\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [lastScroll, setLastScroll] = useState(0);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      let newValue = Math.max(messagesEndRef.current.scrollHeight - messagesEndRef.current.clientHeight, 0);\n      if (newValue !== lastScroll) {\n        setLastScroll(newValue);\n        console.log(lastScroll, newValue);\n        messagesEndRef.current.scrollTop = newValue;\n      }\n    }\n  }, [messages, lastScroll]);\n  const handleSubmit = useCallback(async prompt => {\n    let newMessages = [...messages, {\n      role: 'user',\n      content: prompt\n    }];\n    setMessages(newMessages);\n    let postRequest = async messages => {\n      console.log(messages);\n      return await fetch(`http://${window.location.hostname}:8000/gpt`, {\n        method: 'POST',\n        body: JSON.stringify({\n          messages: messages,\n          model: 'gpt-4'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    };\n    let handleResponse = async (messages, response) => {\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder('utf-8');\n      let newMessages = [...messages, {\n        role: 'assistant',\n        content: ''\n      }];\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        let text = decoder.decode(value);\n        console.log(text);\n        if (text.includes(\"§§§§§CLEAR§§§§§\")) {\n          newMessages[newMessages.length - 1].content = \"\";\n          text = text.replace(\"§§§§§CLEAR§§§§§\", \"\");\n        }\n        newMessages[newMessages.length - 1].content += text;\n        setMessages(newMessages.slice());\n        //console.log(newMessages);\n\n        if (done) {\n          break;\n        }\n      }\n    };\n    let response = await postRequest(newMessages);\n    await handleResponse(newMessages, response);\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App flex flex-col fixed top-0 left-0 bottom-0 right-0 p-5 justify-between\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow overflow-y-auto flex flex-col\",\n      style: {\n        scrollBehavior: 'smooth'\n      },\n      ref: messagesEndRef,\n      children: messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"max-w-900px w-full px-5 py-3 rounded-lg bg-slate-700  shadow-lg mb-5 \",\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            components: {\n              code: ({\n                node,\n                ...props\n              }) => /*#__PURE__*/_jsxDEV(CodeBlock, {\n                language: props.lang,\n                val: node.children.map(e => e.value).join(' ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 23\n              }, this)\n            },\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: /*#__PURE__*/_jsxDEV(CommandInput, {\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aHDQ2izqsmZ+fbAiyWN7dQ32Kio=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useCallback","useState","useRef","useEffect","ReactMarkdown","CodeBlock","CommandInput","jsxDEV","_jsxDEV","App","_s","messages","setMessages","lastScroll","setLastScroll","messagesEndRef","current","newValue","Math","max","scrollHeight","clientHeight","console","log","scrollTop","handleSubmit","prompt","newMessages","role","content","postRequest","fetch","window","location","hostname","method","body","JSON","stringify","model","headers","handleResponse","response","reader","getReader","decoder","TextDecoder","value","done","read","text","decode","includes","length","replace","slice","className","children","style","scrollBehavior","ref","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","components","code","node","props","language","lang","val","e","join","onSubmit","_c","$RefreshReg$"],"sources":["/Users/maciel/Projects/ai-console/web/src/app.tsx"],"sourcesContent":["import { useCallback, useState, useRef, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport CodeBlock from './code_block';\nimport { CommandInput } from './components/command_input';\n//import \"highlight.js/styles/dracula.css\"; // use dracula.css as highlight.js theme\n\ntype Message = {\n  role: string;\n  content: string;\n};\n\nfunction App() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [lastScroll, setLastScroll] = useState<number>(0);\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      let newValue = Math.max(\n        messagesEndRef.current.scrollHeight - messagesEndRef.current.clientHeight,\n        0,\n      );\n      if (newValue !== lastScroll) {\n        setLastScroll(newValue);\n        console.log(lastScroll, newValue);\n        messagesEndRef.current.scrollTop = newValue;\n      }\n    }\n  }, [messages, lastScroll]);\n\n  const handleSubmit = useCallback(\n    async (prompt: string) => {\n      let newMessages = [...messages, { role: 'user', content: prompt }];\n      setMessages(newMessages);\n\n      let postRequest = async (messages: Message[]) => {\n        console.log(messages);\n        return await fetch(`http://${window.location.hostname}:8000/gpt`, {\n          method: 'POST',\n          body: JSON.stringify({\n            messages: messages,\n            model: 'gpt-4',\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n      };\n\n      let handleResponse = async (messages: Message[], response: any) => {\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder('utf-8');\n\n        let newMessages = [...messages, { role: 'assistant', content: '' }];\n\n        while (true) {\n          const { value, done } = await reader.read();\n          let text = decoder.decode(value);\n          console.log(text)\n          if (text.includes(\"§§§§§CLEAR§§§§§\")) {\n            newMessages[newMessages.length - 1].content = \"\";\n            text = text.replace(\"§§§§§CLEAR§§§§§\", \"\");\n          } \n          \n          newMessages[newMessages.length - 1].content += text; \n          setMessages(newMessages.slice());\n          //console.log(newMessages);\n\n          if (done) {\n            break;\n          }\n\n          \n        }\n      };\n\n      let response = await postRequest(newMessages);\n\n      await handleResponse(newMessages, response);\n    },\n    [messages],\n  );\n\n  return (\n    <div className=\"App flex flex-col fixed top-0 left-0 bottom-0 right-0 p-5 justify-between\">\n      <div\n        className=\"flex-grow overflow-y-auto flex flex-col\"\n        style={{ scrollBehavior: 'smooth' }}\n        ref={messagesEndRef}\n      >\n        {messages.length === 0 ? (\n          <div>No messages</div>\n        ) : (\n          <div>\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className=\"max-w-900px w-full px-5 py-3 rounded-lg bg-slate-700  shadow-lg mb-5 \"\n              >\n                <ReactMarkdown\n                  components={{\n                    code: ({ node, ...props }) => (\n                      <CodeBlock\n                        language={props.lang}\n                        val={node.children.map((e) => (e as any).value).join(' ')}\n                      />\n                    ),\n                  }}\n                >\n                  {message.content}\n                </ReactMarkdown>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      <div className=\"\">\n        <CommandInput onSubmit={handleSubmit} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}