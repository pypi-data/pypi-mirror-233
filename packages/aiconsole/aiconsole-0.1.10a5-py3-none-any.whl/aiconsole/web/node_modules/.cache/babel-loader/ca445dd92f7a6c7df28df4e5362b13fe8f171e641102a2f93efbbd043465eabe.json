{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDebouncedValue } from '@mantine/hooks';\nimport { create } from 'zustand';\nexport const usePromptStore = create((set, get) => ({\n  strategy: 'Strat1',\n  mode: \"QUALITY\",\n  manuals: [{\n    name: \"Linkedin\",\n    usage: \"Usage\",\n    content: \"Content\"\n  }],\n  messages: [],\n  setMessages: newMessages => set(state => ({\n    messages: newMessages\n  })),\n  removeMessage: index => set(state => ({\n    messages: state.messages.filter((_, i) => i !== index)\n  })),\n  messagesWithPrompt: () => {\n    return [...get().messages, {\n      role: 'user',\n      content: get().getPrompt()\n    }];\n  },\n  doAnalysis: () => {\n    fetch('/analyse', {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messagesWithPrompt(),\n        mode: get().mode\n      })\n    }).then(response => response.json()).then(data => {\n      set(state => ({\n        strategy: data.strategy,\n        manuals: data.manuals,\n        usedTokens: data.usedTokens,\n        availableTokens: data.availableTokens\n      }));\n    });\n  },\n  doGPT: async () => {\n    var _response$body;\n    let response = await fetch(`http://${window.location.hostname}:8000/gpt`, {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messages,\n        model: 'gpt-4'\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const reader = (_response$body = response.body) === null || _response$body === void 0 ? void 0 : _response$body.getReader();\n    const decoder = new TextDecoder('utf-8');\n    let newMessages = [...get().messages, {\n      role: 'assistant',\n      content: ''\n    }];\n    while (true) {\n      const {\n        value,\n        done\n      } = (await (reader === null || reader === void 0 ? void 0 : reader.read())) || {\n        value: undefined,\n        done: true\n      };\n      let text = decoder.decode(value);\n      if (text.includes('§§§§§CLEAR§§§§§')) {\n        newMessages[newMessages.length - 1].content = '';\n        //delete everything up to $$$CLEAR$$$ in text\n        text = text.substring(text.indexOf('§§§§§CLEAR§§§§§') + 15);\n      }\n      newMessages[newMessages.length - 1].content += text;\n      get().setMessages(newMessages.slice());\n      //console.log(newMessages);\n\n      if (done) {\n        break;\n      }\n    }\n  },\n  getPrompt: () => {\n    return get().promptHistory[get().promptIndex];\n  },\n  analysisTimeoutId: undefined,\n  requestAnalysis: () => {\n    if (get().analysisTimeoutId) {\n      clearTimeout(get().analysisTimeoutId);\n    }\n    const timeoutId = setTimeout(() => {\n      get().doAnalysis();\n    }, 500);\n    set(state => ({\n      analysisTimeoutId: timeoutId\n    }));\n  },\n  usedTokens: 32,\n  availableTokens: 8000,\n  promptHistory: [''],\n  promptIndex: 0,\n  historyUp: () => set(state => ({\n    promptIndex: Math.min(state.promptHistory.length - 1, state.promptIndex + 1)\n  })),\n  historyDown: () => set(state => ({\n    promptIndex: Math.max(0, state.promptIndex - 1)\n  })),\n  editPrompt: prompt => {\n    set(state => ({\n      promptHistory: [...state.promptHistory.slice(0, state.promptIndex), prompt, ...state.promptHistory.slice(state.promptIndex + 1, state.promptHistory.length)]\n    }));\n    get().requestAnalysis();\n  },\n  newPrompt: () => set(state => ({\n    promptHistory: ['', ...state.promptHistory],\n    promptIndex: 0\n  }))\n}));\nexport function useDebouncedPrompt() {\n  _s();\n  const prompt = usePromptStore(state => state.promptHistory[state.promptIndex]).trim();\n  const [debouncedPrompt] = useDebouncedValue(prompt, 150, {\n    leading: true\n  });\n  return debouncedPrompt;\n}\n_s(useDebouncedPrompt, \"X4qn8ZpkGMRvkHk5aWvkWtvJexM=\", false, function () {\n  return [usePromptStore, useDebouncedValue];\n});","map":{"version":3,"names":["useDebouncedValue","create","usePromptStore","set","get","strategy","mode","manuals","name","usage","content","messages","setMessages","newMessages","state","removeMessage","index","filter","_","i","messagesWithPrompt","role","getPrompt","doAnalysis","fetch","method","body","JSON","stringify","then","response","json","data","usedTokens","availableTokens","doGPT","_response$body","window","location","hostname","model","headers","reader","getReader","decoder","TextDecoder","value","done","read","undefined","text","decode","includes","length","substring","indexOf","slice","promptHistory","promptIndex","analysisTimeoutId","requestAnalysis","clearTimeout","timeoutId","setTimeout","historyUp","Math","min","historyDown","max","editPrompt","prompt","newPrompt","useDebouncedPrompt","_s","trim","debouncedPrompt","leading"],"sources":["/Users/maciel/Projects/aiconsole/web/src/workspace/prompt_store.ts"],"sourcesContent":["import { useDebouncedValue } from '@mantine/hooks';\nimport { create } from 'zustand';\n\nexport type GPTMessage = {\n  role: string;\n  content: string;\n};\n\nexport type Manual = {\n  name: string;\n  usage: string;\n  content: string;\n}\n\nexport type GPTMode = \"QUALITY\" | \"FAST\"\n\ntype PromptStore = {\n  strategy: string;\n  mode: GPTMode;\n  manuals: Manual[];\n  messages: GPTMessage[];\n  setMessages: (newMessages: GPTMessage[]) => void;\n  removeMessage: (index: number) => void;\n\n  usedTokens: number,\n  availableTokens: number,\n\n  promptHistory: string[];\n  promptIndex: number;\n\n  historyUp: () => void;\n  historyDown: () => void;\n  newPrompt: () => void;\n  editPrompt: (prompt: string) => void;\n  getPrompt: () => string;\n\n  requestAnalysis: () => void;\n  doAnalysis: () => void;\n  analysisTimeoutId: NodeJS.Timeout | undefined;\n\n  doGPT: () => void;\n\n  messagesWithPrompt: () => GPTMessage[];\n};\n\nexport const usePromptStore = create<PromptStore>((set, get) => ({\n  strategy: 'Strat1',\n  mode: \"QUALITY\",\n  manuals: [\n    {\n      name: \"Linkedin\",\n      usage: \"Usage\",\n      content: \"Content\",\n    }\n  ],\n  messages: [],\n  setMessages: (newMessages: GPTMessage[]) =>\n    set((state) => ({\n      messages: newMessages\n    })),\n  removeMessage: (index: number) => \n    set((state) => ({\n      messages: state.messages.filter((_, i) => i !== index)\n    })),\n\n  messagesWithPrompt: () => {\n    return [...get().messages, { role: 'user', content: get().getPrompt() }]\n  },\n\n  doAnalysis: () => {\n    fetch('/analyse', {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messagesWithPrompt(),\n        mode: get().mode,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        set((state) => ({\n          strategy: data.strategy,\n          manuals: data.manuals,\n          usedTokens: data.usedTokens,\n          availableTokens: data.availableTokens,\n        }));\n      });\n  },\n\n  doGPT: async () => {\n    let response = await fetch(`http://${window.location.hostname}:8000/gpt`, {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messages,\n        model: 'gpt-4',\n      }),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    const reader = response.body?.getReader();\n    const decoder = new TextDecoder('utf-8');\n\n    let newMessages = [...get().messages, { role: 'assistant', content: '' }];\n\n    while (true) {\n      const { value, done } = await reader?.read() || { value: undefined, done: true };\n\n      let text = decoder.decode(value);\n      if (text.includes('§§§§§CLEAR§§§§§')) {\n        newMessages[newMessages.length - 1].content = '';\n        //delete everything up to $$$CLEAR$$$ in text\n        text = text.substring(text.indexOf('§§§§§CLEAR§§§§§') + 15);\n      }\n\n      newMessages[newMessages.length - 1].content += text;\n      get().setMessages(newMessages.slice());\n      //console.log(newMessages);\n\n      if (done) {\n        break;\n      }\n    }\n  },\n\n  getPrompt: () => {\n    return get().promptHistory[get().promptIndex]\n  },\n\n  analysisTimeoutId: undefined,\n  requestAnalysis: () => {\n    if (get().analysisTimeoutId) {\n      clearTimeout(get().analysisTimeoutId);\n    }\n\n    const timeoutId = setTimeout(() => {\n      get().doAnalysis();\n    }, 500);\n\n    set((state) => ({\n      analysisTimeoutId: timeoutId,\n    }));\n  },\n\n  usedTokens: 32,\n  availableTokens: 8000,\n  promptHistory: [''],\n  promptIndex: 0,\n  historyUp: () => set((state) => ({ promptIndex: Math.min(state.promptHistory.length - 1, state.promptIndex + 1) })),\n  historyDown: () => set((state) => ({ promptIndex: Math.max(0, state.promptIndex - 1) })),\n  editPrompt: (prompt) => {\n    set((state) => ({\n      promptHistory: [...state.promptHistory.slice(0, state.promptIndex),  prompt, ...state.promptHistory.slice(state.promptIndex + 1, state.promptHistory.length)],\n    }));\n    get().requestAnalysis();\n  }\n    ,\n  newPrompt: () =>\n    set((state) => ({\n      promptHistory: ['', ...state.promptHistory],\n      promptIndex: 0,\n    })),\n}));\n\nexport function useDebouncedPrompt() {\n  const prompt = usePromptStore((state) => state.promptHistory[state.promptIndex]).trim();\n  const [debouncedPrompt] = useDebouncedValue(prompt, 150, { leading: true });\n\n  return debouncedPrompt;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}