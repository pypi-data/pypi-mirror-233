{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useDebouncedValue } from '@mantine/hooks';\nimport { create } from 'zustand';\nexport const usePromptStore = create((set, get) => ({\n  strategy: 'Strat1',\n  mode: \"QUALITY\",\n  manuals: [{\n    name: \"Linkedin\",\n    usage: \"Usage\",\n    content: \"Content\"\n  }],\n  messages: [],\n  setMessages: newMessages => set(state => ({\n    messages: newMessages\n  })),\n  removeMessage: index => set(state => ({\n    messages: state.messages.filter((_, i) => i !== index)\n  })),\n  doAnalysis: () => {\n    fetch('/analyse', {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messages,\n        mode: get().mode\n      })\n    }).then(response => response.json()).then(data => {\n      set(state => ({\n        strategy: data.strategy,\n        manuals: data.manuals,\n        usedTokens: data.usedTokens,\n        availableTokens: data.availableTokens\n      }));\n    });\n  },\n  getPrompt: () => {\n    return get().promptHistory[get().promptIndex];\n  },\n  analysisTimeoutId: undefined,\n  requestAnalysis: () => {\n    if (get().analysisTimeoutId) {\n      clearTimeout(get().analysisTimeoutId);\n    }\n    const timeoutId = setTimeout(() => {\n      get().doAnalysis();\n    }, 500);\n    set(state => ({\n      analysisTimeoutId: timeoutId\n    }));\n  },\n  usedTokens: 32,\n  availableTokens: 8000,\n  promptHistory: [''],\n  promptIndex: 0,\n  historyUp: () => set(state => ({\n    promptIndex: Math.min(state.promptHistory.length - 1, state.promptIndex + 1)\n  })),\n  historyDown: () => set(state => ({\n    promptIndex: Math.max(0, state.promptIndex - 1)\n  })),\n  editPrompt: prompt => {\n    set(state => ({\n      promptHistory: [...state.promptHistory.slice(0, state.promptIndex), prompt, ...state.promptHistory.slice(state.promptIndex + 1, state.promptHistory.length)]\n    }));\n    get().requestAnalysis();\n  },\n  newPrompt: () => set(state => ({\n    promptHistory: ['', ...state.promptHistory],\n    promptIndex: 0\n  }))\n}));\nexport function useDebouncedPrompt() {\n  _s();\n  const prompt = usePromptStore(state => state.promptHistory[state.promptIndex]).trim();\n  const [debouncedPrompt] = useDebouncedValue(prompt, 150, {\n    leading: true\n  });\n  return debouncedPrompt;\n}\n_s(useDebouncedPrompt, \"X4qn8ZpkGMRvkHk5aWvkWtvJexM=\", false, function () {\n  return [usePromptStore, useDebouncedValue];\n});","map":{"version":3,"names":["useDebouncedValue","create","usePromptStore","set","get","strategy","mode","manuals","name","usage","content","messages","setMessages","newMessages","state","removeMessage","index","filter","_","i","doAnalysis","fetch","method","body","JSON","stringify","then","response","json","data","usedTokens","availableTokens","getPrompt","promptHistory","promptIndex","analysisTimeoutId","undefined","requestAnalysis","clearTimeout","timeoutId","setTimeout","historyUp","Math","min","length","historyDown","max","editPrompt","prompt","slice","newPrompt","useDebouncedPrompt","_s","trim","debouncedPrompt","leading"],"sources":["/Users/maciel/Projects/aiconsole/web/src/workspace/prompt_store.ts"],"sourcesContent":["import { useDebouncedValue } from '@mantine/hooks';\nimport { create } from 'zustand';\n\nexport type GPTMessage = {\n  role: string;\n  content: string;\n};\n\nexport type Manual = {\n  name: string;\n  usage: string;\n  content: string;\n}\n\nexport type GPTMode = \"QUALITY\" | \"FAST\"\n\ntype PromptStore = {\n  strategy: string;\n  mode: GPTMode;\n  manuals: Manual[];\n  messages: GPTMessage[];\n  setMessages: (newMessages: GPTMessage[]) => void;\n  removeMessage: (index: number) => void;\n\n  usedTokens: number,\n  availableTokens: number,\n\n  promptHistory: string[];\n  promptIndex: number;\n\n  historyUp: () => void;\n  historyDown: () => void;\n  newPrompt: () => void;\n  editPrompt: (prompt: string) => void;\n  getPrompt: () => string;\n\n  requestAnalysis: () => void;\n  doAnalysis: () => void;\n  analysisTimeoutId: NodeJS.Timeout | undefined;\n};\n\nexport const usePromptStore = create<PromptStore>((set, get) => ({\n  strategy: 'Strat1',\n  mode: \"QUALITY\",\n  manuals: [\n    {\n      name: \"Linkedin\",\n      usage: \"Usage\",\n      content: \"Content\",\n    }\n  ],\n  messages: [],\n  setMessages: (newMessages: GPTMessage[]) =>\n    set((state) => ({\n      messages: newMessages\n    })),\n  removeMessage: (index: number) => \n    set((state) => ({\n      messages: state.messages.filter((_, i) => i !== index)\n    })),\n\n  doAnalysis: () => {\n    fetch('/analyse', {\n      method: 'POST',\n      body: JSON.stringify({\n        messages: get().messages,\n        mode: get().mode,\n      }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        set((state) => ({\n          strategy: data.strategy,\n          manuals: data.manuals,\n          usedTokens: data.usedTokens,\n          availableTokens: data.availableTokens,\n        }));\n      });\n  },\n\n  getPrompt: () => {\n    return get().promptHistory[get().promptIndex]\n  },\n\n  analysisTimeoutId: undefined,\n  requestAnalysis: () => {\n    if (get().analysisTimeoutId) {\n      clearTimeout(get().analysisTimeoutId);\n    }\n\n    const timeoutId = setTimeout(() => {\n      get().doAnalysis();\n    }, 500);\n\n    set((state) => ({\n      analysisTimeoutId: timeoutId,\n    }));\n  },\n\n  usedTokens: 32,\n  availableTokens: 8000,\n  promptHistory: [''],\n  promptIndex: 0,\n  historyUp: () => set((state) => ({ promptIndex: Math.min(state.promptHistory.length - 1, state.promptIndex + 1) })),\n  historyDown: () => set((state) => ({ promptIndex: Math.max(0, state.promptIndex - 1) })),\n  editPrompt: (prompt) => {\n    set((state) => ({\n      promptHistory: [...state.promptHistory.slice(0, state.promptIndex),  prompt, ...state.promptHistory.slice(state.promptIndex + 1, state.promptHistory.length)],\n    }));\n    get().requestAnalysis();\n  }\n    ,\n  newPrompt: () =>\n    set((state) => ({\n      promptHistory: ['', ...state.promptHistory],\n      promptIndex: 0,\n    })),\n}));\n\nexport function useDebouncedPrompt() {\n  const prompt = usePromptStore((state) => state.promptHistory[state.promptIndex]).trim();\n  const [debouncedPrompt] = useDebouncedValue(prompt, 150, { leading: true });\n\n  return debouncedPrompt;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}