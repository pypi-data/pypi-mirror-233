{"ast":null,"code":"var _jsxFileName = \"/Users/maciel/Projects/ai-console/web/src/app.tsx\",\n  _s = $RefreshSig$();\n/*\nTask: Add an \"X\" to each message that allows me to remove it.\n\nFirstly, let's have an overview of what we want to achieve. We need to add a \"X\"\nbutton somewhere in our representation of a message. When the \"X\" is clicked,\nthe respective message needs to be removed from the 'messages' state. \n\nLet's start by modifying the place where each message is being rendered. Here we\nwill add an additional button that will represent the \"X\". When this button is\nclicked, it will call a new function that we will create, 'removeMessage', with\nthe index of the current message as the argument.\n\nWe will then add a 'removeMessage' function that takes an index as an argument\nand removes the message at that index from the messages.\n\nLet's do this:\n\nFirst, we are going to modify the part where messages are rendered:\n*/\n\n{\n  messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-900px w-full px-5 py-3 rounded-lg bg-slate-700  shadow-lg mb-5 \",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => removeMessage(index),\n      children: \"X\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }, this), \"  \", /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n      components: {\n        code: ({\n          node,\n          ...props\n        }) => /*#__PURE__*/_jsxDEV(CodeBlock, {\n          language: props.lang,\n          val: node.children.map(e => e.value).join(' ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)\n      },\n      children: message.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 5\n    }, this)]\n  }, index, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 3\n  }, this));\n}\nimport { useCallback, useState, useRef, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport CodeBlock from './code_block';\nimport { CommandInput } from './components/command_input';\n//import \"highlight.js/styles/dracula.css\"; // use dracula.css as highlight.js theme\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [lastScroll, setLastScroll] = useState(0);\n  const messagesEndRef = useRef(null);\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      let newValue = Math.max(messagesEndRef.current.scrollHeight - messagesEndRef.current.clientHeight, 0);\n      if (newValue !== lastScroll) {\n        setLastScroll(newValue);\n        console.log(lastScroll, newValue);\n        messagesEndRef.current.scrollTop = newValue;\n      }\n    }\n  }, [messages, lastScroll]);\n  const removeMessage = index => {\n    let newMessages = messages.filter((_, i) => i !== index);\n    {/* keep everything but the selected index */}\n    setMessages(newMessages);\n  };\n  const handleSubmit = useCallback(async prompt => {\n    let newMessages = [...messages, {\n      role: 'user',\n      content: prompt\n    }];\n    setMessages(newMessages);\n    let postRequest = async messages => {\n      console.log(messages);\n      return await fetch(`http://${window.location.hostname}:8000/gpt`, {\n        method: 'POST',\n        body: JSON.stringify({\n          messages: messages,\n          model: 'gpt-4'\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n    };\n    let handleResponse = async (messages, response) => {\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder('utf-8');\n      let newMessages = [...messages, {\n        role: 'assistant',\n        content: ''\n      }];\n      while (true) {\n        const {\n          value,\n          done\n        } = await reader.read();\n        let text = decoder.decode(value);\n        console.log(text);\n        if (text.includes(\"§§§§§CLEAR§§§§§\")) {\n          newMessages[newMessages.length - 1].content = \"\";\n          text = text.replace(\"§§§§§CLEAR§§§§§\", \"\");\n        }\n        newMessages[newMessages.length - 1].content += text;\n        setMessages(newMessages.slice());\n        //console.log(newMessages);\n\n        if (done) {\n          break;\n        }\n      }\n    };\n    let response = await postRequest(newMessages);\n    await handleResponse(newMessages, response);\n  }, [messages, removeMessage]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App flex flex-col fixed top-0 left-0 bottom-0 right-0 p-5 justify-between\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow overflow-y-auto flex flex-col\",\n      style: {\n        scrollBehavior: 'smooth'\n      },\n      ref: messagesEndRef,\n      children: messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No messages\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: messages.map((message, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"max-w-900px w-full px-5 py-3 rounded-lg bg-slate-700  shadow-lg mb-5 \",\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            components: {\n              code: ({\n                node,\n                ...props\n              }) => /*#__PURE__*/_jsxDEV(CodeBlock, {\n                language: props.lang,\n                val: node.children.map(e => e.value).join(' ')\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 23\n              }, this)\n            },\n            children: message.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: /*#__PURE__*/_jsxDEV(CommandInput, {\n        onSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"aHDQ2izqsmZ+fbAiyWN7dQ32Kio=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["messages","map","message","index","_jsxDEV","className","children","onClick","removeMessage","fileName","_jsxFileName","lineNumber","columnNumber","ReactMarkdown","components","code","node","props","CodeBlock","language","lang","val","e","value","join","content","useCallback","useState","useRef","useEffect","CommandInput","jsxDEV","App","_s","setMessages","lastScroll","setLastScroll","messagesEndRef","current","newValue","Math","max","scrollHeight","clientHeight","console","log","scrollTop","newMessages","filter","_","i","handleSubmit","prompt","role","postRequest","fetch","window","location","hostname","method","body","JSON","stringify","model","headers","handleResponse","response","reader","getReader","decoder","TextDecoder","done","read","text","decode","includes","length","replace","slice","style","scrollBehavior","ref","onSubmit","_c","$RefreshReg$"],"sources":["/Users/maciel/Projects/ai-console/web/src/app.tsx"],"sourcesContent":["/*\nTask: Add an \"X\" to each message that allows me to remove it.\n\nFirstly, let's have an overview of what we want to achieve. We need to add a \"X\"\nbutton somewhere in our representation of a message. When the \"X\" is clicked,\nthe respective message needs to be removed from the 'messages' state. \n\nLet's start by modifying the place where each message is being rendered. Here we\nwill add an additional button that will represent the \"X\". When this button is\nclicked, it will call a new function that we will create, 'removeMessage', with\nthe index of the current message as the argument.\n\nWe will then add a 'removeMessage' function that takes an index as an argument\nand removes the message at that index from the messages.\n\nLet's do this:\n\nFirst, we are going to modify the part where messages are rendered:\n*/\n\n{messages.map((message, index) => (\n  <div\n    key={index}\n    className=\"max-w-900px w-full px-5 py-3 rounded-lg bg-slate-700  shadow-lg mb-5 \"\n  >\n    <button onClick={() => removeMessage(index)}>X</button>  {/* Adding the X button to each message */}\n    <ReactMarkdown\n      components={{\n        code: ({ node, ...props }) => (\n          <CodeBlock\n            language={props.lang}\n            val={node.children.map((e) => (e as any).value).join(' ')}\n          />\n        ),\n      }}\n    >\n      {message.content}\n    </ReactMarkdown>\n  </div>\n))}\n\n\n\n\nimport { useCallback, useState, useRef, useEffect } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport CodeBlock from './code_block';\nimport { CommandInput } from './components/command_input';\n//import \"highlight.js/styles/dracula.css\"; // use dracula.css as highlight.js theme\n\ntype Message = {\n  role: string;\n  content: string;\n};\n\nfunction App() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [lastScroll, setLastScroll] = useState<number>(0);\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      let newValue = Math.max(\n        messagesEndRef.current.scrollHeight - messagesEndRef.current.clientHeight,\n        0,\n      );\n      if (newValue !== lastScroll) {\n        setLastScroll(newValue);\n        console.log(lastScroll, newValue);\n        messagesEndRef.current.scrollTop = newValue;\n      }\n    }\n  }, [messages, lastScroll]);\n\n\n  const removeMessage = (index: number) => {\n    let newMessages = messages.filter((_, i) => i !== index);  {/* keep everything but the selected index */}\n    setMessages(newMessages);\n  };\n\n  const handleSubmit = useCallback(\n    async (prompt: string) => {\n      let newMessages = [...messages, { role: 'user', content: prompt }];\n      setMessages(newMessages);\n\n      let postRequest = async (messages: Message[]) => {\n        console.log(messages);\n        return await fetch(`http://${window.location.hostname}:8000/gpt`, {\n          method: 'POST',\n          body: JSON.stringify({\n            messages: messages,\n            model: 'gpt-4',\n          }),\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n      };\n\n      let handleResponse = async (messages: Message[], response: any) => {\n        const reader = response.body.getReader();\n        const decoder = new TextDecoder('utf-8');\n\n        let newMessages = [...messages, { role: 'assistant', content: '' }];\n\n        while (true) {\n          const { value, done } = await reader.read();\n          let text = decoder.decode(value);\n          console.log(text)\n          if (text.includes(\"§§§§§CLEAR§§§§§\")) {\n            newMessages[newMessages.length - 1].content = \"\";\n            text = text.replace(\"§§§§§CLEAR§§§§§\", \"\");\n          } \n          \n          newMessages[newMessages.length - 1].content += text; \n          setMessages(newMessages.slice());\n          //console.log(newMessages);\n\n          if (done) {\n            break;\n          }\n\n          \n        }\n      };\n\n      let response = await postRequest(newMessages);\n\n      await handleResponse(newMessages, response);\n    },\n    [messages, removeMessage],\n  );\n\n  return (\n    <div className=\"App flex flex-col fixed top-0 left-0 bottom-0 right-0 p-5 justify-between\">\n      <div\n        className=\"flex-grow overflow-y-auto flex flex-col\"\n        style={{ scrollBehavior: 'smooth' }}\n        ref={messagesEndRef}\n      >\n        {messages.length === 0 ? (\n          <div>No messages</div>\n        ) : (\n          <div>\n            {messages.map((message, index) => (\n              <div\n                key={index}\n                className=\"max-w-900px w-full px-5 py-3 rounded-lg bg-slate-700  shadow-lg mb-5 \"\n              >\n                <ReactMarkdown\n                  components={{\n                    code: ({ node, ...props }) => (\n                      <CodeBlock\n                        language={props.lang}\n                        val={node.children.map((e) => (e as any).value).join(' ')}\n                      />\n                    ),\n                  }}\n                >\n                  {message.content}\n                </ReactMarkdown>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n      <div className=\"\">\n        <CommandInput onSubmit={handleSubmit} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}