import { on } from 'events';
import { Illustration } from './src/Illustration';
import { ImageCard } from './src/ImageCard';
import { PrompterImages } from './src/PrompterImages';
import { PrompterRequests } from './src/PrompterRequests';
import { requestImage, uploadOldMidjourneyImage } from './src/firebaseClient';
import { useIllustrations } from './src/useIllustrations';
import { createMidjourneyPrompts } from './src/createMidjourneyPrompts';

export default async () => {
  return {
    /*
    type IllustrationType = {
      id: string;
      requestId: string; // empty if there was no request
      url: string;
      rating?: number; // scale -5 to 5 or not set
      source: IllustrationSource;
      width: number;
      height: number;
      note: string;
      createdAt: Date;
    };
    */
    Illustration,

    /*

    /**
     * A react component that shows a illustrations from the game 
     *\/
    function PrompterImages(): JSX.Element

    */
    PrompterImages,

    /*

    /**
     * A react component that shows all currently open requests for image generation
     *\/
    function PrompterRequests(): JSX.Element

    */
    PrompterRequests,

    /*

    /**
     * Request an image from the AI, returns a set of proposed images for this prompt.
     *\/
    async function requestImage(prompt: string): Promise<MidJourneyImage[]>

    */
    requestImage,

    /*

    /**
     * Allows the frontend to upload exisiting images, it can be used as part of an upload from.
     *\/
    async function uploadOldMidjourneyImage(imageFile: File, promptUsedToGenerate: string): Promise<Illustration> {

    */
    uploadOldMidjourneyImage,

    /*

    /**
     * A react component that shows a single image, always use this if you want to show an illustration, as it provides a way to click it and some other manipulation tools as overlay buttons.
     *\/
    function ImageCard({ image }: { image: Illustration });

    */
    ImageCard,

    /*

    /**
     * A react hook that allows you to query the database for illustrations, it will automatically update when the database changes.
     *\/
    function useIllustrations(...queryConstraints: QueryConstraint[]): { data?: Illustration[]; loading: boolean; error?: any; snapshot?: any }

    */
    useIllustrations,

    /*
    
    /**
     *  
     * This function will generate a set of prompts that can be used to generate a midjourney image.
     * 
     * The prompts are generated by the AI, and are based on the prompt you provide, it can cointain any textual format, with additional data. Make it human readable for best results.
     * 
     * @param prompt The prompt to generate prompts, for example: "Generate a midjourney prompt for of the following races: fox, owl and a bear." or "Generate 5 prompts showing a sword fight."
     * @param onTextChunk A callback that will be called with each chunk of text that is generated, this can be used to show the user the progress of the generation. Every onText call for example could advance some animiation or every 20 characters there could be an additional dot added to the end of the text showing the loading status.
     * 
     * @returns A list of prompts that can be used to generate a midjourney image.
     *\/
    async function createMidjourneyPrompts(prompt: string, onTextChunk: (chunk: string) => void): Promise<string[]>

    */
    createMidjourneyPrompts,
  };
};
