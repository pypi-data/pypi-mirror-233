# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_flag.ipynb.

# %% auto 0
__all__ = ['P', 'BoolCall', 'BoolFunc', 'hasvargs', 'haskwargs', 'islambda', 'lambdastr', 'isbooltype', 'boolcall', 'echobool',
           'ascall', 'callbool', 'asbool', 'flag']

# %% ../nbs/00_flag.ipynb 3
import inspect, itertools
from numbers import Number
from enum import StrEnum, Enum
from typing import Type, TypeVar, NamedTuple, Optional, Union, Self, ClassVar, Any, Callable, TypeAlias, ParamSpec

# %% ../nbs/00_flag.ipynb 5
P = ParamSpec('P')
BoolCall: TypeAlias = Union[bool, Callable]
BoolFunc: TypeAlias = Callable[P, bool]

# %% ../nbs/00_flag.ipynb 7
def hasvargs(f: Callable) -> bool:
    '''
    Checks if a given callable has variable positional arguments.
    
    Parameters
    ----------
    f : Callable
        The function to check for variable positional arguments.
        
    Returns
    -------
    bool
        True if the function has variable positional arguments, otherwise False.
    '''
    if not inspect.isfunction(f): return False
    return any(p.kind == p.VAR_POSITIONAL for p in inspect.signature(f).parameters.values())

def haskwargs(f: Callable) -> bool:
    '''
    Checks if a given callable has variable keyword arguments.
    
    Parameters
    ----------
    f : Callable
        The function to check for variable keyword arguments.
        
    Returns
    -------
    bool
        True if the function has variable keyword arguments, otherwise False.
    '''
    if not inspect.isfunction(f): return False
    return any(p.kind == p.VAR_KEYWORD for p in inspect.signature(f).parameters.values())

def islambda(f: Callable) -> bool:
    '''
    Checks if a given callable is a lambda function.
    
    Parameters
    ----------
    f : Callable
        The function to check.
        
    Returns
    -------
    bool
        True if the function is a lambda, otherwise False.
    '''
    return inspect.isfunction(f) and f.__name__ == '<lambda>'

def lambdastr(f: Callable) -> str:
    '''
    Retrieves the string representation of a lambda function.
    
    Parameters
    ----------
    f : Callable
        The lambda function.
        
    Returns
    -------
    str
        The string representation of the lambda function.
    '''  
    # Use inspect.getsource() to get the source code of the lambda function
    code = inspect.getsource(f)
    # Extract the lambda expression part from the source code
    expr = code.strip().split(':')[1].strip()
    return expr

# %% ../nbs/00_flag.ipynb 9
def isbooltype(b: Any) -> bool:
    '''
    Checks if a given value is of type bool.
    
    Parameters
    ----------
    b : Any
        The value to check.
        
    Returns
    -------
    bool
        True if the value is of type bool, otherwise False.
    '''
    return b == bool

def boolcall(b: BoolCall = None) -> BoolCall:
    '''
    Normalizes a Boolean callable to either bool or Callable.
    
    Parameters
    ----------
    b : BoolCall, optional
        The value to normalize.
        
    Returns
    -------
    BoolCall
        The normalized value.
    '''
    return b if isinstance(b, (bool, Callable)) else bool

def echobool(b: bool) -> BoolFunc:
    '''
    Creates a function that echoes a given boolean value.
    
    Parameters
    ----------
    b : bool
        The boolean value to echo.
        
    Returns
    -------
    BoolFunc
        The function that echoes the given boolean value.
    '''
    assert isinstance(b, bool), 'b must be bool'
    return lambda *args, **kwargs: b
    func = lambda *args, **kwargs: b
    func.__name__ = f'Echo{b}'
    return func

def ascall(b: BoolCall) -> BoolFunc:
    '''
    Normalizes a BoolCall to a BoolFunc.
    
    Parameters
    ----------
    b : BoolCall
        The value to normalize.
        
    Returns
    -------
    BoolFunc
        The normalized value.
    '''
    b = boolcall(b)
    return b if isinstance(b, Callable) else echobool(b)

def callbool(v: Any, b: BoolFunc, *args, **kwargs) -> bool:
    '''
    Evaluates a boolean function with the given value and optional arguments.
    
    Parameters
    ----------
    v : Any
        The value to evaluate.
    b : BoolFunc
        The boolean function to use for the evaluation.
    args : tuple, optional
        Additional arguments to pass to the function.
    kwargs : dict, optional
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    bool
        The result of the evaluation.
    '''
    b = ascall(b)
    if hasvargs(b) and haskwargs(b): return b(v, *args, **kwargs)
    elif haskwargs(b): return b(v, **kwargs)
    elif hasvargs(b):  return b(v, *args)
    return b(v)

def asbool(v: Any, b: BoolCall, *args, **kwargs) -> bool:
    '''
    Evaluates a BoolCall with the given value and optional arguments.
    
    Parameters
    ----------
    v : Any
        The value to evaluate.
    b : BoolCall
        The boolean function or value to use for the evaluation.
    args : tuple, optional
        Additional arguments to pass to the function.
    kwargs : dict, optional
        Additional keyword arguments to pass to the function.
        
    Returns
    -------
    bool
        The result of the evaluation.
    '''
    return callbool(v, ascall(b), *args, **kwargs)

# %% ../nbs/00_flag.ipynb 10
class flag(Callable):
    @property
    def clsname(self) -> str:
        '''
        Gets the class name.
        
        Returns
        -------
        str
            The name of the class.
        '''
        return type(self).__name__
    
    @classmethod
    def boolcall(cls, b: BoolCall = None) -> BoolCall:
        '''
        Class method to normalize a Boolean callable to either bool or Callable.
        
        Parameters
        ----------
        b : BoolCall, optional
            The value to normalize.
            
        Returns
        -------
        BoolCall
            The normalized value.
        '''
        return boolcall(b)
    
    @classmethod
    def ascall(cls, b: BoolCall = None) -> BoolFunc:
        '''
        Class method to convert a BoolCall to BoolFunc.
        
        Parameters
        ----------
        b : BoolCall, optional
            The value to convert.
            
        Returns
        -------
        BoolFunc
            The converted function.
        '''
        return ascall(b)
    
    @classmethod
    def asbool(cls, v: Any, b: BoolCall, *args, **kwargs) -> bool:
        '''
        Class method to evaluate a BoolCall with the given value and optional arguments.
        
        Parameters
        ----------
        v : Any
            The value to evaluate.
        b : BoolCall
            The boolean function or value to use for the evaluation.
        args : tuple, optional
            Additional arguments to pass to the function.
        kwargs : dict, optional
            Additional keyword arguments to pass to the function.
            
        Returns
        -------
        bool
            The result of the evaluation.
        '''
        return asbool(v, b, *args, **kwargs)
    
    @classmethod
    def flag(cls, v: Any, b: BoolCall = None, *args, **kwargs) -> bool:
        '''
        Class method to evaluate a BoolCall with the given value and optional arguments.
        
        Parameters
        ----------
        v : Any
            The value to evaluate.
        b : BoolCall, optional
            The boolean function or value to use for the evaluation.
        args : tuple, optional
            Additional arguments to pass to the function.
        kwargs : dict, optional
            Additional keyword arguments to pass to the function.
            
        Returns
        -------
        bool
            The result of the evaluation.
        '''
        return callbool(v, b, *args, **kwargs)
    
    @property
    def sigstr(self) -> str:
        '''
        Gets the signature string of the function.

        Returns
        -------
        str
            The signature string.
        '''
        if islambda(self.func):
            return lambdastr(self.func)
        return inspect.signature(self.func).__str__()

    @property
    def fncstr(self) -> str:
        '''
        Gets the function string which includes the name and the signature.

        Returns
        -------
        str
            The function string.
        '''
        fnname = self.func.__name__.replace('<lambda>', '')
        return f'{fnname}{self.sigstr}'
    
    def __new__(cls, b: BoolCall = None) -> Self:        
        obj = super().__new__(cls)
        obj.bool = b if isinstance(b, bool) else None
        obj.func = ascall(b)
        return obj

    def __call__(self, val, *args, **kwargs) -> bool:
        '''
        Makes the instance callable.
        
        Parameters
        ----------
        val : Any
            The value to evaluate.
        args : tuple
            Variable positional arguments.
        kwargs : dict
            Variable keyword arguments.
            
        Returns
        -------
        bool
            The result of the evaluation.
        '''
        return self.asbool(val, self.func, *args, **kwargs)
    
    def __str__(self) -> str:
        return f'{self.clsname}({self.bool if self.bool is not None else self.fncstr})'
    
    def __repr__(self) -> str:
        return str(self)
