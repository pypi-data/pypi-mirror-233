# coding: utf-8

"""
    Corva Data API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr

class CorvaDatasetDepth(BaseModel):
    """
    CorvaDatasetDepth
    """
    id: Optional[StrictStr] = Field(None, alias="_id")
    version: Optional[StrictInt] = None
    provider: Optional[StrictStr] = None
    collection: Optional[StrictStr] = None
    measured_depth: Optional[Union[StrictFloat, StrictInt]] = None
    timestamp_read: Optional[StrictInt] = None
    asset_id: Optional[StrictInt] = None
    company_id: Optional[StrictInt] = None
    app: Optional[StrictStr] = None
    log_identifier: Optional[StrictStr] = None
    metadata: Optional[Any] = None
    data: Optional[Any] = None
    __properties = ["_id", "version", "provider", "collection", "measured_depth", "timestamp_read", "asset_id", "company_id", "app", "log_identifier", "metadata", "data"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CorvaDatasetDepth:
        """Create an instance of CorvaDatasetDepth from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if company_id (nullable) is None
        # and __fields_set__ contains the field
        if self.company_id is None and "company_id" in self.__fields_set__:
            _dict['company_id'] = None

        # set to None if metadata (nullable) is None
        # and __fields_set__ contains the field
        if self.metadata is None and "metadata" in self.__fields_set__:
            _dict['metadata'] = None

        # set to None if data (nullable) is None
        # and __fields_set__ contains the field
        if self.data is None and "data" in self.__fields_set__:
            _dict['data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CorvaDatasetDepth:
        """Create an instance of CorvaDatasetDepth from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CorvaDatasetDepth.parse_obj(obj)

        _obj = CorvaDatasetDepth.parse_obj({
            "id": obj.get("_id"),
            "version": obj.get("version"),
            "provider": obj.get("provider"),
            "collection": obj.get("collection"),
            "measured_depth": obj.get("measured_depth"),
            "timestamp_read": obj.get("timestamp_read"),
            "asset_id": obj.get("asset_id"),
            "company_id": obj.get("company_id"),
            "app": obj.get("app"),
            "log_identifier": obj.get("log_identifier"),
            "metadata": obj.get("metadata"),
            "data": obj.get("data")
        })
        return _obj


