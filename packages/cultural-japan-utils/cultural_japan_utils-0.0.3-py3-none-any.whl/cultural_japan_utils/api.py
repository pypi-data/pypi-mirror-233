# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/20_api.ipynb.

# %% auto 0
__all__ = ['OsClient']

# %% ../nbs/20_api.ipynb 3
from opensearchpy import OpenSearch, RequestsHttpConnection
import boto3
from opensearchpy import helpers
import random
import time

# %% ../nbs/20_api.ipynb 4
class OsClient:
    """
    A client to interact with the OpenSearch service.

    Attributes:
        es (OpenSearch): An OpenSearch instance.
    """

    def __init__(self, host, username, password, aws_access_key_id, aws_secret_access_key):
        """
        Initialize the OpenSearch client using the provided credentials.
        """    

        # Initialize the OpenSearch instance
        es = OpenSearch(
            hosts=[{'host': host, 'port': 443}],
            http_auth=(username, password),
            use_ssl=True,
            verify_certs=True,
            connection_class=RequestsHttpConnection
        )

        self.es = es

        session = boto3.session.Session(aws_access_key_id=aws_access_key_id, aws_secret_access_key=aws_secret_access_key)
        self.session = session

    def get_alias(self, index):
        """
        Get the alias for the specified index.

        Args:
            index (str): The index for which to get the alias.

        Returns:
            dict: The alias information for the specified index.
        """
        return list(self.es.indices.get_alias(index))[0]

    def get(self, index, id):
        """
        Get a document from the specified index by its ID.

        Args:
            index (str): The index from which to get the document.
            id (str): The ID of the document to get.

        Returns:
            dict: The document with the specified ID from the index.
        """
        return self.es.get(index=index, id=id)

    def update(self, items):
        """
        Update items in the OpenSearch instance using the bulk API.

        Args:
            items (list): A list of items to update.

        Returns:
            tuple: A tuple containing the number of successfully updated items and a list of errors.
        """
        response = helpers.bulk(self.es, items, max_retries=3)
        return response
    
    def createOrUpdate(self, items):
        try:
            self.update(items)
        except Exception as e:
            print(e)
            items_ = []
            for item in items:
                item_ = item["doc"]
                item_["_index"] = item["_index"]
                item_["_id"] = item["_id"]
                item_["_op_type"] = "create"
                items_.append(item_)

            self.update(items_)

    def switch_alias(self, alias_prod, alias_dev):
        """
        Elasticsearchのインデックスのエイリアスを切り替える関数です。
        
        この関数は、プロダクション環境と開発環境のインデックスを切り替えるために使用されます。
        
        Args:
            alias_prod (str): プロダクション環境のエイリアス名。
            alias_dev (str): 開発環境のエイリアス名。
        """
        # Elasticsearchインスタンスを取得
        es = self.es
        
        # エイリアスから対応するインデックス名を取得
        index_prod = self.get_alias(alias_prod)
        index_dev = self.get_alias(alias_dev)

        # エイリアスを切り替えるためのアクションを定義
        update_actions = [
            {"remove": {"index": index_prod, "alias": alias_prod}},
            {"remove": {"index": index_dev, "alias": alias_dev}},
            {"add": {"index": index_prod, "alias": alias_dev}},
            {"add": {"index": index_dev, "alias": alias_prod}},
        ]

        # エイリアスを切り替える
        es.indices.update_aliases({"actions": update_actions})

    def update_alias_dev(self, alias_prod, alias_dev):
        """
        開発環境のElasticsearchインデックスをプロダクション環境から更新する関数です。
        
        この関数は、プロダクション環境のインデックスをコピーして、開発環境のインデックスを更新します。
        
        Args:
            alias_prod (str): プロダクション環境のエイリアス名。
            alias_dev (str): 開発環境のエイリアス名。
        """
        # Elasticsearchインスタンスを取得
        es = self.es
        
        # エイリアスから対応するインデックス名を取得
        index_prod = list(es.indices.get_alias(alias_prod).keys())[0]
        index_dev = list(es.indices.get_alias(alias_dev).keys())[0]

        # 開発環境のインデックスを削除
        es.indices.delete(index_dev)

        # プロダクション環境のインデックスを書き込み不可に設定
        es.indices.put_settings({"index.blocks.write": True}, index_prod)
        
        # プロダクション環境のインデックスを開発環境のインデックスにコピー
        es.indices.clone(index_prod, index_dev)

        # 開発環境のエイリアスを更新するためのアクションを定義
        update_actions = [
            {"add": {"index": index_dev, "alias": alias_dev}},
        ]

        # エイリアスを更新
        es.indices.update_aliases({"actions": update_actions})

    def delete_by_query(self, index, body):
        """
        Elasticsearchのインデックスからクエリに一致するドキュメントを削除する関数です。
        
        Args:
            index (str): インデックス名。
            body (dict): クエリ。
        """
        # Elasticsearchインスタンスを取得
        es = self.es
        
        # クエリに一致するドキュメントを削除
        es.delete_by_query(index=index, body=body, params={"request_timeout": 3600})

    def _unique_string(self, prefix='cli'):
        ''' borrowed from aws-cli/awscli/customizations/cloudfront.py
        '''
        return '%s-%s-%s' % (prefix, int(time.time()), random.randint(1, 1000000))

    def invalidate_cloudfront(self, distribution_id, items):
        '''
        Invalidate Amazon CloudFront paths
        API
        - https://docs.aws.amazon.com/cloudfront/latest/APIReference/API_CreateInvalidation.html
        - https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudfront.html#CloudFront.Client.create_invalidation
        '''

        client = self.session.client('cloudfront')

        res = client.create_invalidation(
            DistributionId=distribution_id,
            InvalidationBatch = {
                'Paths' : {
                    'Quantity': len(items),
                    'Items': items,
                },
                'CallerReference' : self._unique_string()
            }
        )

        print(res)

    def get_ids(self, index_name, body = None):
        """
        Elasticsearchから指定されたインデックス名に対応するすべてのドキュメントのIDを取得します。

        :param index_name: 検索対象のインデックス名  
        :type index_name: str  
        :param body: 検索クエリ (オプション)  
        :type body: dict, optional  
        
        :return: ドキュメントのIDのリスト  
        :rtype: list
        """

        ids = []
        last = None

        while 1:
            # Elasticsearchから検索結果を取得
            result = self.es.search(index=index_name, body=body)
            
            # 検索結果が0件の場合、ループを抜ける
            if len(result['hits']['hits']) == 0:
                break
            
            # 最後の検索結果の'sort'フィールドを取得
            last = result['hits']['hits'][-1]['sort']

            # 検索結果からIDを取得し、idsリストに追加
            for hit in result['hits']['hits']:
                ids.append(hit['_id'])
                
            if last is not None:
                body["search_after"] = last

        return ids
