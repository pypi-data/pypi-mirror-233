#!/bin/sh
cd ${0%/*} || exit 1    # Run from this directory

# Source tutorial clean functions
#. $WM_PROJECT_DIR/bin/tools/CleanFunctions

#set -o xtrace

function usage {
    echo ""
    echo "usage: monitorVelocity [-t startTime]"
    echo "  -t | --time        simulation start time (default = 0)"
    exit 1
}

startTime=0

#parse arguments
while (( "$#" )); do
case "$1" in
    -t|--time)
        if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
            startTime=$2
            shift 2
        else
            echo "ERROR:  Argument for $1 is missing" >&2
            usage
        fi
    ;;
    * )
        echo "Invalid argument '$1'"
        usage
esac
done


[ -e velocityMonitors* ] && rm velocityMonitors*

#Determine the number of probes to plot and extract point info
file="postProcessing/probes/${startTime}/U"
re="^# Probe [0-9] \(."
nProbes=0
while IFS= read -r line;
do
    if [[ $line =~ $re ]];
    then
        nProbes=$((nProbes+1))
        i=$nProbes
        # Add the plot to the gnuplot script
        # read the ith line ans extract name
        name=${line:2}
        echo $name
        cat <<EOT >> velocityMonitors${i}
set terminal x11
set autoscale

set title "${name}"
set ylabel "Velocity [m/s]"
set xlabel "Time [s]"

while (1) {
EOT

        x=$((3*(i-1)+2))
        echo 'plot "< cat '${file}' | tr -d '\''()'\''" using 1:'$((x))' with lines title "x-component", \' >> velocityMonitors${i}
        echo '     "< cat '${file}' | tr -d '\''()'\''" using 1:'$((x+1))' with lines title "y-component", \' >> velocityMonitors${i}
        echo '     "< cat '${file}' | tr -d '\''()'\''" using 1:'$((x+2))' with lines title "z-component" ' >> velocityMonitors${i}
        echo '}' >> velocityMonitors${i}
    
        gnuplot -p velocityMonitors${i} &
    else
        break
    fi

done < "$file"
    



#        fi
#
#        if test -f $file; then
#            if [[ $firstRAVDLine == true  ]]; then
#                echo 'plot "'${file}'" using 1:3 with lines title "'${name}'", \' >> ravdMonitors
#                firstRAVDLine=false
#            else
#                echo '     "'${file}'" using 1:3 with lines title "'${name}'", \' >> ravdMonitors
#            fi
#        fi
#    fi
#    re='SWIRLMETER_[0-9]+'
#    if [[ $name =~ $re ]]; then
#        n=${name#"SWIRLMETER_"}
#        #echo $n
#        file="$dir$startTime"/swirlAngle_SWIRLMETER_"$n".dat 
#        #- Get the latest log file
#        if [ -f "$file"_1.dat ];
#        then
#            f=1
#            while [ -f "$file"_"$((f+1))".dat ]
#            do
#                f=$((f+1))
#            done
#            file="$file"_"$f".dat
#        else
#            file="$file".dat
#        fi
#        if test -f $file; then
#            if [[ $firstSwirlLine == true  ]]; then
#                echo 'plot "'${file}'" using 1:3 with lines title "'${name}'", \' >> swirlMonitors
#                firstSwirlLine=false
#            else
#                echo '    "'${file}'" using 1:3 with lines title "'${name}'", \' >> swirlMonitors
#            fi
#        fi
#    fi
#    if [[ $name == probes ]]; then
#        file="$dir$startTime"/p
#        #- get the probe labels at the begining of the file
#        mapfile -t -n 20 lines < ${file}
#        #echo $lines
#        labels=()
#        for i in "${lines[@]}"; do
#            if [[ $i[0] == /# ]]; then
#                labels=( ${labels} ${i#?} )
#            else
#                break
#            fi
#        done
#        echo $labels
#    fi
#done
#
##- Remove the '\' character on the last line
#sed '$ s/, \\//' ravdMonitors >> ravdMonitors_
#sed '$ s/, \\//' swirlMonitors >> swirlMonitors_
#
#mv ravdMonitors_ ravdMonitors
#mv swirlMonitors_ swirlMonitors
#
#echo -e "pause 1\n}" >> ravdMonitors
#echo -e "pause 1\n}" >> swirlMonitors
#
#file=postProcessing/residuals/"$startTime"/residuals
##- Get the latest log file
#if [ -f "$file"_1.dat ];
#then
#    f=1
#    while [ -f "$file"_"$((f+1))".dat ]
#    do
#        f=$((f+1))
#    done
#    file="$file"_"$f".dat
#else
#    file="$file".dat
#fi
#foamMonitor -l "$file"  & \
#foamMonitor  postProcessing/probes/"$startTime"/U & \
#foamMonitor  postProcessing/probes/"$startTime"/p &
#set terminal x11 1
#gnuplot -p ravdMonitors &
#set terminal x11 2
#gnuplot -p swirlMonitors &
#set terminal x11 3
#gnuplot -p velocityMonitors &

#------------------------------------------------------------------------------
