---
# [int] (optional) Env seed (auto-generated if blank)
seed: ~

# [string] (optional) Unique ID of this run (auto-generated if blank)
run_id: ~

# [List<string>] List of paths for the recordings to train with
# Glob patterns are supported, eg. "data/recordings/*.rec"
recordings:
  - "data/recordings/1syeor3a-12000000.rec"

# [string] Directory template to save the trained model, metadata and
# tensorboard logs. If the template contains {run_id} or {seed} placeholders,
# they will be replaced with the corresponding runtime values.
out_dir_template: "data/GAIL_PPO-{run_id}"

# [bool] Log tensorboard data
log_tensorboard: true

# [int] Fixed-length of each episode. More on why this is required:
# https://imitation.readthedocs.io/en/latest/main-concepts/variable_horizon.html
episode_len: 1000

# [int] Training duration (depending on the algo used, set to no less than 5M)
total_timesteps: 200000

# GAIL algorithm parameters
# https://imitation.readthedocs.io/en/latest/algorithms/gail.html#api
trainer_kwargs:
  demo_batch_size: 1024
  demo_minibatch_size: ~
  n_disc_updates_per_round: 4
  log_dir: ~
  gen_train_timesteps: ~
  gen_replay_buffer_capacity: ~
  debug_use_ground_truth: false
  allow_variable_horizon: false

# [string] Module name of the learner alrogirthm (eg. "stable_baselines3")
learner_module: "stable_baselines3"

# [string] Class name of the learner algorithm (eg. "PPO")
learner_cls: "PPO"

# Parameters for the learner algorithm
learner_kwargs:
  policy: "MlpPolicy"
  use_sde: false
  sde_sample_freq: 4
  n_steps: 64
  batch_size: 32
  gamma: 0.9
  gae_lambda: 0.98
  clip_range: 0.4
  normalize_advantage: true
  ent_coef: 0.001
  vf_coef: 0.5
  max_grad_norm: 3

# (string) Schedule for the learning_rate as a function of the progress remaining.
# Format is one of:
#   const_V0
#   lin_decay_V0_V1_F
#   exp_decay_V0_V1_F_N
# where:
#   V0 = initial lr value
#   V1 = final lr value
#   F = fraction of the total training time to fully decay from V0 to V1
#   N = number of decay steps (used in exp_decay only)
# Examples:
#   * "const_0.001"
#     will maintain constant lr=0.001 for the entire training:
#
#   * "lin_decay_0.03_0.0001_0.75"
#     will start with lr=0.03 and linearly lower it to lr=0.0001 during the
#     first 75% of training
#
#   * "exp_decay_0.03_0.0001_0.5_5"
#     will start with lr=0.03 and exponentially lower it to lr=0.0001 during
#     the first 50% of training in 5 steps (ie. at 90%, 80%, 70%, 60% and 50%)
#
learner_lr_schedule: "const_0.001"

# Env parameters
# The special "__include__" key allows to load them from another file.
# Keys listed here take precedence over keys loaded with __include__.
# See notes in `env.yml` for more info
env_kwargs:
  __include__: "config/env.yml"
  frames_per_step: 4
  reduced_action_set: false
  text_in_browser: "Do not close this window, training in progress..."

# List of gym wrappers to use for the env
# Each list element must be a dict with "module", "cls" and "kwargs" keys
env_wrappers: []
