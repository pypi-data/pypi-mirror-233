# -*- coding: utf-8 -*-
from setuptools import setup

package_dir = \
{'': '.'}

packages = \
['edifice', 'edifice.components', 'edifice.inspector', 'edifice.qt']

package_data = \
{'': ['*'],
 'edifice': ['icons/font-awesome/*',
             'icons/font-awesome/regular/*',
             'icons/font-awesome/solid/*']}

install_requires = \
['numpy>=1.19.4', 'qasync>=0.13.0']

setup_kwargs = {
    'name': 'pyedifice',
    'version': '0.1.2',
    'description': 'Declarative GUI framework for Python and Qt',
    'long_description': '<h3 align="center">\n<img src="https://raw.githubusercontent.com/pyedifice/pyedifice/master/docs/source/image/EdificePyramid.svg" width="200">\n</h3>\n\n<h1 align="center">Edifice: Declarative GUI framework for Python and Qt</h1>\n\nEdifice is a Python library for building declarative application user interfaces.\n\n- Modern **declarative** UI paradigm from web development.\n- **100% Python** application development, no language inter-op.\n- A **native** desktop app instead of a bundled web browser.\n- Fast iteration via **hot reloading**.\n\nThis modern declarative UI paradigm is also known as\n“[Model-View-Update](https://thomasbandt.com/model-view-update),”\nor “[The Elm Architecture](https://guide.elm-lang.org/architecture/).”\n\nEdifice uses [PySide6](https://doc.qt.io/qtforpython-6/)\nor [PyQt6](https://www.riverbankcomputing.com/static/Docs/PyQt6/introduction.html)\nas a backend. So Edifice is like\n[React](https://react.dev/), but with\nPython instead of JavaScript, and [Qt Widgets](https://doc.qt.io/qt-6/qtwidgets-index.html) instead of the HTML DOM.\n\nIf you have React experience, you\'ll find Edifice to be very easy to pick up.\nFor example, for the React `setState` function, Edifice has `set_state`, and for React\'s `this.props`,\nEdifice has `self.props`.\nAll function names use underscores instead of camel case to conform to Python standards,\nand "Component" is removed from functions like `shouldComponentUpdate` (renamed to `should_update`).\n\n<img src="https://raw.githubusercontent.com/pyedifice/pyedifice/master/examples/example_calculator.png" width=200/><img src="https://raw.githubusercontent.com/pyedifice/pyedifice/master/examples/example_harmonic_oscillator.gif" width=200/>\n\n## Getting Started\n\n* **Installation**\n  ```\n  pip install pyedifice\n  ```\n* **Source** published at https://github.com/pyedifice/pyedifice\n* **Package** published at https://pypi.org/project/pyedifice/\n* **Documentation** published at https://pyedifice.github.io\n\n## Why Edifice?\n\nThe premise of Edifice is that\nGUI designers should only need to worry about *what* is rendered on the screen,\nnot *how* the content is rendered.\nMost existing GUI libraries in Python, such as Tkinter and Qt, operate imperatively.\nTo create a dynamic application using these libraries,\nyou must not only think about what to display to the user given state changes,\nbut also how to issue the commands to achieve the desired effect.\n\nEdifice allows you to declare the GUI as a function mapping state to displayed widgets,\nleaving the how to the library.\nUser interactions update the state, and state changes update the GUI.\nEdifice makes it possible to write code like:\n\n```python\nView(layout="row")(\n    Button("Add 5", on_click=lambda:self.set_state(data=self.data + 5)),\n    *[Label(i) for i in self.data]\n)\n```\n\nand get the expected result: the values in `self.data` will be displayed, and clicking the button will\nadd *5* to the array, and this state change will automatically be reflected in the GUI.\nYou only need to specify what is to be displayed given the current state,\nand Edifice will work to ensure that\nthe displayed widgets always correspond to the internal state.\n\nEdifice is designed to make GUI applications easier for humans to reason about.\nThus, the displayed GUI always reflect the internal state,\neven if an exception occurs part way through rendering —\nin that case, the state changes are unwound,\nthe display is unchanged,\nand the exception is re-raised for the application to handle.\nYou can specify a batch of state changes in a transaction,\nso that either all changes happen or none of them happens.\nThere is no in-between state for you to worry about.\n\nDeclarative UIs are also easier for developer tools to work with.\nEdifice provides two key features to make development easier:\n\n- Dynamic reloading of changed source code. This is especially useful for tweaking the looks of your application, allowing you to test if the margin should be *10px* or *15px* instantly without closing the app, reopening it, and waiting for everything to load.\n- Component inspector. Similar to the Inspect Elements tool of a browser, the component inspector will show you all Components in your application along with the props and state, allowing you to examine the internal state of your complex component without writing a million print statements.\nSince the UI is specified as a (pure) function of state, the state you see completely describes your application,\nand you can even do things like rewinding to a previous state.\n\n\nQML is another declarative GUI framework for Qt. Edifice differs from QML in these aspects:\n- Edifice interfaces are created purely in Python, whereas QML is written using a separate language.\n- Because Edifice interfaces are built in Python code, binding the code to the declared UI is much more\nstraightforward.\n- Edifice makes it easy to create dynamic applications. It\'s easy to create, shuffle, and destroy widgets\nbecause the interface is written in Python code. QML assumes a much more static interface.\n\nAn analogy is, QML is like HTML + JavaScript, whereas Edifice is like React.js.\nWhile QML and HTML are both declarative UI frameworks,\nthey require imperative logic to add dynamism.\nEdifice and React allow fully dynamic applications to be specified declaratively.\n\n## How it works:\nAn Edifice Component encapsulates application state and defines the mapping from the state to UI in the `render` function.\nThe state of a Component is divided into **props** and **state**.\nprops are state passed to the Component in the constructor,\nwhereas state is the Component\'s own internal state.\nChanges to props and state will trigger a rerender of the Component and all its children.\nThe old and new Component trees will be compared to one another,\nand a diffing algorithm will determine which components previously existed and which ones are new\n(the algorithm behaves similarly to the React diff algorithm).\nComponents that previously existed will maintain their state, whereas their props will be updated.\nFinally, Edifice will try to ensure that the minimal update commands are issued to the UI.\nAll this logic is handled by the library, and the Components need not care about it.\n\nCurrently, Edifice uses Qt under the hood, though it could be adapated to delegate to other imperative GUI frameworks as well.\n\n## Development Tools\n\nEdifice also offers a few tools to aid in development.\n\n### Dynamic reload\nOne other advantage of declarative code is that it is easier for humans and machines to reason about.\nEdifice takes advantage of this by offering hot reloading of Components.\nWhen a file in your application is changed, the loader will reload all components in that file\nwith preserved props (since that state comes from the caller) and reset state.\nBecause rendering is abstracted away, it is simple to diff the UI trees and have the Edifice renderer figure out\nwhat to do using its normal logic.\n\nTo run your application with dynamic reload, run:\n\n```\npython -m edifice path/to/app.py RootComponent\n```\n\nThis will run `app.py` with `RootComponent` mounted as the root.\nA separate thread will listen to changes in all Python files in the directory containing `app.py` (recursing into subdirectories),\nand will reload and trigger a re-render in the main thread.\nYou can customize which directory to listen to using the `--dir` flag.\n\n\n### Component Inspector\n\nThe Edifice component inspector shows the Component tree of your application along with the props and state of each component.\n\n### set_trace\n\nPDB does not work well with PyQt applications. `edifice.set_trace` is\nequivalent to `pdb.set_trace()`,\nbut it can properly pause the PyQt event loop\nto enable use of the debugger\n(users of PySide need not worry about this).\n\n## License\nEdifice is [MIT Licensed](https://en.wikipedia.org/wiki/MIT_License).\n\nEdifice uses Qt under the hood, and both PyQt6 and PySide6 are supported. Note that PyQt6 is distributed with the *GPL* license while PySide6 is distributed\nunder the more flexible *LGPL* license.\nSee [PyQt vs PySide Licensing](https://www.pythonguis.com/faq/pyqt-vs-pyside/).\n\n## Version History / Change Log / Release Notes\n\nSee [Release Notes](https://pyedifice.github.io/versions.html)\n(source: [versions.rst](docs/source/versions.rst))\n\n\n## Contribution\n\nContributions are welcome; please send Pull Requests!\n\nWhen submitting a Pull Request, think about adding tests to [tests](tests) and\nadding a line to the **Unreleased** section of the\nchange log [versions.rst](docs/source/versions.rst).\n\n## Poetry Build System\n\nThe Poetry `pyproject.toml` specifies the package dependecies.\n\nFor development of this package, you can use the\n[`poetry shell`](https://python-poetry.org/docs/cli#shell) environment.\n\nIn this environment the tests should pass.\n\n    ./run_tests.sh\n\nBecause Edifice supports PySide6 and PyQt6 at the same time, neither\nare required by `[tool.poetry.dependencies]`. Instead they are both\noptional `[tool.poetry.group.dev.dependencies]`. A project which depends\non Edifice should also depend on either PySide6 or PyQt6.\n\nThe `requirements.txt` is generated by\n\n```\npoetry export -f requirements.txt --output requirements.txt\n```\n\nTo use the latest Edifice with a Poetry `pyproject.toml` from Github\ninstead of PyPI, see\n[Poetry git dependencies](https://python-poetry.org/docs/dependency-specification/#git-dependencies),\nfor example:\n\n```\n[tool.poetry.dependencies]\npython = ">=3.10,<3.11"\npyedifice = {git = "https://github.com/pyedifice/pyedifice.git"}\npyside6 = "6.5.1.1"\n```\n\n\n## Nix Build System\n\nThere is a [Nix Flake](https://nixos.wiki/wiki/Flakes) with\nthree development environments:\n\n1. `nix develop .#default`\n\n   Nixpkgs `pythonWithPackages` environment.\n\n   In this environment the tests should pass.\n\n       ./run_tests.sh\n\n2. `nix develop .#poetry`\n\n   Poetry environment.\n\n   In this environment the tests should pass.\n\n       poetry install --sync --all-extras --no-root\n       poetry shell\n       ./run_tests.sh\n\n   In this environment\n   [publishing to PyPI](https://python-poetry.org/docs/libraries/#publishing-to-pypi)\n   should work.\n\n3. `nix develop .#poetry2nix`\n\n   poetry2nix [`mkPoetryEnv`](https://github.com/nix-community/poetry2nix#mkpoetryenv)\n   environment with editable `edifice/` source files.\n\n   In this environment the tests should pass.\n\n       ./run_tests.sh\n\n   In this environment building the [Docs](docs) should work.\n\nThere are also Nix Flake `apps` for running the tests and the examples, see\n[Examples](https://pyedifice.github.io/examples.html) or\n\n```\nnix flake show github:pyedifice/pyedifice\n```\n',
    'author': 'David Ding',
    'author_email': 'None',
    'maintainer': 'None',
    'maintainer_email': 'None',
    'url': 'https://pyedifice.github.io',
    'package_dir': package_dir,
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'python_requires': '>=3.8,<3.12',
}


setup(**setup_kwargs)
