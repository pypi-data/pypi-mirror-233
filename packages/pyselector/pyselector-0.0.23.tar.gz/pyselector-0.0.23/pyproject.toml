[build-system]
build-backend = "hatchling.build"
requires = [
  "hatchling",
]

[project]
name = "pyselector"
description = "WIP"
readme = "README.md"
keywords = [
  "cli",
  "dmenu",
  "fzf",
  "menu",
  "rofi",
  "utility",
]
license = { file = "LICENSE.txt" }
authors = [
  { name = "haaag", email = "git.haaag@gmail.com" },
]
requires-python = ">=3.7"
dynamic = [
  "version",
]

[project.urls]
Documentation = "https://github.com/haaag/pyselector#readme"
Issues = "https://github.com/haaag/pyselector/issues"
Source = "https://github.com/haaag/pyselector"

[project.optional-dependencies]
dev = [
  "mypy==1.0.1",
  "ruff==0.0.257",
]
docs = [
  "mkdocs<2.0.0,>=1.1.2",
  "mkdocs-material<9.0.0,>=8.1.4",
  "mkdocstrings==0.20",
  "mkdocstrings-python==0.8.3",
]
test = [
  "coverage[toml]<8.0,>=6.5",
  "pytest<8.0.0,>=7.1.3",
]
[tool.hatch.version]
path = "src/pyselector/__init__.py"

[tool.hatch.envs.default.scripts]
cov = "pytest --cov-report=term-missing --cov-config=pyproject.toml --cov=pyselector --cov=tests {args} && coverage html"
cov-html = "coverage html"
no-cov = "cov --no-cov {args}"

[tool.black]
line-length = 88

[tool.pytest.ini_options]
pythonpath = "src"
testpaths = ["tests"]

[tool.coverage.run]
omit = [
  "src/pyselector/interfaces.py"
]
[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.mypy]
show_error_codes = true
show_error_context = true
show_column_numbers = true
ignore_missing_imports = true
no_strict_optional = false
exclude = ["tests", "example.py"]

[tool.ruff]
fix = false
line-length = 88
task-tags = ["HACK", "FIX", "BUG", "WIP", "TODO",]
show-source = true
show-fixes = true
target-version = "py37"
exclude = [
    ".venv",
    ".mypy_cache",
    ".pytest_cache",
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
select = [
  "A",
  "ARG",
  "B",
  "C",
  "DTZ",
  "E",
  "EM",
  "F",
  "FBT",
  "I",
  "ICN",
  "ISC",
  "N",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "Q",
  "RUF",
  "S",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
extend-select = [
    "B",    # (flake8-bugbear)
    "BLE",  # (flake8-blind-except)
    "C4",   # (flake8-comprehensions)
    # "ERA",  # (eradicate)
    "I",    # (isort)
    "ICN",  # (flake8-import-conventions)
    "INP",  # (flake8-no-pep420)
    "ISC",  # (flake8-implicit-str-concat)
    "N",    # (pep8-naming)
    "NPY",  # (numpy-specific-rules)
    "PGH",  # (pygrep-hooks)
    "PIE",  # (flake8-pie)
    "PTH",  # (flake8-use-pathlib)
    "Q",    # (flake8-quotes)
    "RET",  # (flake8-return)
    "RSE",  # (flake8-raise)
    "RUF",  # (ruff-specific-rules)
    "S",    # (flake8-bandit)
    "SIM",  # (flake8-simplify)
    "T20",  # (flake8-print)
    "TCH",  # (flake8-type-checking)
    "TID",  # (flake8-tidy-imports)
    "YTT",  # (flake8-2020)
]

[tool.ruff.isort]
force-single-line = true
order-by-type = true
required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"src/pyselector/__init__.py" = ["F401"]  # (imported but unused)
"src/pyselector/menus/rofi.py" = ["E501"]  # (line too long)
"src/pyselector/menus/dmenu.py" = ["E501"]  # (line too long)
"src/pyselector/key_manager.py" = ["E501"]  # (line too long)
"src/pyselector/helpers.py" = ["S603"]  # (line too long)
"**/*" = ["FBT001", "FBT002"]
"tests/*" = ["S101"]  # (use of assert detected)
