Metadata-Version: 2.1
Name: lamplight
Version: 0.1.0
Summary: A Pydantic wrapper around the OpenAI API.
Author: Dan Nadler
Author-email: github@thetortoise.io
Requires-Python: >=3.9,<4.0
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Dist: openai (>=0.28.1,<0.29.0)
Requires-Dist: pydantic (>=2.4.2,<3.0.0)
Requires-Dist: rich (>=13.6.0,<14.0.0)
Description-Content-Type: text/markdown

This is a simple example of how I've been making OpenAI API calls.

I've created pydantic objects to match the OpenAI objects, and then implement a couple of nice helpers on top.

Most importantly `.iterator` (and optionally an async `.aiterator`) that automatically execute function as needed, if allowed. To go along with this, the `Function` BaseModel can be created from an existing annotated callable which really streamlines the whole process..
