[tool.poetry]
name = "mesh_common"
version = "0.2.7"
description = ""
authors = ["spinecore"]
license = "MIT"
packages = [
    { include = "mesh_common" },
    { include = "tests", format = "sdist" },
]
readme = "README.md"

[tool.poetry.dependencies]
# core dependencies
python = ">=3.10,<4.0"
boto3 = "^1.26.159"
boto3-stubs = {extras = ["s3", "ssm", "secretsmanager", "dynamodb", "sqs", "lambda", "logs", "sns", "events"], version = ">=1.28.36,^1.28.36"}
httpx = "^0.24.1"
types-urllib3 = "^1.26.25.13"
types-cryptography = "^3.3.23.2"
types-python-dateutil = "^2.8.19.13"
nhs-context-logging = "^0.2.5"
nhs-aws-helpers = ">=0.3.2,^0.3.2"

[tool.setuptools.package-data]
"mesh_common" = ["py.typed"]

[tool.poetry.group.dev.dependencies]
# ci / testing dependencies
mypy = "^1.3.0"
coverage = "^7.2.7"
pytest = "^7.3.1"
pytest-asyncio = "^0.21.0"
petname = "^2.6"
ruff = "^0.0.291"
black = "^23.9.1"

[tool.poetry.group.local.dependencies]
ipython = "^8.12.2"

[tool.black]
line-length = 120
target-version = ['py310']
include = '\.pyi?$'
#extend-exclude = '''
#/(
#  # The following are specific to Black, you probably don't want those.
#  | blib2to3
#  | tests/data
#  | profiling
#)/
#'''



[tool.coverage.run]
branch = true
omit = [
    ".venv/*",
]
source = [
    "."
]


[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
    "pragma: no cover",
    "from .*",
    "import .*"
]
omit = [
    "tests/*",
]
sort = "-cover"
ignore_errors = true
precision = 2
fail_under = 40
show_missing = true

[tool.coverage.xml]
output = "reports/coverage.xml"


[tool.ruff]
select = [
    # See https://beta.ruff.rs/docs/rules/ for a full list
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "C",  # flake8-comprehensions
    "B",  # flake8-bugbear
    "Q", # flake8-quotes
    "YTT", # flake8-2020
    "RSE", # flake8-raise
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "PIE", # flake8-pie
    "EXE", # flake8-executable
    "A", # flake8-builtins
    "UP",  # pyupgrade
    "PT", # flake8-pytest-style
    "PERF", # Perflint #
    "RUF", # Ruff-specific rules
    "SIM", # flake8-simplify
]
src = ["."]
ignore = [
    "PT004",
]
exclude = [
    ".git",
    ".venv",
]
unfixable = ["SIM112"]
line-length = 120
target-version = "py310"

[tool.ruff.per-file-ignores]


[tool.pytest.ini_options]
asyncio_mode = "auto"
python_classes = "NoTestClasses"
python_files = "*_tests.py test_*.py"
norecursedirs = ".git .venv .eggs build dist .tox"

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
show_error_codes = true
check_untyped_defs = true


[tool.poetry-dynamic-versioning]
enable = false
metadata = false
vcs = "git"
style = "pep440"
format-jinja = """
    {%- if distance == 0 -%}
        {{ serialize_pep440(base, stage, revision) }}
    {%- else -%}
        {{ serialize_pep440(bump_version(base), stage, revision, dev=timestamp) }}
    {%- endif -%}
"""

[tool.poetry-dynamic-versioning.substitution]
folders = [
    { path = "./" }
]

[build-system]
requires = ["poetry>=1.2", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
