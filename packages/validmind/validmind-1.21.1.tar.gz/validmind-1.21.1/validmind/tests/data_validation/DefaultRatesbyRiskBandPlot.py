# Copyright Â© 2023 ValidMind Inc. All rights reserved.

from dataclasses import dataclass

import plotly.express as px
import plotly.graph_objects as go

from validmind.vm_models import Figure, Metric


@dataclass
class DefaultRatesbyRiskBandPlot(Metric):
    """
    **Purpose**: The Default Rates by Risk Band Plot metric is designed to measure and visualize default rates across
    different risk bands in a given dataset. This measurement is critical in evaluating the performance of credit risk
    models, allowing users to understand and compare default rates across diverse categories of risk.

    **Test Mechanism**: The test is conducted through a computed bar plot. The plot is generated by first calculating
    the count of accounts in each risk band, converting these counts into percentages by dividing by the total number
    of accounts, and then visualizing these percentages in the form of a bar plot. The bar plot thereby clearly
    indicates the percentage of total accounts associated with each risk band, providing a visual summary of default
    risk across these bands. The plot uses the 'Dark24' color sequence to ensure distinguishable colors for each risk
    band.

    **Signs of High Risk**: High risk is indicated with a high percentage of accounts associated with high-risk bands.
    The higher the percentage of accounts in these bands, the higher the exposure to default risk in the dataset. This
    could suggest potential failures in the model's ability to effectively manage or predict credit risk.

    **Strengths**: The main strengths of this metric are its simplicity and its visual impact. By graphically
    displaying the default rates, the metric provides a clear visual aid for understanding the spread of default risk
    across risk bands. The use of a bar chart provides an easy comparison between the different risk bands, helping to
    highlight any imbalances or areas of high risk. This helps to draw attention to any disproportions or anomalies in
    the data, making it easier to evaluate and compare the performance of credit risk models.

    **Limitations**: The main limitation of this metric is that it doesn't provide any insights into why certain risk
    bands have higher default rates. Additionally, it might not accurately represent the distribution of risk if some
    risk bands have significantly more accounts than others. It also doesn't consider other factors contributing to
    credit risk outside of the risk bands. Finally, the metric's reliance on visualization means that the results could
    be misinterpreted if not carefully analyzed, as graphical representations can sometimes be misleading.
    """

    name = "default_rates_by_risk_band_plot"
    required_context = ["dataset"]
    default_params = {"title": "Percentage of Total Accounts by Risk Band"}
    metadata = {
        "task_types": ["classification"],
        "tags": ["tabular_data", "visualization", "credit_risk"],
    }

    @staticmethod
    def plot_band_percentages(df, risk_band_column, title):
        # Calculate the count of accounts in each risk band
        risk_band_counts = df[risk_band_column].value_counts().sort_index()

        # Convert to percentage
        total_accounts = len(df)
        risk_band_percentages = (risk_band_counts / total_accounts) * 100

        # Use 'Dark24' color sequence for more distinguishable colors
        colors = px.colors.qualitative.Dark24[: len(risk_band_percentages)]

        # Create the bar plot
        fig = go.Figure(
            data=[
                go.Bar(
                    x=risk_band_percentages.index,
                    y=risk_band_percentages.values,
                    marker_color=colors,
                )
            ]
        )

        # Customize the plot
        fig.update_layout(
            title_text=title,
            xaxis_title="Risk Band",
            yaxis_title="Percentage of Total Accounts",
        )

        return fig, risk_band_percentages

    def run(self):
        df = self.dataset
        risk_band_column = self.params["risk_band_column"]
        title = self.params["title"]

        fig, risk_band_percentages = self.plot_band_percentages(
            df, risk_band_column, title
        )

        return self.cache_results(
            metric_value={
                "band_percentages": risk_band_percentages.to_dict(),
            },
            figures=[
                Figure(
                    for_object=self,
                    key="band_percentages",
                    figure=fig,
                )
            ],
        )
