import numpy as np
from .model import validateModel as validateModel
from _typeshed import Incomplete
from edgeiq import _constants
from typing import List, Optional, Tuple

def is_python_equal_greater_than38(): ...

SUPPORTED_FRAMEWORKS: Incomplete
DNN_SUPPORTED_FRAMEWORKS: Incomplete
CUDA_SUPPORTED_FRAMEWORKS: Incomplete
HAILO_SUPPORTED_FRAMEWORKS: str
TENSOR_RT_SUPPORTED_FRAMEWORKS: Incomplete
QAIC_SUPPORTED_FRAMEWORKS: str
TENSOR_RT_SUPPORTED_PURPOSES: Incomplete
SUPPORTED_PURPOSES: Incomplete
GLOBAL_MODEL_PATH: Incomplete

def is_existing_path(path): ...
def is_supported_purpose(purpose): ...
def is_supported_framework_type(framework): ...
def is_supported_device(device): ...
def load_model_json(model_json_path): ...
def load_labels(label_file_path: Optional[str], model_path: str) -> Optional[List[str]]: ...
def load_colors(color_file_path: Optional[str], colors_dtype, num_labels: int, model_path: str) -> np.ndarray: ...
def get_colors_dtype(purpose): ...

MODEL_CONFIG_SCHEMA: Incomplete

class ModelConfig:
    def __init__(self, model_json: dict, labels: Optional[List[str]] = ..., colors: Optional[np.ndarray] = ...) -> None: ...
    @classmethod
    def from_model_id(cls, model_id: str) -> ModelConfig: ...
    def __eq__(self, other): ...
    @property
    def id(self) -> str: ...
    @property
    def label_file(self) -> str: ...
    @property
    def colors_file(self) -> str: ...
    @property
    def config_file(self) -> str: ...
    @property
    def model_file(self) -> str: ...
    @property
    def mean(self) -> Tuple[float, float, float]: ...
    @property
    def scalefactor(self) -> float: ...
    @property
    def size(self) -> Tuple[int, int]: ...
    @property
    def purpose(self) -> str: ...
    @property
    def framework_type(self) -> str: ...
    @property
    def crop(self) -> bool: ...
    @property
    def colors_dtype(self) -> str: ...
    @property
    def labels(self) -> Optional[List[str]]: ...
    @property
    def colors(self) -> Optional[np.ndarray]: ...
    @property
    def swaprb(self) -> bool: ...
    @property
    def architecture(self) -> Optional[str]: ...
    @property
    def softmax(self) -> bool: ...
    @property
    def device(self) -> Optional[_constants.SupportedDevices]: ...
    @property
    def output_layer_names(self) -> List[str]: ...
    @property
    def hailo_quantize_input(self) -> Optional[bool]: ...
    @property
    def hailo_quantize_output(self) -> Optional[bool]: ...
    @property
    def hailo_input_format(self) -> Optional[str]: ...
    @property
    def hailo_output_format(self) -> Optional[str]: ...
    @property
    def dnn_support(self) -> bool: ...
    @property
    def dnn_cuda_support(self) -> bool: ...
    @property
    def tensor_rt_support(self) -> bool: ...
    @property
    def hailo_support(self) -> bool: ...
    @property
    def qaic_support(self) -> bool: ...
    @property
    def batch_size(self) -> int: ...
