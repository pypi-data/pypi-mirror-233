# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_dirs.ipynb.

# %% auto 0
__all__ = ['ROOT_DIR', 'NBKS_DIR', 'EXPL_DIR', 'DATA_DIR', 'RSLT_DIR', 'FIGS_DIR', 'Dir', 'RelDir']

# %% ../nbs/03_dirs.ipynb 4
import os, copy
from dataclasses import dataclass, field, InitVar

# %% ../nbs/03_dirs.ipynb 6
from .cons import (DIRTMPL, DROOT, DIR, INPLACE, VERBOSE)
from .atyp import (StrTmpl, IterStr, StrQ)
from .utils import (pathabrv, epath)

# %% ../nbs/03_dirs.ipynb 8
@dataclass
class Dir:
    path: StrQ = field(default=DROOT, repr=False)
    abrv: InitVar[str]  = field(default=None, repr=False)
    desc: InitVar[StrTmpl] = field(default=None, repr=False)

    def __post_init__(self, abrv: str, desc: str):
        self.abrv = abrv.upper() if abrv else pathabrv(self.path)
        self.desc = desc or DIRTMPL.substitute(path=self.path, abrv=self.abrv, attr=self.attr)

    @property
    def exists(self) -> bool: 
        return os.path.exists(self.full)
    
    @property
    def full(self) -> str:
        '''The absolute and user-expanded path to the directory'''
        return epath(self.path)
    
    @property
    def attr(self) -> str:
        '''The attribute name of this path'''
        return f'{self.abrv.upper()}_{DIR}'
    
    def make(self, **kwargs) -> 'Dir': 
        verb = f'{self.abrv}:\n'
        verb += f'\t- path\t= {self.full}\n'
        verb += f'\t- desc\t= {self.desc}\n'
        if not self.exists:            
            os.makedirs(self.full)
            verb += '\t- made\t= {True}'
        if kwargs.get(VERBOSE, True): print(verb)
        return self
    
    @staticmethod
    def epath(*paths: IterStr) -> str: 
        return epath(*paths)
    
    def __str__(self) -> str: 
        return self.full
    
    __fspath__ = __str__
    
    def __repr__(self) -> str:
        return f'{type(self).__name__}({self.full})'
    
    def __iter__(self): 
        return iter(self.__dict__.items())
    
    def copy(self, **kwargs) -> 'Dir': 
        return copy.copy(self).update(**kwargs)
    
    def deepcopy(self, **kwargs) -> 'Dir': 
        return copy.deepcopy(self).update(**kwargs)
    
    def update(self, **kwargs) -> 'Dir':
        inplace = kwargs.pop(INPLACE, True)
        if not inplace: 
            return self.copy(**kwargs)
        cur = self.__dict__
        for k, v in kwargs.items():
            if k in cur: 
                setattr(self, k, v)
        return self

# %% ../nbs/03_dirs.ipynb 10
@dataclass
class RelDir(Dir):
    root: StrQ = field(default_factory=Dir, repr=False)
    path: StrQ = field(default_factory=Dir, repr=False)
    abrv: InitVar[str]  = field(default=None, repr=False)
    desc: InitVar[IterStr] = field(default=None, repr=False)

    def __init__(self, path: StrQ = DROOT, root: StrQ = DROOT,  *args, **kwargs):
        super().__init__(path, *args, **kwargs)
        self.root = root

    def __post_init__(self, abrv: str, desc: str):
        super().__post_init__(abrv, desc)
    
    @property
    def full(self) -> str:
        '''The absolute and user-expanded path to the directory'''
        return epath(self.root, self.path)
    
    def __repr__(self) -> str:        
        return super().__repr__()

# %% ../nbs/03_dirs.ipynb 12
ROOT_DIR = RelDir('..',        DROOT,    'ROOT', 'The nbdev project\'s root directory.')
NBKS_DIR = RelDir('nbs/',      ROOT_DIR, 'NBKS', 'The directory containing all nbdev notebooks.')
EXPL_DIR = RelDir('examples/', ROOT_DIR, 'EXPL', 'The directory containing all example notebooks.')
DATA_DIR = RelDir('data/',     ROOT_DIR, 'DATA', 'The default directory for data files.')
RSLT_DIR = RelDir('results/',  ROOT_DIR, 'RSLT', 'The default directory for results.')
FIGS_DIR = RelDir('figures/',  ROOT_DIR, 'FIGS', 'The default directory for figures.')
