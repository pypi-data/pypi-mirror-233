# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from cybershuttle_sdk.execution import experiment_service_pb2 as execution_dot_experiment__service__pb2


class ExecutionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerExperiment = channel.unary_unary(
                '/org.apache.airavata.api.execution.ExecutionService/registerExperiment',
                request_serializer=execution_dot_experiment__service__pb2.ExperimentRegisterRequest.SerializeToString,
                response_deserializer=execution_dot_experiment__service__pb2.ExperimentRegisterResponse.FromString,
                )
        self.launchExperiment = channel.unary_unary(
                '/org.apache.airavata.api.execution.ExecutionService/launchExperiment',
                request_serializer=execution_dot_experiment__service__pb2.ExperimentLaunchRequest.SerializeToString,
                response_deserializer=execution_dot_experiment__service__pb2.ExperimentLaunchResponse.FromString,
                )
        self.updateExperiment = channel.unary_unary(
                '/org.apache.airavata.api.execution.ExecutionService/updateExperiment',
                request_serializer=execution_dot_experiment__service__pb2.ExperimentUpdateRequest.SerializeToString,
                response_deserializer=execution_dot_experiment__service__pb2.ExperimentUpdateResponse.FromString,
                )
        self.fetchExperiment = channel.unary_unary(
                '/org.apache.airavata.api.execution.ExecutionService/fetchExperiment',
                request_serializer=execution_dot_experiment__service__pb2.ExperimentFetchRequest.SerializeToString,
                response_deserializer=execution_dot_experiment__service__pb2.ExperimentFetchResponse.FromString,
                )


class ExecutionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def registerExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def launchExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def fetchExperiment(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ExecutionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.registerExperiment,
                    request_deserializer=execution_dot_experiment__service__pb2.ExperimentRegisterRequest.FromString,
                    response_serializer=execution_dot_experiment__service__pb2.ExperimentRegisterResponse.SerializeToString,
            ),
            'launchExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.launchExperiment,
                    request_deserializer=execution_dot_experiment__service__pb2.ExperimentLaunchRequest.FromString,
                    response_serializer=execution_dot_experiment__service__pb2.ExperimentLaunchResponse.SerializeToString,
            ),
            'updateExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.updateExperiment,
                    request_deserializer=execution_dot_experiment__service__pb2.ExperimentUpdateRequest.FromString,
                    response_serializer=execution_dot_experiment__service__pb2.ExperimentUpdateResponse.SerializeToString,
            ),
            'fetchExperiment': grpc.unary_unary_rpc_method_handler(
                    servicer.fetchExperiment,
                    request_deserializer=execution_dot_experiment__service__pb2.ExperimentFetchRequest.FromString,
                    response_serializer=execution_dot_experiment__service__pb2.ExperimentFetchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.apache.airavata.api.execution.ExecutionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ExecutionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def registerExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.api.execution.ExecutionService/registerExperiment',
            execution_dot_experiment__service__pb2.ExperimentRegisterRequest.SerializeToString,
            execution_dot_experiment__service__pb2.ExperimentRegisterResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def launchExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.api.execution.ExecutionService/launchExperiment',
            execution_dot_experiment__service__pb2.ExperimentLaunchRequest.SerializeToString,
            execution_dot_experiment__service__pb2.ExperimentLaunchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updateExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.api.execution.ExecutionService/updateExperiment',
            execution_dot_experiment__service__pb2.ExperimentUpdateRequest.SerializeToString,
            execution_dot_experiment__service__pb2.ExperimentUpdateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def fetchExperiment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.apache.airavata.api.execution.ExecutionService/fetchExperiment',
            execution_dot_experiment__service__pb2.ExperimentFetchRequest.SerializeToString,
            execution_dot_experiment__service__pb2.ExperimentFetchResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
