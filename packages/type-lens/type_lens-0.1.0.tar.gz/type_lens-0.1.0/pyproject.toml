[project]
authors = [
    {name = "Cody Fincher", email = "cody.fincher@gmail.com"},
    {name = "Janek Nouvertné", email = "provinzkraut@posteo.de"},
    {name = "Jacob Coffee", email = "jacob@z7x.org"},
    {name = "Peter Schutt", email = "peter.github@proton.me"},
]
maintainers = [
    {name = "Cody Fincher", email = "cody.fincher@gmail.com"},
    {name = "Janek Nouvertné", email = "provinzkraut@posteo.de"},
    {name = "Jacob Coffee", email = "jacob@z7x.org"},
    {name = "Peter Schutt", email = "peter.github@proton.me"},
]
keywords = [
    "programming",
    "developer",
    "tools",
    "jolt-org",
    "type-lens",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Web Environment",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Intended Audience :: Developers",
]
name = "type-lens"
version = "0.1.0"
description = "type-lens is a Python template project designed to simplify the setup of a new project."
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8,<4.0"

[project.urls]
"Issue Tracker" = "https://github.com/jolt-org/type-lens/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc"
Changelog = "https://github.com/jolt-org/type-lens/releases/"
Discord = "https://discord.gg/XpFNTjjtTK"
Blog = "https://blog.jolt.rs"
homepage = "https://jolt.rs/"
repository = "https://github.com/jolt-org/type-lens"
documentation = "https://docs.type-lens.jolt.rs/"

[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[tool.pdm.scripts]
lint = "pre-commit run --all-files"
test = "pytest"
docs-serve = "sphinx-autobuild docs docs/_build/ -j auto --watch type_lens --watch docs --watch tests --port 8002"
ci = {composite = ["lint", "test"]}

[tool.pdm.dev-dependencies]
docs = [
  "sphinx>=7.1.2",
  "sphinx-autobuild>=2021.3.14",
  "sphinx-copybutton>=0.5.2",
  "shibuya>=2023.9.3",
  "sphinx-click>=5.0.1",
  "sphinx-toolbox>=3.5.0",
  "blacken-docs>=1.16.0",
  "sphinx-design>=0.5.0",
]
lint = [
    "black>=23.9.1",
    "ruff>=0.0.289",
    "codespell>=2.2.5",
    "mypy>=1.5.1",
    "pre-commit>=3.4.0",
    "blacken-docs>=1.16.0",
    "shellcheck-py>=0.9.0.5",
    "pyright>=1.1.327",
    "sourcery>=1.9.0",
]
test = [
    "pytest>=7.4.2",
    "pytest-asyncio>=0.21.1",
    "pytest-cov>=4.1.0",
]

[tool.black]
line-length = 120
include = '\.pyi?$'

[tool.codespell]
ignore-words-list = "te"
skip = 'pdm.lock'

[tool.coverage.run]
omit = ["*/tests/*"]

[tool.coverage.report]
exclude_lines = [
    'pragma: no cover',
    'if TYPE_CHECKING:',
    'raise NotImplementedError',
]

[tool.pytest.ini_options]
# addopts = "--ignore=examples"
asyncio_mode = "auto"

[tool.pyright]
include = ["type_lens"]
exclude = ["tools"]

[tool.slotscheck]
strict-imports = false

[tool.mypy]
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unreachable = true
warn_return_any = true
strict = true
disallow_untyped_decorators = true
disallow_any_generics = true
implicit_reexport = false
show_error_codes = true

[tool.ruff]
select = ["ALL"]
ignore = [
    "A003", # flake8-builtins - class attribute {name} is shadowing a python builtin
    "ANN101", # flake8-annotations - missing type annotation for self in method
    "ANN102", # flake8-annotations - missing type annotation for cls in classmethod
    "ANN401", # flake8-annotations - dynamically typed expressions (typing.Any) are disallowed
    "B010", # flake8-bugbear - do not call setattr with a constant attribute value
    "D100", # pydocstyle - missing docstring in public module
    "D101", # pydocstyle - missing docstring in public class
    "D102", # pydocstyle - missing docstring in public method
    "D103", # pydocstyle - missing docstring in public function
    "D104", # pydocstyle - missing docstring in public package
    "D105", # pydocstyle - missing docstring in magic method
    "D106", # pydocstyle - missing docstring in public nested class
    "D107", # pydocstyle - missing docstring in __init__
    "D202", # pydocstyle - no blank lines allowed after function docstring
    "D205", # pydocstyle - 1 blank line required between summary line and description
    "D415", # pydocstyle - first line should end with a period, question mark, or exclamation point
    "E501", # pycodestyle line too long, handled by black
    "PLW2901"  # pylint - for loop variable overwritten by assignment target
]
line-length = 120
src = ["type_lens", "tests", "docs/examples"]
target-version = "py38"

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 12

[tool.ruff.pep8-naming]
classmethod-decorators = [
    "classmethod",
]

[tool.ruff.isort]
known-first-party = ["type_lens", "tests", "examples"]

[tool.ruff.per-file-ignores]
"tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "PTH",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TCH",
    "TRY",
]
"docs/examples/tests/**/*.*" = [
    "A",
    "ARG",
    "B",
    "BLE",
    "C901",
    "D",
    "DTZ",
    "EM",
    "FBT",
    "G",
    "N",
    "PGH",
    "PIE",
    "PLR",
    "PLW",
    "PTH",
    "RSE",
    "S",
    "S101",
    "SIM",
    "TCH",
    "TRY",
]
"docs/**/*.*" = ["S", "B", "DTZ", "A", "TCH", "ERA", "D", "RET", "INP", "ARG", "TD", "FIX"]
"tools/**/*.*" = ["D", "ARG", "EM", "TRY", "G", "FBT", "ANN"]
