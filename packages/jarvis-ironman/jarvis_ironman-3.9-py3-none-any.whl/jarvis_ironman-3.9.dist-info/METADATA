Metadata-Version: 2.1
Name: jarvis-ironman
Version: 3.9
Summary: Voice-Activated Natural Language UI
Author-email: Vignesh Rao <svignesh1793@gmail.com>
License: MIT License
        
        Copyright (c) 2020 Vignesh Rao
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: API, https://jarvis.vigneshrao.com
Project-URL: Health, https://health.jarvis.services
Project-URL: Homepage, https://github.com/thevickypedia/Jarvis
Project-URL: Docs, https://jarvis-docs.vigneshrao.com
Project-URL: Demo, https://vigneshrao.com/Jarvis/Jarvis_Demo.mp4
Project-URL: Source, https://github.com/thevickypedia/Jarvis
Project-URL: Bug Tracker, https://github.com/thevickypedia/Jarvis/issues
Project-URL: Release Notes, https://github.com/thevickypedia/Jarvis/blob/master/release_notes.rst
Keywords: python,home-automation,natural-language-processing,text-to-speech,speech-recognition,jarvis,hotword-detection,virtual-assistant
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Information Technology
Classifier: Operating System :: MacOS :: MacOS X
Classifier: Operating System :: Microsoft :: Windows :: Windows 10
Classifier: Operating System :: POSIX :: Linux
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Classifier: Topic :: Multimedia :: Sound/Audio :: Speech
Classifier: Topic :: Scientific/Engineering :: Human Machine Interfaces
Classifier: Topic :: Scientific/Engineering :: Artificial Intelligence
Classifier: Topic :: Home Automation
Classifier: Topic :: Scientific/Engineering :: Image Recognition
Classifier: Topic :: System :: Hardware :: Universal Serial Bus (USB) :: Wireless Controller
Classifier: Topic :: Multimedia :: Sound/Audio :: Conversion
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Classifier: Topic :: System :: Hardware :: Hardware Drivers
Classifier: Topic :: System :: Hardware :: Symmetric Multi-processing
Classifier: Topic :: System :: Hardware :: Universal Serial Bus (USB) :: Human Interface Device (HID)
Classifier: Framework :: FastAPI
Classifier: Framework :: Flake8
Classifier: Framework :: AsyncIO
Classifier: Framework :: Sphinx
Classifier: Framework :: aiohttp
Classifier: Natural Language :: English
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: SpeechRecognition ==3.8.1
Requires-Dist: wave ==0.0.2
Requires-Dist: wikipedia ==1.4.0
Requires-Dist: newsapi-python ==0.2.7
Requires-Dist: pyrh ==2.0
Requires-Dist: pytz ==2023.3.post1
Requires-Dist: timezonefinder ==6.2.0
Requires-Dist: pyicloud ==1.0.0
Requires-Dist: geopy ==2.4.0
Requires-Dist: PyYAML ==6.0.1
Requires-Dist: axju-jokes ==1.0.3
Requires-Dist: inflect ==7.0.0
Requires-Dist: pywebostv ==0.8.9
Requires-Dist: speedtest-cli ==2.1.3
Requires-Dist: holidays ==0.33
Requires-Dist: randfacts ==0.20.2
Requires-Dist: openai ==0.28.1
Requires-Dist: fastapi ==0.103.2
Requires-Dist: uvicorn ==0.23.2
Requires-Dist: aiofiles ==23.2.1
Requires-Dist: python-multipart ==0.0.6
Requires-Dist: pydantic ==2.4.2
Requires-Dist: pydantic-settings ==2.0.3
Requires-Dist: icalendar ==5.0.10
Requires-Dist: Jinja2 ==3.1.2
Requires-Dist: certifi ==2023.7.22
Requires-Dist: googlehomepush ==0.1.0
Requires-Dist: PyChromecast ==2.3.0
Requires-Dist: psutil ==5.9.5
Requires-Dist: pytest ==7.4.2
Requires-Dist: bs4 ==0.0.1
Requires-Dist: Pillow ==10.0.1
Requires-Dist: packaging ==23.2
Requires-Dist: numpy ==1.26.0
Requires-Dist: SoundFile ==0.12.1
Requires-Dist: deepdiff ==6.5.0
Requires-Dist: pymyq ==3.1.6
Requires-Dist: docker ==6.1.3
Requires-Dist: websockets ==11.0.3
Requires-Dist: PyJWT ==2.8.0
Requires-Dist: webull ==0.6.1
Requires-Dist: matplotlib ==3.8.0
Requires-Dist: lxml ==4.9.3
Requires-Dist: aiohttp ==3.8.5
Requires-Dist: python-dateutil ==2.8.2
Requires-Dist: requests ==2.31.0
Requires-Dist: sounddevice ==0.4.6
Requires-Dist: gmail-connector
Requires-Dist: vpn-server
Requires-Dist: pycontrols
Requires-Dist: py3-tts
Provides-Extra: dev
Requires-Dist: sphinx ==5.1.1 ; extra == 'dev'
Requires-Dist: pre-commit ; extra == 'dev'
Requires-Dist: recommonmark ; extra == 'dev'
Requires-Dist: pytest ; extra == 'dev'

<p align="center" style="text-align: center">
  <img src="https://vigneshrao.com/Jarvis/logo.png" width="371px" height="350px">
</p>
<h2 align="center">Voice-Activated Natural Language UI</h2>

[![made-with-python](https://img.shields.io/badge/Made%20with-Python-blue?style=for-the-badge&logo=Python)](https://python.org)

![Python](https://img.shields.io/badge/python-3.8%20%7C%203.9%20%7C%203.10%20%7C%203.11-orange)
[![Pypi-downloads](https://img.shields.io/pypi/dm/jarvis-ironman)](https://pypi.org/project/jarvis-ironman)

**Platform Supported**

![Platform](https://img.shields.io/badge/Platform-Linux|MacOS|Windows-1f425f.svg)

**Language Stats**

![Language count](https://img.shields.io/github/languages/count/thevickypedia/Jarvis)
![Code coverage](https://img.shields.io/github/languages/top/thevickypedia/Jarvis)

**Repo Stats**

[![GitHub Repo stars](https://img.shields.io/github/stars/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)
[![GitHub Repo forks](https://img.shields.io/github/forks/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)
[![GitHub Repo watchers](https://img.shields.io/github/watchers/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)

[![GitHub](https://img.shields.io/github/license/thevickypedia/Jarvis)](https://github.com/thevickypedia/Jarvis/blob/master/LICENSE)
[![GitHub repo size](https://img.shields.io/github/repo-size/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)
[![GitHub code size](https://img.shields.io/github/languages/code-size/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)

[![GitHub Repo issues](https://img.shields.io/github/issues-closed-raw/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)
[![GitHub Repo issues](https://img.shields.io/github/issues-raw/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)
[![GitHub Repo pr](https://img.shields.io/github/issues-pr-closed-raw/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)
[![GitHub Repo pr](https://img.shields.io/github/issues-pr-raw/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)

**Code Stats**

![Modules](https://img.shields.io/github/search/thevickypedia/Jarvis/module)
![Python](https://img.shields.io/github/search/thevickypedia/Jarvis/.py)
![Threads](https://img.shields.io/github/search/thevickypedia/Jarvis/thread)
![Listener](https://img.shields.io/github/search/thevickypedia/Jarvis/listener)
![Speaker](https://img.shields.io/github/search/thevickypedia/Jarvis/speaker)
![Bash](https://img.shields.io/github/search/thevickypedia/Jarvis/.sh)
![AppleScript](https://img.shields.io/github/search/thevickypedia/Jarvis/.scpt)
![Make](https://img.shields.io/github/search/thevickypedia/Jarvis/Makefile)

**Deployments**

[![pages-build-deployment](https://github.com/thevickypedia/Jarvis/actions/workflows/pages/pages-build-deployment/badge.svg)](https://github.com/thevickypedia/Jarvis/actions/workflows/pages/pages-build-deployment)
[![pypi](https://github.com/thevickypedia/Jarvis/actions/workflows/python-publish.yml/badge.svg)](https://github.com/thevickypedia/Jarvis/actions/workflows/python-publish.yml)

[![PyPI version shields.io](https://img.shields.io/pypi/v/jarvis-ironman)](https://pypi.org/project/jarvis-ironman)
[![Pypi-format](https://img.shields.io/pypi/format/jarvis-ironman)](https://pypi.org/project/jarvis-ironman/#files)
[![Pypi-status](https://img.shields.io/pypi/status/jarvis-ironman)](https://pypi.org/project/jarvis-ironman)
[![sourcerank](https://img.shields.io/librariesio/sourcerank/pypi/jarvis-ironman)](https://libraries.io/pypi/jarvis-ironman)

**Activity**

[![GitHub Repo created](https://img.shields.io/date/1599432310)](https://api.github.com/repos/thevickypedia/Jarvis)
[![GitHub commit activity](https://img.shields.io/github/commit-activity/y/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)
[![GitHub last commit](https://img.shields.io/github/last-commit/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)
[![GitHub last release](https://img.shields.io/github/release-date/thevickypedia/Jarvis)](https://api.github.com/repos/thevickypedia/Jarvis)

**Development and Maintenance**

[![Active Development](https://img.shields.io/badge/Development%20Level-Actively%20Developed-success.svg)](https://github.com/thevickypedia/Jarvis)
[![Actively Maintained](https://img.shields.io/badge/Maintenance%20Level-Actively%20Maintained-success.svg)](https://github.com/thevickypedia/Jarvis)
[![Maintainer](https://img.shields.io/badge/Maintained%20By-Vignesh%20Sivanandha%20Rao-blue.svg)](https://vigneshrao.com/)

**Reach Out**

[//]: # ([![StackOverflow]&#40;https://img.shields.io/stackexchange/stackoverflow/r/13691532&#41;]&#40;https://stackoverflow.com/users/13691532/vignesh-rao&#41;)
[![ askme ](https://img.shields.io/badge/SELECT%20*%20FROM-questions-1abc9c.svg)](https://vigneshrao.com/contact)

## Kick off

> :bulb: Using a dedicated [virtual environment](https://docs.python.org/3/tutorial/venv.html) and an IDE like 
> [PyCharm](https://www.jetbrains.com/pycharm/) is highly recommended.

**Install**
```shell
python -m pip install jarvis-ironman
```

**Initiate**
```python
import jarvis


if __name__ == '__main__':
    jarvis.start()
```

## Prerequisites
   - **MacOS** <br> _Tested on **macOS High Sierra, Mojave, Catalina, Big Sur, Monterey and Ventura**_
     - `System Preferences` → `Security & Privacy` → `Privacy`
     - Click `+` sign and add the preferred `IDE` and `Terminal` in the following sections in left pane.
       - `Microphone` - **Required** to listen and respond.
       - `Accessibility` - **Required** to use key combinations for brightness and volume controls.
       - `Camera` - **[Optional]** Required only during face recognition/detection.
       - `Automation` - **Required** to control `System Events` and other apps like Outlook and Calendar.
       - `Files and Folders` **[OR]** `Full Disk Access` - **Required** for all `FileIO` operations.

   - **Linux** <br> _Tested on **Ubuntu 22.04 LTS**_
     - Store the host machine's password as the env var: `ROOT_PASSWORD`
     - Unlike macOS and Windows, `Ubuntu` does not have app specific permissions.

   - **Windows** <br> _Tested on **Windows 10**_
     - `Settings` → `Privacy`
       - `Microphone` - **Required** to listen and respond.
       - `Camera` - **[Optional]** Required only during face recognition/detection.
       - Unlike `macOS`, `Windows` pops a confirmation window to **Allow** or **Deny** access to files and folders.
     - Install [Anaconda](https://docs.conda.io/projects/conda/en/latest/user-guide/install/) or [Miniconda](https://docs.conda.io/en/latest/miniconda.html#windows-installers), [VisualStudio C++ BuildTools](https://visualstudio.microsoft.com/visual-cpp-build-tools/), and [Git](https://git-scm.com/download/win/)
     - Make sure C++ build tools are installed completely and restart
     - Add anaconda/miniconda scripts location to `PATH` in Environment Variables

## Test peripherals
**Camera**
```python
from jarvis.modules.camera import camera


if __name__ == '__main__':
    cam_object = camera.Camera()
    print(cam_object.get_index())  # Get index id of each camera
    print(cam_object.list_cameras())  # List all connected cameras
```

**Text to Speech**
```python
from jarvis.modules.speaker import speak


if __name__ == '__main__':
    speak_object = speak.Speaker()
    speak_object.run()
    print(list(speak_object.get_all_voices()))
```

**Speech to Text**
```python
import asyncio

from jarvis.modules.microphone import recognizer


if __name__ == '__main__':
    asyncio.run(recognizer.main())
```

## ENV Variables
Environment variables are loaded from a `.env` file and validated using `pydantic`

<details>
<summary><strong>More on Environment variables</strong></summary>

- **ROOT_PASSWORD** - System password to get the system vitals and run other `sudo` commands. (_mandatory for `Linux`_)
- **NAME** - Name which Jarvis should address the user by. Defaults to `Vignesh`
- **TITLE** - Title which Jarvis should address the user by. Defaults to `sir`
- **LIMITED** - Boolean flag to run only the main version of `Jarvis` skipping background processes. Defaults to `False` (_enforced based on the number of CPU cores_)
- **PLOT_MIC** - Boolean value to show microphone usage in realtime. Defaults to `True`

### Audio
- **WAKE_WORDS** - List of wake words to initiate Jarvis. Defaults to `['jarvis']` (Defaults to `['alexa']` in legacy macOS)<br>
:warning: Jarvis has limitations on the wake words as it relies on ML libraries for wake word detection.

- **VOICE_NAME** - Name of the voice supported by the OperatingSystem. Defaults to the author's favorite.
- **SPEECH_RATE** - Speed/rate at which the text should be spoken. Defaults to the value from `pyttsx3` module. Typically `200`

    <details>
    <summary><strong><i>To add more voices</i></strong></summary>

    **macOS**:
    >   - System Preferences → Accessibility → Spoken Content → System voice → Manage Voices...

    **Windows**:
    >   - Settings → Time & Language → Speech → Manage voices → Add voices

    </details>

- **SENSITIVITY** - Hot word detection sensitivity. Allowed range: [0-1] Defaults to `0.5`
- **LISTENER_TIMEOUT** - Timeout in seconds until which the listener should wait for speech. Defaults to `3`
- **LISTENER_PHRASE_LIMIT** - Timeout in seconds until which the listener will remain active. Defaults to `None`
- **RECOGNIZER_SETTINGS** - A JSON object with customized speech recognition settings.

    <details>
    <summary><strong><i>Custom settings for speech recognition</i></strong></summary>

    These are customized according to the author's voice pitch.
    Please use [recognizer.py](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/modules/microphone/recognizer.py) to figure out the suitable values on a trial and error basis.

    Sample settings (formatted as JSON object)
    <br>
    `RECOGNIZER_SETTINGS`: `'{"energy_threshold": 1100, "dynamic_energy_threshold": false, "pause_threshold": 2, "phrase_threshold": 0.1, "non_speaking_duration": 2}'`

    **Description**
    - `energy_threshold`: Minimum audio energy to consider for recording. Greater the value, louder the voice should be.
    - `dynamic_energy_threshold`: Change considerable audio energy threshold dynamically.
    - `pause_threshold`: Seconds of non-speaking audio before a phrase is considered complete.
    - `phrase_threshold`: Minimum seconds of speaking audio before it can be considered a phrase - values below this are ignored. This helps to filter out clicks and pops.
    - `non_speaking_duration`: Seconds of non-speaking audio to keep on both sides of the recording.

    </details>

---

### Peripherals
- **CAMERA_INDEX** - Camera index that has to be used. Run [camera.py](https://github.com/thevickypedia/Jarvis/tree/master/jarvis/modules/camera/camera.py) to get the index value of each camera.
- **SPEAKER_INDEX** - Speaker index that has to be used. Run [peripherals.py](https://github.com/thevickypedia/Jarvis/tree/master/jarvis/modules/peripherals.py) to get the index value of each speaker.
- **MICROPHONE_INDEX** - Microphone index that has to be used. Run [peripherals.py](https://github.com/thevickypedia/Jarvis/tree/master/jarvis/modules/peripherals.py) to get the index value of each microphone.

### Logging
- **DEBUG** - Boolean flag to enable debug level for logging. Defaults to `False`
- **LOG_RETENTION** - Number of days to store the logs. Defaults to `10`

### Units
- **DISTANCE_UNIT** - Unit in which speed/distance should be measured. Defaults to `miles`
- **TEMPERATURE_UNIT** - Unit in which temperature should be measured. Defaults to `fahrenheit`

### Features
- **GIT_USER** - GitHub Username
- **GIT_PASS** - GitHub Token
- **BIRTHDAY** - Birth date in the format DD-MM - Example: `24-April`
- **WEATHER_API** - API Key from [openweathermap](https://openweathermap.org/) 
- **NEWS_API** - API Key from [newsapi](https://newsapi.org/docs/client-libraries/python)
- **MAPS_API** - API Key for maps from [Google](https://developers.google.com/maps/documentation/maps-static/get-api-key)
<br><br>
- **OPENAI_API** - API Key from [openai](https://platform.openai.com/account/api-keys)
- **OPENAI_MODEL** - GPT model to use. Defaults to `gpt-3.5-turbo`
- **OPENAI_TIMEOUT** - Number of seconds to wait for a response from GPT.
- **OPENAI_REUSE_THRESHOLD** - This is the threshold for sequence matching repeated requests. Defaults to `None`
> Setting the `OPENAI_REUSE_THRESHOLD` (**range:** `0.5` to `0.9`) will try to avoid hitting OpenAI API more frequently 
> for repeated identical requests.<br>
> This threshold is the `ratio` of acceptable result for `SequenceMatching` between a new request and 
> historically identical request.

**[Email/SMS notifications](https://github.com/thevickypedia/gmail-connector)**
- **GMAIL_USER** - Gmail account username to send and read emails.
- **GMAIL_PASS** - Gmail account password to send and read emails.
- **OPEN_GMAIL_USER** - Alternate gmail account username to send an SMS. (Defaults to `GMAIL_USER`)
- **OPEN_GMAIL_PASS** - Alternate gmail account password to send an SMS. (Defaults to `GMAIL_PASS`)
- **RECIPIENT** - Email address to which the emails from jarvis have to be received.

**iOS integrations**
- **ICLOUD_USER** - iCloud account username/email.
- **ICLOUD_PASS** - iCloud account password.
- **ICLOUD_RECOVERY** - Recovery phone number to activate lost mode on a target device - Example: `+11234567890`
- **PHONE_NUMBER** - To send SMS from Jarvis - Example: `+11234567890`

**Calendar/Meeting integrations**
- **ICS_URL** - Shared calendar URL to get meetings information from. Should end with `.ics`
- **MUTE_FOR_MEETINGS** - Boolean value to disable the listener during meetings. Defaults to `False`
- **EVENT_APP** - To read events from `outlook` or `calendar` application in `macOS`. Defaults to `calendar` <br>
:bulb: &nbsp; When `calender` is used, the name of the _calendar_ within the `Calendar.app` should be **Jarvis** <br>

**Background scans [Defaults to 1 hour]**
- **SYNC_MEETINGS** - Interval in seconds to generate ``meetings`` information using an `ics` URL.
- **SYNC_EVENTS** - Interval in seconds to generate ``events`` information using `calendar` or `outlook` application.

**Scheduled**
- **WEATHER_ALERT** - Time (in 12h `%I:%M %p` format) when the weather alert should be fired - Example: `09:00 AM`
  - **WEATHER_ALERT_MIN** - Degrees below which alert has to be fired.
  - **WEATHER_ALERT_MAX** - Degrees above which alert has to be fired.
  > Alerts in SMS and Email if temperature is higher than `WEATHER_ALERT_MAX` or lower than `WEATHER_ALERT_MIN` or severe weather warnings.<br>
  > This feature can also be enabled from `automation.yaml` by using the keyword `weather` in phrase for the `task`
- **CRONTAB** - Runs external tasks using cron expressions. Needs to be stored as env var.
  <details>
  <summary><strong><i>Sample value</i></strong></summary>

  ```yaml
  [
    "0 0 * * 1-5/2 find /var/log -delete",
    "0 5 * * 1 tar -zcf /var/backups/home.tgz /home/"
  ]
  ```
  </details>

**[Wi-Fi Controls](https://github.com/thevickypedia/pywifi-controls)**
- **WIFI_SSID** - SSID of the wireless connection.
- **WIFI_PASSWORD** - Password for the wireless connection.
- **CONNECTION_RETRY** - Frequency in seconds to check for an active internet connection. Defaults to 10 seconds.

**[VPNServer](https://github.com/thevickypedia/vpn-server) integration**
- **VPN_USERNAME** - Username to create vpn-server. Defaults to profile username.
- **VPN_PASSWORD** - Password to authenticate vpn-server. Defaults to profile password.
- **VPN_KEY_PAIR** - Name of the PEM file and key pair to spin up the ec2 instance.
- **VPN_HOSTED_ZONE** - Domain name for the hosted zone.
- **VPN_SUBDOMAIN** - Alias record name to access VPN server.
- **VPN_INFO_FILE** - JSON file for VPN information to be stored.
- **VPN_SECURITY_GROUP** - Name of the security group to be created in AWS.

**[Car Controls](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/modules/car)** - Applies only for JLR vehicles subscribed to `InControl` application.
- **CAR_EMAIL** - Email address to log in to InControl API.
- **CAR_PASS** - Password to authenticate InControl API.
- **CAR_PIN** - InControl PIN.

**[Garage Controls](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/modules/myq/myq.py)** - Applies only for garages using [MyQ garage controller](https://www.myq.com/products/smart-garage-control).
- **MYQ_USERNAME** - Email address to log in to MyQ API.
- **MYQ_PASSWORD** - Password to authenticate MyQ API.

**[Telegram Bot](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/executors/telegram.py) integration**
- **BOT_TOKEN** - Telegram BOT token.
- **BOT_CHAT_IDS** - List of userID/chatID to authorize.
- **BOT_USERS** - List of usernames to authorize.

**[OS Agnostic Voice Model](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/modules/audio/speech_synthesis.py)**
- **SPEECH_SYNTHESIS_TIMEOUT** - Timeout to connect to the docker container that processes text to speech requests.
- **SPEECH_SYNTHESIS_VOICE** - Voice for the speech synthesis model. Defaults to author's favorite.
- **SPEECH_SYNTHESIS_QUALITY** - Quality of speech synthesis conversion. Defaults to `medium`. <br>
    <details>
    <summary><strong><i>To enable independent speech-synthesis</i></strong></summary>

    ```shell
    docker run \
        -it \
        -p 5002:5002 \
        -e "HOME=${HOME}" \
        -v "$HOME:${HOME}" \
        -v /usr/share/ca-certificates:/usr/share/ca-certificates \
        -v /etc/ssl/certs:/etc/ssl/certs \
        -w "${PWD}" \
        --user "$(id -u):$(id -g)" \
        thevickypedia/speech-synthesis
    ```

    :bulb: &nbsp; Speech Synthesis can run on a docker container for better voices but, response might be negligibly slower. If you don't have docker installed or simply don't want to use it, set the `SPEECH_SYNTHESIS_TIMEOUT` env var to 0. This is also done automatically if failed to launch a docker container upon startup.

    </details>

---

**[Offline communicator](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/executors/offline.py)**
- **OFFLINE_PORT** - Port number to initiate offline communicator. Defaults to `4483`
- **OFFLINE_PASS** - Secure phrase to authenticate offline requests. Defaults to `OfflineComm`
- **WORKERS** - Number of uvicorn workers (processes) to spin up. Defaults to `1`

**Stock Portfolio**
- **ROBINHOOD_USER** - Robinhood account username.
- **ROBINHOOD_PASS** - Robinhood account password.
- **ROBINHOOD_QR** - Robinhood login [QR code](https://robinhood.com/account/settings)

**API Features**
- **ROBINHOOD_ENDPOINT_AUTH** - Authentication token to access the robinhood portfolio which is generated every hour.
- **SURVEILLANCE_ENDPOINT_AUTH** - Token to access webcam live feed via Jarvis API.
- **SURVEILLANCE_SESSION_TIMEOUT** - Session time out for `/surveillance`. Defaults to 300 seconds.
- **STOCK_MONITOR_API** - API key(s) to skip OTP validation for `/stock-monitor` endpoint.
> Entry should be a dictionary of with email as `key` and `token` as value. Eg: `'{"user@example.com": "@lfaROm$o"}'`

**Custom Feature Flag**
- **AUTHOR_MODE** - Enables reverse proxy tunnel (to expose API endpoint), robinhood portfolio scan (every hour) and stock monitoring (every 15 minutes). Defaults to `False`

</details>

### Contacts [Optional]
Jarvis can send on demand notifications using a ``contacts.yaml`` file stored in ``fileio`` directory. Uses [gmail-connector](https://pypi.org/project/gmail-connector/) for SMS and email notifications.

<details>
<summary><strong><i>Setup Instructions</i></strong></summary>

> Note: Jarvis currently supports sending emails only when the ``contacts.yaml`` file is present, however phone numbers can be used directly.

```yaml
phone:
  Tony: 0123456789
  Thor: 1234567890
email:
  Eddard: ned@gmail.com
  Aegon: egg@yahoo.com
```
</details>

### Smart Devices [Optional]
Jarvis supports `MagicHome` for [lights](https://www.amazon.com/gp/product/B08C7GY43L), `LGWebOS` and `Roku` for TVs.
> This feature requires a `smart_devices.yaml` file which should be stored within the `fileio` directory.

- TV hostnames should include the brand name [`LG`/`Roku`] to distinguish the modules accordingly.
  - This will be set by default, if yours doesn't include the brand name change it in the TV settings.

- To wake up `Roku` TVs using MAC address, make sure the `Bandwidth saver` feature is turned off under,
    ```text
    Settings/Network/Bandwidth saver >> Off
    ```

- For first time users on `LGWebOS` TVs, there will be a prompt on the TV to accept the connection request.
  - Once the connection request is accepted a client key will be generated and logged.
  - Please make sure to store this in `smart_devices.yaml` file to avoid repeated connection prompt.

<details>
<summary><strong><i>Setup Instructions</i></strong></summary>

- The source file should have an initial key to distinguish between `Lights` and `TV`
- The name used in the keys (for both lights and tv) will be the identifier when an action is requested.
- Lights should be a dictionary of identifier and a list of hostnames.
- TVs should be a nested dictionary of multiple parameters.
- The source file (`smart_devices.yaml`) should be as following:

```yaml
Lights:
  bedroom:
    - 'HOSTNAMES'
  hallway:
    - 'HOSTNAMES'
  hallway basement:
    - 'HOSTNAMES'
  kitchen:
    - 'HOSTNAMES'
  living room:
    - 'HOSTNAMES'
TV:
  living room tv:
    hostname: 'LGWebOSTV'
    client_key: 'CLIENT_KEY'  # Generated automatically if unavailable
    mac_address:  # Mac addresses can either be a string or a list
    - 'WIRED_MAC_ADDRESS'
    - 'WIRELESS_MAC_ADDRESS'
  bedroom tv:
    hostname: 'RokuTV'
    mac_address: 'MAC_ADDRESS'
```
</details>

### Startup Scripts [Optional]
Jarvis can execute any python or shell script during startup without any user interaction.
> This feature requires a directory called `scripts` within the `fileio` directory.

<details>
<summary><strong><i>Setup Instructions</i></strong></summary>

Simply place the startup script within the `fileio/scripts`. Jarvis will only trigger the scripts those names that 
end with `.py` or `.sh` or `.zsh` without having an `_` at the begining.

**Example:**

In the example below, only the scripts `ngrok.py` and `stack.sh` will be triggered.

```markdown
fileio/
|-- scripts/
|   |-- ngrok.py
|   |-- stack.sh
|   |-- _offline.py
```

</details>

### Automation [Optional]
Jarvis can execute [offline compatible](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/executors/conditions.py) tasks 
at pre-defined times without any user interaction.
> This feature requires an `automation.yaml` file which should be stored within the `fileio` directory.

<details>
<summary><strong><i>Setup Instructions</i></strong></summary>

The YAML file should contain a dictionary within a dictionary that looks like the below.

**OPTIONAL:** The key, `day` can be a `list` of days, or a `str` of a specific day or simply a `str` saying `weekday` or
`weekend` when the particular automation should be executed.

> Not having the key `day` will run the automation daily.
> Date format should match exactly as described below.

```yaml
06:00 AM:
  - task: set my bedroom lights to 50%
    day: weekday  # Runs only between Monday and Friday
06:30 AM:
  - task: set my bedroom lights to 100%
    day:  # Runs only on Monday, Wednesday and Friday
    - Monday
    - wednesday
    - FRIDAY
08:00 AM:  # Runs only on Saturday and Sunday
  - task: set my bedroom lights to 100%
    day: weekend
09:00 PM:  # Runs daily (can take both list of dict and dict as argument)
  task: set my bedroom lights to 5%
12:00 AM:  # Even performs tasks that are not supported via voice commands
  - task: restart all background processes
  - task: turn off all lights
    day: weekday
```
</details>

### Background Tasks [Optional]
Jarvis supports both internal and external background tasks to be scheduled.

- Jarvis can run internal tasks at certain intervals.
> This feature requires a `background_tasks.yaml` file which should be stored within the `fileio` directory.

<details>
<summary><strong><i>Setup Instructions</i></strong></summary>

```yaml
- seconds: 1_800
  task: just turn off all lights  # Runs every 30 minutes - 'just' flag retains the lights' last setting (eg: brightness or color)
  ignore_hours:  # Ignore the schedule at 5 AM and 10 PM
    - 5
    - 22
- seconds: 10_800
  task: remind me to drink water  # Runs every 3 hours ignoring the hours specified
  ignore_hours: "21-6"  # Ignore the schedule between 9 PM and 6 AM
```
</details>

### Restrictions [Optional]
Jarvis can place function(s) level [restrictions](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/executors/restrictions.py) for offline communicators.

- This restriction can also be modified by offline communicators.
- Once a restriction is placed, the matching commands will not be executed unless the restriction is removed explicitly.

> This feature requires a `restrictions.yaml` file which should be stored within the `fileio` directory.

<details>
<summary><strong><i>Setup Instructions</i></strong></summary>

The YAML file should contain a list of function names that looks like the below.

```yaml
- car  # Blocks ALL car related operations via offline communication
- garage  # Blocks ALL garage related operations via offline communication
```

:warning: This is a direct mapping to the [functions](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/executors/functions.py), 
so invalid function names are not validated by Jarvis. This will make the restriction void.

</details>

### Custom Conditions [Optional]
Jarvis can execute function(s) directly based on a [custom condition](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/executors/custom_conditions.py) map,
via both voice and offline communicators.

- The condition mapping may contain one or more functions to be executed for a single keyword/phrase.
- These functions are executed as ordered in the mapping file and responses will be delivered as each task is done.
- For offline communicators, in case of multi-function mapping, the responses are gathered and then delivered at once.

> This feature requires a `conditions.yaml` file which should be stored within the `fileio` directory.

<details>
<summary><strong><i>Setup Instructions</i></strong></summary>

The YAML file should contain a dictionary within a dictionary that looks like the below.

```yaml
lumos:  # custom keyword
  lights: turn on all lights  # function_name: phrase passed as argument
knox:
  lights: turn off all lights
  television: turn off bedroom tv
fire up the chopper:  # custom phrase
  garage: open garage
  car: start car
```

:warning: This is a direct mapping to the [functions](https://github.com/thevickypedia/Jarvis/blob/master/jarvis/executors/functions.py), 
so the input phrases are not validated by Jarvis. This will raise a `UserWarning` if invalid function name or phrase is entered in the mapping file.

</details>

### Simulation [Optional]
Jarvis can execute tasks as a simulation to test the required functions and send an email with the results.
> This feature requires a `simulation.yaml` file which should be stored within the `fileio` directory.

<details>
<summary><strong><i>Setup Instructions</i></strong></summary>

The YAML file should contain a list of phrases within a dictionary that looks like the below.

```yaml
meeting_event:
- get me the events from my calendar
- what meetings do I have today
```
</details>

## Guide
Please refer to the [wiki](https://github.com/thevickypedia/Jarvis/wiki) page for API usage, access controls, env variables, features' overview and demo videos.

## FAQs
Please refer to the [FAQs](https://github.com/thevickypedia/Jarvis/wiki/FAQs) section of the wiki.

## Coding Standards
Docstring format: [`Google`](https://google.github.io/styleguide/pyguide.html#38-comments-and-docstrings) <br>
Styling conventions: [`PEP 8`](https://www.python.org/dev/peps/pep-0008/) <br>
Clean code with pre-commit hooks: [`flake8`](https://flake8.pycqa.org/en/latest/) and 
[`isort`](https://pycqa.github.io/isort/)

## [Release Notes](https://github.com/thevickypedia/Jarvis/blob/master/release_notes.rst)
**Requirement**
```shell
python -m pip install gitverse
```

**Usage**
```shell
gitverse-release reverse -f release_notes.rst -t 'Release Notes'
```

## Linting
`PreCommit` will ensure linting, and the doc creation are run on every commit.

**Requirement**
```shell
pip install sphinx==5.1.1 pre-commit recommonmark
```

**Usage**
```shell
pre-commit run --all-files
```

## Pypi Package
[![pypi-module](https://img.shields.io/badge/Software%20Repository-pypi-1f425f.svg)](https://packaging.python.org/tutorials/packaging-projects/)

[https://pypi.org/project/jarvis-ironman/](https://pypi.org/project/jarvis-ironman/)

## Runbook
[![made-with-sphinx-doc](https://img.shields.io/badge/Code%20Docs-Sphinx-1f425f.svg)](https://www.sphinx-doc.org/en/master/man/sphinx-autogen.html)

[https://jarvis-docs.vigneshrao.com/](https://jarvis-docs.vigneshrao.com/)

## License & copyright

&copy; Vignesh Rao

Licensed under the [MIT License](https://github.com/thevickypedia/Jarvis/blob/master/LICENSE)
