# gbElements_0_32.py
# autogenerated

class aecXML_auto():
	""""""


class AirChangesPerHour_auto():
	""""""


class AverageNumberOfFloors_auto():
	""""""


class Azimuth_auto():
	"""The number of degrees from north the outside of the surfaces is rotated in relation to the bottom-left corner."""


class Ballast_auto():
	"""Type of ballast used"""


class BeginDate_auto():
	"""Month and day year scedule begins"""


class CADObjectId_auto():
	"""The CADObjectId Element is used to map unique CAD object identifiers to gbXML elements.  Allows CAD tools to read results from a gbXML file and map them to their CAD objects."""


class CDDValue_auto():
	"""Cooling degree day value"""


class City_auto():
	""""""


class CompanyName_auto():
	""""""


class Country_auto():
	""""""


class CyclesPerWeek_auto():
	"""Number of operation cycles per week."""


class DaylightSavings_auto():
	"""Allows for including daylight savings time"""


class DDDayCool_auto():
	"""Heating design day dry bulb temperature range"""


class DDDayHeat_auto():
	"""Day of the month that the heating design day occurs on"""


class DDDaylightCool_auto():
	"""Flag for daylight savings on the cooling design day"""


class DDDaylightHeat_auto():
	"""Flag for daylight savings for the heating design day"""


class DDHiHrCool_auto():
	"""Cooling design day hour of high temperature"""


class DDHiHrHeat_auto():
	"""Heating design day hour of high temperature"""


class DDLoHrCool_auto():
	"""Cooling design day hour of low temperature"""


class DDLoHrHeat_auto():
	"""Heating design day hour of low temperature"""


class DDMonthCool_auto():
	"""Month the cooling design day lands on.  1=Jan, 12=Dec"""


class DDMonthHeat_auto():
	"""Month that the heating design day occurs on.  1=Jan, 12=Dec"""


class DDRainCool_auto():
	"""Flag for rain on the cooling design day.  0=no rain, 1=rain"""


class DDRainHeat_auto():
	"""Heating design day rain flag.  0=no rain, 1=rain"""


class DDSnowCool_auto():
	"""Flag for snow on the cooling design day.  0=not snowing, 1=snowing"""


class DDSnowHeat_auto():
	"""Heating design day snow flag.  0=not snowing, 1=snowing"""


class DependantValue_auto():
	"""Value of a dependant variable for this data point"""


class Description_auto():
	""""""


class Email1Address_auto():
	""""""


class EndDate_auto():
	"""Month and day year schedule ends"""


class Expression_auto():
	""""""


class FirstName_auto():
	""""""


class GroundTempValue_auto():
	""""""


class HDDValue_auto():
	""""""


class IndependantValue_auto():
	"""Value of the independant variable for this data point"""


class Lamp_auto():
	"""Type of lamp used"""


class LastName_auto():
	""""""


class Latitude_auto():
	"""Degrees east of Greenwich, in decimal degrees.  Locations west of Greenwich are negative."""


class Longitude_auto():
	"""Degrees north of the equator, in decimal degrees.  Locations south of the equator are negative."""


class LumensPerLamp_auto():
	""""""


class Luminaire_auto():
	"""Type of luminaire used"""


class Manufacturer_auto():
	""""""


class MiddleName_auto():
	""""""


class Model_auto():
	""""""


class Name_auto():
	""""""


class NaturalVentOccDep_auto():
	"""Occupancy dependence of natural ventilation.  If true, then natural ventalation only occurs when people are present."""


class NumberOfLamps_auto():
	""""""


class ObjectId_auto():
	"""Indicates which object or objects the results apply to, if any"""


class Platform_auto():
	""""""


class PrandtlNumber_auto():
	""""""


class ProductName_auto():
	""""""


class Reference_auto():
	""""""


class RefrigerantType_auto():
	""""""


class ScheduleValue_auto():
	"""Value for one block of time.  Divides a day evenly into number of ScheduleValue elements defined in DaySchedule.
Example: If 12 ScheduleValue elements are defined, each will represent two hours"""


class StateOrProvince_auto():
	""""""


class StreetAddress_auto():
	""""""


class Tilt_auto():
	"""The number of degrees from up that the outside of the surface is tilted in relation to the bottom-left corner."""


class Value_auto():
	"""Contains the actual numerical result value. If series result type each Value element contains the one value and is in sequential order for the series."""


class Version_auto():
	""""""


class WebPage_auto():
	""""""


class YearModeled_auto():
	"""Year of simulation to use"""


class ZipcodeOrPostalCode_auto():
	""""""


class gbXML_auto():
	""""""

	@property
	def engine(self):
		return self.get_attribute('engine')


	@engine.setter
	def engine(self,value):
		self.set_attribute('engine',value)


	@property
	def temperatureUnit(self):
		"""This attribute specifies the default temperature unit for the entire gbXML document, wherever the temperatureUnit simple type is used."""
		return self.get_attribute('temperatureUnit')


	@temperatureUnit.setter
	def temperatureUnit(self,value):
		self.set_attribute('temperatureUnit',value)


	@property
	def lengthUnit(self):
		"""This attribute specifies the default length unit for the entire gbXML document, wherever the lengthUnit simple type is used."""
		return self.get_attribute('lengthUnit')


	@lengthUnit.setter
	def lengthUnit(self,value):
		self.set_attribute('lengthUnit',value)


	@property
	def areaUnit(self):
		"""This attribute specifies the default area unit for the entire gbXML document, wherever the areaUnit simple type is used."""
		return self.get_attribute('areaUnit')


	@areaUnit.setter
	def areaUnit(self,value):
		self.set_attribute('areaUnit',value)


	@property
	def volumeUnit(self):
		"""This attribute specifies the default volume unit for the entire gbXML document, wherever the volumeUnit simple type is used."""
		return self.get_attribute('volumeUnit')


	@volumeUnit.setter
	def volumeUnit(self,value):
		self.set_attribute('volumeUnit',value)


	@property
	def useSIUnitsForResults(self):
		"""Results will be given in SI or IP units.  True = SI units, which is the implied default.  If False, results will be in english units."""
		return self.get_attribute('useSIUnitsForResults')


	@useSIUnitsForResults.setter
	def useSIUnitsForResults(self,value):
		self.set_attribute('useSIUnitsForResults',value)



class Absorptance_auto():
	"""Absorptance of the outside surface"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class AdjacentSpaceId_auto():
	""""""

	@property
	def spaceIdRef(self):
		"""ID for a space that is bounded by this surface."""
		return self.get_attribute('spaceIdRef')


	@spaceIdRef.setter
	def spaceIdRef(self,value):
		self.set_attribute('spaceIdRef',value)



class Age_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class AirLoop_auto():
	"""The AirLoop element represents the equipment serving one path of air"""

	@property
	def controlZoneIdRef(self):
		return self.get_attribute('controlZoneIdRef')


	@controlZoneIdRef.setter
	def controlZoneIdRef(self,value):
		self.set_attribute('controlZoneIdRef',value)



class AirLoopEquipment_auto():
	"""A piece of equipment serving an air-loop. 
This is generalized to be able to contain any type of air loop equipment."""

	@property
	def equipmentType(self):
		return self.get_attribute('equipmentType')


	@equipmentType.setter
	def equipmentType(self,value):
		self.set_attribute('equipmentType',value)



class AirLoopId_auto():
	""""""

	@property
	def airLoopIdRef(self):
		"""ID pointing to an air loop"""
		return self.get_attribute('airLoopIdRef')


	@airLoopIdRef.setter
	def airLoopIdRef(self,value):
		self.set_attribute('airLoopIdRef',value)



class AirTemperature_auto():
	"""Minimum air temperature before shades are closed."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class Albedo_auto():
	"""Reflectance of solar radiation"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class AltEnergySource_auto():
	"""Alternative energy source"""

	@property
	def altEnergyType(self):
		return self.get_attribute('altEnergyType')


	@altEnergyType.setter
	def altEnergyType(self,value):
		self.set_attribute('altEnergyType',value)


	@property
	def resourceType(self):
		return self.get_attribute('resourceType')


	@resourceType.setter
	def resourceType(self,value):
		self.set_attribute('resourceType',value)



class Area_auto():
	"""Specifies the area of the space or building.  This value should be equal to the area enclosed by the physical boundries of the space, as defined by the intersection of the horizontal plane at the highest floor height and the volumetric model's vertical interior surface planes.  Building area should be the sum of space areas whose PeopleNumber element values are greater than zero."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Blind_auto():
	""""""


class BlowerDoorValue_auto():
	"""Leakage value obtained from blower door test."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Building_auto():
	""""""

	@property
	def buildingType(self):
		return self.get_attribute('buildingType')


	@buildingType.setter
	def buildingType(self,value):
		self.set_attribute('buildingType',value)



class CADMaterialId_auto():
	""""""

	@property
	def CADMaterialIdRef(self):
		"""ID used by a CAD program to reference its internal materials library"""
		return self.get_attribute('CADMaterialIdRef')


	@CADMaterialIdRef.setter
	def CADMaterialIdRef(self,value):
		self.set_attribute('CADMaterialIdRef',value)



class Campus_auto():
	"""The Campus element should be used as the base for all physical objects.  On a campus, place one or more buildings."""

	@property
	def designHeatWeathIdRef(self):
		"""ID for the weather data used for a heating design day"""
		return self.get_attribute('designHeatWeathIdRef')


	@designHeatWeathIdRef.setter
	def designHeatWeathIdRef(self,value):
		self.set_attribute('designHeatWeathIdRef',value)


	@property
	def designCoolWeathIdRef(self):
		"""ID for the weather data used for a cooling design day"""
		return self.get_attribute('designCoolWeathIdRef')


	@designCoolWeathIdRef.setter
	def designCoolWeathIdRef(self,value):
		self.set_attribute('designCoolWeathIdRef',value)



class Capacity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def capacityType(self):
		return self.get_attribute('capacityType')


	@capacityType.setter
	def capacityType(self,value):
		self.set_attribute('capacityType',value)



class CartesianPoint_auto():
	"""This is the x, y, and z distances from the origin.  This element must have three Coordinate elements, which represent x, y, and z in order.

        

      """


class CDD_auto():
	"""Cooling degree days.  CDD is calculated as the number of degrees a mean daily temperature is above a value (specified as the Temperature element), for each day. 
For example, if the mean temperature in a region rises to 77 degrees for three days during a year, the rest of the time staying below 75, and the Temperature element is set at 75, then CDD = 6."""


class ClosedShell_auto():
	"""This is an element from ifcXML that describes a collection of faces that make up a closed shell.

        

      """


class CoefficientOfUtilization_auto():
	"""The coefficient of utilization is the ratio of luminous flux on a workplane to the luminous flux emitted by the lamps alone.  
"""

	@property
	def wallReflectance(self):
		return self.get_attribute('wallReflectance')


	@wallReflectance.setter
	def wallReflectance(self,value):
		self.set_attribute('wallReflectance',value)


	@property
	def ceilingCavityReflectance(self):
		return self.get_attribute('ceilingCavityReflectance')


	@ceilingCavityReflectance.setter
	def ceilingCavityReflectance(self,value):
		self.set_attribute('ceilingCavityReflectance',value)


	@property
	def floorReflectance(self):
		return self.get_attribute('floorReflectance')


	@floorReflectance.setter
	def floorReflectance(self,value):
		self.set_attribute('floorReflectance',value)


	@property
	def roomCavityRatio(self):
		"""Room cavity ratio is a measure of the room cavity proportions."""
		return self.get_attribute('roomCavityRatio')


	@roomCavityRatio.setter
	def roomCavityRatio(self,value):
		self.set_attribute('roomCavityRatio',value)



class Conductivity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ConductivityFofT_auto():
	"""Conductivity as a function of temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Construction_auto():
	"""A Construction is a combination of layers, such as a wall or a roof"""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)



class Control_auto():
	"""The Control element should be used for describing how this equipment is controlled."""

	@property
	def controlType(self):
		return self.get_attribute('controlType')


	@controlType.setter
	def controlType(self,value):
		self.set_attribute('controlType',value)


	@property
	def stages(self):
		return self.get_attribute('stages')


	@stages.setter
	def stages(self,value):
		self.set_attribute('stages',value)


	@property
	def minPowerRatio(self):
		return self.get_attribute('minPowerRatio')


	@minPowerRatio.setter
	def minPowerRatio(self,value):
		self.set_attribute('minPowerRatio',value)


	@property
	def performanceIdRef(self):
		return self.get_attribute('performanceIdRef')


	@performanceIdRef.setter
	def performanceIdRef(self,value):
		self.set_attribute('performanceIdRef',value)



class Coordinate_auto():
	"""This is the an x, y, or z length measurement from the origin.

        

      """


class Cost_auto():
	""""""

	@property
	def costType(self):
		return self.get_attribute('costType')


	@costType.setter
	def costType(self,value):
		self.set_attribute('costType',value)



class CostValue_auto():
	""""""

	@property
	def currency(self):
		return self.get_attribute('currency')


	@currency.setter
	def currency(self,value):
		self.set_attribute('currency',value)


	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class CreatedBy_auto():
	"""Denotes the time this file has been created, as well as the person and program used to create this file."""

	@property
	def personId(self):
		return self.get_attribute('personId')


	@personId.setter
	def personId(self,value):
		self.set_attribute('personId',value)


	@property
	def programId(self):
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def date(self):
		return self.get_attribute('date')


	@date.setter
	def date(self,value):
		self.set_attribute('date',value)



class Data_auto():
	""""""


class Day_auto():
	""""""

	@property
	def dayScheduleIdRef(self):
		"""ID for operation schedules"""
		return self.get_attribute('dayScheduleIdRef')


	@dayScheduleIdRef.setter
	def dayScheduleIdRef(self,value):
		self.set_attribute('dayScheduleIdRef',value)


	@property
	def dayType(self):
		return self.get_attribute('dayType')


	@dayType.setter
	def dayType(self,value):
		self.set_attribute('dayType',value)



class DaySchedule_auto():
	"""Set of values that define the profile of one 24 hour period divided equally to the number of values entered."""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class DDDBCool_auto():
	"""Cooling design day dry bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDDBHeat_auto():
	"""Heating design day dry bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDDBRangeCool_auto():
	"""Cooling design day dry bulb temperature range"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDDBRangeHeat_auto():
	"""Heating design day dry bulb temperature range"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDGroundTCool_auto():
	"""Ground temperature on the cooling design day"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDGroundTHeat_auto():
	"""Ground temperature for the heating design day"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDPressureCool_auto():
	"""Cooling design day atmospheric pressure"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDPressureHeat_auto():
	"""Heating design day atmospheric pressure"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDSkyClearnessCool_auto():
	"""Cooling design day sky clearness"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDSkyClearnessHeat_auto():
	"""Heating design day sky clearness"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWBCool_auto():
	"""Cooling design day wet bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWBHeat_auto():
	"""Heating design day wet bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindDirCool_auto():
	"""Cooing design day wind direction"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindDirHeat_auto():
	"""Heating design day wind direction"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindSpeedCool_auto():
	"""Cooling design day wind speed"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindSpeedHeat_auto():
	"""Heating design day wind speed"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DeltaP_auto():
	"""Difference in pressure"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def hydronicLoopType(self):
		return self.get_attribute('hydronicLoopType')


	@hydronicLoopType.setter
	def hydronicLoopType(self,value):
		self.set_attribute('hydronicLoopType',value)


	@property
	def hydronicLoopIdRef(self):
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def conditioningType(self):
		"""Use this attribute for conditioning units with both heating and cooling."""
		return self.get_attribute('conditioningType')


	@conditioningType.setter
	def conditioningType(self,value):
		self.set_attribute('conditioningType',value)


	@property
	def performanceId(self):
		"""Use this attribute to point to a performance curve, if one is provided"""
		return self.get_attribute('performanceId')


	@performanceId.setter
	def performanceId(self,value):
		self.set_attribute('performanceId',value)



class DeltaT_auto():
	"""Difference in temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def conditioningType(self):
		"""Use this attribute for conditioning units with both heating and cooling."""
		return self.get_attribute('conditioningType')


	@conditioningType.setter
	def conditioningType(self,value):
		self.set_attribute('conditioningType',value)



class Density_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DensityFofT_auto():
	"""Density as a function of temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DependantVariable_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def dataType(self):
		return self.get_attribute('dataType')


	@dataType.setter
	def dataType(self,value):
		self.set_attribute('dataType',value)


	@property
	def minValue(self):
		"""Use minValue and maxValue to define constraints on the curve."""
		return self.get_attribute('minValue')


	@minValue.setter
	def minValue(self,value):
		self.set_attribute('minValue',value)


	@property
	def maxValue(self):
		return self.get_attribute('maxValue')


	@maxValue.setter
	def maxValue(self,value):
		self.set_attribute('maxValue',value)



class DesignCoolT_auto():
	"""Design temperature for cooling"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DesignFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DesignHeatT_auto():
	"""Design temperature for heating"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DesignPressure_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DesignTemp_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Dimensions_auto():
	""""""


class DocumentHistory_auto():
	"""Contains details about people and programs that created and modified this file"""


class Efficiency_auto():
	""""""

	@property
	def standardsType(self):
		"""Use the standardsType attribute when the efficiency is measured at standard conditions."""
		return self.get_attribute('standardsType')


	@standardsType.setter
	def standardsType(self,value):
		self.set_attribute('standardsType',value)


	@property
	def efficiencyType(self):
		return self.get_attribute('efficiencyType')


	@efficiencyType.setter
	def efficiencyType(self,value):
		self.set_attribute('efficiencyType',value)


	@property
	def operationType(self):
		"""Use this attribute for conditioning units with both heating and cooling."""
		return self.get_attribute('operationType')


	@operationType.setter
	def operationType(self,value):
		self.set_attribute('operationType',value)


	@property
	def performanceId(self):
		"""Use this attribute to point to a performance curve, if one is provided"""
		return self.get_attribute('performanceId')


	@performanceId.setter
	def performanceId(self,value):
		self.set_attribute('performanceId',value)



class ElecLoad_auto():
	"""Electric load"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Elevation_auto():
	"""Height above sea level"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class EmissionRate_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Emittance_auto():
	"""Infra-red emmisivity"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class Energy_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def valueType(self):
		return self.get_attribute('valueType')


	@valueType.setter
	def valueType(self,value):
		self.set_attribute('valueType',value)


	@property
	def timePeriod(self):
		return self.get_attribute('timePeriod')


	@timePeriod.setter
	def timePeriod(self,value):
		self.set_attribute('timePeriod',value)


	@property
	def resourceType(self):
		return self.get_attribute('resourceType')


	@resourceType.setter
	def resourceType(self,value):
		self.set_attribute('resourceType',value)


	@property
	def meterIdRef(self):
		"""ID for a resource meter"""
		return self.get_attribute('meterIdRef')


	@meterIdRef.setter
	def meterIdRef(self,value):
		self.set_attribute('meterIdRef',value)



class Equation_auto():
	"""The Equation element allows data for n-dimensional algebraic data to be entered.  
The Expression element should contain an indepentant variable followed by an = sign and an equation containing dependant variables.
The independant and dependant variables are then defined by their respective tags.  
The only mathmatical operations allowed are ^ (power), + (addition), - (subtraction), / (division), and * (multiplication). 

Example: z=x+2*y^2 would have an IndependantVariable with a name = z, and two DependantVariables with names of x and y. 
Descriptions would be included for each variable, along with unit and dataType information identifying the variable and its role.
"""


class EquipPowerPerArea_auto():
	"""Amount of power used by equipment in a given area"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ExtEquip_auto():
	"""External equipment.
This is generalized to be able to contain any type of external equipment."""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def waterTempScheduleIdRef(self):
		return self.get_attribute('waterTempScheduleIdRef')


	@waterTempScheduleIdRef.setter
	def waterTempScheduleIdRef(self,value):
		self.set_attribute('waterTempScheduleIdRef',value)


	@property
	def hydronicLoopIdRef(self):
		"""ID pointing to a hydronic loop """
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def waterScheduleIdRef(self):
		return self.get_attribute('waterScheduleIdRef')


	@waterScheduleIdRef.setter
	def waterScheduleIdRef(self,value):
		self.set_attribute('waterScheduleIdRef',value)


	@property
	def waterMeterIdRef(self):
		return self.get_attribute('waterMeterIdRef')


	@waterMeterIdRef.setter
	def waterMeterIdRef(self,value):
		self.set_attribute('waterMeterIdRef',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def airLoopIdRef(self):
		"""ID pointing to an air loop"""
		return self.get_attribute('airLoopIdRef')


	@airLoopIdRef.setter
	def airLoopIdRef(self,value):
		self.set_attribute('airLoopIdRef',value)



class ExtEquipId_auto():
	""""""

	@property
	def extEquipIdRef(self):
		return self.get_attribute('extEquipIdRef')


	@extEquipIdRef.setter
	def extEquipIdRef(self,value):
		self.set_attribute('extEquipIdRef',value)



class Flow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class FlowControl_auto():
	"""Use this element to describe how the fluid flow is controlled. The temperatures specified in this element should be measured just upstream of the chiller."""


class FlowPerArea_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class FlowPerPerson_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Frame_auto():
	""""""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)



class FuelLoad_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Gap_auto():
	"""Space between window panes"""

	@property
	def gas(self):
		return self.get_attribute('gas')


	@gas.setter
	def gas(self,value):
		self.set_attribute('gas',value)


	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)



class GapId_auto():
	""""""

	@property
	def gapIdRef(self):
		"""ID for a gap between window panes"""
		return self.get_attribute('gapIdRef')


	@gapIdRef.setter
	def gapIdRef(self,value):
		self.set_attribute('gapIdRef',value)



class GeneralGeometry_auto():
	"""This element has been left open for use with other geometry definitions, such as X3D or BLISXML."""


class Glare_auto():
	"""Minimum amount of glare to trigger the shades to close"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Glaze_auto():
	"""Properties of one layer of a window"""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)



class GlazeConductivity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class GlazeId_auto():
	""""""

	@property
	def glazeIdRef(self):
		"""ID indicating the type of glaze used"""
		return self.get_attribute('glazeIdRef')


	@glazeIdRef.setter
	def glazeIdRef(self,value):
		self.set_attribute('glazeIdRef',value)



class GroundTemp_auto():
	"""Monthly ground temperatures, 12 values"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HDD_auto():
	"""Heating degree days.  HDD is calculated as the number of degrees a mean daily temperature is below a value (specified as the Temperature element), for each day. 
For example, if the mean temperature in a region drops to 64 degrees for four days during a year, the rest of the time staying above 65, and the Temperature element is set at 65, then HDD = 4."""


class Height_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HighLimit_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HighValue_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HorizontalSolar_auto():
	"""Amount of horizontal solar radiation striking the opening before a shade is closed."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HydronicLoop_auto():
	"""The HydronicLoop element represents the equipment serving one path of water, or other liquid"""

	@property
	def loopType(self):
		return self.get_attribute('loopType')


	@loopType.setter
	def loopType(self,value):
		self.set_attribute('loopType',value)


	@property
	def controlZoneIdRef(self):
		return self.get_attribute('controlZoneIdRef')


	@controlZoneIdRef.setter
	def controlZoneIdRef(self,value):
		self.set_attribute('controlZoneIdRef',value)


	@property
	def fluidType(self):
		return self.get_attribute('fluidType')


	@fluidType.setter
	def fluidType(self,value):
		self.set_attribute('fluidType',value)



class HydronicLoopEquipment_auto():
	"""A piece of equipment serving a hydronic loop (most commonly a water loop).
This is generalized to be able to contain any type of hydronic loop equipment."""

	@property
	def equipmentType(self):
		return self.get_attribute('equipmentType')


	@equipmentType.setter
	def equipmentType(self,value):
		self.set_attribute('equipmentType',value)


	@property
	def waterMeterIdRef(self):
		return self.get_attribute('waterMeterIdRef')


	@waterMeterIdRef.setter
	def waterMeterIdRef(self,value):
		self.set_attribute('waterMeterIdRef',value)


	@property
	def waterScheduleIdRef(self):
		return self.get_attribute('waterScheduleIdRef')


	@waterScheduleIdRef.setter
	def waterScheduleIdRef(self,value):
		self.set_attribute('waterScheduleIdRef',value)



class HydronicLoopId_auto():
	""""""

	@property
	def hydronicLoopIdRef(self):
		"""ID pointing to a hydronic loop """
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def hydronicLoopType(self):
		"""Type of hydronic loop """
		return self.get_attribute('hydronicLoopType')


	@hydronicLoopType.setter
	def hydronicLoopType(self,value):
		self.set_attribute('hydronicLoopType',value)



class Illuminance_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ImageTexture_auto():
	"""This is an X3D element to map a texture to this material.
From X3D specification:
The ImageTexture node defines a texture map by specifying an image file and general parameters for mapping to geometry. 
Texture maps are defined in a 2D coordinate system (s, t) that ranges from [0.0, 1.0] in both directions. 
The bottom edge of the image corresponds to the S-axis of the texture map, and left edge of the image corresponds to the T-axis of the texture map. 
The lower-left pixel of the image corresponds to s=0, t=0, and the top-right pixel of the image corresponds to s=1, t=1. 

      """

	@property
	def url(self):
		"""Specifies location of the image.
From X3D specification:
The texture is read from the URL specified by the url field. 
When the url field contains no values, texturing is disabled. 
Browsers shall support the JPEG and PNG image file formats. 
In addition, browsers may support other image formats (e.g. CGM) which can be rendered into a 2D image. 
Support for the GIF format is also recommended (including transparency). """
		return self.get_attribute('url')


	@url.setter
	def url(self,value):
		self.set_attribute('url',value)


	@property
	def repeatS(self):
		"""From X3D specification:
If repeatS is TRUE, the texture map is repeated outside the [0.0, 1.0] texture coordinate range in the S direction so that it fills the shape. 
If repeatS is FALSE, the texture coordinates are clamped in the S direction to lie within the [0.0, 1.0] range. """
		return self.get_attribute('repeatS')


	@repeatS.setter
	def repeatS(self,value):
		self.set_attribute('repeatS',value)


	@property
	def repeatT(self):
		"""From X3D specification:
If repeatT is TRUE, the texture map is repeated outside the [0.0, 1.0] texture coordinate range in the T direction so that it fills the shape. 
If repeatT is FALSE, the texture coordinates are clamped in the T direction to lie within the [0.0, 1.0] range. """
		return self.get_attribute('repeatT')


	@repeatT.setter
	def repeatT(self,value):
		self.set_attribute('repeatT',value)



class IndepentantVariable_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def dataType(self):
		return self.get_attribute('dataType')


	@dataType.setter
	def dataType(self,value):
		self.set_attribute('dataType',value)



class IndoorAirQuality_auto():
	""""""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)



class InfiltrationFlow_auto():
	"""Flow of air through building envelope"""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class InputWatts_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class InsideAirFilmResistance_auto():
	"""Thermal resistance of the internal air film in a layer"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class IntEquip_auto():
	"""Interior equipment.
This is generalized to be able to contain any type of internal equipment."""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def waterTempScheduleIdRef(self):
		return self.get_attribute('waterTempScheduleIdRef')


	@waterTempScheduleIdRef.setter
	def waterTempScheduleIdRef(self,value):
		self.set_attribute('waterTempScheduleIdRef',value)


	@property
	def hydronicLoopIdRef(self):
		"""ID pointing to a hydronic loop """
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def waterScheduleIdRef(self):
		return self.get_attribute('waterScheduleIdRef')


	@waterScheduleIdRef.setter
	def waterScheduleIdRef(self,value):
		self.set_attribute('waterScheduleIdRef',value)


	@property
	def waterMeterIdRef(self):
		return self.get_attribute('waterMeterIdRef')


	@waterMeterIdRef.setter
	def waterMeterIdRef(self,value):
		self.set_attribute('waterMeterIdRef',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def airLoopIdRef(self):
		"""ID pointing to an air loop"""
		return self.get_attribute('airLoopIdRef')


	@airLoopIdRef.setter
	def airLoopIdRef(self,value):
		self.set_attribute('airLoopIdRef',value)



class IntEquipId_auto():
	""""""

	@property
	def intEquipIdRef(self):
		"""ID pointing at an interior equipment object"""
		return self.get_attribute('intEquipIdRef')


	@intEquipIdRef.setter
	def intEquipIdRef(self,value):
		self.set_attribute('intEquipIdRef',value)



class LatentLoad_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Layer_auto():
	"""A Layer is a combination of one of more materials"""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)



class LayerId_auto():
	""""""

	@property
	def layerIdRef(self):
		"""ID identifying a layer in this construction.  Multiple layers in Constructions are in order from outside to inside."""
		return self.get_attribute('layerIdRef')


	@layerIdRef.setter
	def layerIdRef(self,value):
		self.set_attribute('layerIdRef',value)



class Length_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Life_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class LightControlId_auto():
	""""""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)



class LightId_auto():
	""""""

	@property
	def lightIdRef(self):
		"""Identifier pointing at a light object"""
		return self.get_attribute('lightIdRef')


	@lightIdRef.setter
	def lightIdRef(self,value):
		self.set_attribute('lightIdRef',value)



class Lighting_auto():
	""""""

	@property
	def lightingSystemIdRef(self):
		return self.get_attribute('lightingSystemIdRef')


	@lightingSystemIdRef.setter
	def lightingSystemIdRef(self,value):
		self.set_attribute('lightingSystemIdRef',value)


	@property
	def meterIdRef(self):
		"""ID for a resource meter"""
		return self.get_attribute('meterIdRef')


	@meterIdRef.setter
	def meterIdRef(self,value):
		self.set_attribute('meterIdRef',value)



class LightingControl_auto():
	""""""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def lightingSystemIdRef(self):
		return self.get_attribute('lightingSystemIdRef')


	@lightingSystemIdRef.setter
	def lightingSystemIdRef(self,value):
		self.set_attribute('lightingSystemIdRef',value)



class LightingSystem_auto():
	""""""


class LightPowerPerArea_auto():
	"""Amount of power used by lighting in a given area"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Location_auto():
	"""The Location element describes the location of the global origin for this campus.  This element can be used in a general sense by using the Name and Description elements for a physical address or landmark, or Location can be made precise by specifying the Elevation, Longitude, and Latitude of the origin."""


class LowValue_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Material_auto():
	""""""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)



class MaterialId_auto():
	""""""

	@property
	def materialIdRef(self):
		"""ID identifying a material in this layer.  Multiple materials in layers are in order from outside to inside."""
		return self.get_attribute('materialIdRef')


	@materialIdRef.setter
	def materialIdRef(self,value):
		self.set_attribute('materialIdRef',value)



class MaxPressure_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MaxRelativeHumidity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MaxTemp_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MaximumFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Meter_auto():
	"""Description of a resource measurement"""

	@property
	def resourceType(self):
		return self.get_attribute('resourceType')


	@resourceType.setter
	def resourceType(self,value):
		self.set_attribute('resourceType',value)



class MeterId_auto():
	""""""

	@property
	def meterIdRef(self):
		"""ID for a resource meter"""
		return self.get_attribute('meterIdRef')


	@meterIdRef.setter
	def meterIdRef(self,value):
		self.set_attribute('meterIdRef',value)



class MinFlow_auto():
	"""Minimum flow"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def hydronicLoopIdRef(self):
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def hydronicLoopType(self):
		return self.get_attribute('hydronicLoopType')


	@hydronicLoopType.setter
	def hydronicLoopType(self,value):
		self.set_attribute('hydronicLoopType',value)



class MinimumFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MinRelativeHumidity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MinPressure_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MinTemp_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ModifiedBy_auto():
	"""Denotes the time this file has been modified, as well as the person and program used to modify this file."""

	@property
	def personId(self):
		return self.get_attribute('personId')


	@personId.setter
	def personId(self,value):
		self.set_attribute('personId',value)


	@property
	def programId(self):
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def date(self):
		return self.get_attribute('date')


	@date.setter
	def date(self,value):
		self.set_attribute('date',value)



class NaturalVentHiTemp_auto():
	"""Natural ventilation does not occur above this temperature."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class NaturalVentLoTemp_auto():
	"""Natural ventilation does not occur below this temperature."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class OAFlowPerArea_auto():
	"""Outside air flow per area"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class OAFlowPerPerson_auto():
	"""Outside air flow per person"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Opening_auto():
	""""""

	@property
	def interiorShadeType(self):
		return self.get_attribute('interiorShadeType')


	@interiorShadeType.setter
	def interiorShadeType(self,value):
		self.set_attribute('interiorShadeType',value)


	@property
	def exteriorShadeType(self):
		return self.get_attribute('exteriorShadeType')


	@exteriorShadeType.setter
	def exteriorShadeType(self,value):
		self.set_attribute('exteriorShadeType',value)


	@property
	def windowTypeIdRef(self):
		return self.get_attribute('windowTypeIdRef')


	@windowTypeIdRef.setter
	def windowTypeIdRef(self,value):
		self.set_attribute('windowTypeIdRef',value)


	@property
	def constructionIdRef(self):
		"""Identifier pointing to a construction"""
		return self.get_attribute('constructionIdRef')


	@constructionIdRef.setter
	def constructionIdRef(self,value):
		self.set_attribute('constructionIdRef',value)


	@property
	def openingType(self):
		return self.get_attribute('openingType')


	@openingType.setter
	def openingType(self,value):
		self.set_attribute('openingType',value)



class OperationRange_auto():
	""""""


class OperationSchedule_auto():
	""""""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)



class PeopleNumber_auto():
	"""Occupancy of the space"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class PeopleSensibleHeatGain_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class PercentExisting_auto():
	"""Percent of original building shell used in renovation"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Performance_auto():
	"""Used to represent part load performance"""

	@property
	def performanceType(self):
		return self.get_attribute('performanceType')


	@performanceType.setter
	def performanceType(self,value):
		self.set_attribute('performanceType',value)



class Permeance_auto():
	"""The rate water vapor is allowed through a surface"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class PersonInfo_auto():
	"""Contains information about people that created and modified this file"""


class PlanarGeometry_auto():
	"""Geometry data in ifcXML format.  All data is global, with the assumption that positive X is East, positive Y is North, and positive Z is up.  If geometry is to be precise, use Longitude, Latitude, and Elevation in the Location element to define the origin.  Otherwise the origin is an arbitrary point.  Use PlanarGeometry to define a three dimensional polygon that lies on a plane."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class PointData_auto():
	"""The PointData element allows for graph or tabular information to be entered. 
The data type and units of the independent and dependant variables are defined in their respective elements.  Each Data element represent a data point, with each Value element representing the value of a variable - starting with the independant variable, then each dependant variable listed in the order defined."""


class PolyLoop_auto():
	"""This is a list of coordinates that make up a polygon in three-dimensional space.  All coordinates must lie on the same plane.  The right-hand rule applies for defining the outward normal of a surface: For every surface, points must be defined in order, such that the direction of (the average cross-product between (any point, the centroid of the surface, and the next point)) points in the direction of the outward normal, which is a vector pointing away from the associated space.  Of course, this must only hold for surfaces touching the exterior (only one SpaceId element).

        

      """


class Porosity_auto():
	"""the ratio of the total amount of void space in a material (due to poses, small channels, and so on) to the bulk volume occupied by the material.  """

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Power_auto():
	"""Maximum consumption of energy (power input)"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def powerType(self):
		return self.get_attribute('powerType')


	@powerType.setter
	def powerType(self,value):
		self.set_attribute('powerType',value)


	@property
	def useType(self):
		return self.get_attribute('useType')


	@useType.setter
	def useType(self,value):
		self.set_attribute('useType',value)


	@property
	def meterIdRef(self):
		"""ID for a resource meter"""
		return self.get_attribute('meterIdRef')


	@meterIdRef.setter
	def meterIdRef(self,value):
		self.set_attribute('meterIdRef',value)



class PrandtlNumberFofT_auto():
	"""Prandtl number as a function of temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class PressureControl_auto():
	"""Use this element to describe how the air pressure is controlled. The temperatures specified in this element should be measured just upstream of the air handlers."""


class ProgramInfo_auto():
	"""Contains information about programs that created and modified this file"""


class RatedFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def hydronicLoopIdRef(self):
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def hydronicLoopType(self):
		return self.get_attribute('hydronicLoopType')


	@hydronicLoopType.setter
	def hydronicLoopType(self,value):
		self.set_attribute('hydronicLoopType',value)



class RectangularGeometry_auto():
	"""Geometry data in a form typically used in simulation engines.  For surfaces, specify the location of the bottom-left corner with the CartesianPoint element when facing it from the outside.  Also for surfaces, Tilt and Azimuth must be specified.  For openings, the third Coordinate should be zero.  These Coordinates represent the distance of the bottom-left of the opening starting at the bottom-left corner of the parent surface.  Azimuth and Tilt should not be specified for opening."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class RecycledContent_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Reflectance_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class Results_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def currency(self):
		return self.get_attribute('currency')


	@currency.setter
	def currency(self,value):
		self.set_attribute('currency',value)


	@property
	def resultsType(self):
		return self.get_attribute('resultsType')


	@resultsType.setter
	def resultsType(self,value):
		self.set_attribute('resultsType',value)


	@property
	def resourceType(self):
		return self.get_attribute('resourceType')


	@resourceType.setter
	def resourceType(self,value):
		self.set_attribute('resourceType',value)


	@property
	def startTime(self):
		"""Use the startTime attribute to define the start of the first Value element."""
		return self.get_attribute('startTime')


	@startTime.setter
	def startTime(self,value):
		self.set_attribute('startTime',value)


	@property
	def timeIncrement(self):
		"""This specifies the duration of time between each Value element. This is required if more than one Value element exists in a this Results element."""
		return self.get_attribute('timeIncrement')


	@timeIncrement.setter
	def timeIncrement(self,value):
		self.set_attribute('timeIncrement',value)



class Roughness_auto():
	"""Roughness of the outside surface"""

	@property
	def value(self):
		return self.get_attribute('value')


	@value.setter
	def value(self,value):
		self.set_attribute('value',value)



class R_value_auto():
	"""Resistance of material"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ShadeControl_auto():
	""""""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class ShadeSchedule_auto():
	"""Use this element to define schedules for a shade."""

	@property
	def scheduleIdRef(self):
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)



class Schedule_auto():
	"""List of year schedules that make up an entire calendar year."""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class Setback_auto():
	"""Distance from outside surface of window to outside surface of wall"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ShadingCoeff_auto():
	"""Shading coefficient"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ShellGeometry_auto():
	"""Geometry data in ifcXML format.  All data is global, with the assumption that positive X is East, positive Y is North, and positive Z is up.  If geometry is to be precise, use Longitude, Latitude, and Elevation in the Location element to define the origin.  Otherwise the origin is an arbitrary point.  ShellGeometry is used to define a closed shell."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class SinkRate_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class SolarHeatGainCoeff_auto():
	"""Solar heat gain coefficient"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class SolarOnOpening_auto():
	"""Amount of solar radiation striking the opening before a shade is closed."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Space_auto():
	"""A space represents a volume enclosed by surfaces."""

	@property
	def spaceType(self):
		"""spaceType represents how a space is used.

            
, an IESNA and ASHRAE project for determining lighting power density for individual spaces. """
		return self.get_attribute('spaceType')


	@spaceType.setter
	def spaceType(self,value):
		self.set_attribute('spaceType',value)


	@property
	def zoneIdRef(self):
		return self.get_attribute('zoneIdRef')


	@zoneIdRef.setter
	def zoneIdRef(self,value):
		self.set_attribute('zoneIdRef',value)


	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def lightScheduleIdRef(self):
		"""ID of the schedule for lights contained in this space"""
		return self.get_attribute('lightScheduleIdRef')


	@lightScheduleIdRef.setter
	def lightScheduleIdRef(self,value):
		self.set_attribute('lightScheduleIdRef',value)


	@property
	def equipmentScheduleIdRef(self):
		"""ID for schedule of equipment use"""
		return self.get_attribute('equipmentScheduleIdRef')


	@equipmentScheduleIdRef.setter
	def equipmentScheduleIdRef(self,value):
		self.set_attribute('equipmentScheduleIdRef',value)


	@property
	def peopleScheduleIdRef(self):
		"""ID for schedule of people in this space"""
		return self.get_attribute('peopleScheduleIdRef')


	@peopleScheduleIdRef.setter
	def peopleScheduleIdRef(self,value):
		self.set_attribute('peopleScheduleIdRef',value)


	@property
	def conditionType(self):
		return self.get_attribute('conditionType')


	@conditionType.setter
	def conditionType(self,value):
		self.set_attribute('conditionType',value)



class SpecificHeat_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Surface_auto():
	""""""

	@property
	def surfaceType(self):
		return self.get_attribute('surfaceType')


	@surfaceType.setter
	def surfaceType(self,value):
		self.set_attribute('surfaceType',value)


	@property
	def constructionIdRef(self):
		"""Identifier pointing to a construction"""
		return self.get_attribute('constructionIdRef')


	@constructionIdRef.setter
	def constructionIdRef(self,value):
		self.set_attribute('constructionIdRef',value)


	@property
	def scheduleShadeIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleShadeIdRef')


	@scheduleShadeIdRef.setter
	def scheduleShadeIdRef(self,value):
		self.set_attribute('scheduleShadeIdRef',value)


	@property
	def exposedToSun(self):
		"""This attribute specifies whether or not direct beam radiation from the sun will ever hit this surface.  Only relevant to exterior surface types."""
		return self.get_attribute('exposedToSun')


	@exposedToSun.setter
	def exposedToSun(self,value):
		self.set_attribute('exposedToSun',value)



class Temp_auto():
	"""Temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def tempType(self):
		return self.get_attribute('tempType')


	@tempType.setter
	def tempType(self,value):
		self.set_attribute('tempType',value)



class Temperature_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class TemperatureControl_auto():
	"""Use this element to describe how the temperature is controlled.  The temperatures specified in this element should be measured just upstream of the most critical piece of equipment (air handlers for a chilled water and hot water loops, the chiller for the cooling water loop)."""


class Thickness_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class TimeIncrement_auto():
	"""Time or period that results represent.  Example: if timeType = Month and TimeIncrement = 1 the Value would be for the month of January or if timeType = Hour and TimeIncrement = 4 the 81st the Value would be for January 14 at noon."""

	@property
	def timeUnit(self):
		return self.get_attribute('timeUnit')


	@timeUnit.setter
	def timeUnit(self,value):
		self.set_attribute('timeUnit',value)



class TotalPeopleHeatGain_auto():
	"""Amount of heat added to the space by people"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Transmittance_auto():
	"""Transmittance of shading surface"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class Transportation_auto():
	"""Public transportation"""

	@property
	def transportationType(self):
		return self.get_attribute('transportationType')


	@transportationType.setter
	def transportationType(self,value):
		self.set_attribute('transportationType',value)


	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)



class UtilityRate_auto():
	"""We have left the UtilityRate element open to allow for use with billing schemas."""


class U_value_auto():
	"""Overall conductance"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Vegetation_auto():
	"""Plants, trees, etc. on a campus"""

	@property
	def vegetationType(self):
		return self.get_attribute('vegetationType')


	@vegetationType.setter
	def vegetationType(self,value):
		self.set_attribute('vegetationType',value)


	@property
	def waterScheduleIdRef(self):
		return self.get_attribute('waterScheduleIdRef')


	@waterScheduleIdRef.setter
	def waterScheduleIdRef(self,value):
		self.set_attribute('waterScheduleIdRef',value)


	@property
	def waterMeterIdRef(self):
		return self.get_attribute('waterMeterIdRef')


	@waterMeterIdRef.setter
	def waterMeterIdRef(self,value):
		self.set_attribute('waterMeterIdRef',value)


	@property
	def shadeScheduleIdRef(self):
		"""Refers to a building-level surface."""
		return self.get_attribute('shadeScheduleIdRef')


	@shadeScheduleIdRef.setter
	def shadeScheduleIdRef(self,value):
		self.set_attribute('shadeScheduleIdRef',value)



class Viscosity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ViscosityFofT_auto():
	"""Viscosity as a function of temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Volume_auto():
	"""Specifies the volume of the space.  This value should be equal to the volume enclosed by the actual physical boundries of the space, as defined by the volumetric model's interior surfaces bounding that space."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WasteWaterHREff_auto():
	"""Waste water heat recovery efficiency"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def airLoopIdRef(self):
		"""ID pointing to an air loop"""
		return self.get_attribute('airLoopIdRef')


	@airLoopIdRef.setter
	def airLoopIdRef(self,value):
		self.set_attribute('airLoopIdRef',value)


	@property
	def hydronicLoopIdRef(self):
		"""ID pointing to a hydronic loop """
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)



class WaterLoss_auto():
	"""This includes blowdown (draining a cooling tower to clean), drift (water loss from water sprayed), and evaporation in cooling towers."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WaterRate_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WaterUsePerCycle_auto():
	"""Amount of water used for water using equipment per cycle of operation."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Weather_auto():
	""""""


class WeekSchedule_auto():
	"""Set of day schedules all assigned to a unique particular period of the week using the day type attribute. Do not schedule conflicting day types to the same week schedule."""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class WeekScheduleId_auto():
	""""""

	@property
	def weekScheduleIdRef(self):
		return self.get_attribute('weekScheduleIdRef')


	@weekScheduleIdRef.setter
	def weekScheduleIdRef(self,value):
		self.set_attribute('weekScheduleIdRef',value)



class Weight_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Width_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WindowType_auto():
	"""One WindowType should be created for each type of window.  
Create a Blind, Frame, and Cost for each OpeningType, and then add as many Glaze and Gaps as exist in the window.
Place these Glaze and Gap elements in order from outside to inside.  
For instance, a two pane window will have Glaze Gap Glaze, where the first Glaze represents the outside surface."""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)



class XAxis_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def dataType(self):
		return self.get_attribute('dataType')


	@dataType.setter
	def dataType(self,value):
		self.set_attribute('dataType',value)



class YAxis_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def dataType(self):
		return self.get_attribute('dataType')


	@dataType.setter
	def dataType(self,value):
		self.set_attribute('dataType',value)



class YearSchedule_auto():
	"""Set of week schedules all assigned for a particular time period during the year defined by the begin and end date elements. These must not span more than one calendar year."""


class Zone_auto():
	""""""

	@property
	def heatSchedIdRef(self):
		"""ID of heating schedule"""
		return self.get_attribute('heatSchedIdRef')


	@heatSchedIdRef.setter
	def heatSchedIdRef(self,value):
		self.set_attribute('heatSchedIdRef',value)


	@property
	def coolSchedIdRef(self):
		"""Design temperature for cooling"""
		return self.get_attribute('coolSchedIdRef')


	@coolSchedIdRef.setter
	def coolSchedIdRef(self,value):
		self.set_attribute('coolSchedIdRef',value)


	@property
	def outAirSchedIdRef(self):
		"""Outside air schedule ID"""
		return self.get_attribute('outAirSchedIdRef')


	@outAirSchedIdRef.setter
	def outAirSchedIdRef(self,value):
		self.set_attribute('outAirSchedIdRef',value)


	@property
	def fanSchedIdRef(self):
		"""ID of the fan schedule for this zone"""
		return self.get_attribute('fanSchedIdRef')


	@fanSchedIdRef.setter
	def fanSchedIdRef(self,value):
		self.set_attribute('fanSchedIdRef',value)



class ZoneCoolingLoad_auto():
	"""Minimum cooling load that triggers the shades to close"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



