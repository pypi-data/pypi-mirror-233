# gbElements_5_12.py
# autogenerated

class gbXML_auto():
	""""""

	@property
	def engine(self):
		return self.get_attribute('engine')


	@engine.setter
	def engine(self,value):
		self.set_attribute('engine',value)


	@property
	def temperatureUnit(self):
		"""This attribute specifies the default temperature unit for the entire gbXML document, wherever the temperatureUnit simple type is used."""
		return self.get_attribute('temperatureUnit')


	@temperatureUnit.setter
	def temperatureUnit(self,value):
		self.set_attribute('temperatureUnit',value)


	@property
	def lengthUnit(self):
		"""This attribute specifies the default length unit for the entire gbXML document, wherever the lengthUnit simple type is used."""
		return self.get_attribute('lengthUnit')


	@lengthUnit.setter
	def lengthUnit(self,value):
		self.set_attribute('lengthUnit',value)


	@property
	def areaUnit(self):
		"""This attribute specifies the default area unit for the entire gbXML document, wherever the areaUnit simple type is used."""
		return self.get_attribute('areaUnit')


	@areaUnit.setter
	def areaUnit(self,value):
		self.set_attribute('areaUnit',value)


	@property
	def volumeUnit(self):
		"""This attribute specifies the default volume unit for the entire gbXML document, wherever the volumeUnit simple type is used."""
		return self.get_attribute('volumeUnit')


	@volumeUnit.setter
	def volumeUnit(self,value):
		self.set_attribute('volumeUnit',value)


	@property
	def useSIUnitsForResults(self):
		"""Results will be given in SI or IP units. True = SI units which is the implied default. If False, results will be in english units."""
		return self.get_attribute('useSIUnitsForResults')


	@useSIUnitsForResults.setter
	def useSIUnitsForResults(self,value):
		self.set_attribute('useSIUnitsForResults',value)


	@property
	def version(self):
		return self.get_attribute('version')


	@version.setter
	def version(self,value):
		self.set_attribute('version',value)


	@property
	def aecXML(self):
		return self.get_child('aecXML')


	@property
	def aecXMLs(self):
		return self.get_children('aecXML')


	def add_aecXML(self,
		):
		return self.add_child('aecXML',
			)


	@property
	def Campus(self):
		return self.get_child('Campus')


	@property
	def Campuss(self):
		return self.get_children('Campus')


	def add_Campus(self,
		id=None,
		designHeatWeathIdRef=None,
		designCoolWeathIdRef=None,
		ifcGUID=None,
		):
		return self.add_child('Campus',
			id=id,
			designHeatWeathIdRef=designHeatWeathIdRef,
			designCoolWeathIdRef=designCoolWeathIdRef,
			ifcGUID=ifcGUID,
			)


	@property
	def LightingSystem(self):
		return self.get_child('LightingSystem')


	@property
	def LightingSystems(self):
		return self.get_children('LightingSystem')


	def add_LightingSystem(self,
		id=None,
		programId=None,
		):
		return self.add_child('LightingSystem',
			id=id,
			programId=programId,
			)


	@property
	def LightingControl(self):
		return self.get_child('LightingControl')


	@property
	def LightingControls(self):
		return self.get_children('LightingControl')


	def add_LightingControl(self,
		type=None,
		id=None,
		lightingSystemIdRef=None,
		programId=None,
		):
		return self.add_child('LightingControl',
			type=type,
			id=id,
			lightingSystemIdRef=lightingSystemIdRef,
			programId=programId,
			)


	@property
	def Construction(self):
		return self.get_child('Construction')


	@property
	def Constructions(self):
		return self.get_children('Construction')


	def add_Construction(self,
		id=None,
		DOELibIdRef=None,
		programId=None,
		):
		return self.add_child('Construction',
			id=id,
			DOELibIdRef=DOELibIdRef,
			programId=programId,
			)


	@property
	def Layer(self):
		return self.get_child('Layer')


	@property
	def Layers(self):
		return self.get_children('Layer')


	def add_Layer(self,
		id=None,
		DOELibIdRef=None,
		):
		return self.add_child('Layer',
			id=id,
			DOELibIdRef=DOELibIdRef,
			)


	@property
	def Material(self):
		return self.get_child('Material')


	@property
	def Materials(self):
		return self.get_children('Material')


	def add_Material(self,
		id=None,
		DOELibIdRef=None,
		):
		return self.add_child('Material',
			id=id,
			DOELibIdRef=DOELibIdRef,
			)


	@property
	def WindowType(self):
		return self.get_child('WindowType')


	@property
	def WindowTypes(self):
		return self.get_children('WindowType')


	def add_WindowType(self,
		id=None,
		DOELibIdRef=None,
		programId=None,
		):
		return self.add_child('WindowType',
			id=id,
			DOELibIdRef=DOELibIdRef,
			programId=programId,
			)


	@property
	def Schedule(self):
		return self.get_child('Schedule')


	@property
	def Schedules(self):
		return self.get_children('Schedule')


	def add_Schedule(self,
		id=None,
		type=None,
		programId=None,
		):
		return self.add_child('Schedule',
			id=id,
			type=type,
			programId=programId,
			)


	@property
	def WeekSchedule(self):
		return self.get_child('WeekSchedule')


	@property
	def WeekSchedules(self):
		return self.get_children('WeekSchedule')


	def add_WeekSchedule(self,
		id=None,
		type=None,
		):
		return self.add_child('WeekSchedule',
			id=id,
			type=type,
			)


	@property
	def DaySchedule(self):
		return self.get_child('DaySchedule')


	@property
	def DaySchedules(self):
		return self.get_children('DaySchedule')


	def add_DaySchedule(self,
		id=None,
		type=None,
		):
		return self.add_child('DaySchedule',
			id=id,
			type=type,
			)


	@property
	def Zone(self):
		return self.get_child('Zone')


	@property
	def Zones(self):
		return self.get_children('Zone')


	def add_Zone(self,
		id=None,
		heatSchedIdRef=None,
		coolSchedIdRef=None,
		outAirSchedIdRef=None,
		airChangesSchedIdRef=None,
		fanSchedIdRef=None,
		fanTempSchedIdRef=None,
		ifcGUID=None,
		programId=None,
		):
		return self.add_child('Zone',
			id=id,
			heatSchedIdRef=heatSchedIdRef,
			coolSchedIdRef=coolSchedIdRef,
			outAirSchedIdRef=outAirSchedIdRef,
			airChangesSchedIdRef=airChangesSchedIdRef,
			fanSchedIdRef=fanSchedIdRef,
			fanTempSchedIdRef=fanTempSchedIdRef,
			ifcGUID=ifcGUID,
			programId=programId,
			)


	@property
	def AirLoop(self):
		return self.get_child('AirLoop')


	@property
	def AirLoops(self):
		return self.get_children('AirLoop')


	def add_AirLoop(self,
		id=None,
		controlZoneIdRef=None,
		systemType=None,
		programId=None,
		):
		return self.add_child('AirLoop',
			id=id,
			controlZoneIdRef=controlZoneIdRef,
			systemType=systemType,
			programId=programId,
			)


	@property
	def HydronicLoop(self):
		return self.get_child('HydronicLoop')


	@property
	def HydronicLoops(self):
		return self.get_children('HydronicLoop')


	def add_HydronicLoop(self,
		loopType=None,
		controlZoneIdRef=None,
		primaryLoopId=None,
		fluidType=None,
		id=None,
		programId=None,
		):
		return self.add_child('HydronicLoop',
			loopType=loopType,
			controlZoneIdRef=controlZoneIdRef,
			primaryLoopId=primaryLoopId,
			fluidType=fluidType,
			id=id,
			programId=programId,
			)


	@property
	def IntEquip(self):
		return self.get_child('IntEquip')


	@property
	def IntEquips(self):
		return self.get_children('IntEquip')


	def add_IntEquip(self,
		id=None,
		scheduleIdRef=None,
		waterTempScheduleIdRef=None,
		hydronicLoopIdRef=None,
		waterScheduleIdRef=None,
		waterMeterIdRef=None,
		type=None,
		airLoopIdRef=None,
		programId=None,
		):
		return self.add_child('IntEquip',
			id=id,
			scheduleIdRef=scheduleIdRef,
			waterTempScheduleIdRef=waterTempScheduleIdRef,
			hydronicLoopIdRef=hydronicLoopIdRef,
			waterScheduleIdRef=waterScheduleIdRef,
			waterMeterIdRef=waterMeterIdRef,
			type=type,
			airLoopIdRef=airLoopIdRef,
			programId=programId,
			)


	@property
	def ExtEquip(self):
		return self.get_child('ExtEquip')


	@property
	def ExtEquips(self):
		return self.get_children('ExtEquip')


	def add_ExtEquip(self,
		id=None,
		scheduleIdRef=None,
		waterTempScheduleIdRef=None,
		hydronicLoopIdRef=None,
		waterScheduleIdRef=None,
		waterMeterIdRef=None,
		type=None,
		airLoopIdRef=None,
		programId=None,
		):
		return self.add_child('ExtEquip',
			id=id,
			scheduleIdRef=scheduleIdRef,
			waterTempScheduleIdRef=waterTempScheduleIdRef,
			hydronicLoopIdRef=hydronicLoopIdRef,
			waterScheduleIdRef=waterScheduleIdRef,
			waterMeterIdRef=waterMeterIdRef,
			type=type,
			airLoopIdRef=airLoopIdRef,
			programId=programId,
			)


	@property
	def Weather(self):
		return self.get_child('Weather')


	@property
	def Weathers(self):
		return self.get_children('Weather')


	def add_Weather(self,
		id=None,
		programId=None,
		):
		return self.add_child('Weather',
			id=id,
			programId=programId,
			)


	@property
	def Meter(self):
		return self.get_child('Meter')


	@property
	def Meters(self):
		return self.get_children('Meter')


	def add_Meter(self,
		id=None,
		resourceType=None,
		programId=None,
		):
		return self.add_child('Meter',
			id=id,
			resourceType=resourceType,
			programId=programId,
			)


	@property
	def Results(self):
		return self.get_child('Results')


	@property
	def Resultss(self):
		return self.get_children('Results')


	def add_Results(self,
		id=None,
		unit=None,
		currency=None,
		resultsType=None,
		resourceType=None,
		programId=None,
		valueType=None,
		startTime=None,
		timeIncrement=None,
		):
		return self.add_child('Results',
			id=id,
			unit=unit,
			currency=currency,
			resultsType=resultsType,
			resourceType=resourceType,
			programId=programId,
			valueType=valueType,
			startTime=startTime,
			timeIncrement=timeIncrement,
			)


	@property
	def DocumentHistory(self):
		return self.get_child('DocumentHistory')


	@property
	def DocumentHistorys(self):
		return self.get_children('DocumentHistory')


	def add_DocumentHistory(self,
		):
		return self.add_child('DocumentHistory',
			)



class aecXML_auto():
	""""""


class Absorptance_auto():
	"""Absorptance of the outside surface"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class AdjacentSpaceId_auto():
	""""""

	@property
	def spaceIdRef(self):
		"""ID for a space that is bounded by this surface. First AdjacentSpaceId entered will determine how the referenced construction layers are ordered with the first construction layer being in contact with the outside or 2nd space listed and the last layer in contact with the first space listed. The outward normal of the surface, as defined by the right hand rule of the coordinates in the planar geometry element, is always pointing away from the first AdjacentSpaceID listed."""
		return self.get_attribute('spaceIdRef')


	@spaceIdRef.setter
	def spaceIdRef(self,value):
		self.set_attribute('spaceIdRef',value)


	@property
	def surfaceType(self):
		"""With interior horizontal surfaces, this attribute can distinguish between ceiling and floor surfaces to avoid double-counting of floor areas, etc. If not present, the surface type can be assumed based on the description of the surface type enums. When the surfaceTypeEnum is provided and the surface attributes (i.e. adjacency, tilt angle) do not match the enumeration's description, the enumeration should have precedence."""
		return self.get_attribute('surfaceType')


	@surfaceType.setter
	def surfaceType(self,value):
		self.set_attribute('surfaceType',value)



class Age_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class AirChangesPerHour_auto():
	""""""


class AirLoop_auto():
	"""The AirLoop element represents the equipment serving one path of air"""

	@property
	def controlZoneIdRef(self):
		return self.get_attribute('controlZoneIdRef')


	@controlZoneIdRef.setter
	def controlZoneIdRef(self,value):
		self.set_attribute('controlZoneIdRef',value)


	@property
	def systemType(self):
		return self.get_attribute('systemType')


	@systemType.setter
	def systemType(self,value):
		self.set_attribute('systemType',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def AirLoopEquipment(self):
		return self.get_child('AirLoopEquipment')


	@property
	def AirLoopEquipments(self):
		return self.get_children('AirLoopEquipment')


	def add_AirLoopEquipment(self,
		id=None,
		equipmentType=None,
		programId=None,
		):
		return self.add_child('AirLoopEquipment',
			id=id,
			equipmentType=equipmentType,
			programId=programId,
			)


	@property
	def TemperatureControl(self):
		return self.get_child('TemperatureControl')


	@property
	def TemperatureControls(self):
		return self.get_children('TemperatureControl')


	def add_TemperatureControl(self,
		):
		return self.add_child('TemperatureControl',
			)


	@property
	def PressureControl(self):
		return self.get_child('PressureControl')


	@property
	def PressureControls(self):
		return self.get_children('PressureControl')


	def add_PressureControl(self,
		):
		return self.add_child('PressureControl',
			)



class AirLoopEquipment_auto():
	"""A piece of equipment serving an air-loop. This is generalized to be able to contain any type of air loop equipment. The air loop equipment are ordered as they exist on the airloop. A blow-through system should have fan listed before the coils. A draw-through system should have the fan listed after the coils."""

	@property
	def equipmentType(self):
		return self.get_attribute('equipmentType')


	@equipmentType.setter
	def equipmentType(self,value):
		self.set_attribute('equipmentType',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Model(self):
		return self.get_child('Model')


	@property
	def Models(self):
		return self.get_children('Model')


	def add_Model(self,
		):
		return self.add_child('Model',
			)


	@property
	def Manufacturer(self):
		return self.get_child('Manufacturer')


	@property
	def Manufacturers(self):
		return self.get_children('Manufacturer')


	def add_Manufacturer(self,
		):
		return self.add_child('Manufacturer',
			)


	@property
	def RatedFlow(self):
		return self.get_child('RatedFlow')


	@property
	def RatedFlows(self):
		return self.get_children('RatedFlow')


	def add_RatedFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('RatedFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def MinFlow(self):
		return self.get_child('MinFlow')


	@property
	def MinFlows(self):
		return self.get_children('MinFlow')


	def add_MinFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('MinFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def OperationSchedule(self):
		return self.get_child('OperationSchedule')


	@property
	def OperationSchedules(self):
		return self.get_children('OperationSchedule')


	def add_OperationSchedule(self,
		scheduleIdRef=None,
		):
		return self.add_child('OperationSchedule',
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def MotorInAirstream(self):
		return self.get_child('MotorInAirstream')


	@property
	def MotorInAirstreams(self):
		return self.get_children('MotorInAirstream')


	def add_MotorInAirstream(self,
		):
		return self.add_child('MotorInAirstream',
			)


	@property
	def Temp(self):
		return self.get_child('Temp')


	@property
	def Temps(self):
		return self.get_children('Temp')


	def add_Temp(self,
		unit=None,
		tempType=None,
		):
		return self.add_child('Temp',
			unit=unit,
			tempType=tempType,
			)


	@property
	def Enthalpy(self):
		return self.get_child('Enthalpy')


	@property
	def Enthalpys(self):
		return self.get_children('Enthalpy')


	def add_Enthalpy(self,
		unit=None,
		):
		return self.add_child('Enthalpy',
			unit=unit,
			)


	@property
	def ResetTemperature(self):
		return self.get_child('ResetTemperature')


	@property
	def ResetTemperatures(self):
		return self.get_children('ResetTemperature')


	def add_ResetTemperature(self,
		unit=None,
		type=None,
		resetSchedIdRef=None,
		):
		return self.add_child('ResetTemperature',
			unit=unit,
			type=type,
			resetSchedIdRef=resetSchedIdRef,
			)


	@property
	def DeltaP(self):
		return self.get_child('DeltaP')


	@property
	def DeltaPs(self):
		return self.get_children('DeltaP')


	def add_DeltaP(self,
		unit=None,
		hydronicLoopType=None,
		hydronicLoopIdRef=None,
		conditioningType=None,
		performanceId=None,
		):
		return self.add_child('DeltaP',
			unit=unit,
			hydronicLoopType=hydronicLoopType,
			hydronicLoopIdRef=hydronicLoopIdRef,
			conditioningType=conditioningType,
			performanceId=performanceId,
			)


	@property
	def DeltaT(self):
		return self.get_child('DeltaT')


	@property
	def DeltaTs(self):
		return self.get_children('DeltaT')


	def add_DeltaT(self,
		unit=None,
		conditioningType=None,
		):
		return self.add_child('DeltaT',
			unit=unit,
			conditioningType=conditioningType,
			)


	@property
	def MinRelativeHumidity(self):
		return self.get_child('MinRelativeHumidity')


	@property
	def MinRelativeHumiditys(self):
		return self.get_children('MinRelativeHumidity')


	def add_MinRelativeHumidity(self,
		unit=None,
		):
		return self.add_child('MinRelativeHumidity',
			unit=unit,
			)


	@property
	def MaxRelativeHumidity(self):
		return self.get_child('MaxRelativeHumidity')


	@property
	def MaxRelativeHumiditys(self):
		return self.get_children('MaxRelativeHumidity')


	def add_MaxRelativeHumidity(self,
		unit=None,
		):
		return self.add_child('MaxRelativeHumidity',
			unit=unit,
			)


	@property
	def Power(self):
		return self.get_child('Power')


	@property
	def Powers(self):
		return self.get_children('Power')


	def add_Power(self,
		unit=None,
		powerType=None,
		useType=None,
		meterIdRef=None,
		):
		return self.add_child('Power',
			unit=unit,
			powerType=powerType,
			useType=useType,
			meterIdRef=meterIdRef,
			)


	@property
	def Capacity(self):
		return self.get_child('Capacity')


	@property
	def Capacitys(self):
		return self.get_children('Capacity')


	def add_Capacity(self,
		unit=None,
		capacityType=None,
		):
		return self.add_child('Capacity',
			unit=unit,
			capacityType=capacityType,
			)


	@property
	def Control(self):
		return self.get_child('Control')


	@property
	def Controls(self):
		return self.get_children('Control')


	def add_Control(self,
		controlType=None,
		stages=None,
		minPowerRatio=None,
		operationType=None,
		performanceIdRef=None,
		):
		return self.add_child('Control',
			controlType=controlType,
			stages=stages,
			minPowerRatio=minPowerRatio,
			operationType=operationType,
			performanceIdRef=performanceIdRef,
			)


	@property
	def Efficiency(self):
		return self.get_child('Efficiency')


	@property
	def Efficiencys(self):
		return self.get_children('Efficiency')


	def add_Efficiency(self,
		standardsType=None,
		efficiencyType=None,
		operationType=None,
		performanceId=None,
		):
		return self.add_child('Efficiency',
			standardsType=standardsType,
			efficiencyType=efficiencyType,
			operationType=operationType,
			performanceId=performanceId,
			)


	@property
	def Performance(self):
		return self.get_child('Performance')


	@property
	def Performances(self):
		return self.get_children('Performance')


	def add_Performance(self,
		id=None,
		performanceType=None,
		):
		return self.add_child('Performance',
			id=id,
			performanceType=performanceType,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def Weight(self):
		return self.get_child('Weight')


	@property
	def Weights(self):
		return self.get_children('Weight')


	def add_Weight(self,
		unit=None,
		):
		return self.add_child('Weight',
			unit=unit,
			)


	@property
	def Life(self):
		return self.get_child('Life')


	@property
	def Lifes(self):
		return self.get_children('Life')


	def add_Life(self,
		unit=None,
		):
		return self.add_child('Life',
			unit=unit,
			)


	@property
	def WaterLoss(self):
		return self.get_child('WaterLoss')


	@property
	def WaterLosss(self):
		return self.get_children('WaterLoss')


	def add_WaterLoss(self,
		unit=None,
		):
		return self.add_child('WaterLoss',
			unit=unit,
			)


	@property
	def Energy(self):
		return self.get_child('Energy')


	@property
	def Energys(self):
		return self.get_children('Energy')


	def add_Energy(self,
		unit=None,
		valueType=None,
		timePeriod=None,
		resourceType=None,
		meterIdRef=None,
		):
		return self.add_child('Energy',
			unit=unit,
			valueType=valueType,
			timePeriod=timePeriod,
			resourceType=resourceType,
			meterIdRef=meterIdRef,
			)


	@property
	def HydronicLoopId(self):
		return self.get_child('HydronicLoopId')


	@property
	def HydronicLoopIds(self):
		return self.get_children('HydronicLoopId')


	def add_HydronicLoopId(self,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('HydronicLoopId',
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def RefrigerantType(self):
		return self.get_child('RefrigerantType')


	@property
	def RefrigerantTypes(self):
		return self.get_children('RefrigerantType')


	def add_RefrigerantType(self,
		):
		return self.add_child('RefrigerantType',
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)



class AirLoopEquipmentId_auto():
	""""""

	@property
	def airLoopEquipIdRef(self):
		"""ID pointing at an air loop equipment object"""
		return self.get_attribute('airLoopEquipIdRef')


	@airLoopEquipIdRef.setter
	def airLoopEquipIdRef(self,value):
		self.set_attribute('airLoopEquipIdRef',value)



class AirLoopId_auto():
	""""""

	@property
	def airLoopIdRef(self):
		"""ID pointing to an air loop"""
		return self.get_attribute('airLoopIdRef')


	@airLoopIdRef.setter
	def airLoopIdRef(self,value):
		self.set_attribute('airLoopIdRef',value)



class AirTemperature_auto():
	"""Minimum air temperature before shades are closed."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class ResetTemperature_auto():
	"""Cooling and Heating Reset Temperature Type"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def resetSchedIdRef(self):
		return self.get_attribute('resetSchedIdRef')


	@resetSchedIdRef.setter
	def resetSchedIdRef(self,value):
		self.set_attribute('resetSchedIdRef',value)



class Albedo_auto():
	"""Reflectance of solar radiation"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class AltEnergySource_auto():
	"""Alternative energy source"""

	@property
	def altEnergyType(self):
		return self.get_attribute('altEnergyType')


	@altEnergyType.setter
	def altEnergyType(self,value):
		self.set_attribute('altEnergyType',value)


	@property
	def resourceType(self):
		return self.get_attribute('resourceType')


	@resourceType.setter
	def resourceType(self,value):
		self.set_attribute('resourceType',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def MeterId(self):
		return self.get_child('MeterId')


	@property
	def MeterIds(self):
		return self.get_children('MeterId')


	def add_MeterId(self,
		meterIdRef=None,
		):
		return self.add_child('MeterId',
			meterIdRef=meterIdRef,
			)



class Area_auto():
	"""Specifies the area of the space or building. This value should be equal to the area enclosed by the physical boundaries of the space, as defined by the intersection of the horizontal plane at the highest floor height and the volumetric model's vertical interior surface planes. Building area should be the sum of space areas whose PeopleNumber element values are greater than zero."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class AverageNumberOfFloors_auto():
	""""""


class Azimuth_auto():
	"""Polygon azimuth. The direction of the outward normal for the polygon (surface or opening) defined in RectangularGeometry element. Azimuth is measured in degrees clockwise from North, where North = 0 degrees. Examples: East = 90 deg, South = 180 deg, West = 270 deg. If CADModelAzimuth is defined, the Azimuth value is relative to the CADModelAzimuth value rather then North."""


class Ballast_auto():
	"""Type of ballast used"""


class BeginDate_auto():
	"""Month and day year schedule begins"""


class HolidayDate_auto():
	"""Date of holiday modeled"""


class BiomassDensity_auto():
	"""Biomass of vegetation"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Blind_auto():
	""""""

	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Transmittance(self):
		return self.get_child('Transmittance')


	@property
	def Transmittances(self):
		return self.get_children('Transmittance')


	def add_Transmittance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Transmittance',
			unit=unit,
			type=type,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			)


	@property
	def Thickness(self):
		return self.get_child('Thickness')


	@property
	def Thicknesss(self):
		return self.get_children('Thickness')


	def add_Thickness(self,
		unit=None,
		):
		return self.add_child('Thickness',
			unit=unit,
			)


	@property
	def Conductivity(self):
		return self.get_child('Conductivity')


	@property
	def Conductivitys(self):
		return self.get_children('Conductivity')


	def add_Conductivity(self,
		unit=None,
		):
		return self.add_child('Conductivity',
			unit=unit,
			)



class BlowerDoorValue_auto():
	"""Leakage value obtained from blower door test."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Building_auto():
	""""""

	@property
	def buildingType(self):
		return self.get_attribute('buildingType')


	@buildingType.setter
	def buildingType(self,value):
		self.set_attribute('buildingType',value)


	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC) file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def StreetAddress(self):
		return self.get_child('StreetAddress')


	@property
	def StreetAddresss(self):
		return self.get_children('StreetAddress')


	def add_StreetAddress(self,
		):
		return self.add_child('StreetAddress',
			)


	@property
	def Area(self):
		return self.get_child('Area')


	@property
	def Areas(self):
		return self.get_children('Area')


	def add_Area(self,
		unit=None,
		):
		return self.add_child('Area',
			unit=unit,
			)


	@property
	def Space(self):
		return self.get_child('Space')


	@property
	def Spaces(self):
		return self.get_children('Space')


	def add_Space(self,
		id=None,
		spaceType=None,
		zoneIdRef=None,
		scheduleIdRef=None,
		lightScheduleIdRef=None,
		equipmentScheduleIdRef=None,
		peopleScheduleIdRef=None,
		conditionType=None,
		buildingStoreyIdRef=None,
		ifcGUID=None,
		):
		return self.add_child('Space',
			id=id,
			spaceType=spaceType,
			zoneIdRef=zoneIdRef,
			scheduleIdRef=scheduleIdRef,
			lightScheduleIdRef=lightScheduleIdRef,
			equipmentScheduleIdRef=equipmentScheduleIdRef,
			peopleScheduleIdRef=peopleScheduleIdRef,
			conditionType=conditionType,
			buildingStoreyIdRef=buildingStoreyIdRef,
			ifcGUID=ifcGUID,
			)


	@property
	def AverageNumberOfFloors(self):
		return self.get_child('AverageNumberOfFloors')


	@property
	def AverageNumberOfFloorss(self):
		return self.get_children('AverageNumberOfFloors')


	def add_AverageNumberOfFloors(self,
		):
		return self.add_child('AverageNumberOfFloors',
			)


	@property
	def InfiltrationFlow(self):
		return self.get_child('InfiltrationFlow')


	@property
	def InfiltrationFlows(self):
		return self.get_children('InfiltrationFlow')


	def add_InfiltrationFlow(self,
		type=None,
		programId=None,
		):
		return self.add_child('InfiltrationFlow',
			type=type,
			programId=programId,
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def SpaceBoundary(self):
		return self.get_child('SpaceBoundary')


	@property
	def SpaceBoundarys(self):
		return self.get_children('SpaceBoundary')


	def add_SpaceBoundary(self,
		ifcGUID=None,
		isSecondLevelBoundary=None,
		surfaceIdRef=None,
		oppositeIdRef=None,
		):
		return self.add_child('SpaceBoundary',
			ifcGUID=ifcGUID,
			isSecondLevelBoundary=isSecondLevelBoundary,
			surfaceIdRef=surfaceIdRef,
			oppositeIdRef=oppositeIdRef,
			)


	@property
	def Lighting(self):
		return self.get_child('Lighting')


	@property
	def Lightings(self):
		return self.get_children('Lighting')


	def add_Lighting(self,
		id=None,
		lightingSystemIdRef=None,
		lightingControlIdRef=None,
		meterIdRef=None,
		programId=None,
		):
		return self.add_child('Lighting',
			id=id,
			lightingSystemIdRef=lightingSystemIdRef,
			lightingControlIdRef=lightingControlIdRef,
			meterIdRef=meterIdRef,
			programId=programId,
			)


	@property
	def IntEquipId(self):
		return self.get_child('IntEquipId')


	@property
	def IntEquipIds(self):
		return self.get_children('IntEquipId')


	def add_IntEquipId(self,
		intEquipIdRef=None,
		):
		return self.add_child('IntEquipId',
			intEquipIdRef=intEquipIdRef,
			)


	@property
	def MeterId(self):
		return self.get_child('MeterId')


	@property
	def MeterIds(self):
		return self.get_children('MeterId')


	def add_MeterId(self,
		meterIdRef=None,
		):
		return self.add_child('MeterId',
			meterIdRef=meterIdRef,
			)


	@property
	def PeakDomesticHotWaterFlow(self):
		return self.get_child('PeakDomesticHotWaterFlow')


	@property
	def PeakDomesticHotWaterFlows(self):
		return self.get_children('PeakDomesticHotWaterFlow')


	def add_PeakDomesticHotWaterFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		waterUseScheduleIdRef=None,
		programId=None,
		):
		return self.add_child('PeakDomesticHotWaterFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			waterUseScheduleIdRef=waterUseScheduleIdRef,
			programId=programId,
			)


	@property
	def BuildingStorey(self):
		return self.get_child('BuildingStorey')


	@property
	def BuildingStoreys(self):
		return self.get_children('BuildingStorey')


	def add_BuildingStorey(self,
		id=None,
		ifcGUID=None,
		):
		return self.add_child('BuildingStorey',
			id=id,
			ifcGUID=ifcGUID,
			)



class BuildingStorey_auto():
	"""Captures Building Storey Structure"""

	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC) file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Level(self):
		return self.get_child('Level')


	@property
	def Levels(self):
		return self.get_children('Level')


	def add_Level(self,
		unit=None,
		):
		return self.add_child('Level',
			unit=unit,
			)


	@property
	def PlanarGeometry(self):
		return self.get_child('PlanarGeometry')


	@property
	def PlanarGeometrys(self):
		return self.get_children('PlanarGeometry')


	def add_PlanarGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('PlanarGeometry',
			id=id,
			unit=unit,
			)



class CADMaterialId_auto():
	""""""

	@property
	def CADMaterialIdRef(self):
		"""ID used by a CAD/BIM program to reference its internal materials library"""
		return self.get_attribute('CADMaterialIdRef')


	@CADMaterialIdRef.setter
	def CADMaterialIdRef(self,value):
		self.set_attribute('CADMaterialIdRef',value)



class CADModelAzimuth_auto():
	"""The number of degrees (0 to 360) of the angle of positive Y axis from north. (Value of the of Azimuth of Model's North relative to Cardinal North)"""


class CADModelId_auto():
	"""The CADModelId Element is used to map a CAD model or BIM to its corresponding gbXML file. Allows the CAD/BIM tool referenced by the programIdRef to correlate the gbXML file to its CAD/BIM model."""

	@property
	def programIdRef(self):
		"""ID reference to unique CAD/BIM program defined in DocumentHistory/ProgramInfo element."""
		return self.get_attribute('programIdRef')


	@programIdRef.setter
	def programIdRef(self,value):
		self.set_attribute('programIdRef',value)



class CADObjectId_auto():
	"""The CADObjectId Element is used to map unique CAD object identifiers to gbXML elements. Allows CAD/BIM tools to read results from a gbXML file and map them to their CAD objects."""

	@property
	def programIdRef(self):
		"""ID reference to unique CAD/BIM program defined in DocumentHistory/ProgramInfo element."""
		return self.get_attribute('programIdRef')


	@programIdRef.setter
	def programIdRef(self,value):
		self.set_attribute('programIdRef',value)



class Campus_auto():
	"""The Campus element should be used as the base for all physical objects. On a campus, place one or more buildings."""

	@property
	def designHeatWeathIdRef(self):
		"""ID for the weather data used for a heating design day"""
		return self.get_attribute('designHeatWeathIdRef')


	@designHeatWeathIdRef.setter
	def designHeatWeathIdRef(self,value):
		self.set_attribute('designHeatWeathIdRef',value)


	@property
	def designCoolWeathIdRef(self):
		"""ID for the weather data used for a cooling design day"""
		return self.get_attribute('designCoolWeathIdRef')


	@designCoolWeathIdRef.setter
	def designCoolWeathIdRef(self,value):
		self.set_attribute('designCoolWeathIdRef',value)


	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC) file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Location(self):
		return self.get_child('Location')


	@property
	def Locations(self):
		return self.get_children('Location')


	def add_Location(self,
		):
		return self.add_child('Location',
			)


	@property
	def Building(self):
		return self.get_child('Building')


	@property
	def Buildings(self):
		return self.get_children('Building')


	def add_Building(self,
		id=None,
		buildingType=None,
		ifcGUID=None,
		):
		return self.add_child('Building',
			id=id,
			buildingType=buildingType,
			ifcGUID=ifcGUID,
			)


	@property
	def Surface(self):
		return self.get_child('Surface')


	@property
	def Surfaces(self):
		return self.get_children('Surface')


	def add_Surface(self,
		id=None,
		surfaceType=None,
		constructionIdRef=None,
		scheduleShadeIdRef=None,
		exposedToSun=None,
		ifcGUID=None,
		):
		return self.add_child('Surface',
			id=id,
			surfaceType=surfaceType,
			constructionIdRef=constructionIdRef,
			scheduleShadeIdRef=scheduleShadeIdRef,
			exposedToSun=exposedToSun,
			ifcGUID=ifcGUID,
			)


	@property
	def YearModeled(self):
		return self.get_child('YearModeled')


	@property
	def YearModeleds(self):
		return self.get_children('YearModeled')


	def add_YearModeled(self,
		):
		return self.add_child('YearModeled',
			)


	@property
	def DaylightSavings(self):
		return self.get_child('DaylightSavings')


	@property
	def DaylightSavingss(self):
		return self.get_children('DaylightSavings')


	def add_DaylightSavings(self,
		):
		return self.add_child('DaylightSavings',
			)


	@property
	def Life(self):
		return self.get_child('Life')


	@property
	def Lifes(self):
		return self.get_children('Life')


	def add_Life(self,
		unit=None,
		):
		return self.add_child('Life',
			unit=unit,
			)


	@property
	def AltEnergySource(self):
		return self.get_child('AltEnergySource')


	@property
	def AltEnergySources(self):
		return self.get_children('AltEnergySource')


	def add_AltEnergySource(self,
		id=None,
		altEnergyType=None,
		resourceType=None,
		programId=None,
		):
		return self.add_child('AltEnergySource',
			id=id,
			altEnergyType=altEnergyType,
			resourceType=resourceType,
			programId=programId,
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def Vegetation(self):
		return self.get_child('Vegetation')


	@property
	def Vegetations(self):
		return self.get_children('Vegetation')


	def add_Vegetation(self,
		id=None,
		vegetationType=None,
		waterScheduleIdRef=None,
		waterMeterIdRef=None,
		shadeScheduleIdRef=None,
		programId=None,
		):
		return self.add_child('Vegetation',
			id=id,
			vegetationType=vegetationType,
			waterScheduleIdRef=waterScheduleIdRef,
			waterMeterIdRef=waterMeterIdRef,
			shadeScheduleIdRef=shadeScheduleIdRef,
			programId=programId,
			)


	@property
	def Transportation(self):
		return self.get_child('Transportation')


	@property
	def Transportations(self):
		return self.get_children('Transportation')


	def add_Transportation(self,
		id=None,
		transportationType=None,
		scheduleIdRef=None,
		programId=None,
		):
		return self.add_child('Transportation',
			id=id,
			transportationType=transportationType,
			scheduleIdRef=scheduleIdRef,
			programId=programId,
			)


	@property
	def MeterId(self):
		return self.get_child('MeterId')


	@property
	def MeterIds(self):
		return self.get_children('MeterId')


	def add_MeterId(self,
		meterIdRef=None,
		):
		return self.add_child('MeterId',
			meterIdRef=meterIdRef,
			)


	@property
	def ExtEquipId(self):
		return self.get_child('ExtEquipId')


	@property
	def ExtEquipIds(self):
		return self.get_children('ExtEquipId')


	def add_ExtEquipId(self,
		extEquipIdRef=None,
		):
		return self.add_child('ExtEquipId',
			extEquipIdRef=extEquipIdRef,
			)


	@property
	def Lighting(self):
		return self.get_child('Lighting')


	@property
	def Lightings(self):
		return self.get_children('Lighting')


	def add_Lighting(self,
		id=None,
		lightingSystemIdRef=None,
		lightingControlIdRef=None,
		meterIdRef=None,
		programId=None,
		):
		return self.add_child('Lighting',
			id=id,
			lightingSystemIdRef=lightingSystemIdRef,
			lightingControlIdRef=lightingControlIdRef,
			meterIdRef=meterIdRef,
			programId=programId,
			)


	@property
	def LightControlId(self):
		return self.get_child('LightControlId')


	@property
	def LightControlIds(self):
		return self.get_children('LightControlId')


	def add_LightControlId(self,
		scheduleIdRef=None,
		):
		return self.add_child('LightControlId',
			scheduleIdRef=scheduleIdRef,
			)



class Capacity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def capacityType(self):
		return self.get_attribute('capacityType')


	@capacityType.setter
	def capacityType(self,value):
		self.set_attribute('capacityType',value)



class CartesianPoint_auto():
	"""This is the x, y, and z distances from the origin. This element must have three Coordinate elements when representing 3-d space, which represent x, y and z in order. This element must have two Coordinate elements when representing 2-d space.

				

			"""

	@property
	def Coordinate(self):
		return self.get_child('Coordinate')


	@property
	def Coordinates(self):
		return self.get_children('Coordinate')


	def add_Coordinate(self,
		):
		return self.add_child('Coordinate',
			)



class CDD_auto():
	"""Cooling degree days. CDD is calculated as the number of degrees a mean daily temperature is above a value (specified as the Temperature element), for each day. For example, if the mean temperature in a region rises to 77 degrees for three days during a year, the rest of the time staying below 75, and the Temperature element is set at 75, then CDD = 6."""

	@property
	def Temperature(self):
		return self.get_child('Temperature')


	@property
	def Temperatures(self):
		return self.get_children('Temperature')


	def add_Temperature(self,
		unit=None,
		programId=None,
		):
		return self.add_child('Temperature',
			unit=unit,
			programId=programId,
			)


	@property
	def CDDValue(self):
		return self.get_child('CDDValue')


	@property
	def CDDValues(self):
		return self.get_children('CDDValue')


	def add_CDDValue(self,
		):
		return self.add_child('CDDValue',
			)



class CDDValue_auto():
	"""Cooling degree day value"""


class City_auto():
	""""""


class ClosedShell_auto():
	"""This is an element from ifcXML that describes a collection of faces that make up a closed shell.

				

			"""

	@property
	def PolyLoop(self):
		return self.get_child('PolyLoop')


	@property
	def PolyLoops(self):
		return self.get_children('PolyLoop')


	def add_PolyLoop(self,
		):
		return self.add_child('PolyLoop',
			)



class CLTDParameters_auto():
	"""Parameters required by CLTD load calculation method, as described in the 1989 ASHRAE Handbook, Fundamentals volume, pages 26.32 and following. Ignore this element and all elements under it if you are not planning to use that method."""

	@property
	def roofASHRAENumber(self):
		"""Specifies the number 1 to 13 to use for a roof. See Table 29 page 26.34, 1989 ASHRAE Handbook, Fundamentals volume."""
		return self.get_attribute('roofASHRAENumber')


	@roofASHRAENumber.setter
	def roofASHRAENumber(self,value):
		self.set_attribute('roofASHRAENumber',value)


	@property
	def wallASHRAEGroup(self):
		"""Specifies the wall group code A to G to use for a wall. See Table 31, page 26.36, 1989 ASHRAE Handbook, Fundamentals volume."""
		return self.get_attribute('wallASHRAEGroup')


	@wallASHRAEGroup.setter
	def wallASHRAEGroup(self,value):
		self.set_attribute('wallASHRAEGroup',value)


	@property
	def roofColor(self):
		"""Specifies the effective roof color, which depends on the actual color and whether the location is industrial or rural. See page 26.34, 1989 ASHRAE Handbook, Fundamentals volume."""
		return self.get_attribute('roofColor')


	@roofColor.setter
	def roofColor(self,value):
		self.set_attribute('roofColor',value)


	@property
	def roofHasSuspendedCeiling(self):
		"""Specifies whether or not a roof has a suspended ceiling under it. See table 29, page 26.34, 1989 ASHRAE Handbook, Fundamentals volume."""
		return self.get_attribute('roofHasSuspendedCeiling')


	@roofHasSuspendedCeiling.setter
	def roofHasSuspendedCeiling(self,value):
		self.set_attribute('roofHasSuspendedCeiling',value)


	@property
	def wallColor(self):
		"""Specifies the effective wall color, which depends on the actual color and whether the location is industrial or rural. See page 26.36, 1989 ASHRAE Handbook, Fundamentals volume."""
		return self.get_attribute('wallColor')


	@wallColor.setter
	def wallColor(self,value):
		self.set_attribute('wallColor',value)



class CoefficientOfUtilization_auto():
	"""The coefficient of utilization is the ratio of luminous flux on a work plane to the luminous flux emitted by the lamps alone. """

	@property
	def wallReflectance(self):
		return self.get_attribute('wallReflectance')


	@wallReflectance.setter
	def wallReflectance(self,value):
		self.set_attribute('wallReflectance',value)


	@property
	def ceilingCavityReflectance(self):
		return self.get_attribute('ceilingCavityReflectance')


	@ceilingCavityReflectance.setter
	def ceilingCavityReflectance(self,value):
		self.set_attribute('ceilingCavityReflectance',value)


	@property
	def floorReflectance(self):
		return self.get_attribute('floorReflectance')


	@floorReflectance.setter
	def floorReflectance(self,value):
		self.set_attribute('floorReflectance',value)


	@property
	def roomCavityRatio(self):
		"""Room cavity ratio is a measure of the room cavity proportions."""
		return self.get_attribute('roomCavityRatio')


	@roomCavityRatio.setter
	def roomCavityRatio(self,value):
		self.set_attribute('roomCavityRatio',value)



class CompanyName_auto():
	""""""


class Conductivity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ConductivityFofT_auto():
	"""Conductivity as a function of temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Construction_auto():
	"""A Construction is a combination of layers, such as a wall or a roof"""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def U_value(self):
		return self.get_child('U-value')


	@property
	def U_values(self):
		return self.get_children('U-value')


	def add_U_value(self,
		unit=None,
		):
		return self.add_child('U-value',
			unit=unit,
			)


	@property
	def Absorptance(self):
		return self.get_child('Absorptance')


	@property
	def Absorptances(self):
		return self.get_children('Absorptance')


	def add_Absorptance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Absorptance',
			unit=unit,
			type=type,
			)


	@property
	def Roughness(self):
		return self.get_child('Roughness')


	@property
	def Roughnesss(self):
		return self.get_children('Roughness')


	def add_Roughness(self,
		value=None,
		):
		return self.add_child('Roughness',
			value=value,
			)


	@property
	def Albedo(self):
		return self.get_child('Albedo')


	@property
	def Albedos(self):
		return self.get_children('Albedo')


	def add_Albedo(self,
		unit=None,
		):
		return self.add_child('Albedo',
			unit=unit,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			)


	@property
	def Transmittance(self):
		return self.get_child('Transmittance')


	@property
	def Transmittances(self):
		return self.get_children('Transmittance')


	def add_Transmittance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Transmittance',
			unit=unit,
			type=type,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def PercentExisting(self):
		return self.get_child('PercentExisting')


	@property
	def PercentExistings(self):
		return self.get_children('PercentExisting')


	def add_PercentExisting(self,
		unit=None,
		):
		return self.add_child('PercentExisting',
			unit=unit,
			)


	@property
	def FireFace(self):
		return self.get_child('FireFace')


	@property
	def FireFaces(self):
		return self.get_children('FireFace')


	def add_FireFace(self,
		):
		return self.add_child('FireFace',
			)


	@property
	def LayerId(self):
		return self.get_child('LayerId')


	@property
	def LayerIds(self):
		return self.get_children('LayerId')


	def add_LayerId(self,
		layerIdRef=None,
		):
		return self.add_child('LayerId',
			layerIdRef=layerIdRef,
			)


	@property
	def ExtEquipId(self):
		return self.get_child('ExtEquipId')


	@property
	def ExtEquipIds(self):
		return self.get_children('ExtEquipId')


	def add_ExtEquipId(self,
		extEquipIdRef=None,
		):
		return self.add_child('ExtEquipId',
			extEquipIdRef=extEquipIdRef,
			)


	@property
	def LoadCalcInputParameters(self):
		return self.get_child('LoadCalcInputParameters')


	@property
	def LoadCalcInputParameterss(self):
		return self.get_children('LoadCalcInputParameters')


	def add_LoadCalcInputParameters(self,
		):
		return self.add_child('LoadCalcInputParameters',
			)



class Control_auto():
	"""The Control element should be used for describing how this equipment is controlled."""

	@property
	def controlType(self):
		return self.get_attribute('controlType')


	@controlType.setter
	def controlType(self,value):
		self.set_attribute('controlType',value)


	@property
	def stages(self):
		return self.get_attribute('stages')


	@stages.setter
	def stages(self,value):
		self.set_attribute('stages',value)


	@property
	def minPowerRatio(self):
		return self.get_attribute('minPowerRatio')


	@minPowerRatio.setter
	def minPowerRatio(self,value):
		self.set_attribute('minPowerRatio',value)


	@property
	def operationType(self):
		return self.get_attribute('operationType')


	@operationType.setter
	def operationType(self,value):
		self.set_attribute('operationType',value)


	@property
	def performanceIdRef(self):
		return self.get_attribute('performanceIdRef')


	@performanceIdRef.setter
	def performanceIdRef(self,value):
		self.set_attribute('performanceIdRef',value)



class Coordinate_auto():
	"""This is the an x, y, or z length measurement from the origin.

				

			"""


class Cost_auto():
	""""""

	@property
	def costType(self):
		return self.get_attribute('costType')


	@costType.setter
	def costType(self,value):
		self.set_attribute('costType',value)


	@property
	def CostValue(self):
		return self.get_child('CostValue')


	@property
	def CostValues(self):
		return self.get_children('CostValue')


	def add_CostValue(self,
		currency=None,
		unit=None,
		):
		return self.add_child('CostValue',
			currency=currency,
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)



class CostValue_auto():
	""""""

	@property
	def currency(self):
		return self.get_attribute('currency')


	@currency.setter
	def currency(self,value):
		self.set_attribute('currency',value)


	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class CreatedBy_auto():
	"""Denotes the time this file has been created, as well as the person and program used to create this file."""

	@property
	def personId(self):
		return self.get_attribute('personId')


	@personId.setter
	def personId(self,value):
		self.set_attribute('personId',value)


	@property
	def programId(self):
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def date(self):
		return self.get_attribute('date')


	@date.setter
	def date(self,value):
		self.set_attribute('date',value)


	@property
	def CADModelId(self):
		return self.get_child('CADModelId')


	@property
	def CADModelIds(self):
		return self.get_children('CADModelId')


	def add_CADModelId(self,
		programIdRef=None,
		):
		return self.add_child('CADModelId',
			programIdRef=programIdRef,
			)



class Country_auto():
	""""""


class CyclesPerWeek_auto():
	"""Number of operation cycles per week."""


class Data_auto():
	""""""

	@property
	def IndependentValue(self):
		return self.get_child('IndependentValue')


	@property
	def IndependentValues(self):
		return self.get_children('IndependentValue')


	def add_IndependentValue(self,
		):
		return self.add_child('IndependentValue',
			)


	@property
	def DependentValue(self):
		return self.get_child('DependentValue')


	@property
	def DependentValues(self):
		return self.get_children('DependentValue')


	def add_DependentValue(self,
		):
		return self.add_child('DependentValue',
			)



class Day_auto():
	""""""

	@property
	def dayScheduleIdRef(self):
		"""ID for operation schedules"""
		return self.get_attribute('dayScheduleIdRef')


	@dayScheduleIdRef.setter
	def dayScheduleIdRef(self,value):
		self.set_attribute('dayScheduleIdRef',value)


	@property
	def dayType(self):
		return self.get_attribute('dayType')


	@dayType.setter
	def dayType(self,value):
		self.set_attribute('dayType',value)



class DaylightSavings_auto():
	"""Allows for including daylight savings time"""


class DaySchedule_auto():
	"""Set of values that define the profile of one 24 hour period divided equally to the number of values entered."""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def ScheduleValue(self):
		return self.get_child('ScheduleValue')


	@property
	def ScheduleValues(self):
		return self.get_children('ScheduleValue')


	def add_ScheduleValue(self,
		OutsideHighReset=None,
		OutsideLowReset=None,
		SupplyHighReset=None,
		SupplyLowReset=None,
		):
		return self.add_child('ScheduleValue',
			OutsideHighReset=OutsideHighReset,
			OutsideLowReset=OutsideLowReset,
			SupplyHighReset=SupplyHighReset,
			SupplyLowReset=SupplyLowReset,
			)



class DDDayCool_auto():
	"""Day of the month that the cooling design day occurs on"""


class DDDayHeat_auto():
	"""Day of the month that the heating design day occurs on"""


class DDDaylightCool_auto():
	"""Flag for daylight savings on the cooling design day"""


class DDDaylightHeat_auto():
	"""Flag for daylight savings for the heating design day"""


class DDDBCool_auto():
	"""Cooling design day dry bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDDBHeat_auto():
	"""Heating design day dry bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDDBRangeCool_auto():
	"""Cooling design day dry bulb temperature range"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDDBRangeHeat_auto():
	"""Heating design day dry bulb temperature range"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDGroundTCool_auto():
	"""Ground temperature on the cooling design day"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDGroundTHeat_auto():
	"""Ground temperature for the heating design day"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDHiHrCool_auto():
	"""Cooling design day hour of high temperature"""


class DDHiHrHeat_auto():
	"""Heating design day hour of high temperature"""


class DDLoHrCool_auto():
	"""Cooling design day hour of low temperature"""


class DDLoHrHeat_auto():
	"""Heating design day hour of low temperature"""


class DDMonthCool_auto():
	"""Month the cooling design day lands on. 1=Jan 12=Dec"""


class DDMonthHeat_auto():
	"""Month that the heating design day occurs on. 1=Jan 12=Dec"""


class DDPressureCool_auto():
	"""Cooling design day atmospheric pressure"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDPressureHeat_auto():
	"""Heating design day atmospheric pressure"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDRainCool_auto():
	"""Flag for rain on the cooling design day. 0=no rain 1=rain"""


class DDRainHeat_auto():
	"""Heating design day rain flag. 0=no rain, 1=rain"""


class DDSkyClearnessCool_auto():
	"""Cooling design day sky clearness"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDSkyClearnessHeat_auto():
	"""Heating design day sky clearness"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDSnowCool_auto():
	"""Flag for snow on the cooling design day. 0=not snowing 1=snowing"""


class DDSnowHeat_auto():
	"""Heating design day snow flag. 0=not snowing 1=snowing"""


class DDWBCool_auto():
	"""Cooling design day wet bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWBHeat_auto():
	"""Heating design day wet bulb temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindDirCool_auto():
	"""Cooing design day wind direction"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindDirHeat_auto():
	"""Heating design day wind direction"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindSpeedCool_auto():
	"""Cooling design day wind speed"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DDWindSpeedHeat_auto():
	"""Heating design day wind speed"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DeltaP_auto():
	"""Difference in pressure"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def hydronicLoopType(self):
		return self.get_attribute('hydronicLoopType')


	@hydronicLoopType.setter
	def hydronicLoopType(self,value):
		self.set_attribute('hydronicLoopType',value)


	@property
	def hydronicLoopIdRef(self):
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def conditioningType(self):
		"""Use this attribute for conditioning units with both heating and cooling."""
		return self.get_attribute('conditioningType')


	@conditioningType.setter
	def conditioningType(self,value):
		self.set_attribute('conditioningType',value)


	@property
	def performanceId(self):
		"""Use this attribute to point to a performance curve if one is provided"""
		return self.get_attribute('performanceId')


	@performanceId.setter
	def performanceId(self,value):
		self.set_attribute('performanceId',value)



class DeltaT_auto():
	"""Difference in temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def conditioningType(self):
		"""Use this attribute for conditioning units with both heating and cooling."""
		return self.get_attribute('conditioningType')


	@conditioningType.setter
	def conditioningType(self,value):
		self.set_attribute('conditioningType',value)



class Density_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DensityFofT_auto():
	"""Density as a function of temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DependentValue_auto():
	"""Value of a dependent variable for this data point"""


class DependentVariable_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def dataType(self):
		return self.get_attribute('dataType')


	@dataType.setter
	def dataType(self,value):
		self.set_attribute('dataType',value)


	@property
	def minValue(self):
		"""Use minValue and maxValue to define constraints on the curve."""
		return self.get_attribute('minValue')


	@minValue.setter
	def minValue(self,value):
		self.set_attribute('minValue',value)


	@property
	def maxValue(self):
		return self.get_attribute('maxValue')


	@maxValue.setter
	def maxValue(self,value):
		self.set_attribute('maxValue',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)



class Description_auto():
	""""""


class DesignCoolT_auto():
	"""Design temperature for cooling"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class DesignFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class RecircFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DesignHeatT_auto():
	"""Design temperature for heating"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class DesignPressure_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class DesignTemp_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Dimensions_auto():
	""""""

	@property
	def Height(self):
		return self.get_child('Height')


	@property
	def Heights(self):
		return self.get_children('Height')


	def add_Height(self,
		unit=None,
		):
		return self.add_child('Height',
			unit=unit,
			)


	@property
	def Width(self):
		return self.get_child('Width')


	@property
	def Widths(self):
		return self.get_children('Width')


	def add_Width(self,
		unit=None,
		):
		return self.add_child('Width',
			unit=unit,
			)


	@property
	def Length(self):
		return self.get_child('Length')


	@property
	def Lengths(self):
		return self.get_children('Length')


	def add_Length(self,
		unit=None,
		):
		return self.add_child('Length',
			unit=unit,
			)



class DocumentHistory_auto():
	"""Contains details about people and programs that created and modified this file"""

	@property
	def CreatedBy(self):
		return self.get_child('CreatedBy')


	@property
	def CreatedBys(self):
		return self.get_children('CreatedBy')


	def add_CreatedBy(self,
		personId=None,
		programId=None,
		date=None,
		):
		return self.add_child('CreatedBy',
			personId=personId,
			programId=programId,
			date=date,
			)


	@property
	def ProgramInfo(self):
		return self.get_child('ProgramInfo')


	@property
	def ProgramInfos(self):
		return self.get_children('ProgramInfo')


	def add_ProgramInfo(self,
		id=None,
		):
		return self.add_child('ProgramInfo',
			id=id,
			)


	@property
	def PersonInfo(self):
		return self.get_child('PersonInfo')


	@property
	def PersonInfos(self):
		return self.get_children('PersonInfo')


	def add_PersonInfo(self,
		id=None,
		):
		return self.add_child('PersonInfo',
			id=id,
			)


	@property
	def ModifiedBy(self):
		return self.get_child('ModifiedBy')


	@property
	def ModifiedBys(self):
		return self.get_children('ModifiedBy')


	def add_ModifiedBy(self,
		personId=None,
		programId=None,
		date=None,
		):
		return self.add_child('ModifiedBy',
			personId=personId,
			programId=programId,
			date=date,
			)



class Efficiency_auto():
	""""""

	@property
	def standardsType(self):
		"""Use the standardsType attribute when the efficiency is measured at standard conditions."""
		return self.get_attribute('standardsType')


	@standardsType.setter
	def standardsType(self,value):
		self.set_attribute('standardsType',value)


	@property
	def efficiencyType(self):
		return self.get_attribute('efficiencyType')


	@efficiencyType.setter
	def efficiencyType(self,value):
		self.set_attribute('efficiencyType',value)


	@property
	def operationType(self):
		"""Use this attribute for conditioning units with both heating and cooling."""
		return self.get_attribute('operationType')


	@operationType.setter
	def operationType(self,value):
		self.set_attribute('operationType',value)


	@property
	def performanceId(self):
		"""Use this attribute to point to a performance curve if one is provided"""
		return self.get_attribute('performanceId')


	@performanceId.setter
	def performanceId(self,value):
		self.set_attribute('performanceId',value)



class ElecLoad_auto():
	"""Electric load"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Elevation_auto():
	"""Height above sea level"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Email1Address_auto():
	""""""


class EmissionRate_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Emittance_auto():
	"""Infra-red emissivity"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class EndDate_auto():
	"""Month and day year schedule ends"""


class Energy_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def valueType(self):
		return self.get_attribute('valueType')


	@valueType.setter
	def valueType(self,value):
		self.set_attribute('valueType',value)


	@property
	def timePeriod(self):
		return self.get_attribute('timePeriod')


	@timePeriod.setter
	def timePeriod(self,value):
		self.set_attribute('timePeriod',value)


	@property
	def resourceType(self):
		return self.get_attribute('resourceType')


	@resourceType.setter
	def resourceType(self,value):
		self.set_attribute('resourceType',value)


	@property
	def meterIdRef(self):
		"""ID for a resource meter"""
		return self.get_attribute('meterIdRef')


	@meterIdRef.setter
	def meterIdRef(self,value):
		self.set_attribute('meterIdRef',value)



class Enthalpy_auto():
	"""Minimum enthalpy setpoint for air-side economizer."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Equation_auto():
	"""The Equation element allows data for n-dimensional algebraic data to be entered. The Expression element should contain an dependent variable followed by an = sign and an equation containing independent variables. The independent and dependent variables are then defined by their respective tags. The only mathematical operations allowed are ^ (power), + (addition), - (subtraction), / (division), and * (multiplication). Example: z=x+2*y^2 would have an DependentVariable with a name = z, and two IndependentVariable(s) with names of x and y. Descriptions would be included for each variable, along with unit and dataType information identifying the variable and its role. """

	@property
	def Expression(self):
		return self.get_child('Expression')


	@property
	def Expressions(self):
		return self.get_children('Expression')


	def add_Expression(self,
		):
		return self.add_child('Expression',
			)


	@property
	def IndependentVariable(self):
		return self.get_child('IndependentVariable')


	@property
	def IndependentVariables(self):
		return self.get_children('IndependentVariable')


	def add_IndependentVariable(self,
		unit=None,
		dataType=None,
		):
		return self.add_child('IndependentVariable',
			unit=unit,
			dataType=dataType,
			)


	@property
	def DependentVariable(self):
		return self.get_child('DependentVariable')


	@property
	def DependentVariables(self):
		return self.get_children('DependentVariable')


	def add_DependentVariable(self,
		unit=None,
		dataType=None,
		minValue=None,
		maxValue=None,
		):
		return self.add_child('DependentVariable',
			unit=unit,
			dataType=dataType,
			minValue=minValue,
			maxValue=maxValue,
			)



class EquipPowerPerArea_auto():
	"""Amount of power used by equipment in a given area"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class Expression_auto():
	""""""


class ExtEquip_auto():
	"""External equipment. This is generalized to be able to contain any type of external equipment."""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def waterTempScheduleIdRef(self):
		return self.get_attribute('waterTempScheduleIdRef')


	@waterTempScheduleIdRef.setter
	def waterTempScheduleIdRef(self,value):
		self.set_attribute('waterTempScheduleIdRef',value)


	@property
	def hydronicLoopIdRef(self):
		"""ID pointing to a hydronic loop """
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def waterScheduleIdRef(self):
		return self.get_attribute('waterScheduleIdRef')


	@waterScheduleIdRef.setter
	def waterScheduleIdRef(self,value):
		self.set_attribute('waterScheduleIdRef',value)


	@property
	def waterMeterIdRef(self):
		return self.get_attribute('waterMeterIdRef')


	@waterMeterIdRef.setter
	def waterMeterIdRef(self,value):
		self.set_attribute('waterMeterIdRef',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def airLoopIdRef(self):
		"""ID pointing to an air loop"""
		return self.get_attribute('airLoopIdRef')


	@airLoopIdRef.setter
	def airLoopIdRef(self,value):
		self.set_attribute('airLoopIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Manufacturer(self):
		return self.get_child('Manufacturer')


	@property
	def Manufacturers(self):
		return self.get_children('Manufacturer')


	def add_Manufacturer(self,
		):
		return self.add_child('Manufacturer',
			)


	@property
	def Model(self):
		return self.get_child('Model')


	@property
	def Models(self):
		return self.get_children('Model')


	def add_Model(self,
		):
		return self.add_child('Model',
			)


	@property
	def ElecLoad(self):
		return self.get_child('ElecLoad')


	@property
	def ElecLoads(self):
		return self.get_children('ElecLoad')


	def add_ElecLoad(self,
		unit=None,
		):
		return self.add_child('ElecLoad',
			unit=unit,
			)


	@property
	def FuelLoad(self):
		return self.get_child('FuelLoad')


	@property
	def FuelLoads(self):
		return self.get_children('FuelLoad')


	def add_FuelLoad(self,
		unit=None,
		):
		return self.add_child('FuelLoad',
			unit=unit,
			)


	@property
	def LatentLoad(self):
		return self.get_child('LatentLoad')


	@property
	def LatentLoads(self):
		return self.get_children('LatentLoad')


	def add_LatentLoad(self,
		unit=None,
		):
		return self.add_child('LatentLoad',
			unit=unit,
			)


	@property
	def WindSpeed(self):
		return self.get_child('WindSpeed')


	@property
	def WindSpeeds(self):
		return self.get_children('WindSpeed')


	def add_WindSpeed(self,
		unit=None,
		type=None,
		):
		return self.add_child('WindSpeed',
			unit=unit,
			type=type,
			)


	@property
	def Efficiency(self):
		return self.get_child('Efficiency')


	@property
	def Efficiencys(self):
		return self.get_children('Efficiency')


	def add_Efficiency(self,
		standardsType=None,
		efficiencyType=None,
		operationType=None,
		performanceId=None,
		):
		return self.add_child('Efficiency',
			standardsType=standardsType,
			efficiencyType=efficiencyType,
			operationType=operationType,
			performanceId=performanceId,
			)


	@property
	def Performance(self):
		return self.get_child('Performance')


	@property
	def Performances(self):
		return self.get_children('Performance')


	def add_Performance(self,
		id=None,
		performanceType=None,
		):
		return self.add_child('Performance',
			id=id,
			performanceType=performanceType,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def Weight(self):
		return self.get_child('Weight')


	@property
	def Weights(self):
		return self.get_children('Weight')


	def add_Weight(self,
		unit=None,
		):
		return self.add_child('Weight',
			unit=unit,
			)


	@property
	def WasteWaterHREff(self):
		return self.get_child('WasteWaterHREff')


	@property
	def WasteWaterHREffs(self):
		return self.get_children('WasteWaterHREff')


	def add_WasteWaterHREff(self,
		unit=None,
		airLoopIdRef=None,
		hydronicLoopIdRef=None,
		):
		return self.add_child('WasteWaterHREff',
			unit=unit,
			airLoopIdRef=airLoopIdRef,
			hydronicLoopIdRef=hydronicLoopIdRef,
			)


	@property
	def WaterUsePerCycle(self):
		return self.get_child('WaterUsePerCycle')


	@property
	def WaterUsePerCycles(self):
		return self.get_children('WaterUsePerCycle')


	def add_WaterUsePerCycle(self,
		unit=None,
		):
		return self.add_child('WaterUsePerCycle',
			unit=unit,
			)


	@property
	def RatedFlow(self):
		return self.get_child('RatedFlow')


	@property
	def RatedFlows(self):
		return self.get_children('RatedFlow')


	def add_RatedFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('RatedFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def Power(self):
		return self.get_child('Power')


	@property
	def Powers(self):
		return self.get_children('Power')


	def add_Power(self,
		unit=None,
		powerType=None,
		useType=None,
		meterIdRef=None,
		):
		return self.add_child('Power',
			unit=unit,
			powerType=powerType,
			useType=useType,
			meterIdRef=meterIdRef,
			)


	@property
	def CyclesPerWeek(self):
		return self.get_child('CyclesPerWeek')


	@property
	def CyclesPerWeeks(self):
		return self.get_children('CyclesPerWeek')


	def add_CyclesPerWeek(self,
		):
		return self.add_child('CyclesPerWeek',
			)


	@property
	def Energy(self):
		return self.get_child('Energy')


	@property
	def Energys(self):
		return self.get_children('Energy')


	def add_Energy(self,
		unit=None,
		valueType=None,
		timePeriod=None,
		resourceType=None,
		meterIdRef=None,
		):
		return self.add_child('Energy',
			unit=unit,
			valueType=valueType,
			timePeriod=timePeriod,
			resourceType=resourceType,
			meterIdRef=meterIdRef,
			)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def IndoorAirQuality(self):
		return self.get_child('IndoorAirQuality')


	@property
	def IndoorAirQualitys(self):
		return self.get_children('IndoorAirQuality')


	def add_IndoorAirQuality(self,
		id=None,
		scheduleIdRef=None,
		):
		return self.add_child('IndoorAirQuality',
			id=id,
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def Age(self):
		return self.get_child('Age')


	@property
	def Ages(self):
		return self.get_children('Age')


	def add_Age(self,
		unit=None,
		):
		return self.add_child('Age',
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)



class ExtEquipId_auto():
	""""""

	@property
	def extEquipIdRef(self):
		return self.get_attribute('extEquipIdRef')


	@extEquipIdRef.setter
	def extEquipIdRef(self,value):
		self.set_attribute('extEquipIdRef',value)



class FamilyName_auto():
	""""""


class FileName_auto():
	""""""


class Fire_auto():
	"""Properties of a material under fire conditions."""

	@property
	def Thickness(self):
		return self.get_child('Thickness')


	@property
	def Thicknesss(self):
		return self.get_children('Thickness')


	def add_Thickness(self,
		unit=None,
		):
		return self.add_child('Thickness',
			unit=unit,
			)


	@property
	def Conductivity(self):
		return self.get_child('Conductivity')


	@property
	def Conductivitys(self):
		return self.get_children('Conductivity')


	def add_Conductivity(self,
		unit=None,
		):
		return self.add_child('Conductivity',
			unit=unit,
			)


	@property
	def Density(self):
		return self.get_child('Density')


	@property
	def Densitys(self):
		return self.get_children('Density')


	def add_Density(self,
		unit=None,
		):
		return self.add_child('Density',
			unit=unit,
			)


	@property
	def SpecificHeat(self):
		return self.get_child('SpecificHeat')


	@property
	def SpecificHeats(self):
		return self.get_children('SpecificHeat')


	def add_SpecificHeat(self,
		unit=None,
		):
		return self.add_child('SpecificHeat',
			unit=unit,
			)



class FireFace_auto():
	"""Properties of a construction under fire conditions."""

	@property
	def Absorptance(self):
		return self.get_child('Absorptance')


	@property
	def Absorptances(self):
		return self.get_children('Absorptance')


	def add_Absorptance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Absorptance',
			unit=unit,
			type=type,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			)



class FirstName_auto():
	""""""


class Address1_auto():
	""""""


class Address2_auto():
	""""""


class State_auto():
	""""""


class ZipCode_auto():
	""""""


class PhoneNumber_auto():
	""""""


class FloorSlabHeatLossCoefficient_auto():
	"""Specifies the heat loss from a floor in terms of the amount of heat lost per length of exposed perimeter. Used with both commercial and residential load calculation methods."""

	@property
	def floorSlabPerimeterHeatLossCoefficientUnitTypeEnum(self):
		return self.get_attribute('floorSlabPerimeterHeatLossCoefficientUnitTypeEnum')


	@floorSlabPerimeterHeatLossCoefficientUnitTypeEnum.setter
	def floorSlabPerimeterHeatLossCoefficientUnitTypeEnum(self,value):
		self.set_attribute('floorSlabPerimeterHeatLossCoefficientUnitTypeEnum',value)



class Flow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class FlowControl_auto():
	"""Use this element to describe how the fluid flow is controlled. The temperatures specified in this element should be measured just upstream of the chiller."""

	@property
	def processScheduleId(self):
		return self.get_attribute('processScheduleId')


	@processScheduleId.setter
	def processScheduleId(self,value):
		self.set_attribute('processScheduleId',value)


	@property
	def DesignFlow(self):
		return self.get_child('DesignFlow')


	@property
	def DesignFlows(self):
		return self.get_children('DesignFlow')


	def add_DesignFlow(self,
		unit=None,
		):
		return self.add_child('DesignFlow',
			unit=unit,
			)


	@property
	def MinimumFlow(self):
		return self.get_child('MinimumFlow')


	@property
	def MinimumFlows(self):
		return self.get_children('MinimumFlow')


	def add_MinimumFlow(self,
		unit=None,
		):
		return self.add_child('MinimumFlow',
			unit=unit,
			)


	@property
	def MaximumFlow(self):
		return self.get_child('MaximumFlow')


	@property
	def MaximumFlows(self):
		return self.get_children('MaximumFlow')


	def add_MaximumFlow(self,
		unit=None,
		):
		return self.add_child('MaximumFlow',
			unit=unit,
			)


	@property
	def RecircFlow(self):
		return self.get_child('RecircFlow')


	@property
	def RecircFlows(self):
		return self.get_children('RecircFlow')


	def add_RecircFlow(self,
		unit=None,
		):
		return self.add_child('RecircFlow',
			unit=unit,
			)



class FlowPerArea_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class FlowPerPerson_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class Frame_auto():
	""""""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Width(self):
		return self.get_child('Width')


	@property
	def Widths(self):
		return self.get_children('Width')


	def add_Width(self,
		unit=None,
		):
		return self.add_child('Width',
			unit=unit,
			)



class FuelLoad_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Gap_auto():
	"""Space between window panes"""

	@property
	def gas(self):
		return self.get_attribute('gas')


	@gas.setter
	def gas(self,value):
		self.set_attribute('gas',value)


	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Thickness(self):
		return self.get_child('Thickness')


	@property
	def Thicknesss(self):
		return self.get_children('Thickness')


	def add_Thickness(self,
		unit=None,
		):
		return self.add_child('Thickness',
			unit=unit,
			)


	@property
	def Density(self):
		return self.get_child('Density')


	@property
	def Densitys(self):
		return self.get_children('Density')


	def add_Density(self,
		unit=None,
		):
		return self.add_child('Density',
			unit=unit,
			)


	@property
	def DensityFofT(self):
		return self.get_child('DensityFofT')


	@property
	def DensityFofTs(self):
		return self.get_children('DensityFofT')


	def add_DensityFofT(self,
		unit=None,
		):
		return self.add_child('DensityFofT',
			unit=unit,
			)


	@property
	def Conductivity(self):
		return self.get_child('Conductivity')


	@property
	def Conductivitys(self):
		return self.get_children('Conductivity')


	def add_Conductivity(self,
		unit=None,
		):
		return self.add_child('Conductivity',
			unit=unit,
			)


	@property
	def ConductivityFofT(self):
		return self.get_child('ConductivityFofT')


	@property
	def ConductivityFofTs(self):
		return self.get_children('ConductivityFofT')


	def add_ConductivityFofT(self,
		unit=None,
		):
		return self.add_child('ConductivityFofT',
			unit=unit,
			)


	@property
	def Viscosity(self):
		return self.get_child('Viscosity')


	@property
	def Viscositys(self):
		return self.get_children('Viscosity')


	def add_Viscosity(self,
		unit=None,
		):
		return self.add_child('Viscosity',
			unit=unit,
			)


	@property
	def ViscosityFofT(self):
		return self.get_child('ViscosityFofT')


	@property
	def ViscosityFofTs(self):
		return self.get_children('ViscosityFofT')


	def add_ViscosityFofT(self,
		unit=None,
		):
		return self.add_child('ViscosityFofT',
			unit=unit,
			)


	@property
	def PrandtlNumber(self):
		return self.get_child('PrandtlNumber')


	@property
	def PrandtlNumbers(self):
		return self.get_children('PrandtlNumber')


	def add_PrandtlNumber(self,
		):
		return self.add_child('PrandtlNumber',
			)


	@property
	def PrandtlNumberFofT(self):
		return self.get_child('PrandtlNumberFofT')


	@property
	def PrandtlNumberFofTs(self):
		return self.get_children('PrandtlNumberFofT')


	def add_PrandtlNumberFofT(self,
		unit=None,
		):
		return self.add_child('PrandtlNumberFofT',
			unit=unit,
			)



class GapId_auto():
	""""""

	@property
	def gapIdRef(self):
		"""ID for a gap between window panes"""
		return self.get_attribute('gapIdRef')


	@gapIdRef.setter
	def gapIdRef(self,value):
		self.set_attribute('gapIdRef',value)



class GeneralGeometry_auto():
	"""This element has been left open for use with other geometry definitions, such as X3D or BLISXML."""


class Glare_auto():
	"""Minimum amount of glare to trigger the shades to close"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Glaze_auto():
	"""Properties of one layer of a window"""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Transmittance(self):
		return self.get_child('Transmittance')


	@property
	def Transmittances(self):
		return self.get_children('Transmittance')


	def add_Transmittance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Transmittance',
			unit=unit,
			type=type,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			)


	@property
	def Thickness(self):
		return self.get_child('Thickness')


	@property
	def Thicknesss(self):
		return self.get_children('Thickness')


	def add_Thickness(self,
		unit=None,
		):
		return self.add_child('Thickness',
			unit=unit,
			)


	@property
	def Conductivity(self):
		return self.get_child('Conductivity')


	@property
	def Conductivitys(self):
		return self.get_children('Conductivity')


	def add_Conductivity(self,
		unit=None,
		):
		return self.add_child('Conductivity',
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)



class GlazeConductivity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class GlazeId_auto():
	""""""

	@property
	def glazeIdRef(self):
		"""ID indicating the type of glaze used"""
		return self.get_attribute('glazeIdRef')


	@glazeIdRef.setter
	def glazeIdRef(self,value):
		self.set_attribute('glazeIdRef',value)



class GroundTemp_auto():
	"""Monthly ground temperatures, 12 values"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class GroundTempValue_auto():
	""""""


class GUID_auto():
	""""""

	@property
	def entity(self):
		return self.get_attribute('entity')


	@entity.setter
	def entity(self,value):
		self.set_attribute('entity',value)



class HDD_auto():
	"""Heating degree days. HDD is calculated as the number of degrees a mean daily temperature is below a value (specified as the Temperature element), for each day. For example, if the mean temperature in a region drops to 64 degrees for four days during a year, the rest of the time staying above 65, and the Temperature element is set at 65, then HDD = 4."""

	@property
	def Temperature(self):
		return self.get_child('Temperature')


	@property
	def Temperatures(self):
		return self.get_children('Temperature')


	def add_Temperature(self,
		unit=None,
		programId=None,
		):
		return self.add_child('Temperature',
			unit=unit,
			programId=programId,
			)


	@property
	def HDDValue(self):
		return self.get_child('HDDValue')


	@property
	def HDDValues(self):
		return self.get_children('HDDValue')


	def add_HDDValue(self,
		):
		return self.add_child('HDDValue',
			)



class HDDValue_auto():
	""""""


class Height_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HighLimit_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HighValue_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HorizontalSolar_auto():
	"""Amount of horizontal solar radiation striking the opening before a shade is closed."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HOutside_auto():
	"""h (Outside) is the combined coefficient of heat transfer by long-wave radiation and convection at outer surface, Btu/h-sf-F. See 2001 HoF Chapter 25 Table 1."""

	@property
	def hOutsideUnitTypeEnum(self):
		"""Used by the hOutsideUnitType attribute."""
		return self.get_attribute('hOutsideUnitTypeEnum')


	@hOutsideUnitTypeEnum.setter
	def hOutsideUnitTypeEnum(self,value):
		self.set_attribute('hOutsideUnitTypeEnum',value)



class HydronicLoop_auto():
	"""The HydronicLoop element represents the equipment serving one path of water, or other liquid"""

	@property
	def loopType(self):
		return self.get_attribute('loopType')


	@loopType.setter
	def loopType(self,value):
		self.set_attribute('loopType',value)


	@property
	def controlZoneIdRef(self):
		return self.get_attribute('controlZoneIdRef')


	@controlZoneIdRef.setter
	def controlZoneIdRef(self,value):
		self.set_attribute('controlZoneIdRef',value)


	@property
	def primaryLoopId(self):
		return self.get_attribute('primaryLoopId')


	@primaryLoopId.setter
	def primaryLoopId(self,value):
		self.set_attribute('primaryLoopId',value)


	@property
	def fluidType(self):
		return self.get_attribute('fluidType')


	@fluidType.setter
	def fluidType(self,value):
		self.set_attribute('fluidType',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def HydronicLoopEquipment(self):
		return self.get_child('HydronicLoopEquipment')


	@property
	def HydronicLoopEquipments(self):
		return self.get_children('HydronicLoopEquipment')


	def add_HydronicLoopEquipment(self,
		id=None,
		equipmentType=None,
		waterMeterIdRef=None,
		waterScheduleIdRef=None,
		primaryLoopId=None,
		programId=None,
		):
		return self.add_child('HydronicLoopEquipment',
			id=id,
			equipmentType=equipmentType,
			waterMeterIdRef=waterMeterIdRef,
			waterScheduleIdRef=waterScheduleIdRef,
			primaryLoopId=primaryLoopId,
			programId=programId,
			)


	@property
	def FlowControl(self):
		return self.get_child('FlowControl')


	@property
	def FlowControls(self):
		return self.get_children('FlowControl')


	def add_FlowControl(self,
		processScheduleId=None,
		):
		return self.add_child('FlowControl',
			processScheduleId=processScheduleId,
			)


	@property
	def TemperatureControl(self):
		return self.get_child('TemperatureControl')


	@property
	def TemperatureControls(self):
		return self.get_children('TemperatureControl')


	def add_TemperatureControl(self,
		):
		return self.add_child('TemperatureControl',
			)


	@property
	def DesignCoolT(self):
		return self.get_child('DesignCoolT')


	@property
	def DesignCoolTs(self):
		return self.get_children('DesignCoolT')


	def add_DesignCoolT(self,
		unit=None,
		programId=None,
		):
		return self.add_child('DesignCoolT',
			unit=unit,
			programId=programId,
			)



class HydronicLoopEquipment_auto():
	"""A piece of equipment serving a hydronic loop (most commonly a water loop). This is generalized to be able to contain any type of hydronic loop equipment."""

	@property
	def equipmentType(self):
		return self.get_attribute('equipmentType')


	@equipmentType.setter
	def equipmentType(self,value):
		self.set_attribute('equipmentType',value)


	@property
	def waterMeterIdRef(self):
		return self.get_attribute('waterMeterIdRef')


	@waterMeterIdRef.setter
	def waterMeterIdRef(self,value):
		self.set_attribute('waterMeterIdRef',value)


	@property
	def waterScheduleIdRef(self):
		return self.get_attribute('waterScheduleIdRef')


	@waterScheduleIdRef.setter
	def waterScheduleIdRef(self,value):
		self.set_attribute('waterScheduleIdRef',value)


	@property
	def primaryLoopId(self):
		return self.get_attribute('primaryLoopId')


	@primaryLoopId.setter
	def primaryLoopId(self,value):
		self.set_attribute('primaryLoopId',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Manufacturer(self):
		return self.get_child('Manufacturer')


	@property
	def Manufacturers(self):
		return self.get_children('Manufacturer')


	def add_Manufacturer(self,
		):
		return self.add_child('Manufacturer',
			)


	@property
	def Model(self):
		return self.get_child('Model')


	@property
	def Models(self):
		return self.get_children('Model')


	def add_Model(self,
		):
		return self.add_child('Model',
			)


	@property
	def OperationSchedule(self):
		return self.get_child('OperationSchedule')


	@property
	def OperationSchedules(self):
		return self.get_children('OperationSchedule')


	def add_OperationSchedule(self,
		scheduleIdRef=None,
		):
		return self.add_child('OperationSchedule',
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def Temp(self):
		return self.get_child('Temp')


	@property
	def Temps(self):
		return self.get_children('Temp')


	def add_Temp(self,
		unit=None,
		tempType=None,
		):
		return self.add_child('Temp',
			unit=unit,
			tempType=tempType,
			)


	@property
	def ResetTemperature(self):
		return self.get_child('ResetTemperature')


	@property
	def ResetTemperatures(self):
		return self.get_children('ResetTemperature')


	def add_ResetTemperature(self,
		unit=None,
		type=None,
		resetSchedIdRef=None,
		):
		return self.add_child('ResetTemperature',
			unit=unit,
			type=type,
			resetSchedIdRef=resetSchedIdRef,
			)


	@property
	def HydronicLoopId(self):
		return self.get_child('HydronicLoopId')


	@property
	def HydronicLoopIds(self):
		return self.get_children('HydronicLoopId')


	def add_HydronicLoopId(self,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('HydronicLoopId',
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def RatedFlow(self):
		return self.get_child('RatedFlow')


	@property
	def RatedFlows(self):
		return self.get_children('RatedFlow')


	def add_RatedFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('RatedFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def MinFlow(self):
		return self.get_child('MinFlow')


	@property
	def MinFlows(self):
		return self.get_children('MinFlow')


	def add_MinFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('MinFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def DeltaT(self):
		return self.get_child('DeltaT')


	@property
	def DeltaTs(self):
		return self.get_children('DeltaT')


	def add_DeltaT(self,
		unit=None,
		conditioningType=None,
		):
		return self.add_child('DeltaT',
			unit=unit,
			conditioningType=conditioningType,
			)


	@property
	def DeltaP(self):
		return self.get_child('DeltaP')


	@property
	def DeltaPs(self):
		return self.get_children('DeltaP')


	def add_DeltaP(self,
		unit=None,
		hydronicLoopType=None,
		hydronicLoopIdRef=None,
		conditioningType=None,
		performanceId=None,
		):
		return self.add_child('DeltaP',
			unit=unit,
			hydronicLoopType=hydronicLoopType,
			hydronicLoopIdRef=hydronicLoopIdRef,
			conditioningType=conditioningType,
			performanceId=performanceId,
			)


	@property
	def Power(self):
		return self.get_child('Power')


	@property
	def Powers(self):
		return self.get_children('Power')


	def add_Power(self,
		unit=None,
		powerType=None,
		useType=None,
		meterIdRef=None,
		):
		return self.add_child('Power',
			unit=unit,
			powerType=powerType,
			useType=useType,
			meterIdRef=meterIdRef,
			)


	@property
	def Capacity(self):
		return self.get_child('Capacity')


	@property
	def Capacitys(self):
		return self.get_children('Capacity')


	def add_Capacity(self,
		unit=None,
		capacityType=None,
		):
		return self.add_child('Capacity',
			unit=unit,
			capacityType=capacityType,
			)


	@property
	def Efficiency(self):
		return self.get_child('Efficiency')


	@property
	def Efficiencys(self):
		return self.get_children('Efficiency')


	def add_Efficiency(self,
		standardsType=None,
		efficiencyType=None,
		operationType=None,
		performanceId=None,
		):
		return self.add_child('Efficiency',
			standardsType=standardsType,
			efficiencyType=efficiencyType,
			operationType=operationType,
			performanceId=performanceId,
			)


	@property
	def Control(self):
		return self.get_child('Control')


	@property
	def Controls(self):
		return self.get_children('Control')


	def add_Control(self,
		controlType=None,
		stages=None,
		minPowerRatio=None,
		operationType=None,
		performanceIdRef=None,
		):
		return self.add_child('Control',
			controlType=controlType,
			stages=stages,
			minPowerRatio=minPowerRatio,
			operationType=operationType,
			performanceIdRef=performanceIdRef,
			)


	@property
	def Performance(self):
		return self.get_child('Performance')


	@property
	def Performances(self):
		return self.get_children('Performance')


	def add_Performance(self,
		id=None,
		performanceType=None,
		):
		return self.add_child('Performance',
			id=id,
			performanceType=performanceType,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def Weight(self):
		return self.get_child('Weight')


	@property
	def Weights(self):
		return self.get_children('Weight')


	def add_Weight(self,
		unit=None,
		):
		return self.add_child('Weight',
			unit=unit,
			)


	@property
	def Life(self):
		return self.get_child('Life')


	@property
	def Lifes(self):
		return self.get_children('Life')


	def add_Life(self,
		unit=None,
		):
		return self.add_child('Life',
			unit=unit,
			)


	@property
	def RefrigerantType(self):
		return self.get_child('RefrigerantType')


	@property
	def RefrigerantTypes(self):
		return self.get_children('RefrigerantType')


	def add_RefrigerantType(self,
		):
		return self.add_child('RefrigerantType',
			)


	@property
	def Energy(self):
		return self.get_child('Energy')


	@property
	def Energys(self):
		return self.get_children('Energy')


	def add_Energy(self,
		unit=None,
		valueType=None,
		timePeriod=None,
		resourceType=None,
		meterIdRef=None,
		):
		return self.add_child('Energy',
			unit=unit,
			valueType=valueType,
			timePeriod=timePeriod,
			resourceType=resourceType,
			meterIdRef=meterIdRef,
			)


	@property
	def Age(self):
		return self.get_child('Age')


	@property
	def Ages(self):
		return self.get_children('Age')


	def add_Age(self,
		unit=None,
		):
		return self.add_child('Age',
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)



class HydronicLoopEquipmentId_auto():
	""""""

	@property
	def hydronicLoopEquipIdRef(self):
		"""ID pointing at a hydronic loop equipment object"""
		return self.get_attribute('hydronicLoopEquipIdRef')


	@hydronicLoopEquipIdRef.setter
	def hydronicLoopEquipIdRef(self,value):
		self.set_attribute('hydronicLoopEquipIdRef',value)



class HydronicLoopId_auto():
	""""""

	@property
	def hydronicLoopIdRef(self):
		"""ID pointing to a hydronic loop """
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def hydronicLoopType(self):
		"""Type of hydronic loop """
		return self.get_attribute('hydronicLoopType')


	@hydronicLoopType.setter
	def hydronicLoopType(self,value):
		self.set_attribute('hydronicLoopType',value)



class Illuminance_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ImageTexture_auto():
	"""This is an X3D element to map a texture to this material. From X3D specification: The ImageTexture node defines a texture map by specifying an image file and general parameters for mapping to geometry. Texture maps are defined in a 2D coordinate system (s, t) that ranges from [0.0, 1.0] in both directions. The bottom edge of the image corresponds to the S-axis of the texture map, and left edge of the image corresponds to the T-axis of the texture map. The lower-left pixel of the image corresponds to s=0, t=0, and the top-right pixel of the image corresponds to s=1, t=1. 

			"""

	@property
	def url(self):
		"""Specifies location of the image. From X3D specification: The texture is read from the URL specified by the url field. When the url field contains no values, texturing is disabled. Browsers shall support the JPEG and PNG image file formats. In addition, browsers may support other image formats (e.g. CGM) which can be rendered into a 2D image. Support for the GIF format is also recommended (including transparency). """
		return self.get_attribute('url')


	@url.setter
	def url(self,value):
		self.set_attribute('url',value)


	@property
	def repeatS(self):
		"""From X3D specification: If repeatS is TRUE, the texture map is repeated outside the [0.0, 1.0] texture coordinate range in the S direction so that it fills the shape. If repeatS is FALSE, the texture coordinates are clamped in the S direction to lie within the [0.0, 1.0] range. """
		return self.get_attribute('repeatS')


	@repeatS.setter
	def repeatS(self,value):
		self.set_attribute('repeatS',value)


	@property
	def repeatT(self):
		"""From X3D specification: If repeatT is TRUE, the texture map is repeated outside the [0.0, 1.0] texture coordinate range in the T direction so that it fills the shape. If repeatT is FALSE, the texture coordinates are clamped in the T direction to lie within the [0.0, 1.0] range. """
		return self.get_attribute('repeatT')


	@repeatT.setter
	def repeatT(self,value):
		self.set_attribute('repeatT',value)



class IndependentValue_auto():
	"""Value of the independent variable for this data point"""


class IndependentVariable_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def dataType(self):
		return self.get_attribute('dataType')


	@dataType.setter
	def dataType(self,value):
		self.set_attribute('dataType',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)



class IndoorAirQuality_auto():
	""""""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def EmissionRate(self):
		return self.get_child('EmissionRate')


	@property
	def EmissionRates(self):
		return self.get_children('EmissionRate')


	def add_EmissionRate(self,
		unit=None,
		):
		return self.add_child('EmissionRate',
			unit=unit,
			)


	@property
	def SinkRate(self):
		return self.get_child('SinkRate')


	@property
	def SinkRates(self):
		return self.get_children('SinkRate')


	def add_SinkRate(self,
		unit=None,
		):
		return self.add_child('SinkRate',
			unit=unit,
			)


	@property
	def HighLimit(self):
		return self.get_child('HighLimit')


	@property
	def HighLimits(self):
		return self.get_children('HighLimit')


	def add_HighLimit(self,
		unit=None,
		):
		return self.add_child('HighLimit',
			unit=unit,
			)



class InfiltrationFlow_auto():
	"""Flow of air through building envelope"""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def BlowerDoorValue(self):
		return self.get_child('BlowerDoorValue')


	@property
	def BlowerDoorValues(self):
		return self.get_children('BlowerDoorValue')


	def add_BlowerDoorValue(self,
		unit=None,
		):
		return self.add_child('BlowerDoorValue',
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)



class InputWatts_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class InsideAirFilmResistance_auto():
	"""Thermal resistance of the internal air film in a layer"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class IntEquip_auto():
	"""Interior equipment. This is generalized to be able to contain any type of internal equipment."""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def waterTempScheduleIdRef(self):
		return self.get_attribute('waterTempScheduleIdRef')


	@waterTempScheduleIdRef.setter
	def waterTempScheduleIdRef(self,value):
		self.set_attribute('waterTempScheduleIdRef',value)


	@property
	def hydronicLoopIdRef(self):
		"""ID pointing to a hydronic loop """
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def waterScheduleIdRef(self):
		return self.get_attribute('waterScheduleIdRef')


	@waterScheduleIdRef.setter
	def waterScheduleIdRef(self,value):
		self.set_attribute('waterScheduleIdRef',value)


	@property
	def waterMeterIdRef(self):
		return self.get_attribute('waterMeterIdRef')


	@waterMeterIdRef.setter
	def waterMeterIdRef(self,value):
		self.set_attribute('waterMeterIdRef',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def airLoopIdRef(self):
		"""ID pointing to an air loop"""
		return self.get_attribute('airLoopIdRef')


	@airLoopIdRef.setter
	def airLoopIdRef(self,value):
		self.set_attribute('airLoopIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Manufacturer(self):
		return self.get_child('Manufacturer')


	@property
	def Manufacturers(self):
		return self.get_children('Manufacturer')


	def add_Manufacturer(self,
		):
		return self.add_child('Manufacturer',
			)


	@property
	def Model(self):
		return self.get_child('Model')


	@property
	def Models(self):
		return self.get_children('Model')


	def add_Model(self,
		):
		return self.add_child('Model',
			)


	@property
	def ElecLoad(self):
		return self.get_child('ElecLoad')


	@property
	def ElecLoads(self):
		return self.get_children('ElecLoad')


	def add_ElecLoad(self,
		unit=None,
		):
		return self.add_child('ElecLoad',
			unit=unit,
			)


	@property
	def FuelLoad(self):
		return self.get_child('FuelLoad')


	@property
	def FuelLoads(self):
		return self.get_children('FuelLoad')


	def add_FuelLoad(self,
		unit=None,
		):
		return self.add_child('FuelLoad',
			unit=unit,
			)


	@property
	def LatentLoad(self):
		return self.get_child('LatentLoad')


	@property
	def LatentLoads(self):
		return self.get_children('LatentLoad')


	def add_LatentLoad(self,
		unit=None,
		):
		return self.add_child('LatentLoad',
			unit=unit,
			)


	@property
	def Efficiency(self):
		return self.get_child('Efficiency')


	@property
	def Efficiencys(self):
		return self.get_children('Efficiency')


	def add_Efficiency(self,
		standardsType=None,
		efficiencyType=None,
		operationType=None,
		performanceId=None,
		):
		return self.add_child('Efficiency',
			standardsType=standardsType,
			efficiencyType=efficiencyType,
			operationType=operationType,
			performanceId=performanceId,
			)


	@property
	def Performance(self):
		return self.get_child('Performance')


	@property
	def Performances(self):
		return self.get_children('Performance')


	def add_Performance(self,
		id=None,
		performanceType=None,
		):
		return self.add_child('Performance',
			id=id,
			performanceType=performanceType,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def Weight(self):
		return self.get_child('Weight')


	@property
	def Weights(self):
		return self.get_children('Weight')


	def add_Weight(self,
		unit=None,
		):
		return self.add_child('Weight',
			unit=unit,
			)


	@property
	def WasteWaterHREff(self):
		return self.get_child('WasteWaterHREff')


	@property
	def WasteWaterHREffs(self):
		return self.get_children('WasteWaterHREff')


	def add_WasteWaterHREff(self,
		unit=None,
		airLoopIdRef=None,
		hydronicLoopIdRef=None,
		):
		return self.add_child('WasteWaterHREff',
			unit=unit,
			airLoopIdRef=airLoopIdRef,
			hydronicLoopIdRef=hydronicLoopIdRef,
			)


	@property
	def WaterUsePerCycle(self):
		return self.get_child('WaterUsePerCycle')


	@property
	def WaterUsePerCycles(self):
		return self.get_children('WaterUsePerCycle')


	def add_WaterUsePerCycle(self,
		unit=None,
		):
		return self.add_child('WaterUsePerCycle',
			unit=unit,
			)


	@property
	def RatedFlow(self):
		return self.get_child('RatedFlow')


	@property
	def RatedFlows(self):
		return self.get_children('RatedFlow')


	def add_RatedFlow(self,
		unit=None,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('RatedFlow',
			unit=unit,
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def HeatRejectedtoSpace(self):
		return self.get_child('HeatRejectedtoSpace')


	@property
	def HeatRejectedtoSpaces(self):
		return self.get_children('HeatRejectedtoSpace')


	def add_HeatRejectedtoSpace(self,
		unit=None,
		):
		return self.add_child('HeatRejectedtoSpace',
			unit=unit,
			)


	@property
	def Power(self):
		return self.get_child('Power')


	@property
	def Powers(self):
		return self.get_children('Power')


	def add_Power(self,
		unit=None,
		powerType=None,
		useType=None,
		meterIdRef=None,
		):
		return self.add_child('Power',
			unit=unit,
			powerType=powerType,
			useType=useType,
			meterIdRef=meterIdRef,
			)


	@property
	def CyclesPerWeek(self):
		return self.get_child('CyclesPerWeek')


	@property
	def CyclesPerWeeks(self):
		return self.get_children('CyclesPerWeek')


	def add_CyclesPerWeek(self,
		):
		return self.add_child('CyclesPerWeek',
			)


	@property
	def Energy(self):
		return self.get_child('Energy')


	@property
	def Energys(self):
		return self.get_children('Energy')


	def add_Energy(self,
		unit=None,
		valueType=None,
		timePeriod=None,
		resourceType=None,
		meterIdRef=None,
		):
		return self.add_child('Energy',
			unit=unit,
			valueType=valueType,
			timePeriod=timePeriod,
			resourceType=resourceType,
			meterIdRef=meterIdRef,
			)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def IndoorAirQuality(self):
		return self.get_child('IndoorAirQuality')


	@property
	def IndoorAirQualitys(self):
		return self.get_children('IndoorAirQuality')


	def add_IndoorAirQuality(self,
		id=None,
		scheduleIdRef=None,
		):
		return self.add_child('IndoorAirQuality',
			id=id,
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def Age(self):
		return self.get_child('Age')


	@property
	def Ages(self):
		return self.get_children('Age')


	def add_Age(self,
		unit=None,
		):
		return self.add_child('Age',
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)



class IntEquipId_auto():
	""""""

	@property
	def intEquipIdRef(self):
		"""ID pointing at an interior equipment object"""
		return self.get_attribute('intEquipIdRef')


	@intEquipIdRef.setter
	def intEquipIdRef(self,value):
		self.set_attribute('intEquipIdRef',value)



class Lamp_auto():
	"""Type of lamp used"""


class LastName_auto():
	""""""


class LatentLoad_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Latitude_auto():
	"""Degrees north of the equator, in decimal degrees. Locations south of the equator are negative."""


class Layer_auto():
	"""A Layer is a combination of one of more materials"""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def InsideAirFilmResistance(self):
		return self.get_child('InsideAirFilmResistance')


	@property
	def InsideAirFilmResistances(self):
		return self.get_children('InsideAirFilmResistance')


	def add_InsideAirFilmResistance(self,
		unit=None,
		):
		return self.add_child('InsideAirFilmResistance',
			unit=unit,
			)


	@property
	def MaterialId(self):
		return self.get_child('MaterialId')


	@property
	def MaterialIds(self):
		return self.get_children('MaterialId')


	def add_MaterialId(self,
		materialIdRef=None,
		percentOfLayer=None,
		):
		return self.add_child('MaterialId',
			materialIdRef=materialIdRef,
			percentOfLayer=percentOfLayer,
			)



class LayerId_auto():
	""""""

	@property
	def layerIdRef(self):
		"""ID identifying a layer in this construction. Multiple layers in Constructions are in order from outside to inside."""
		return self.get_attribute('layerIdRef')


	@layerIdRef.setter
	def layerIdRef(self,value):
		self.set_attribute('layerIdRef',value)



class Length_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Level_auto():
	"""Building storey Local Placement Z coordinate."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Life_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class LightControlId_auto():
	""""""

	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)



class LightId_auto():
	""""""

	@property
	def lightIdRef(self):
		"""Identifier pointing at a light object"""
		return self.get_attribute('lightIdRef')


	@lightIdRef.setter
	def lightIdRef(self,value):
		self.set_attribute('lightIdRef',value)



class Lighting_auto():
	""""""

	@property
	def lightingSystemIdRef(self):
		return self.get_attribute('lightingSystemIdRef')


	@lightingSystemIdRef.setter
	def lightingSystemIdRef(self,value):
		self.set_attribute('lightingSystemIdRef',value)


	@property
	def lightingControlIdRef(self):
		return self.get_attribute('lightingControlIdRef')


	@lightingControlIdRef.setter
	def lightingControlIdRef(self,value):
		self.set_attribute('lightingControlIdRef',value)


	@property
	def meterIdRef(self):
		"""ID for a resource meter"""
		return self.get_attribute('meterIdRef')


	@meterIdRef.setter
	def meterIdRef(self,value):
		self.set_attribute('meterIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def CoefficientOfUtilization(self):
		return self.get_child('CoefficientOfUtilization')


	@property
	def CoefficientOfUtilizations(self):
		return self.get_children('CoefficientOfUtilization')


	def add_CoefficientOfUtilization(self,
		wallReflectance=None,
		ceilingCavityReflectance=None,
		floorReflectance=None,
		roomCavityRatio=None,
		):
		return self.add_child('CoefficientOfUtilization',
			wallReflectance=wallReflectance,
			ceilingCavityReflectance=ceilingCavityReflectance,
			floorReflectance=floorReflectance,
			roomCavityRatio=roomCavityRatio,
			)


	@property
	def PhotometryOrientation(self):
		return self.get_child('PhotometryOrientation')


	@property
	def PhotometryOrientations(self):
		return self.get_children('PhotometryOrientation')


	def add_PhotometryOrientation(self,
		):
		return self.add_child('PhotometryOrientation',
			)



class LightingControl_auto():
	""""""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def lightingSystemIdRef(self):
		return self.get_attribute('lightingSystemIdRef')


	@lightingSystemIdRef.setter
	def lightingSystemIdRef(self,value):
		self.set_attribute('lightingSystemIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def Illuminance(self):
		return self.get_child('Illuminance')


	@property
	def Illuminances(self):
		return self.get_children('Illuminance')


	def add_Illuminance(self,
		unit=None,
		):
		return self.add_child('Illuminance',
			unit=unit,
			)


	@property
	def CartesianPoint(self):
		return self.get_child('CartesianPoint')


	@property
	def CartesianPoints(self):
		return self.get_children('CartesianPoint')


	def add_CartesianPoint(self,
		):
		return self.add_child('CartesianPoint',
			)


	@property
	def MinPowerFrac(self):
		return self.get_child('MinPowerFrac')


	@property
	def MinPowerFracs(self):
		return self.get_children('MinPowerFrac')


	def add_MinPowerFrac(self,
		):
		return self.add_child('MinPowerFrac',
			)


	@property
	def MinLightFrac(self):
		return self.get_child('MinLightFrac')


	@property
	def MinLightFracs(self):
		return self.get_children('MinLightFrac')


	def add_MinLightFrac(self,
		):
		return self.add_child('MinLightFrac',
			)


	@property
	def PercentAreaDaylitControlled(self):
		return self.get_child('PercentAreaDaylitControlled')


	@property
	def PercentAreaDaylitControlleds(self):
		return self.get_children('PercentAreaDaylitControlled')


	def add_PercentAreaDaylitControlled(self,
		unit=None,
		):
		return self.add_child('PercentAreaDaylitControlled',
			unit=unit,
			)



class LightingSystem_auto():
	""""""

	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Manufacturer(self):
		return self.get_child('Manufacturer')


	@property
	def Manufacturers(self):
		return self.get_children('Manufacturer')


	def add_Manufacturer(self,
		):
		return self.add_child('Manufacturer',
			)


	@property
	def NumberOfLamps(self):
		return self.get_child('NumberOfLamps')


	@property
	def NumberOfLampss(self):
		return self.get_children('NumberOfLamps')


	def add_NumberOfLamps(self,
		):
		return self.add_child('NumberOfLamps',
			)


	@property
	def LumensPerLamp(self):
		return self.get_child('LumensPerLamp')


	@property
	def LumensPerLamps(self):
		return self.get_children('LumensPerLamp')


	def add_LumensPerLamp(self,
		):
		return self.add_child('LumensPerLamp',
			)


	@property
	def Dimensions(self):
		return self.get_child('Dimensions')


	@property
	def Dimensionss(self):
		return self.get_children('Dimensions')


	def add_Dimensions(self,
		):
		return self.add_child('Dimensions',
			)


	@property
	def InputWatts(self):
		return self.get_child('InputWatts')


	@property
	def InputWattss(self):
		return self.get_children('InputWatts')


	def add_InputWatts(self,
		unit=None,
		):
		return self.add_child('InputWatts',
			unit=unit,
			)


	@property
	def Ballast(self):
		return self.get_child('Ballast')


	@property
	def Ballasts(self):
		return self.get_children('Ballast')


	def add_Ballast(self,
		):
		return self.add_child('Ballast',
			)


	@property
	def Lamp(self):
		return self.get_child('Lamp')


	@property
	def Lamps(self):
		return self.get_children('Lamp')


	def add_Lamp(self,
		):
		return self.add_child('Lamp',
			)


	@property
	def Luminaire(self):
		return self.get_child('Luminaire')


	@property
	def Luminaires(self):
		return self.get_children('Luminaire')


	def add_Luminaire(self,
		):
		return self.add_child('Luminaire',
			)


	@property
	def Photometry(self):
		return self.get_child('Photometry')


	@property
	def Photometrys(self):
		return self.get_children('Photometry')


	def add_Photometry(self,
		):
		return self.add_child('Photometry',
			)


	@property
	def CoefficientOfUtilization(self):
		return self.get_child('CoefficientOfUtilization')


	@property
	def CoefficientOfUtilizations(self):
		return self.get_children('CoefficientOfUtilization')


	def add_CoefficientOfUtilization(self,
		wallReflectance=None,
		ceilingCavityReflectance=None,
		floorReflectance=None,
		roomCavityRatio=None,
		):
		return self.add_child('CoefficientOfUtilization',
			wallReflectance=wallReflectance,
			ceilingCavityReflectance=ceilingCavityReflectance,
			floorReflectance=floorReflectance,
			roomCavityRatio=roomCavityRatio,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)



class LightPowerPerArea_auto():
	"""Amount of power used by lighting in a given area"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class LoadCalcInputParameters_auto():
	""""""

	@property
	def RTSParameters(self):
		return self.get_child('RTSParameters')


	@property
	def RTSParameterss(self):
		return self.get_children('RTSParameters')


	def add_RTSParameters(self,
		roofCTSType=None,
		wallCTSType=None,
		):
		return self.add_child('RTSParameters',
			roofCTSType=roofCTSType,
			wallCTSType=wallCTSType,
			)


	@property
	def CLTDParameters(self):
		return self.get_child('CLTDParameters')


	@property
	def CLTDParameterss(self):
		return self.get_children('CLTDParameters')


	def add_CLTDParameters(self,
		roofASHRAENumber=None,
		wallASHRAEGroup=None,
		roofColor=None,
		roofHasSuspendedCeiling=None,
		wallColor=None,
		):
		return self.add_child('CLTDParameters',
			roofASHRAENumber=roofASHRAENumber,
			wallASHRAEGroup=wallASHRAEGroup,
			roofColor=roofColor,
			roofHasSuspendedCeiling=roofHasSuspendedCeiling,
			wallColor=wallColor,
			)


	@property
	def ManualJ8Parameters(self):
		return self.get_child('ManualJ8Parameters')


	@property
	def ManualJ8Parameterss(self):
		return self.get_children('ManualJ8Parameters')


	def add_ManualJ8Parameters(self,
		wallGroupManualJ=None,
		roofCLTDIndex=None,
		floorIsRadiant=None,
		floorCrawlSpaceWallUValue=None,
		floorCrawlSpaceIsSealed=None,
		floorCategory=None,
		):
		return self.add_child('ManualJ8Parameters',
			wallGroupManualJ=wallGroupManualJ,
			roofCLTDIndex=roofCLTDIndex,
			floorIsRadiant=floorIsRadiant,
			floorCrawlSpaceWallUValue=floorCrawlSpaceWallUValue,
			floorCrawlSpaceIsSealed=floorCrawlSpaceIsSealed,
			floorCategory=floorCategory,
			)


	@property
	def FloorSlabHeatLossCoefficient(self):
		return self.get_child('FloorSlabHeatLossCoefficient')


	@property
	def FloorSlabHeatLossCoefficients(self):
		return self.get_children('FloorSlabHeatLossCoefficient')


	def add_FloorSlabHeatLossCoefficient(self,
		floorSlabPerimeterHeatLossCoefficientUnitTypeEnum=None,
		):
		return self.add_child('FloorSlabHeatLossCoefficient',
			floorSlabPerimeterHeatLossCoefficientUnitTypeEnum=floorSlabPerimeterHeatLossCoefficientUnitTypeEnum,
			)



class Location_auto():
	"""The Location element describes the location of the global origin for this campus. This element can be used in a general sense by using the Name and Description elements for a physical address or landmark, or Location can be made precise by specifying the Elevation, Longitude, and Latitude of the origin."""

	@property
	def StationId(self):
		return self.get_child('StationId')


	@property
	def StationIds(self):
		return self.get_children('StationId')


	def add_StationId(self,
		IDType=None,
		):
		return self.add_child('StationId',
			IDType=IDType,
			)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def ZipcodeOrPostalCode(self):
		return self.get_child('ZipcodeOrPostalCode')


	@property
	def ZipcodeOrPostalCodes(self):
		return self.get_children('ZipcodeOrPostalCode')


	def add_ZipcodeOrPostalCode(self,
		):
		return self.add_child('ZipcodeOrPostalCode',
			)


	@property
	def Longitude(self):
		return self.get_child('Longitude')


	@property
	def Longitudes(self):
		return self.get_children('Longitude')


	def add_Longitude(self,
		):
		return self.add_child('Longitude',
			)


	@property
	def Latitude(self):
		return self.get_child('Latitude')


	@property
	def Latitudes(self):
		return self.get_children('Latitude')


	def add_Latitude(self,
		):
		return self.add_child('Latitude',
			)


	@property
	def Elevation(self):
		return self.get_child('Elevation')


	@property
	def Elevations(self):
		return self.get_children('Elevation')


	def add_Elevation(self,
		unit=None,
		):
		return self.add_child('Elevation',
			unit=unit,
			)


	@property
	def CADModelAzimuth(self):
		return self.get_child('CADModelAzimuth')


	@property
	def CADModelAzimuths(self):
		return self.get_children('CADModelAzimuth')


	def add_CADModelAzimuth(self,
		):
		return self.add_child('CADModelAzimuth',
			)



class Longitude_auto():
	"""Degrees east of Greenwich, in decimal degrees. Locations west of Greenwich are negative."""


class LowValue_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class LumensPerLamp_auto():
	""""""


class Luminaire_auto():
	"""Type of luminaire used"""


class ManualJ8Parameters_auto():
	"""Parameters required by the ACCA Manual J Eighth Edition load calculation method. Ignore this element and all elements under it if you are not planning to use that method."""

	@property
	def wallGroupManualJ(self):
		"""Specifies the group code for the wall, which determines how quickly the wall delivers heat into the space. See Table 4C, page T4C-1 ACCA Manual J Eighth Edition."""
		return self.get_attribute('wallGroupManualJ')


	@wallGroupManualJ.setter
	def wallGroupManualJ(self,value):
		self.set_attribute('wallGroupManualJ',value)


	@property
	def roofCLTDIndex(self):
		"""Specifies the array of CLTD values to use for the roof, which determines how quickly the roof delivers heat into the space. See Table 4A page T4A-18 and following, ACCA Manual J Eighth Edition."""
		return self.get_attribute('roofCLTDIndex')


	@roofCLTDIndex.setter
	def roofCLTDIndex(self,value):
		self.set_attribute('roofCLTDIndex',value)


	@property
	def floorIsRadiant(self):
		"""Specifies whether or not to use a higher heating temperature difference value in calculating the heating loss for a floor (25 degrees F higher value is used in formula if floor is radiant). See Figure A5-5, page A5-8, ACCA Manual J Eighth Edition."""
		return self.get_attribute('floorIsRadiant')


	@floorIsRadiant.setter
	def floorIsRadiant(self,value):
		self.set_attribute('floorIsRadiant',value)


	@property
	def floorCrawlSpaceWallUValue(self):
		"""Specifies the u-value of the crawl space wall that is associated with the floor, which affects both the heating and cooling load. See Figure A5-5, page A5-8, and Figure A5-17, page A5-16, ACCA Manual J Eighth Edition."""
		return self.get_attribute('floorCrawlSpaceWallUValue')


	@floorCrawlSpaceWallUValue.setter
	def floorCrawlSpaceWallUValue(self,value):
		self.set_attribute('floorCrawlSpaceWallUValue',value)


	@property
	def floorCrawlSpaceIsSealed(self):
		"""Specifies whether or not the crawl space wall associated with this floor is well sealed from the outdoor air, which affects both the heating and cooling loads. See Figure A5-5, page A5-8, and Figure A5-17 page A5-16, ACCA Manual J Eighth Edition."""
		return self.get_attribute('floorCrawlSpaceIsSealed')


	@floorCrawlSpaceIsSealed.setter
	def floorCrawlSpaceIsSealed(self,value):
		self.set_attribute('floorCrawlSpaceIsSealed',value)


	@property
	def floorCategory(self):
		"""Specifies the type of floor being considered, which affects both the heating and the cooling loads. See Table 4A, pages T4A-27 and following, ACCA Manual J Eighth Edition."""
		return self.get_attribute('floorCategory')


	@floorCategory.setter
	def floorCategory(self,value):
		self.set_attribute('floorCategory',value)



class Manufacturer_auto():
	""""""


class Material_auto():
	""""""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def ImageTexture(self):
		return self.get_child('ImageTexture')


	@property
	def ImageTextures(self):
		return self.get_children('ImageTexture')


	def add_ImageTexture(self,
		url=None,
		repeatS=None,
		repeatT=None,
		):
		return self.add_child('ImageTexture',
			url=url,
			repeatS=repeatS,
			repeatT=repeatT,
			)


	@property
	def R_value(self):
		return self.get_child('R-value')


	@property
	def R_values(self):
		return self.get_children('R-value')


	def add_R_value(self,
		unit=None,
		):
		return self.add_child('R-value',
			unit=unit,
			)


	@property
	def Thickness(self):
		return self.get_child('Thickness')


	@property
	def Thicknesss(self):
		return self.get_children('Thickness')


	def add_Thickness(self,
		unit=None,
		):
		return self.add_child('Thickness',
			unit=unit,
			)


	@property
	def Conductivity(self):
		return self.get_child('Conductivity')


	@property
	def Conductivitys(self):
		return self.get_children('Conductivity')


	def add_Conductivity(self,
		unit=None,
		):
		return self.add_child('Conductivity',
			unit=unit,
			)


	@property
	def Density(self):
		return self.get_child('Density')


	@property
	def Densitys(self):
		return self.get_children('Density')


	def add_Density(self,
		unit=None,
		):
		return self.add_child('Density',
			unit=unit,
			)


	@property
	def SpecificHeat(self):
		return self.get_child('SpecificHeat')


	@property
	def SpecificHeats(self):
		return self.get_children('SpecificHeat')


	def add_SpecificHeat(self,
		unit=None,
		):
		return self.add_child('SpecificHeat',
			unit=unit,
			)


	@property
	def Permeance(self):
		return self.get_child('Permeance')


	@property
	def Permeances(self):
		return self.get_children('Permeance')


	def add_Permeance(self,
		unit=None,
		):
		return self.add_child('Permeance',
			unit=unit,
			)


	@property
	def Porosity(self):
		return self.get_child('Porosity')


	@property
	def Porositys(self):
		return self.get_children('Porosity')


	def add_Porosity(self,
		unit=None,
		):
		return self.add_child('Porosity',
			unit=unit,
			)


	@property
	def RecycledContent(self):
		return self.get_child('RecycledContent')


	@property
	def RecycledContents(self):
		return self.get_children('RecycledContent')


	def add_RecycledContent(self,
		unit=None,
		):
		return self.add_child('RecycledContent',
			unit=unit,
			)


	@property
	def Fire(self):
		return self.get_child('Fire')


	@property
	def Fires(self):
		return self.get_children('Fire')


	def add_Fire(self,
		):
		return self.add_child('Fire',
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def IndoorAirQuality(self):
		return self.get_child('IndoorAirQuality')


	@property
	def IndoorAirQualitys(self):
		return self.get_children('IndoorAirQuality')


	def add_IndoorAirQuality(self,
		id=None,
		scheduleIdRef=None,
		):
		return self.add_child('IndoorAirQuality',
			id=id,
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def CADMaterialId(self):
		return self.get_child('CADMaterialId')


	@property
	def CADMaterialIds(self):
		return self.get_children('CADMaterialId')


	def add_CADMaterialId(self,
		CADMaterialIdRef=None,
		):
		return self.add_child('CADMaterialId',
			CADMaterialIdRef=CADMaterialIdRef,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)



class MaterialId_auto():
	""""""

	@property
	def materialIdRef(self):
		"""ID identifying a material in this layer. Multiple materials in layers are in order from outside to inside."""
		return self.get_attribute('materialIdRef')


	@materialIdRef.setter
	def materialIdRef(self,value):
		self.set_attribute('materialIdRef',value)


	@property
	def percentOfLayer(self):
		"""Percentage (1-100%) of this layer that this material is made from. """
		return self.get_attribute('percentOfLayer')


	@percentOfLayer.setter
	def percentOfLayer(self,value):
		self.set_attribute('percentOfLayer',value)



class MaxPressure_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MaxRelativeHumidity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MaxTemp_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MaximumFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Meter_auto():
	"""Description of a resource measurement"""

	@property
	def resourceType(self):
		return self.get_attribute('resourceType')


	@resourceType.setter
	def resourceType(self,value):
		self.set_attribute('resourceType',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def UtilityRate(self):
		return self.get_child('UtilityRate')


	@property
	def UtilityRates(self):
		return self.get_children('UtilityRate')


	def add_UtilityRate(self,
		):
		return self.add_child('UtilityRate',
			)



class MeterId_auto():
	""""""

	@property
	def meterIdRef(self):
		"""ID for a resource meter"""
		return self.get_attribute('meterIdRef')


	@meterIdRef.setter
	def meterIdRef(self,value):
		self.set_attribute('meterIdRef',value)



class MiddleName_auto():
	""""""


class MinFlow_auto():
	"""Minimum flow"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def hydronicLoopIdRef(self):
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def hydronicLoopType(self):
		return self.get_attribute('hydronicLoopType')


	@hydronicLoopType.setter
	def hydronicLoopType(self,value):
		self.set_attribute('hydronicLoopType',value)



class MinimumFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MinLightFrac_auto():
	"""Fraction of light illuminance used at minimum setting."""


class MinRelativeHumidity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MinPowerFrac_auto():
	"""Fraction of power used at minimum setting."""


class MinPressure_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class MinTemp_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Model_auto():
	""""""


class ModifiedBy_auto():
	"""Denotes the time this file has been modified, as well as the person and program used to modify this file."""

	@property
	def personId(self):
		return self.get_attribute('personId')


	@personId.setter
	def personId(self,value):
		self.set_attribute('personId',value)


	@property
	def programId(self):
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def date(self):
		return self.get_attribute('date')


	@date.setter
	def date(self,value):
		self.set_attribute('date',value)



class MotorInAirstream_auto():
	"""Indicates if the motor is located in the path of the air stream."""


class Name_auto():
	""""""


class NaturalVentHiTemp_auto():
	"""Natural ventilation does not occur above this temperature."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class NaturalVentLoTemp_auto():
	"""Natural ventilation does not occur below this temperature."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class NaturalVentOccDep_auto():
	"""Occupancy dependence of natural ventilation. If true, then natural ventilation only occurs when people are present."""


class NumberOfLamps_auto():
	""""""


class OAFlowPerArea_auto():
	"""Outside air flow per area"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class OAFlowPerPerson_auto():
	"""Outside air flow per person"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class ObjectId_auto():
	"""Indicates which object or objects the results apply to, if any"""


class Opening_auto():
	""""""

	@property
	def interiorShadeType(self):
		return self.get_attribute('interiorShadeType')


	@interiorShadeType.setter
	def interiorShadeType(self,value):
		self.set_attribute('interiorShadeType',value)


	@property
	def exteriorShadeType(self):
		return self.get_attribute('exteriorShadeType')


	@exteriorShadeType.setter
	def exteriorShadeType(self,value):
		self.set_attribute('exteriorShadeType',value)


	@property
	def windowTypeIdRef(self):
		return self.get_attribute('windowTypeIdRef')


	@windowTypeIdRef.setter
	def windowTypeIdRef(self,value):
		self.set_attribute('windowTypeIdRef',value)


	@property
	def constructionIdRef(self):
		"""Identifier pointing to a construction"""
		return self.get_attribute('constructionIdRef')


	@constructionIdRef.setter
	def constructionIdRef(self,value):
		self.set_attribute('constructionIdRef',value)


	@property
	def openingType(self):
		return self.get_attribute('openingType')


	@openingType.setter
	def openingType(self,value):
		self.set_attribute('openingType',value)


	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC) file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def ShadeControl(self):
		return self.get_child('ShadeControl')


	@property
	def ShadeControls(self):
		return self.get_children('ShadeControl')


	def add_ShadeControl(self,
		type=None,
		programId=None,
		):
		return self.add_child('ShadeControl',
			type=type,
			programId=programId,
			)


	@property
	def U_value(self):
		return self.get_child('U-value')


	@property
	def U_values(self):
		return self.get_children('U-value')


	def add_U_value(self,
		unit=None,
		):
		return self.add_child('U-value',
			unit=unit,
			)


	@property
	def ShadingCoeff(self):
		return self.get_child('ShadingCoeff')


	@property
	def ShadingCoeffs(self):
		return self.get_children('ShadingCoeff')


	def add_ShadingCoeff(self,
		unit=None,
		):
		return self.add_child('ShadingCoeff',
			unit=unit,
			)


	@property
	def SolarHeatGainCoeff(self):
		return self.get_child('SolarHeatGainCoeff')


	@property
	def SolarHeatGainCoeffs(self):
		return self.get_children('SolarHeatGainCoeff')


	def add_SolarHeatGainCoeff(self,
		unit=None,
		solarIncidentAngle=None,
		):
		return self.add_child('SolarHeatGainCoeff',
			unit=unit,
			solarIncidentAngle=solarIncidentAngle,
			)


	@property
	def Transmittance(self):
		return self.get_child('Transmittance')


	@property
	def Transmittances(self):
		return self.get_children('Transmittance')


	def add_Transmittance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Transmittance',
			unit=unit,
			type=type,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			)


	@property
	def GlazeConductivity(self):
		return self.get_child('GlazeConductivity')


	@property
	def GlazeConductivitys(self):
		return self.get_children('GlazeConductivity')


	def add_GlazeConductivity(self,
		unit=None,
		):
		return self.add_child('GlazeConductivity',
			unit=unit,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			)


	@property
	def Setback(self):
		return self.get_child('Setback')


	@property
	def Setbacks(self):
		return self.get_children('Setback')


	def add_Setback(self,
		unit=None,
		):
		return self.add_child('Setback',
			unit=unit,
			)


	@property
	def NaturalVentHiTemp(self):
		return self.get_child('NaturalVentHiTemp')


	@property
	def NaturalVentHiTemps(self):
		return self.get_children('NaturalVentHiTemp')


	def add_NaturalVentHiTemp(self,
		unit=None,
		):
		return self.add_child('NaturalVentHiTemp',
			unit=unit,
			)


	@property
	def NaturalVentLoTemp(self):
		return self.get_child('NaturalVentLoTemp')


	@property
	def NaturalVentLoTemps(self):
		return self.get_children('NaturalVentLoTemp')


	def add_NaturalVentLoTemp(self,
		unit=None,
		):
		return self.add_child('NaturalVentLoTemp',
			unit=unit,
			)


	@property
	def NaturalVentOccDep(self):
		return self.get_child('NaturalVentOccDep')


	@property
	def NaturalVentOccDeps(self):
		return self.get_children('NaturalVentOccDep')


	def add_NaturalVentOccDep(self,
		):
		return self.add_child('NaturalVentOccDep',
			)


	@property
	def RectangularGeometry(self):
		return self.get_child('RectangularGeometry')


	@property
	def RectangularGeometrys(self):
		return self.get_children('RectangularGeometry')


	def add_RectangularGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('RectangularGeometry',
			id=id,
			unit=unit,
			)


	@property
	def PlanarGeometry(self):
		return self.get_child('PlanarGeometry')


	@property
	def PlanarGeometrys(self):
		return self.get_children('PlanarGeometry')


	def add_PlanarGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('PlanarGeometry',
			id=id,
			unit=unit,
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)



class OperationRange_auto():
	""""""

	@property
	def LowValue(self):
		return self.get_child('LowValue')


	@property
	def LowValues(self):
		return self.get_children('LowValue')


	def add_LowValue(self,
		unit=None,
		):
		return self.add_child('LowValue',
			unit=unit,
			)


	@property
	def HighValue(self):
		return self.get_child('HighValue')


	@property
	def HighValues(self):
		return self.get_children('HighValue')


	def add_HighValue(self,
		unit=None,
		):
		return self.add_child('HighValue',
			unit=unit,
			)



class OperationSchedule_auto():
	""""""

	@property
	def scheduleIdRef(self):
		"""Schedule of operation for a piece of equipment. For heating and cooling equipment (such as a boiler or chiller) this is the availability schedule, the schedule of temperatures that, when reached, the piece of equipment will be available."""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def OperationRange(self):
		return self.get_child('OperationRange')


	@property
	def OperationRanges(self):
		return self.get_children('OperationRange')


	def add_OperationRange(self,
		):
		return self.add_child('OperationRange',
			)



class PeakDomesticHotWaterFlow_auto():
	"""Use this element to report overall domestic hot water use for the domestic hot water loop referenced with the hydronicLoopIdRef attribute. The schedule referenced by waterUseScheduleIdRef defines a hot water use fraction schedule, which when combined with the value of PeakDomesticHotWaterFlow fully describe the hot water use of this building."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def hydronicLoopIdRef(self):
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def waterUseScheduleIdRef(self):
		return self.get_attribute('waterUseScheduleIdRef')


	@waterUseScheduleIdRef.setter
	def waterUseScheduleIdRef(self,value):
		self.set_attribute('waterUseScheduleIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class PeopleNumber_auto():
	"""Occupancy of the space"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class PeopleHeatGain_auto():
	"""Amount of heat added to the space by people"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def heatGainType(self):
		return self.get_attribute('heatGainType')


	@heatGainType.setter
	def heatGainType(self,value):
		self.set_attribute('heatGainType',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class PercentAreaDaylitControlled_auto():
	"""Percent of space area whose lights are controlled by a daylight sensor. Only applicable when LightPowerPerArea is used at the space level and not Lighting Systems."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class PercentExisting_auto():
	"""Percent of original building shell used in renovation"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Performance_auto():
	"""Used to represent part-load performance and other performance metrics"""

	@property
	def performanceType(self):
		return self.get_attribute('performanceType')


	@performanceType.setter
	def performanceType(self,value):
		self.set_attribute('performanceType',value)


	@property
	def PointData(self):
		return self.get_child('PointData')


	@property
	def PointDatas(self):
		return self.get_children('PointData')


	def add_PointData(self,
		):
		return self.add_child('PointData',
			)


	@property
	def Equation(self):
		return self.get_child('Equation')


	@property
	def Equations(self):
		return self.get_children('Equation')


	def add_Equation(self,
		):
		return self.add_child('Equation',
			)



class Permeance_auto():
	"""The rate water vapor is allowed through a surface"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class PersonInfo_auto():
	"""Contains information about people that created and modified this file"""

	@property
	def FirstName(self):
		return self.get_child('FirstName')


	@property
	def FirstNames(self):
		return self.get_children('FirstName')


	def add_FirstName(self,
		):
		return self.add_child('FirstName',
			)


	@property
	def LastName(self):
		return self.get_child('LastName')


	@property
	def LastNames(self):
		return self.get_children('LastName')


	def add_LastName(self,
		):
		return self.add_child('LastName',
			)


	@property
	def MiddleName(self):
		return self.get_child('MiddleName')


	@property
	def MiddleNames(self):
		return self.get_children('MiddleName')


	def add_MiddleName(self,
		):
		return self.add_child('MiddleName',
			)


	@property
	def Address1(self):
		return self.get_child('Address1')


	@property
	def Address1s(self):
		return self.get_children('Address1')


	def add_Address1(self,
		):
		return self.add_child('Address1',
			)


	@property
	def Address2(self):
		return self.get_child('Address2')


	@property
	def Address2s(self):
		return self.get_children('Address2')


	def add_Address2(self,
		):
		return self.add_child('Address2',
			)


	@property
	def City(self):
		return self.get_child('City')


	@property
	def Citys(self):
		return self.get_children('City')


	def add_City(self,
		):
		return self.add_child('City',
			)


	@property
	def State(self):
		return self.get_child('State')


	@property
	def States(self):
		return self.get_children('State')


	def add_State(self,
		):
		return self.add_child('State',
			)


	@property
	def ZipCode(self):
		return self.get_child('ZipCode')


	@property
	def ZipCodes(self):
		return self.get_children('ZipCode')


	def add_ZipCode(self,
		):
		return self.add_child('ZipCode',
			)


	@property
	def Country(self):
		return self.get_child('Country')


	@property
	def Countrys(self):
		return self.get_children('Country')


	def add_Country(self,
		):
		return self.add_child('Country',
			)


	@property
	def PhoneNumber(self):
		return self.get_child('PhoneNumber')


	@property
	def PhoneNumbers(self):
		return self.get_children('PhoneNumber')


	def add_PhoneNumber(self,
		):
		return self.add_child('PhoneNumber',
			)


	@property
	def Email1Address(self):
		return self.get_child('Email1Address')


	@property
	def Email1Addresss(self):
		return self.get_children('Email1Address')


	def add_Email1Address(self,
		):
		return self.add_child('Email1Address',
			)


	@property
	def WebPage(self):
		return self.get_child('WebPage')


	@property
	def WebPages(self):
		return self.get_children('WebPage')


	def add_WebPage(self,
		):
		return self.add_child('WebPage',
			)


	@property
	def CompanyName(self):
		return self.get_child('CompanyName')


	@property
	def CompanyNames(self):
		return self.get_children('CompanyName')


	def add_CompanyName(self,
		):
		return self.add_child('CompanyName',
			)



class Photometry_auto():
	"""This element has been left open for use with other photometry definitions. Photometric data is required for various forms of lighting analysis. This tag provides a way for the photometric data to be passed. Since this can be done in a variety of ways (iesna LM-63, cibse TM14, ELUMDAT, etc.) a specific format is not being specified."""


class PhotometryOrientation_auto():
	"""This element specifies the position and the x, y and z axis of the light source. This element must have four Coordinate elements which represent the position and the x, y and z axis in order. The first CartesianPoint element specifies the position of the light source. The second, third and fourth CartesianPoint elements specifies the displacement points for the positive x, positive y and positive z axis."""

	@property
	def CartesianPoint(self):
		return self.get_child('CartesianPoint')


	@property
	def CartesianPoints(self):
		return self.get_children('CartesianPoint')


	def add_CartesianPoint(self,
		):
		return self.add_child('CartesianPoint',
			)



class PlanarGeometry_auto():
	"""List of points defining a loop. There are no repeated points in the list. All data are global, with the assumption that positive Z is up, and if CADModelAzimuth is undefined or zero, positive X is East and positive Y is North. If CADModelAzimuth is defined it is the angle of positive Y to North, positive X is the vectorial product of Y and Z. If geometry is to be precise, use Longitude, Latitude and Elevation in the Location element to define the origin. Otherwise the origin is an arbitrary point. Use PlanarGeometry to define a three dimensional polygon that lies on a plane, and has no self-intersection."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def PolyLoop(self):
		return self.get_child('PolyLoop')


	@property
	def PolyLoops(self):
		return self.get_children('PolyLoop')


	def add_PolyLoop(self,
		):
		return self.add_child('PolyLoop',
			)



class Platform_auto():
	""""""


class PointData_auto():
	"""The PointData element allows for graph or tabular information to be entered. The data type and units of the independent and dependent variables are defined in their respective elements. Each Data element represent a data point, with each Value element representing the value of a variable - starting with the independent variable, then each dependent variable listed in the order defined."""

	@property
	def IndependentVariable(self):
		return self.get_child('IndependentVariable')


	@property
	def IndependentVariables(self):
		return self.get_children('IndependentVariable')


	def add_IndependentVariable(self,
		unit=None,
		dataType=None,
		):
		return self.add_child('IndependentVariable',
			unit=unit,
			dataType=dataType,
			)


	@property
	def DependentVariable(self):
		return self.get_child('DependentVariable')


	@property
	def DependentVariables(self):
		return self.get_children('DependentVariable')


	def add_DependentVariable(self,
		unit=None,
		dataType=None,
		minValue=None,
		maxValue=None,
		):
		return self.add_child('DependentVariable',
			unit=unit,
			dataType=dataType,
			minValue=minValue,
			maxValue=maxValue,
			)


	@property
	def Data(self):
		return self.get_child('Data')


	@property
	def Datas(self):
		return self.get_children('Data')


	def add_Data(self,
		):
		return self.add_child('Data',
			)



class PolyLoop_auto():
	"""This is a list of coordinates that make up a polygon in three-dimensional space. All coordinates must lie on the same plane. The right-hand rule applies for defining the outward normal of a surface: For every surface, points must be defined in order, such that the direction of (the average cross-product between (any point, the centroid of the surface, and the next point)) points in the direction of the outward normal, which is a vector pointing away from the first AdjacentSpaceID listed.

				

			"""

	@property
	def CartesianPoint(self):
		return self.get_child('CartesianPoint')


	@property
	def CartesianPoints(self):
		return self.get_children('CartesianPoint')


	def add_CartesianPoint(self,
		):
		return self.add_child('CartesianPoint',
			)



class Porosity_auto():
	"""the ratio of the total amount of void space in a material (due to poses, small channels, and so on) to the bulk volume occupied by the material. """

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Power_auto():
	"""Maximum consumption of energy (power input)"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def powerType(self):
		return self.get_attribute('powerType')


	@powerType.setter
	def powerType(self,value):
		self.set_attribute('powerType',value)


	@property
	def useType(self):
		return self.get_attribute('useType')


	@useType.setter
	def useType(self,value):
		self.set_attribute('useType',value)


	@property
	def meterIdRef(self):
		"""ID for a resource meter"""
		return self.get_attribute('meterIdRef')


	@meterIdRef.setter
	def meterIdRef(self,value):
		self.set_attribute('meterIdRef',value)



class PrandtlNumber_auto():
	""""""


class PrandtlNumberFofT_auto():
	"""Prandtl number as a function of temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class PressureControl_auto():
	"""Use this element to describe how the air pressure is controlled. The temperatures specified in this element should be measured just upstream of the air handlers."""

	@property
	def DesignPressure(self):
		return self.get_child('DesignPressure')


	@property
	def DesignPressures(self):
		return self.get_children('DesignPressure')


	def add_DesignPressure(self,
		unit=None,
		):
		return self.add_child('DesignPressure',
			unit=unit,
			)


	@property
	def MinPressure(self):
		return self.get_child('MinPressure')


	@property
	def MinPressures(self):
		return self.get_children('MinPressure')


	def add_MinPressure(self,
		unit=None,
		):
		return self.add_child('MinPressure',
			unit=unit,
			)


	@property
	def MaxPressure(self):
		return self.get_child('MaxPressure')


	@property
	def MaxPressures(self):
		return self.get_children('MaxPressure')


	def add_MaxPressure(self,
		unit=None,
		):
		return self.add_child('MaxPressure',
			unit=unit,
			)



class ProductName_auto():
	""""""


class ProjectEntity_auto():
	"""Contains information about the originating or modifying file or service that created or modified this file"""

	@property
	def FileName(self):
		return self.get_child('FileName')


	@property
	def FileNames(self):
		return self.get_children('FileName')


	def add_FileName(self,
		):
		return self.add_child('FileName',
			)


	@property
	def URI(self):
		return self.get_child('URI')


	@property
	def URIs(self):
		return self.get_children('URI')


	def add_URI(self,
		):
		return self.add_child('URI',
			)


	@property
	def GUID(self):
		return self.get_child('GUID')


	@property
	def GUIDs(self):
		return self.get_children('GUID')


	def add_GUID(self,
		entity=None,
		):
		return self.add_child('GUID',
			entity=entity,
			)



class ProgramInfo_auto():
	"""Contains information about programs that created and modified this file"""

	@property
	def CompanyName(self):
		return self.get_child('CompanyName')


	@property
	def CompanyNames(self):
		return self.get_children('CompanyName')


	def add_CompanyName(self,
		):
		return self.add_child('CompanyName',
			)


	@property
	def ProductName(self):
		return self.get_child('ProductName')


	@property
	def ProductNames(self):
		return self.get_children('ProductName')


	def add_ProductName(self,
		):
		return self.add_child('ProductName',
			)


	@property
	def Version(self):
		return self.get_child('Version')


	@property
	def Versions(self):
		return self.get_children('Version')


	def add_Version(self,
		):
		return self.add_child('Version',
			)


	@property
	def Platform(self):
		return self.get_child('Platform')


	@property
	def Platforms(self):
		return self.get_children('Platform')


	def add_Platform(self,
		):
		return self.add_child('Platform',
			)


	@property
	def ProjectEntity(self):
		return self.get_child('ProjectEntity')


	@property
	def ProjectEntitys(self):
		return self.get_children('ProjectEntity')


	def add_ProjectEntity(self,
		):
		return self.add_child('ProjectEntity',
			)



class RatedFlow_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def hydronicLoopIdRef(self):
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)


	@property
	def hydronicLoopType(self):
		return self.get_attribute('hydronicLoopType')


	@hydronicLoopType.setter
	def hydronicLoopType(self,value):
		self.set_attribute('hydronicLoopType',value)



class RectangularGeometry_auto():
	"""Geometry data in a form typically used in simulation engines. For surfaces, specify the location of the bottom-left corner with the CartesianPoint element when facing it from the outside. Also for surfaces, Tilt and Azimuth must be specified. If CADModelAzimuth is defined, the Azimuth value is relative to the CADModelAzimuth value rather then North. For openings, the third Coordinate should be zero or left missing. For openings, these Coordinates represent the distance of the bottom-left of the opening to the bottom-left corner of the parent surface.	Azimuth and Tilt should not be specified for opening. There is an optional PolyLoop element, which may be used for describing the polygon shape of the surface."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def Azimuth(self):
		return self.get_child('Azimuth')


	@property
	def Azimuths(self):
		return self.get_children('Azimuth')


	def add_Azimuth(self,
		):
		return self.add_child('Azimuth',
			)


	@property
	def CartesianPoint(self):
		return self.get_child('CartesianPoint')


	@property
	def CartesianPoints(self):
		return self.get_children('CartesianPoint')


	def add_CartesianPoint(self,
		):
		return self.add_child('CartesianPoint',
			)


	@property
	def Tilt(self):
		return self.get_child('Tilt')


	@property
	def Tilts(self):
		return self.get_children('Tilt')


	def add_Tilt(self,
		):
		return self.add_child('Tilt',
			)


	@property
	def Height(self):
		return self.get_child('Height')


	@property
	def Heights(self):
		return self.get_children('Height')


	def add_Height(self,
		unit=None,
		):
		return self.add_child('Height',
			unit=unit,
			)


	@property
	def Width(self):
		return self.get_child('Width')


	@property
	def Widths(self):
		return self.get_children('Width')


	def add_Width(self,
		unit=None,
		):
		return self.add_child('Width',
			unit=unit,
			)


	@property
	def PolyLoop(self):
		return self.get_child('PolyLoop')


	@property
	def PolyLoops(self):
		return self.get_children('PolyLoop')


	def add_PolyLoop(self,
		):
		return self.add_child('PolyLoop',
			)



class RecycledContent_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Reference_auto():
	""""""


class Reflectance_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class RefrigerantType_auto():
	""""""


class Results_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def currency(self):
		return self.get_attribute('currency')


	@currency.setter
	def currency(self,value):
		self.set_attribute('currency',value)


	@property
	def resultsType(self):
		return self.get_attribute('resultsType')


	@resultsType.setter
	def resultsType(self,value):
		self.set_attribute('resultsType',value)


	@property
	def resourceType(self):
		return self.get_attribute('resourceType')


	@resourceType.setter
	def resourceType(self,value):
		self.set_attribute('resourceType',value)


	@property
	def programId(self):
		"""Please specify the program that generated the results using the id of the ProgramInfo element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def valueType(self):
		"""Please specify how the values were obtained."""
		return self.get_attribute('valueType')


	@valueType.setter
	def valueType(self,value):
		self.set_attribute('valueType',value)


	@property
	def startTime(self):
		"""Use the startTime attribute to define the start of the first Value element."""
		return self.get_attribute('startTime')


	@startTime.setter
	def startTime(self,value):
		self.set_attribute('startTime',value)


	@property
	def timeIncrement(self):
		"""This specifies the duration of time between each Value element. This is required if more than one Value element exists in a this Results element."""
		return self.get_attribute('timeIncrement')


	@timeIncrement.setter
	def timeIncrement(self,value):
		self.set_attribute('timeIncrement',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Value(self):
		return self.get_child('Value')


	@property
	def Values(self):
		return self.get_children('Value')


	def add_Value(self,
		):
		return self.add_child('Value',
			)


	@property
	def ObjectId(self):
		return self.get_child('ObjectId')


	@property
	def ObjectIds(self):
		return self.get_children('ObjectId')


	def add_ObjectId(self,
		):
		return self.add_child('ObjectId',
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)


	@property
	def CartesianPoint(self):
		return self.get_child('CartesianPoint')


	@property
	def CartesianPoints(self):
		return self.get_children('CartesianPoint')


	def add_CartesianPoint(self,
		):
		return self.add_child('CartesianPoint',
			)



class Roughness_auto():
	"""Roughness of the outside surface"""

	@property
	def value(self):
		return self.get_attribute('value')


	@value.setter
	def value(self,value):
		self.set_attribute('value',value)



class RTSParameters_auto():
	"""Parameters required by RTS load calculation method, as described in pages 29.25 and following of the 2001 ASHRAE Handbook, Fundamentals volume. Ignore this element and all elements under it if you are not planning to use that method."""

	@property
	def roofCTSType(self):
		"""Specifies which Conduction Time Series to use for the roof. See Table 21, page 29.30, 2001 ASHRAE Handbook, Fundamentals volume. Only used if the construction is a roof and you are using the RTS calculation method."""
		return self.get_attribute('roofCTSType')


	@roofCTSType.setter
	def roofCTSType(self,value):
		self.set_attribute('roofCTSType',value)


	@property
	def wallCTSType(self):
		"""Specifies which Conduction Time Series to use for the wall. See Table 20, page 29.28, 2001 ASHRAE Handbook, Fundamentals volume. Only used if the construction is a wall and you are using the RTS calculation method."""
		return self.get_attribute('wallCTSType')


	@wallCTSType.setter
	def wallCTSType(self,value):
		self.set_attribute('wallCTSType',value)


	@property
	def HOutside(self):
		return self.get_child('HOutside')


	@property
	def HOutsides(self):
		return self.get_children('HOutside')


	def add_HOutside(self,
		hOutsideUnitTypeEnum=None,
		):
		return self.add_child('HOutside',
			hOutsideUnitTypeEnum=hOutsideUnitTypeEnum,
			)



class R_value_auto():
	"""Resistance of material"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ShadeControl_auto():
	""""""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def ShadeSchedule(self):
		return self.get_child('ShadeSchedule')


	@property
	def ShadeSchedules(self):
		return self.get_children('ShadeSchedule')


	def add_ShadeSchedule(self,
		scheduleIdRef=None,
		):
		return self.add_child('ShadeSchedule',
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def SolarOnOpening(self):
		return self.get_child('SolarOnOpening')


	@property
	def SolarOnOpenings(self):
		return self.get_children('SolarOnOpening')


	def add_SolarOnOpening(self,
		unit=None,
		):
		return self.add_child('SolarOnOpening',
			unit=unit,
			)


	@property
	def HorizontalSolar(self):
		return self.get_child('HorizontalSolar')


	@property
	def HorizontalSolars(self):
		return self.get_children('HorizontalSolar')


	def add_HorizontalSolar(self,
		unit=None,
		):
		return self.add_child('HorizontalSolar',
			unit=unit,
			)


	@property
	def AirTemperature(self):
		return self.get_child('AirTemperature')


	@property
	def AirTemperatures(self):
		return self.get_children('AirTemperature')


	def add_AirTemperature(self,
		unit=None,
		type=None,
		):
		return self.add_child('AirTemperature',
			unit=unit,
			type=type,
			)


	@property
	def ZoneCoolingLoad(self):
		return self.get_child('ZoneCoolingLoad')


	@property
	def ZoneCoolingLoads(self):
		return self.get_children('ZoneCoolingLoad')


	def add_ZoneCoolingLoad(self,
		unit=None,
		):
		return self.add_child('ZoneCoolingLoad',
			unit=unit,
			)


	@property
	def Glare(self):
		return self.get_child('Glare')


	@property
	def Glares(self):
		return self.get_children('Glare')


	def add_Glare(self,
		unit=None,
		):
		return self.add_child('Glare',
			unit=unit,
			)



class ShadeSchedule_auto():
	"""Use this element to define schedules for a shade."""

	@property
	def scheduleIdRef(self):
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)



class Schedule_auto():
	"""List of year schedules that make up an entire calendar year."""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def YearSchedule(self):
		return self.get_child('YearSchedule')


	@property
	def YearSchedules(self):
		return self.get_children('YearSchedule')


	def add_YearSchedule(self,
		id=None,
		):
		return self.add_child('YearSchedule',
			id=id,
			)



class ScheduleValue_auto():
	"""Value for one block of time. Divides a day evenly into number of ScheduleValue elements defined in DaySchedule. Example: If 12 ScheduleValue elements are defined, each will represent two hours"""

	@property
	def OutsideHighReset(self):
		"""Value of the outside drybulb temperature for when defining HVAC system lower supply reset temperature
				"""
		return self.get_attribute('OutsideHighReset')


	@OutsideHighReset.setter
	def OutsideHighReset(self,value):
		self.set_attribute('OutsideHighReset',value)


	@property
	def OutsideLowReset(self):
		"""Value of the outside drybulb temperature for when defining HVAC system upper supply reset temperature
				"""
		return self.get_attribute('OutsideLowReset')


	@OutsideLowReset.setter
	def OutsideLowReset(self,value):
		self.set_attribute('OutsideLowReset',value)


	@property
	def SupplyHighReset(self):
		"""Value of the upper supply air setpoint temperature for reset of cooling air or heating air temperature
				"""
		return self.get_attribute('SupplyHighReset')


	@SupplyHighReset.setter
	def SupplyHighReset(self,value):
		self.set_attribute('SupplyHighReset',value)


	@property
	def SupplyLowReset(self):
		"""Value of the lower supply air setpoint temperature for reset of cooling air or heating air temperature
				"""
		return self.get_attribute('SupplyLowReset')


	@SupplyLowReset.setter
	def SupplyLowReset(self,value):
		self.set_attribute('SupplyLowReset',value)



class Setback_auto():
	"""Distance from outside surface of window to outside surface of wall"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ShadingCoeff_auto():
	"""Shading Coefficient: The ratio of total solar transmittance for the specified glazing system to the total solar transmittance for the standard reference glazing (1/8" clear)."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ShellGeometry_auto():
	"""All data are global, with the assumption that positive Z is up, and if CADModelAzimuth is undefined or zero, positive X is East and positive Y is North. If CADModelAzimuth is defined it is the angle of positive Y to North, positive X is the vectorial product of Y and Z. If geometry is to be precise, use Longitude Latitude, and Elevation in the Location element to define the origin. Otherwise the origin is an arbitrary point. ShellGeometry is used to define a union of closed shells, where there is no intersection of any two of the given shells."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def ClosedShell(self):
		return self.get_child('ClosedShell')


	@property
	def ClosedShells(self):
		return self.get_children('ClosedShell')


	def add_ClosedShell(self,
		):
		return self.add_child('ClosedShell',
			)



class SinkRate_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class SolarHeatGainCoeff_auto():
	"""When element is a child of WindowType: The center of glass solar heat gain coefficient. When element is a child of Opening: The overall solar heat gain coefficient for the window assembly."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def solarIncidentAngle(self):
		return self.get_attribute('solarIncidentAngle')


	@solarIncidentAngle.setter
	def solarIncidentAngle(self,value):
		self.set_attribute('solarIncidentAngle',value)



class SolarOnOpening_auto():
	"""Amount of solar radiation striking the opening before a shade is closed."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Space_auto():
	"""A space represents a volume enclosed by surfaces."""

	@property
	def spaceType(self):
		"""spaceType represents how a space is used.

						
, an IESNA and ASHRAE project for determining lighting power density for individual spaces. """
		return self.get_attribute('spaceType')


	@spaceType.setter
	def spaceType(self,value):
		self.set_attribute('spaceType',value)


	@property
	def zoneIdRef(self):
		return self.get_attribute('zoneIdRef')


	@zoneIdRef.setter
	def zoneIdRef(self,value):
		self.set_attribute('zoneIdRef',value)


	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def lightScheduleIdRef(self):
		"""ID of the schedule for lights contained in this space"""
		return self.get_attribute('lightScheduleIdRef')


	@lightScheduleIdRef.setter
	def lightScheduleIdRef(self,value):
		self.set_attribute('lightScheduleIdRef',value)


	@property
	def equipmentScheduleIdRef(self):
		"""ID for schedule of equipment use"""
		return self.get_attribute('equipmentScheduleIdRef')


	@equipmentScheduleIdRef.setter
	def equipmentScheduleIdRef(self,value):
		self.set_attribute('equipmentScheduleIdRef',value)


	@property
	def peopleScheduleIdRef(self):
		"""ID for schedule of people in this space"""
		return self.get_attribute('peopleScheduleIdRef')


	@peopleScheduleIdRef.setter
	def peopleScheduleIdRef(self,value):
		self.set_attribute('peopleScheduleIdRef',value)


	@property
	def conditionType(self):
		return self.get_attribute('conditionType')


	@conditionType.setter
	def conditionType(self,value):
		self.set_attribute('conditionType',value)


	@property
	def buildingStoreyIdRef(self):
		"""ID for BuildingStorey this space is on."""
		return self.get_attribute('buildingStoreyIdRef')


	@buildingStoreyIdRef.setter
	def buildingStoreyIdRef(self,value):
		self.set_attribute('buildingStoreyIdRef',value)


	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC) file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Lighting(self):
		return self.get_child('Lighting')


	@property
	def Lightings(self):
		return self.get_children('Lighting')


	def add_Lighting(self,
		id=None,
		lightingSystemIdRef=None,
		lightingControlIdRef=None,
		meterIdRef=None,
		programId=None,
		):
		return self.add_child('Lighting',
			id=id,
			lightingSystemIdRef=lightingSystemIdRef,
			lightingControlIdRef=lightingControlIdRef,
			meterIdRef=meterIdRef,
			programId=programId,
			)


	@property
	def LightingControl(self):
		return self.get_child('LightingControl')


	@property
	def LightingControls(self):
		return self.get_children('LightingControl')


	def add_LightingControl(self,
		type=None,
		id=None,
		lightingSystemIdRef=None,
		programId=None,
		):
		return self.add_child('LightingControl',
			type=type,
			id=id,
			lightingSystemIdRef=lightingSystemIdRef,
			programId=programId,
			)


	@property
	def InfiltrationFlow(self):
		return self.get_child('InfiltrationFlow')


	@property
	def InfiltrationFlows(self):
		return self.get_children('InfiltrationFlow')


	def add_InfiltrationFlow(self,
		type=None,
		programId=None,
		):
		return self.add_child('InfiltrationFlow',
			type=type,
			programId=programId,
			)


	@property
	def PeopleNumber(self):
		return self.get_child('PeopleNumber')


	@property
	def PeopleNumbers(self):
		return self.get_children('PeopleNumber')


	def add_PeopleNumber(self,
		unit=None,
		programId=None,
		):
		return self.add_child('PeopleNumber',
			unit=unit,
			programId=programId,
			)


	@property
	def PeopleHeatGain(self):
		return self.get_child('PeopleHeatGain')


	@property
	def PeopleHeatGains(self):
		return self.get_children('PeopleHeatGain')


	def add_PeopleHeatGain(self,
		unit=None,
		heatGainType=None,
		programId=None,
		):
		return self.add_child('PeopleHeatGain',
			unit=unit,
			heatGainType=heatGainType,
			programId=programId,
			)


	@property
	def LightPowerPerArea(self):
		return self.get_child('LightPowerPerArea')


	@property
	def LightPowerPerAreas(self):
		return self.get_children('LightPowerPerArea')


	def add_LightPowerPerArea(self,
		unit=None,
		programId=None,
		):
		return self.add_child('LightPowerPerArea',
			unit=unit,
			programId=programId,
			)


	@property
	def EquipPowerPerArea(self):
		return self.get_child('EquipPowerPerArea')


	@property
	def EquipPowerPerAreas(self):
		return self.get_children('EquipPowerPerArea')


	def add_EquipPowerPerArea(self,
		unit=None,
		programId=None,
		):
		return self.add_child('EquipPowerPerArea',
			unit=unit,
			programId=programId,
			)


	@property
	def AirChangesPerHour(self):
		return self.get_child('AirChangesPerHour')


	@property
	def AirChangesPerHours(self):
		return self.get_children('AirChangesPerHour')


	def add_AirChangesPerHour(self,
		):
		return self.add_child('AirChangesPerHour',
			)


	@property
	def Area(self):
		return self.get_child('Area')


	@property
	def Areas(self):
		return self.get_children('Area')


	def add_Area(self,
		unit=None,
		):
		return self.add_child('Area',
			unit=unit,
			)


	@property
	def Temperature(self):
		return self.get_child('Temperature')


	@property
	def Temperatures(self):
		return self.get_children('Temperature')


	def add_Temperature(self,
		unit=None,
		programId=None,
		):
		return self.add_child('Temperature',
			unit=unit,
			programId=programId,
			)


	@property
	def Volume(self):
		return self.get_child('Volume')


	@property
	def Volumes(self):
		return self.get_children('Volume')


	def add_Volume(self,
		unit=None,
		):
		return self.add_child('Volume',
			unit=unit,
			)


	@property
	def PlanarGeometry(self):
		return self.get_child('PlanarGeometry')


	@property
	def PlanarGeometrys(self):
		return self.get_children('PlanarGeometry')


	def add_PlanarGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('PlanarGeometry',
			id=id,
			unit=unit,
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def AirLoopId(self):
		return self.get_child('AirLoopId')


	@property
	def AirLoopIds(self):
		return self.get_children('AirLoopId')


	def add_AirLoopId(self,
		airLoopIdRef=None,
		):
		return self.add_child('AirLoopId',
			airLoopIdRef=airLoopIdRef,
			)


	@property
	def HydronicLoopId(self):
		return self.get_child('HydronicLoopId')


	@property
	def HydronicLoopIds(self):
		return self.get_children('HydronicLoopId')


	def add_HydronicLoopId(self,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('HydronicLoopId',
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def MeterId(self):
		return self.get_child('MeterId')


	@property
	def MeterIds(self):
		return self.get_children('MeterId')


	def add_MeterId(self,
		meterIdRef=None,
		):
		return self.add_child('MeterId',
			meterIdRef=meterIdRef,
			)


	@property
	def IntEquipId(self):
		return self.get_child('IntEquipId')


	@property
	def IntEquipIds(self):
		return self.get_children('IntEquipId')


	def add_IntEquipId(self,
		intEquipIdRef=None,
		):
		return self.add_child('IntEquipId',
			intEquipIdRef=intEquipIdRef,
			)


	@property
	def AirLoopEquipmentId(self):
		return self.get_child('AirLoopEquipmentId')


	@property
	def AirLoopEquipmentIds(self):
		return self.get_children('AirLoopEquipmentId')


	def add_AirLoopEquipmentId(self,
		airLoopEquipIdRef=None,
		):
		return self.add_child('AirLoopEquipmentId',
			airLoopEquipIdRef=airLoopEquipIdRef,
			)


	@property
	def HydronicLoopEquipmentId(self):
		return self.get_child('HydronicLoopEquipmentId')


	@property
	def HydronicLoopEquipmentIds(self):
		return self.get_children('HydronicLoopEquipmentId')


	def add_HydronicLoopEquipmentId(self,
		hydronicLoopEquipIdRef=None,
		):
		return self.add_child('HydronicLoopEquipmentId',
			hydronicLoopEquipIdRef=hydronicLoopEquipIdRef,
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)


	@property
	def TypeCode(self):
		return self.get_child('TypeCode')


	@property
	def TypeCodes(self):
		return self.get_children('TypeCode')


	def add_TypeCode(self,
		):
		return self.add_child('TypeCode',
			)


	@property
	def SpaceBoundary(self):
		return self.get_child('SpaceBoundary')


	@property
	def SpaceBoundarys(self):
		return self.get_children('SpaceBoundary')


	def add_SpaceBoundary(self,
		ifcGUID=None,
		isSecondLevelBoundary=None,
		surfaceIdRef=None,
		oppositeIdRef=None,
		):
		return self.add_child('SpaceBoundary',
			ifcGUID=ifcGUID,
			isSecondLevelBoundary=isSecondLevelBoundary,
			surfaceIdRef=surfaceIdRef,
			oppositeIdRef=oppositeIdRef,
			)



class SpaceBoundary_auto():
	"""This element establishes the logical relation of a given part of the space ShellGeometry such that its PlanarGeometry is part of an interior surface bounding the space."""

	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC)
					file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def isSecondLevelBoundary(self):
		"""If this attribute is set to true, the boundary is important in heat flow calculation."""
		return self.get_attribute('isSecondLevelBoundary')


	@isSecondLevelBoundary.setter
	def isSecondLevelBoundary(self,value):
		self.set_attribute('isSecondLevelBoundary',value)


	@property
	def surfaceIdRef(self):
		"""Connects the space boundary to a surface representing a building element (or representing the open air)."""
		return self.get_attribute('surfaceIdRef')


	@surfaceIdRef.setter
	def surfaceIdRef(self,value):
		self.set_attribute('surfaceIdRef',value)


	@property
	def oppositeIdRef(self):
		"""If surface referenced by SpaceBoundary is adjacent to two spaces, then this references the corresponding SpaceBoundary of the opposite space."""
		return self.get_attribute('oppositeIdRef')


	@oppositeIdRef.setter
	def oppositeIdRef(self,value):
		self.set_attribute('oppositeIdRef',value)


	@property
	def PlanarGeometry(self):
		return self.get_child('PlanarGeometry')


	@property
	def PlanarGeometrys(self):
		return self.get_children('PlanarGeometry')


	def add_PlanarGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('PlanarGeometry',
			id=id,
			unit=unit,
			)



class SpecificHeat_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class StateOrProvince_auto():
	""""""


class StationId_auto():
	""""""

	@property
	def IDType(self):
		return self.get_attribute('IDType')


	@IDType.setter
	def IDType(self,value):
		self.set_attribute('IDType',value)



class StreetAddress_auto():
	""""""


class Surface_auto():
	""""""

	@property
	def surfaceType(self):
		return self.get_attribute('surfaceType')


	@surfaceType.setter
	def surfaceType(self,value):
		self.set_attribute('surfaceType',value)


	@property
	def constructionIdRef(self):
		"""Identifier pointing to a construction"""
		return self.get_attribute('constructionIdRef')


	@constructionIdRef.setter
	def constructionIdRef(self,value):
		self.set_attribute('constructionIdRef',value)


	@property
	def scheduleShadeIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleShadeIdRef')


	@scheduleShadeIdRef.setter
	def scheduleShadeIdRef(self,value):
		self.set_attribute('scheduleShadeIdRef',value)


	@property
	def exposedToSun(self):
		"""This attribute specifies whether or not direct beam radiation from the sun will ever hit this surface. Only relevant to exterior surface types."""
		return self.get_attribute('exposedToSun')


	@exposedToSun.setter
	def exposedToSun(self,value):
		self.set_attribute('exposedToSun',value)


	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC) file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def FamilyName(self):
		return self.get_child('FamilyName')


	@property
	def FamilyNames(self):
		return self.get_children('FamilyName')


	def add_FamilyName(self,
		):
		return self.add_child('FamilyName',
			)


	@property
	def AdjacentSpaceId(self):
		return self.get_child('AdjacentSpaceId')


	@property
	def AdjacentSpaceIds(self):
		return self.get_children('AdjacentSpaceId')


	def add_AdjacentSpaceId(self,
		spaceIdRef=None,
		surfaceType=None,
		):
		return self.add_child('AdjacentSpaceId',
			spaceIdRef=spaceIdRef,
			surfaceType=surfaceType,
			)


	@property
	def RectangularGeometry(self):
		return self.get_child('RectangularGeometry')


	@property
	def RectangularGeometrys(self):
		return self.get_children('RectangularGeometry')


	def add_RectangularGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('RectangularGeometry',
			id=id,
			unit=unit,
			)


	@property
	def PlanarGeometry(self):
		return self.get_child('PlanarGeometry')


	@property
	def PlanarGeometrys(self):
		return self.get_children('PlanarGeometry')


	def add_PlanarGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('PlanarGeometry',
			id=id,
			unit=unit,
			)


	@property
	def Opening(self):
		return self.get_child('Opening')


	@property
	def Openings(self):
		return self.get_children('Opening')


	def add_Opening(self,
		id=None,
		interiorShadeType=None,
		exteriorShadeType=None,
		windowTypeIdRef=None,
		constructionIdRef=None,
		openingType=None,
		ifcGUID=None,
		):
		return self.add_child('Opening',
			id=id,
			interiorShadeType=interiorShadeType,
			exteriorShadeType=exteriorShadeType,
			windowTypeIdRef=windowTypeIdRef,
			constructionIdRef=constructionIdRef,
			openingType=openingType,
			ifcGUID=ifcGUID,
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)



class Temp_auto():
	"""Temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def tempType(self):
		return self.get_attribute('tempType')


	@tempType.setter
	def tempType(self,value):
		self.set_attribute('tempType',value)



class Temperature_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)



class TemperatureControl_auto():
	"""Use this element to describe how the temperature is controlled. The temperatures specified in this element should be measured just upstream of the most critical piece of equipment (air handlers for a chilled water and hot water loops the chiller for the cooling water loop)."""

	@property
	def DesignTemp(self):
		return self.get_child('DesignTemp')


	@property
	def DesignTemps(self):
		return self.get_children('DesignTemp')


	def add_DesignTemp(self,
		unit=None,
		):
		return self.add_child('DesignTemp',
			unit=unit,
			)


	@property
	def MinTemp(self):
		return self.get_child('MinTemp')


	@property
	def MinTemps(self):
		return self.get_children('MinTemp')


	def add_MinTemp(self,
		unit=None,
		):
		return self.add_child('MinTemp',
			unit=unit,
			)


	@property
	def MaxTemp(self):
		return self.get_child('MaxTemp')


	@property
	def MaxTemps(self):
		return self.get_children('MaxTemp')


	def add_MaxTemp(self,
		unit=None,
		):
		return self.add_child('MaxTemp',
			unit=unit,
			)


	@property
	def ResetTemperature(self):
		return self.get_child('ResetTemperature')


	@property
	def ResetTemperatures(self):
		return self.get_children('ResetTemperature')


	def add_ResetTemperature(self,
		unit=None,
		type=None,
		resetSchedIdRef=None,
		):
		return self.add_child('ResetTemperature',
			unit=unit,
			type=type,
			resetSchedIdRef=resetSchedIdRef,
			)



class Thickness_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Tilt_auto():
	"""The number of degrees from up that the outside of the surface is tilted in relation to the bottom-left corner."""


class TimeIncrement_auto():
	"""Time or period that results represent. Example: if timeType = Month and TimeIncrement = 1 the Value would be for the month of January or if timeType = Hour and TimeIncrement = 4 the 81st the Value would be for January 14 at noon."""

	@property
	def timeUnit(self):
		return self.get_attribute('timeUnit')


	@timeUnit.setter
	def timeUnit(self,value):
		self.set_attribute('timeUnit',value)



class Transmittance_auto():
	"""Transmittance of shading surface"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class Transportation_auto():
	"""Public transportation"""

	@property
	def transportationType(self):
		return self.get_attribute('transportationType')


	@transportationType.setter
	def transportationType(self,value):
		self.set_attribute('transportationType',value)


	@property
	def scheduleIdRef(self):
		"""ID for the schedule of transmittance of a shading surface"""
		return self.get_attribute('scheduleIdRef')


	@scheduleIdRef.setter
	def scheduleIdRef(self,value):
		self.set_attribute('scheduleIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)



class TypeCode_auto():
	"""User/project defined Code for Space or Zone."""


class URI_auto():
	""""""


class UtilityRate_auto():
	"""We have left the UtilityRate element open to allow for use with billing schemas."""


class U_value_auto():
	"""Overall conductance"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Value_auto():
	"""Contains the actual numerical result value. If series result type each Value element contains the one value and is in sequential order for the series."""


class Vegetation_auto():
	"""Plants, trees, etc. on a campus"""

	@property
	def vegetationType(self):
		return self.get_attribute('vegetationType')


	@vegetationType.setter
	def vegetationType(self,value):
		self.set_attribute('vegetationType',value)


	@property
	def waterScheduleIdRef(self):
		return self.get_attribute('waterScheduleIdRef')


	@waterScheduleIdRef.setter
	def waterScheduleIdRef(self,value):
		self.set_attribute('waterScheduleIdRef',value)


	@property
	def waterMeterIdRef(self):
		return self.get_attribute('waterMeterIdRef')


	@waterMeterIdRef.setter
	def waterMeterIdRef(self,value):
		self.set_attribute('waterMeterIdRef',value)


	@property
	def shadeScheduleIdRef(self):
		"""Refers to a building-level surface."""
		return self.get_attribute('shadeScheduleIdRef')


	@shadeScheduleIdRef.setter
	def shadeScheduleIdRef(self,value):
		self.set_attribute('shadeScheduleIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def GeneralGeometry(self):
		return self.get_child('GeneralGeometry')


	@property
	def GeneralGeometrys(self):
		return self.get_children('GeneralGeometry')


	def add_GeneralGeometry(self,
		):
		return self.add_child('GeneralGeometry',
			)


	@property
	def ShellGeometry(self):
		return self.get_child('ShellGeometry')


	@property
	def ShellGeometrys(self):
		return self.get_children('ShellGeometry')


	def add_ShellGeometry(self,
		id=None,
		unit=None,
		):
		return self.add_child('ShellGeometry',
			id=id,
			unit=unit,
			)


	@property
	def WaterRate(self):
		return self.get_child('WaterRate')


	@property
	def WaterRates(self):
		return self.get_children('WaterRate')


	def add_WaterRate(self,
		unit=None,
		):
		return self.add_child('WaterRate',
			unit=unit,
			)


	@property
	def BiomassDensity(self):
		return self.get_child('BiomassDensity')


	@property
	def BiomassDensitys(self):
		return self.get_children('BiomassDensity')


	def add_BiomassDensity(self,
		unit=None,
		):
		return self.add_child('BiomassDensity',
			unit=unit,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)



class Version_auto():
	""""""


class Viscosity_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class ViscosityFofT_auto():
	"""Viscosity as a function of temperature"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Volume_auto():
	"""Specifies the volume of the space. This value should be equal to the volume enclosed by the actual physical boundaries of the space, as defined by the volumetric model's interior surfaces bounding that space."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WasteWaterHREff_auto():
	"""Waste water heat recovery efficiency"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def airLoopIdRef(self):
		"""ID pointing to an air loop"""
		return self.get_attribute('airLoopIdRef')


	@airLoopIdRef.setter
	def airLoopIdRef(self,value):
		self.set_attribute('airLoopIdRef',value)


	@property
	def hydronicLoopIdRef(self):
		"""ID pointing to a hydronic loop """
		return self.get_attribute('hydronicLoopIdRef')


	@hydronicLoopIdRef.setter
	def hydronicLoopIdRef(self,value):
		self.set_attribute('hydronicLoopIdRef',value)



class WaterLoss_auto():
	"""This includes blowdown (draining a cooling tower to clean), drift (water loss from water sprayed), and evaporation in cooling towers."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WaterRate_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WaterUsePerCycle_auto():
	"""Amount of water used for water using equipment per cycle of operation."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class HeatRejectedtoSpace_auto():
	"""The amount of heat from this equipment rejected to this space. For condensors exterior to building, this value will be 0."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class Weather_auto():
	""""""

	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Location(self):
		return self.get_child('Location')


	@property
	def Locations(self):
		return self.get_children('Location')


	def add_Location(self,
		):
		return self.add_child('Location',
			)


	@property
	def City(self):
		return self.get_child('City')


	@property
	def Citys(self):
		return self.get_children('City')


	def add_City(self,
		):
		return self.add_child('City',
			)


	@property
	def StateOrProvince(self):
		return self.get_child('StateOrProvince')


	@property
	def StateOrProvinces(self):
		return self.get_children('StateOrProvince')


	def add_StateOrProvince(self,
		):
		return self.add_child('StateOrProvince',
			)


	@property
	def Country(self):
		return self.get_child('Country')


	@property
	def Countrys(self):
		return self.get_children('Country')


	def add_Country(self,
		):
		return self.add_child('Country',
			)


	@property
	def HDD(self):
		return self.get_child('HDD')


	@property
	def HDDs(self):
		return self.get_children('HDD')


	def add_HDD(self,
		):
		return self.add_child('HDD',
			)


	@property
	def CDD(self):
		return self.get_child('CDD')


	@property
	def CDDs(self):
		return self.get_children('CDD')


	def add_CDD(self,
		):
		return self.add_child('CDD',
			)


	@property
	def DDDBCool(self):
		return self.get_child('DDDBCool')


	@property
	def DDDBCools(self):
		return self.get_children('DDDBCool')


	def add_DDDBCool(self,
		unit=None,
		):
		return self.add_child('DDDBCool',
			unit=unit,
			)


	@property
	def DDHiHrCool(self):
		return self.get_child('DDHiHrCool')


	@property
	def DDHiHrCools(self):
		return self.get_children('DDHiHrCool')


	def add_DDHiHrCool(self,
		):
		return self.add_child('DDHiHrCool',
			)


	@property
	def DDWBCool(self):
		return self.get_child('DDWBCool')


	@property
	def DDWBCools(self):
		return self.get_children('DDWBCool')


	def add_DDWBCool(self,
		unit=None,
		):
		return self.add_child('DDWBCool',
			unit=unit,
			)


	@property
	def DDDBRangeCool(self):
		return self.get_child('DDDBRangeCool')


	@property
	def DDDBRangeCools(self):
		return self.get_children('DDDBRangeCool')


	def add_DDDBRangeCool(self,
		unit=None,
		):
		return self.add_child('DDDBRangeCool',
			unit=unit,
			)


	@property
	def DDLoHrCool(self):
		return self.get_child('DDLoHrCool')


	@property
	def DDLoHrCools(self):
		return self.get_children('DDLoHrCool')


	def add_DDLoHrCool(self,
		):
		return self.add_child('DDLoHrCool',
			)


	@property
	def DDPressureCool(self):
		return self.get_child('DDPressureCool')


	@property
	def DDPressureCools(self):
		return self.get_children('DDPressureCool')


	def add_DDPressureCool(self,
		unit=None,
		):
		return self.add_child('DDPressureCool',
			unit=unit,
			)


	@property
	def DDWindSpeedCool(self):
		return self.get_child('DDWindSpeedCool')


	@property
	def DDWindSpeedCools(self):
		return self.get_children('DDWindSpeedCool')


	def add_DDWindSpeedCool(self,
		unit=None,
		):
		return self.add_child('DDWindSpeedCool',
			unit=unit,
			)


	@property
	def DDWindDirCool(self):
		return self.get_child('DDWindDirCool')


	@property
	def DDWindDirCools(self):
		return self.get_children('DDWindDirCool')


	def add_DDWindDirCool(self,
		unit=None,
		):
		return self.add_child('DDWindDirCool',
			unit=unit,
			)


	@property
	def DDSkyClearnessCool(self):
		return self.get_child('DDSkyClearnessCool')


	@property
	def DDSkyClearnessCools(self):
		return self.get_children('DDSkyClearnessCool')


	def add_DDSkyClearnessCool(self,
		unit=None,
		):
		return self.add_child('DDSkyClearnessCool',
			unit=unit,
			)


	@property
	def DDRainCool(self):
		return self.get_child('DDRainCool')


	@property
	def DDRainCools(self):
		return self.get_children('DDRainCool')


	def add_DDRainCool(self,
		):
		return self.add_child('DDRainCool',
			)


	@property
	def DDSnowCool(self):
		return self.get_child('DDSnowCool')


	@property
	def DDSnowCools(self):
		return self.get_children('DDSnowCool')


	def add_DDSnowCool(self,
		):
		return self.add_child('DDSnowCool',
			)


	@property
	def DDMonthCool(self):
		return self.get_child('DDMonthCool')


	@property
	def DDMonthCools(self):
		return self.get_children('DDMonthCool')


	def add_DDMonthCool(self,
		):
		return self.add_child('DDMonthCool',
			)


	@property
	def DDDayCool(self):
		return self.get_child('DDDayCool')


	@property
	def DDDayCools(self):
		return self.get_children('DDDayCool')


	def add_DDDayCool(self,
		):
		return self.add_child('DDDayCool',
			)


	@property
	def DDDaylightCool(self):
		return self.get_child('DDDaylightCool')


	@property
	def DDDaylightCools(self):
		return self.get_children('DDDaylightCool')


	def add_DDDaylightCool(self,
		):
		return self.add_child('DDDaylightCool',
			)


	@property
	def DDGroundTCool(self):
		return self.get_child('DDGroundTCool')


	@property
	def DDGroundTCools(self):
		return self.get_children('DDGroundTCool')


	def add_DDGroundTCool(self,
		unit=None,
		):
		return self.add_child('DDGroundTCool',
			unit=unit,
			)


	@property
	def DDDBHeat(self):
		return self.get_child('DDDBHeat')


	@property
	def DDDBHeats(self):
		return self.get_children('DDDBHeat')


	def add_DDDBHeat(self,
		unit=None,
		):
		return self.add_child('DDDBHeat',
			unit=unit,
			)


	@property
	def DDHiHrHeat(self):
		return self.get_child('DDHiHrHeat')


	@property
	def DDHiHrHeats(self):
		return self.get_children('DDHiHrHeat')


	def add_DDHiHrHeat(self,
		):
		return self.add_child('DDHiHrHeat',
			)


	@property
	def DDWBHeat(self):
		return self.get_child('DDWBHeat')


	@property
	def DDWBHeats(self):
		return self.get_children('DDWBHeat')


	def add_DDWBHeat(self,
		unit=None,
		):
		return self.add_child('DDWBHeat',
			unit=unit,
			)


	@property
	def DDDBRangeHeat(self):
		return self.get_child('DDDBRangeHeat')


	@property
	def DDDBRangeHeats(self):
		return self.get_children('DDDBRangeHeat')


	def add_DDDBRangeHeat(self,
		unit=None,
		):
		return self.add_child('DDDBRangeHeat',
			unit=unit,
			)


	@property
	def DDLoHrHeat(self):
		return self.get_child('DDLoHrHeat')


	@property
	def DDLoHrHeats(self):
		return self.get_children('DDLoHrHeat')


	def add_DDLoHrHeat(self,
		):
		return self.add_child('DDLoHrHeat',
			)


	@property
	def DDPressureHeat(self):
		return self.get_child('DDPressureHeat')


	@property
	def DDPressureHeats(self):
		return self.get_children('DDPressureHeat')


	def add_DDPressureHeat(self,
		unit=None,
		):
		return self.add_child('DDPressureHeat',
			unit=unit,
			)


	@property
	def DDWindSpeedHeat(self):
		return self.get_child('DDWindSpeedHeat')


	@property
	def DDWindSpeedHeats(self):
		return self.get_children('DDWindSpeedHeat')


	def add_DDWindSpeedHeat(self,
		unit=None,
		):
		return self.add_child('DDWindSpeedHeat',
			unit=unit,
			)


	@property
	def DDWindDirHeat(self):
		return self.get_child('DDWindDirHeat')


	@property
	def DDWindDirHeats(self):
		return self.get_children('DDWindDirHeat')


	def add_DDWindDirHeat(self,
		unit=None,
		):
		return self.add_child('DDWindDirHeat',
			unit=unit,
			)


	@property
	def DDSkyClearnessHeat(self):
		return self.get_child('DDSkyClearnessHeat')


	@property
	def DDSkyClearnessHeats(self):
		return self.get_children('DDSkyClearnessHeat')


	def add_DDSkyClearnessHeat(self,
		unit=None,
		):
		return self.add_child('DDSkyClearnessHeat',
			unit=unit,
			)


	@property
	def DDRainHeat(self):
		return self.get_child('DDRainHeat')


	@property
	def DDRainHeats(self):
		return self.get_children('DDRainHeat')


	def add_DDRainHeat(self,
		):
		return self.add_child('DDRainHeat',
			)


	@property
	def DDSnowHeat(self):
		return self.get_child('DDSnowHeat')


	@property
	def DDSnowHeats(self):
		return self.get_children('DDSnowHeat')


	def add_DDSnowHeat(self,
		):
		return self.add_child('DDSnowHeat',
			)


	@property
	def DDMonthHeat(self):
		return self.get_child('DDMonthHeat')


	@property
	def DDMonthHeats(self):
		return self.get_children('DDMonthHeat')


	def add_DDMonthHeat(self,
		):
		return self.add_child('DDMonthHeat',
			)


	@property
	def DDDayHeat(self):
		return self.get_child('DDDayHeat')


	@property
	def DDDayHeats(self):
		return self.get_children('DDDayHeat')


	def add_DDDayHeat(self,
		):
		return self.add_child('DDDayHeat',
			)


	@property
	def DDDaylightHeat(self):
		return self.get_child('DDDaylightHeat')


	@property
	def DDDaylightHeats(self):
		return self.get_children('DDDaylightHeat')


	def add_DDDaylightHeat(self,
		):
		return self.add_child('DDDaylightHeat',
			)


	@property
	def DDGroundTHeat(self):
		return self.get_child('DDGroundTHeat')


	@property
	def DDGroundTHeats(self):
		return self.get_children('DDGroundTHeat')


	def add_DDGroundTHeat(self,
		unit=None,
		):
		return self.add_child('DDGroundTHeat',
			unit=unit,
			)


	@property
	def GroundTemp(self):
		return self.get_child('GroundTemp')


	@property
	def GroundTemps(self):
		return self.get_children('GroundTemp')


	def add_GroundTemp(self,
		unit=None,
		):
		return self.add_child('GroundTemp',
			unit=unit,
			)


	@property
	def WFTDTemp(self):
		return self.get_child('WFTDTemp')


	@property
	def WFTDTemps(self):
		return self.get_children('WFTDTemp')


	def add_WFTDTemp(self,
		unit=None,
		):
		return self.add_child('WFTDTemp',
			unit=unit,
			)


	@property
	def WFTDRelHumidity(self):
		return self.get_child('WFTDRelHumidity')


	@property
	def WFTDRelHumiditys(self):
		return self.get_children('WFTDRelHumidity')


	def add_WFTDRelHumidity(self,
		unit=None,
		):
		return self.add_child('WFTDRelHumidity',
			unit=unit,
			)


	@property
	def WFTDWindSpeed(self):
		return self.get_child('WFTDWindSpeed')


	@property
	def WFTDWindSpeeds(self):
		return self.get_children('WFTDWindSpeed')


	def add_WFTDWindSpeed(self,
		unit=None,
		):
		return self.add_child('WFTDWindSpeed',
			unit=unit,
			)


	@property
	def WFTDWindDir(self):
		return self.get_child('WFTDWindDir')


	@property
	def WFTDWindDirs(self):
		return self.get_children('WFTDWindDir')


	def add_WFTDWindDir(self,
		unit=None,
		):
		return self.add_child('WFTDWindDir',
			unit=unit,
			)


	@property
	def WFTDPressure(self):
		return self.get_child('WFTDPressure')


	@property
	def WFTDPressures(self):
		return self.get_children('WFTDPressure')


	def add_WFTDPressure(self,
		unit=None,
		):
		return self.add_child('WFTDPressure',
			unit=unit,
			)


	@property
	def Reference(self):
		return self.get_child('Reference')


	@property
	def References(self):
		return self.get_children('Reference')


	def add_Reference(self,
		):
		return self.add_child('Reference',
			)



class WebPage_auto():
	""""""


class WeekSchedule_auto():
	"""Set of day schedules all assigned to a unique particular period of the week using the day type attribute. Do not schedule conflicting day types to the same week schedule."""

	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Day(self):
		return self.get_child('Day')


	@property
	def Days(self):
		return self.get_children('Day')


	def add_Day(self,
		dayScheduleIdRef=None,
		dayType=None,
		):
		return self.add_child('Day',
			dayScheduleIdRef=dayScheduleIdRef,
			dayType=dayType,
			)



class WeekScheduleId_auto():
	""""""

	@property
	def weekScheduleIdRef(self):
		return self.get_attribute('weekScheduleIdRef')


	@weekScheduleIdRef.setter
	def weekScheduleIdRef(self,value):
		self.set_attribute('weekScheduleIdRef',value)



class Weight_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WFTDPressure_auto():
	"""Wildfire threat design atomospheric pressure."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WFTDRelHumidity_auto():
	"""Wildfire threat design relative humidity."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WFTDTemp_auto():
	"""Wildfire threat design dry bulb temperature."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WFTDWindDir_auto():
	"""Wildfire threat design wind direction"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WFTDWindSpeed_auto():
	"""Wildfire threat design wind speed."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WindSpeed_auto():
	"""Wind speed for wind turbine."""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def type(self):
		return self.get_attribute('type')


	@type.setter
	def type(self,value):
		self.set_attribute('type',value)



class Width_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



class WindowType_auto():
	"""One WindowType should be created for each type of window. Create a Blind, Frame, and Cost for each OpeningType, and then add as many Glaze and Gaps as exist in the window. Place these Glaze and Gap elements in order from outside to inside. For instance, a two pane window will have Glaze Gap Glaze, where the first Glaze represents the outside surface."""

	@property
	def DOELibIdRef(self):
		"""Use this attribute to reference objects in the DOE2 library"""
		return self.get_attribute('DOELibIdRef')


	@DOELibIdRef.setter
	def DOELibIdRef(self,value):
		self.set_attribute('DOELibIdRef',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def U_value(self):
		return self.get_child('U-value')


	@property
	def U_values(self):
		return self.get_children('U-value')


	def add_U_value(self,
		unit=None,
		):
		return self.add_child('U-value',
			unit=unit,
			)


	@property
	def ShadingCoeff(self):
		return self.get_child('ShadingCoeff')


	@property
	def ShadingCoeffs(self):
		return self.get_children('ShadingCoeff')


	def add_ShadingCoeff(self,
		unit=None,
		):
		return self.add_child('ShadingCoeff',
			unit=unit,
			)


	@property
	def SolarHeatGainCoeff(self):
		return self.get_child('SolarHeatGainCoeff')


	@property
	def SolarHeatGainCoeffs(self):
		return self.get_children('SolarHeatGainCoeff')


	def add_SolarHeatGainCoeff(self,
		unit=None,
		solarIncidentAngle=None,
		):
		return self.add_child('SolarHeatGainCoeff',
			unit=unit,
			solarIncidentAngle=solarIncidentAngle,
			)


	@property
	def Transmittance(self):
		return self.get_child('Transmittance')


	@property
	def Transmittances(self):
		return self.get_children('Transmittance')


	def add_Transmittance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Transmittance',
			unit=unit,
			type=type,
			)


	@property
	def Reflectance(self):
		return self.get_child('Reflectance')


	@property
	def Reflectances(self):
		return self.get_children('Reflectance')


	def add_Reflectance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Reflectance',
			unit=unit,
			type=type,
			)


	@property
	def Emittance(self):
		return self.get_child('Emittance')


	@property
	def Emittances(self):
		return self.get_children('Emittance')


	def add_Emittance(self,
		unit=None,
		type=None,
		):
		return self.add_child('Emittance',
			unit=unit,
			type=type,
			)


	@property
	def Blind(self):
		return self.get_child('Blind')


	@property
	def Blinds(self):
		return self.get_children('Blind')


	def add_Blind(self,
		id=None,
		):
		return self.add_child('Blind',
			id=id,
			)


	@property
	def Frame(self):
		return self.get_child('Frame')


	@property
	def Frames(self):
		return self.get_children('Frame')


	def add_Frame(self,
		id=None,
		type=None,
		DOELibIdRef=None,
		):
		return self.add_child('Frame',
			id=id,
			type=type,
			DOELibIdRef=DOELibIdRef,
			)


	@property
	def Gap(self):
		return self.get_child('Gap')


	@property
	def Gaps(self):
		return self.get_children('Gap')


	def add_Gap(self,
		id=None,
		gas=None,
		DOELibIdRef=None,
		):
		return self.add_child('Gap',
			id=id,
			gas=gas,
			DOELibIdRef=DOELibIdRef,
			)


	@property
	def Glaze(self):
		return self.get_child('Glaze')


	@property
	def Glazes(self):
		return self.get_children('Glaze')


	def add_Glaze(self,
		id=None,
		DOELibIdRef=None,
		):
		return self.add_child('Glaze',
			id=id,
			DOELibIdRef=DOELibIdRef,
			)


	@property
	def Cost(self):
		return self.get_child('Cost')


	@property
	def Costs(self):
		return self.get_children('Cost')


	def add_Cost(self,
		costType=None,
		):
		return self.add_child('Cost',
			costType=costType,
			)


	@property
	def ExtEquipId(self):
		return self.get_child('ExtEquipId')


	@property
	def ExtEquipIds(self):
		return self.get_children('ExtEquipId')


	def add_ExtEquipId(self,
		extEquipIdRef=None,
		):
		return self.add_child('ExtEquipId',
			extEquipIdRef=extEquipIdRef,
			)



class XAxis_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def dataType(self):
		return self.get_attribute('dataType')


	@dataType.setter
	def dataType(self,value):
		self.set_attribute('dataType',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)



class YAxis_auto():
	""""""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)


	@property
	def dataType(self):
		return self.get_attribute('dataType')


	@dataType.setter
	def dataType(self,value):
		self.set_attribute('dataType',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)



class YearModeled_auto():
	"""Year of simulation to use"""

	@property
	def BeginDate(self):
		return self.get_child('BeginDate')


	@property
	def BeginDates(self):
		return self.get_children('BeginDate')


	def add_BeginDate(self,
		):
		return self.add_child('BeginDate',
			)


	@property
	def EndDate(self):
		return self.get_child('EndDate')


	@property
	def EndDates(self):
		return self.get_children('EndDate')


	def add_EndDate(self,
		):
		return self.add_child('EndDate',
			)


	@property
	def HolidaysModeled(self):
		return self.get_child('HolidaysModeled')


	@property
	def HolidaysModeleds(self):
		return self.get_children('HolidaysModeled')


	def add_HolidaysModeled(self,
		id=None,
		):
		return self.add_child('HolidaysModeled',
			id=id,
			)



class YearSchedule_auto():
	"""Set of week schedules all assigned for a particular time period during the year defined by the begin and end date elements. These must not span more than one calendar year."""

	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def BeginDate(self):
		return self.get_child('BeginDate')


	@property
	def BeginDates(self):
		return self.get_children('BeginDate')


	def add_BeginDate(self,
		):
		return self.add_child('BeginDate',
			)


	@property
	def EndDate(self):
		return self.get_child('EndDate')


	@property
	def EndDates(self):
		return self.get_children('EndDate')


	def add_EndDate(self,
		):
		return self.add_child('EndDate',
			)


	@property
	def WeekScheduleId(self):
		return self.get_child('WeekScheduleId')


	@property
	def WeekScheduleIds(self):
		return self.get_children('WeekScheduleId')


	def add_WeekScheduleId(self,
		weekScheduleIdRef=None,
		):
		return self.add_child('WeekScheduleId',
			weekScheduleIdRef=weekScheduleIdRef,
			)



class HolidaysModeled_auto():
	""""""

	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def HolidayDate(self):
		return self.get_child('HolidayDate')


	@property
	def HolidayDates(self):
		return self.get_children('HolidayDate')


	def add_HolidayDate(self,
		):
		return self.add_child('HolidayDate',
			)



class ZipcodeOrPostalCode_auto():
	""""""


class Zone_auto():
	""""""

	@property
	def heatSchedIdRef(self):
		"""ID of heating schedule"""
		return self.get_attribute('heatSchedIdRef')


	@heatSchedIdRef.setter
	def heatSchedIdRef(self,value):
		self.set_attribute('heatSchedIdRef',value)


	@property
	def coolSchedIdRef(self):
		"""Design temperature for cooling"""
		return self.get_attribute('coolSchedIdRef')


	@coolSchedIdRef.setter
	def coolSchedIdRef(self,value):
		self.set_attribute('coolSchedIdRef',value)


	@property
	def outAirSchedIdRef(self):
		"""Outside air schedule ID"""
		return self.get_attribute('outAirSchedIdRef')


	@outAirSchedIdRef.setter
	def outAirSchedIdRef(self,value):
		self.set_attribute('outAirSchedIdRef',value)


	@property
	def airChangesSchedIdRef(self):
		"""Air changes schedule ID"""
		return self.get_attribute('airChangesSchedIdRef')


	@airChangesSchedIdRef.setter
	def airChangesSchedIdRef(self,value):
		self.set_attribute('airChangesSchedIdRef',value)


	@property
	def fanSchedIdRef(self):
		"""ID of the fan schedule for this zone"""
		return self.get_attribute('fanSchedIdRef')


	@fanSchedIdRef.setter
	def fanSchedIdRef(self,value):
		self.set_attribute('fanSchedIdRef',value)


	@property
	def fanTempSchedIdRef(self):
		"""ID of the fan temperature schedule for this zone"""
		return self.get_attribute('fanTempSchedIdRef')


	@fanTempSchedIdRef.setter
	def fanTempSchedIdRef(self,value):
		self.set_attribute('fanTempSchedIdRef',value)


	@property
	def ifcGUID(self):
		"""Global Unique ID from Industry Foundation Class (IFC) file."""
		return self.get_attribute('ifcGUID')


	@ifcGUID.setter
	def ifcGUID(self,value):
		self.set_attribute('ifcGUID',value)


	@property
	def programId(self):
		"""Please specify the program that added this element."""
		return self.get_attribute('programId')


	@programId.setter
	def programId(self,value):
		self.set_attribute('programId',value)


	@property
	def Name(self):
		return self.get_child('Name')


	@property
	def Names(self):
		return self.get_children('Name')


	def add_Name(self,
		):
		return self.add_child('Name',
			)


	@property
	def Description(self):
		return self.get_child('Description')


	@property
	def Descriptions(self):
		return self.get_children('Description')


	def add_Description(self,
		):
		return self.add_child('Description',
			)


	@property
	def Flow(self):
		return self.get_child('Flow')


	@property
	def Flows(self):
		return self.get_children('Flow')


	def add_Flow(self,
		unit=None,
		programId=None,
		):
		return self.add_child('Flow',
			unit=unit,
			programId=programId,
			)


	@property
	def AirChangesPerHour(self):
		return self.get_child('AirChangesPerHour')


	@property
	def AirChangesPerHours(self):
		return self.get_children('AirChangesPerHour')


	def add_AirChangesPerHour(self,
		):
		return self.add_child('AirChangesPerHour',
			)


	@property
	def FlowPerArea(self):
		return self.get_child('FlowPerArea')


	@property
	def FlowPerAreas(self):
		return self.get_children('FlowPerArea')


	def add_FlowPerArea(self,
		unit=None,
		programId=None,
		):
		return self.add_child('FlowPerArea',
			unit=unit,
			programId=programId,
			)


	@property
	def FlowPerPerson(self):
		return self.get_child('FlowPerPerson')


	@property
	def FlowPerPersons(self):
		return self.get_children('FlowPerPerson')


	def add_FlowPerPerson(self,
		unit=None,
		programId=None,
		):
		return self.add_child('FlowPerPerson',
			unit=unit,
			programId=programId,
			)


	@property
	def OAFlowPerArea(self):
		return self.get_child('OAFlowPerArea')


	@property
	def OAFlowPerAreas(self):
		return self.get_children('OAFlowPerArea')


	def add_OAFlowPerArea(self,
		unit=None,
		programId=None,
		):
		return self.add_child('OAFlowPerArea',
			unit=unit,
			programId=programId,
			)


	@property
	def OAFlowPerPerson(self):
		return self.get_child('OAFlowPerPerson')


	@property
	def OAFlowPerPersons(self):
		return self.get_children('OAFlowPerPerson')


	def add_OAFlowPerPerson(self,
		unit=None,
		programId=None,
		):
		return self.add_child('OAFlowPerPerson',
			unit=unit,
			programId=programId,
			)


	@property
	def DesignHeatT(self):
		return self.get_child('DesignHeatT')


	@property
	def DesignHeatTs(self):
		return self.get_children('DesignHeatT')


	def add_DesignHeatT(self,
		unit=None,
		programId=None,
		):
		return self.add_child('DesignHeatT',
			unit=unit,
			programId=programId,
			)


	@property
	def DesignCoolT(self):
		return self.get_child('DesignCoolT')


	@property
	def DesignCoolTs(self):
		return self.get_children('DesignCoolT')


	def add_DesignCoolT(self,
		unit=None,
		programId=None,
		):
		return self.add_child('DesignCoolT',
			unit=unit,
			programId=programId,
			)


	@property
	def IndoorAirQuality(self):
		return self.get_child('IndoorAirQuality')


	@property
	def IndoorAirQualitys(self):
		return self.get_children('IndoorAirQuality')


	def add_IndoorAirQuality(self,
		id=None,
		scheduleIdRef=None,
		):
		return self.add_child('IndoorAirQuality',
			id=id,
			scheduleIdRef=scheduleIdRef,
			)


	@property
	def HydronicLoopId(self):
		return self.get_child('HydronicLoopId')


	@property
	def HydronicLoopIds(self):
		return self.get_children('HydronicLoopId')


	def add_HydronicLoopId(self,
		hydronicLoopIdRef=None,
		hydronicLoopType=None,
		):
		return self.add_child('HydronicLoopId',
			hydronicLoopIdRef=hydronicLoopIdRef,
			hydronicLoopType=hydronicLoopType,
			)


	@property
	def AirLoopId(self):
		return self.get_child('AirLoopId')


	@property
	def AirLoopIds(self):
		return self.get_children('AirLoopId')


	def add_AirLoopId(self,
		airLoopIdRef=None,
		):
		return self.add_child('AirLoopId',
			airLoopIdRef=airLoopIdRef,
			)


	@property
	def CADObjectId(self):
		return self.get_child('CADObjectId')


	@property
	def CADObjectIds(self):
		return self.get_children('CADObjectId')


	def add_CADObjectId(self,
		programIdRef=None,
		):
		return self.add_child('CADObjectId',
			programIdRef=programIdRef,
			)


	@property
	def TypeCode(self):
		return self.get_child('TypeCode')


	@property
	def TypeCodes(self):
		return self.get_children('TypeCode')


	def add_TypeCode(self,
		):
		return self.add_child('TypeCode',
			)



class ZoneCoolingLoad_auto():
	"""Minimum cooling load that triggers the shades to close"""

	@property
	def unit(self):
		return self.get_attribute('unit')


	@unit.setter
	def unit(self,value):
		self.set_attribute('unit',value)



