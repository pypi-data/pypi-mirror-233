# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import typing
import platform

# Used for default argument values
DEFAULT = object()


class RustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_int32),
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def alloc(size):
        return rust_call(_UniFFILib.ffi_iroh_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return rust_call(_UniFFILib.ffi_iroh_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return rust_call(_UniFFILib.ffi_iroh_rustbuffer_free, self)

    def __str__(self):
        return "RustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def allocWithBuilder(*args):
        """Context-manger to allocate a buffer using a RustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = RustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consumeWithStream(self):
        """Context-manager to consume a buffer using a RustBufferStream.

        The RustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = RustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consumeWithStream")
        finally:
            self.free()

    @contextlib.contextmanager
    def readWithStream(self):
        """Context-manager to read a buffer using a RustBufferStream.

        This is like consumeWithStream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `RustBuffer` data.
        """
        s = RustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of readWithStream")

class ForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "ForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class RustBufferStream:
    """
    Helper for structured reading of bytes from a RustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def readI8(self):
        return self._unpack_from(1, ">b")

    def readU8(self):
        return self._unpack_from(1, ">B")

    def readI16(self):
        return self._unpack_from(2, ">h")

    def readU16(self):
        return self._unpack_from(2, ">H")

    def readI32(self):
        return self._unpack_from(4, ">i")

    def readU32(self):
        return self._unpack_from(4, ">I")

    def readI64(self):
        return self._unpack_from(8, ">q")

    def readU64(self):
        return self._unpack_from(8, ">Q")

    def readFloat(self):
        v = self._unpack_from(4, ">f")
        return v

    def readDouble(self):
        return self._unpack_from(8, ">d")

    def readCSizeT(self):
        return self._unpack_from(ctypes.sizeof(ctypes.c_size_t) , "@N")

class RustBufferBuilder:
    """
    Helper for structured writing of bytes into a RustBuffer.
    """

    def __init__(self):
        self.rbuf = RustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, numBytes):
        if self.rbuf.len + numBytes > self.rbuf.capacity:
            self.rbuf = RustBuffer.reserve(self.rbuf, numBytes)
        yield None
        self.rbuf.len += numBytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def writeI8(self, v):
        self._pack_into(1, ">b", v)

    def writeU8(self, v):
        self._pack_into(1, ">B", v)

    def writeI16(self, v):
        self._pack_into(2, ">h", v)

    def writeU16(self, v):
        self._pack_into(2, ">H", v)

    def writeI32(self, v):
        self._pack_into(4, ">i", v)

    def writeU32(self, v):
        self._pack_into(4, ">I", v)

    def writeI64(self, v):
        self._pack_into(8, ">q", v)

    def writeU64(self, v):
        self._pack_into(8, ">Q", v)

    def writeFloat(self, v):
        self._pack_into(4, ">f", v)

    def writeDouble(self, v):
        self._pack_into(8, ">d", v)

    def writeCSizeT(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class RustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", RustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_PANIC = 2

    def __str__(self):
        if self.code == RustCallStatus.CALL_SUCCESS:
            return "RustCallStatus(CALL_SUCCESS)"
        elif self.code == RustCallStatus.CALL_ERROR:
            return "RustCallStatus(CALL_ERROR)"
        elif self.code == RustCallStatus.CALL_PANIC:
            return "RustCallStatus(CALL_PANIC)"
        else:
            return "RustCallStatus(<invalid code>)"

def rust_call(fn, *args):
    # Call a rust function
    return rust_call_with_error(None, fn, *args)

def rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the FfiConverter for the error class that corresponds to the result.
    call_status = RustCallStatus(code=RustCallStatus.CALL_SUCCESS, error_buf=RustBuffer(0, 0, None))

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def rust_call_async(scaffolding_fn, callback_fn, *args):
    # Call the scaffolding function, passing it a callback handler for `AsyncTypes.py` and a pointer
    # to a python Future object.  The async function then awaits the Future.
    uniffi_eventloop = asyncio.get_running_loop()
    uniffi_py_future = uniffi_eventloop.create_future()
    uniffi_call_status = RustCallStatus(code=RustCallStatus.CALL_SUCCESS, error_buf=RustBuffer(0, 0, None))
    scaffolding_fn(*args,
       FfiConverterForeignExecutor._pointer_manager.new_pointer(uniffi_eventloop),
       callback_fn,
       # Note: It's tempting to skip the pointer manager and just use a `py_object` pointing to a
       # local variable like we do in Swift.  However, Python doesn't use cooperative cancellation
       # -- asyncio can cancel a task at anytime.  This means if we use a local variable, the Rust
       # callback could fire with a dangling pointer.
       UniFfiPyFuturePointerManager.new_pointer(uniffi_py_future),
       ctypes.byref(uniffi_call_status),
    )
    uniffi_check_call_status(None, uniffi_call_status)
    return uniffi_py_future

def uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == RustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == RustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == RustCallStatus.CALL_PANIC:
        # When the rust code sees a panic, it tries to construct a RustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = FfiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid RustCallStatus code: {}".format(
            call_status.code))

# A function pointer for a callback as defined by UniFFI.
# Rust definition `fn(handle: u64, method: u32, args: RustBuffer, buf_ptr: *mut RustBuffer) -> int`
FOREIGN_CALLBACK_T = ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_ulonglong, ctypes.c_ulong, ctypes.POINTER(ctypes.c_char), ctypes.c_int, ctypes.POINTER(RustBuffer))
class UniFfiPointerManagerCPython:
    """
    Manage giving out pointers to Python objects on CPython

    This class is used to generate opaque pointers that reference Python objects to pass to Rust.
    It assumes a CPython platform.  See UniFfiPointerManagerGeneral for the alternative.
    """

    def new_pointer(self, obj):
        """
        Get a pointer for an object as a ctypes.c_size_t instance

        Each call to new_pointer() must be balanced with exactly one call to release_pointer()

        This returns a ctypes.c_size_t.  This is always the same size as a pointer and can be
        interchanged with pointers for FFI function arguments and return values.
        """
        # IncRef the object since we're going to pass a pointer to Rust
        ctypes.pythonapi.Py_IncRef(ctypes.py_object(obj))
        # id() is the object address on CPython
        # (https://docs.python.org/3/library/functions.html#id)
        return id(obj)

    def release_pointer(self, address):
        py_obj = ctypes.cast(address, ctypes.py_object)
        obj = py_obj.value
        ctypes.pythonapi.Py_DecRef(py_obj)
        return obj

    def lookup(self, address):
        return ctypes.cast(address, ctypes.py_object).value

class UniFfiPointerManagerGeneral:
    """
    Manage giving out pointers to Python objects on non-CPython platforms

    This has the same API as UniFfiPointerManagerCPython, but doesn't assume we're running on
    CPython and is slightly slower.

    Instead of using real pointers, it maps integer values to objects and returns the keys as
    c_size_t values.
    """

    def __init__(self):
        self._map = {}
        self._lock = threading.Lock()
        self._current_handle = 0

    def new_pointer(self, obj):
        with self._lock:
            handle = self._current_handle
            self._current_handle += 1
            self._map[handle] = obj
        return handle

    def release_pointer(self, handle):
        with self._lock:
            return self._map.pop(handle)

    def lookup(self, handle):
        with self._lock:
            return self._map[handle]

# Pick an pointer manager implementation based on the platform
if platform.python_implementation() == 'CPython':
    UniFfiPointerManager = UniFfiPointerManagerCPython  # type: ignore
else:
    UniFfiPointerManager = UniFfiPointerManagerGeneral  # type: ignore
# Types conforming to `FfiConverterPrimitive` pass themselves directly over the FFI.
class FfiConverterPrimitive:
    @classmethod
    def check(cls, value):
        return value

    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return cls.lowerUnchecked(cls.check(value))

    @classmethod
    def lowerUnchecked(cls, value):
        return value

    @classmethod
    def write(cls, value, buf):
        cls.writeUnchecked(cls.check(value), buf)

class FfiConverterPrimitiveInt(FfiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))
        return super().check(value)

class FfiConverterPrimitiveFloat(FfiConverterPrimitive):
    @classmethod
    def check(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))
        return super().check(value)

# Helper class for wrapper types that will always go through a RustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class FfiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consumeWithStream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with RustBuffer.allocWithBuilder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code,
# and the FFI Function declarations in a com.sun.jna.Library.
# Define some ctypes FFI types that we use in the library

"""
ctypes type for the foreign executor callback.  This is a built-in interface for scheduling
tasks

Args:
  executor: opaque c_size_t value representing the eventloop
  delay: delay in ms
  task: function pointer to the task callback
  task_data: void pointer to the task callback data

Normally we should call task(task_data) after the detail.
However, when task is NULL this indicates that Rust has dropped the ForeignExecutor and we should
decrease the EventLoop refcount.
"""
UNIFFI_FOREIGN_EXECUTOR_CALLBACK_T = ctypes.CFUNCTYPE(None, ctypes.c_size_t, ctypes.c_uint32, ctypes.c_void_p, ctypes.c_void_p)

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p)

def uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_size_t, return_type, RustCallStatus)

from pathlib import Path

def loadIndirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("uniffi_iroh")
    path = str(Path(__file__).parent / libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 22
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_iroh_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def uniffi_check_api_checksums(lib):
    if lib.uniffi_iroh_checksum_func_set_log_level() != 20910:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_func_start_metrics_collection() != 30246:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_irohnode_node_id() != 860:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_irohnode_doc_new() != 10558:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_irohnode_doc_join() != 34149:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_irohnode_author_new() != 7219:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_irohnode_author_list() != 10059:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_irohnode_stats() != 12801:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_irohnode_connections() != 64165:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_irohnode_connection_info() != 27388:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_irohnode_blob_list_blobs() != 53280:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_irohnode_blob_get() != 65293:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_doc_id() != 34918:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_doc_share_write() != 64425:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_doc_share_read() != 8947:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_doc_set_bytes() != 50064:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_doc_get_content_bytes() != 56096:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_doc_keys() != 10934:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_doc_subscribe() != 17522:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_doc_stop_sync() != 10292:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_doc_status() != 11839:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_authorid_to_string() != 61926:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_entry_author() != 7235:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_entry_key() != 56754:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_entry_hash() != 38165:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_hash_to_string() != 33037:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_hash_to_bytes() != 55740:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_docticket_to_string() != 32683:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_liveevent_type() != 20373:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_liveevent_as_insert_local() != 50454:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_liveevent_as_insert_remote() != 18845:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_liveevent_as_content_ready() != 42964:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_liveevent_as_neighbor_up() != 46965:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_liveevent_as_neighbor_down() != 23815:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_liveevent_as_sync_finished() != 25654:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_namespaceid_to_string() != 63677:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_publickey_to_string() != 54071:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_method_publickey_to_bytes() != 22866:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_constructor_irohnode_new() != 26269:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_iroh_checksum_constructor_docticket_from_string() != 12688:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniFFILib = loadIndirect()
_UniFFILib.uniffi_iroh_fn_free_irohnode.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_free_irohnode.restype = None
_UniFFILib.uniffi_iroh_fn_constructor_irohnode_new.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_constructor_irohnode_new.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_irohnode_node_id.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_irohnode_node_id.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_irohnode_doc_new.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_irohnode_doc_new.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_irohnode_doc_join.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_irohnode_doc_join.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_irohnode_author_new.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_irohnode_author_new.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_irohnode_author_list.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_irohnode_author_list.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_irohnode_stats.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_irohnode_stats.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_irohnode_connections.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_irohnode_connections.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_irohnode_connection_info.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_irohnode_connection_info.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_irohnode_blob_list_blobs.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_irohnode_blob_list_blobs.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_irohnode_blob_get.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_irohnode_blob_get.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_free_doc.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_free_doc.restype = None
_UniFFILib.uniffi_iroh_fn_method_doc_id.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_doc_id.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_doc_share_write.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_doc_share_write.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_doc_share_read.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_doc_share_read.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_doc_set_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    RustBuffer,
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_doc_set_bytes.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_doc_get_content_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_doc_get_content_bytes.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_doc_keys.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_doc_keys.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_doc_subscribe.argtypes = (
    ctypes.c_void_p,
    ctypes.c_uint64,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_doc_subscribe.restype = None
_UniFFILib.uniffi_iroh_fn_method_doc_stop_sync.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_doc_stop_sync.restype = None
_UniFFILib.uniffi_iroh_fn_method_doc_status.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_doc_status.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_free_authorid.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_free_authorid.restype = None
_UniFFILib.uniffi_iroh_fn_method_authorid_to_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_authorid_to_string.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_free_entry.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_free_entry.restype = None
_UniFFILib.uniffi_iroh_fn_method_entry_author.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_entry_author.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_entry_key.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_entry_key.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_entry_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_entry_hash.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_free_hash.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_free_hash.restype = None
_UniFFILib.uniffi_iroh_fn_method_hash_to_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_hash_to_string.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_hash_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_hash_to_bytes.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_free_docticket.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_free_docticket.restype = None
_UniFFILib.uniffi_iroh_fn_constructor_docticket_from_string.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_constructor_docticket_from_string.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_docticket_to_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_docticket_to_string.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_free_liveevent.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_free_liveevent.restype = None
_UniFFILib.uniffi_iroh_fn_method_liveevent_type.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_liveevent_type.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_insert_local.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_insert_local.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_insert_remote.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_insert_remote.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_content_ready.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_content_ready.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_neighbor_up.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_neighbor_up.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_neighbor_down.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_neighbor_down.restype = ctypes.c_void_p
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_sync_finished.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_liveevent_as_sync_finished.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_free_namespaceid.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_free_namespaceid.restype = None
_UniFFILib.uniffi_iroh_fn_method_namespaceid_to_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_namespaceid_to_string.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_free_publickey.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_free_publickey.restype = None
_UniFFILib.uniffi_iroh_fn_method_publickey_to_string.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_publickey_to_string.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_method_publickey_to_bytes.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_method_publickey_to_bytes.restype = RustBuffer
_UniFFILib.uniffi_iroh_fn_init_callback_subscribecallback.argtypes = (
    FOREIGN_CALLBACK_T,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_init_callback_subscribecallback.restype = None
_UniFFILib.uniffi_iroh_fn_func_set_log_level.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_func_set_log_level.restype = None
_UniFFILib.uniffi_iroh_fn_func_start_metrics_collection.argtypes = (
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.uniffi_iroh_fn_func_start_metrics_collection.restype = None
_UniFFILib.ffi_iroh_rustbuffer_alloc.argtypes = (
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_iroh_rustbuffer_alloc.restype = RustBuffer
_UniFFILib.ffi_iroh_rustbuffer_from_bytes.argtypes = (
    ForeignBytes,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_iroh_rustbuffer_from_bytes.restype = RustBuffer
_UniFFILib.ffi_iroh_rustbuffer_free.argtypes = (
    RustBuffer,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_iroh_rustbuffer_free.restype = None
_UniFFILib.ffi_iroh_rustbuffer_reserve.argtypes = (
    RustBuffer,
    ctypes.c_int32,
    ctypes.POINTER(RustCallStatus),
)
_UniFFILib.ffi_iroh_rustbuffer_reserve.restype = RustBuffer
_UniFFILib.uniffi_iroh_checksum_func_set_log_level.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_func_set_log_level.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_func_start_metrics_collection.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_func_start_metrics_collection.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_irohnode_node_id.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_irohnode_node_id.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_irohnode_doc_new.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_irohnode_doc_new.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_irohnode_doc_join.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_irohnode_doc_join.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_irohnode_author_new.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_irohnode_author_new.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_irohnode_author_list.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_irohnode_author_list.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_irohnode_stats.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_irohnode_stats.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_irohnode_connections.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_irohnode_connections.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_irohnode_connection_info.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_irohnode_connection_info.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_irohnode_blob_list_blobs.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_irohnode_blob_list_blobs.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_irohnode_blob_get.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_irohnode_blob_get.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_doc_id.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_doc_id.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_doc_share_write.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_doc_share_write.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_doc_share_read.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_doc_share_read.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_doc_set_bytes.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_doc_set_bytes.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_doc_get_content_bytes.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_doc_get_content_bytes.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_doc_keys.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_doc_keys.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_doc_subscribe.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_doc_subscribe.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_doc_stop_sync.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_doc_stop_sync.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_doc_status.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_doc_status.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_authorid_to_string.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_authorid_to_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_entry_author.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_entry_author.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_entry_key.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_entry_key.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_entry_hash.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_entry_hash.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_hash_to_string.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_hash_to_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_hash_to_bytes.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_hash_to_bytes.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_docticket_to_string.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_docticket_to_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_liveevent_type.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_liveevent_type.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_insert_local.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_insert_local.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_insert_remote.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_insert_remote.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_content_ready.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_content_ready.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_neighbor_up.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_neighbor_up.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_neighbor_down.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_neighbor_down.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_sync_finished.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_liveevent_as_sync_finished.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_namespaceid_to_string.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_namespaceid_to_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_publickey_to_string.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_publickey_to_string.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_method_publickey_to_bytes.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_method_publickey_to_bytes.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_constructor_irohnode_new.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_constructor_irohnode_new.restype = ctypes.c_uint16
_UniFFILib.uniffi_iroh_checksum_constructor_docticket_from_string.argtypes = (
)
_UniFFILib.uniffi_iroh_checksum_constructor_docticket_from_string.restype = ctypes.c_uint16
_UniFFILib.ffi_iroh_uniffi_contract_version.argtypes = (
)
_UniFFILib.ffi_iroh_uniffi_contract_version.restype = ctypes.c_uint32
uniffi_check_contract_api_version(_UniFFILib)
uniffi_check_api_checksums(_UniFFILib)

# Public interface members begin here.


class FfiConverterUInt8(FfiConverterPrimitiveInt):
    CLASS_NAME = "u8"
    VALUE_MIN = 0
    VALUE_MAX = 2**8

    @staticmethod
    def read(buf):
        return buf.readU8()

    @staticmethod
    def writeUnchecked(value, buf):
        buf.writeU8(value)

class FfiConverterUInt16(FfiConverterPrimitiveInt):
    CLASS_NAME = "u16"
    VALUE_MIN = 0
    VALUE_MAX = 2**16

    @staticmethod
    def read(buf):
        return buf.readU16()

    @staticmethod
    def writeUnchecked(value, buf):
        buf.writeU16(value)

class FfiConverterUInt64(FfiConverterPrimitiveInt):
    CLASS_NAME = "u64"
    VALUE_MIN = 0
    VALUE_MAX = 2**64

    @staticmethod
    def read(buf):
        return buf.readU64()

    @staticmethod
    def writeUnchecked(value, buf):
        buf.writeU64(value)

class FfiConverterDouble(FfiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.readDouble()

    @staticmethod
    def writeUnchecked(value, buf):
        buf.writeDouble(value)

class FfiConverterBool(FfiConverterPrimitive):
    @classmethod
    def check(cls, value):
        return not not value

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.readU8())

    @classmethod
    def writeUnchecked(cls, value, buf):
        buf.writeU8(value)

    @staticmethod
    def lift(value):
        return value != 0

class FfiConverterString:
    @staticmethod
    def check(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.readI32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8Bytes = buf.read(size)
        return utf8Bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        value = FfiConverterString.check(value)
        utf8Bytes = value.encode("utf-8")
        buf.writeI32(len(utf8Bytes))
        buf.write(utf8Bytes)

    @staticmethod
    def lift(buf):
        with buf.consumeWithStream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        value = FfiConverterString.check(value)
        with RustBuffer.allocWithBuilder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

class FfiConverterBytes(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        size = buf.readI32()
        if size < 0:
            raise InternalError("Unexpected negative byte string length")
        return buf.read(size)

    @staticmethod
    def write(value, buf):
        try:
            memoryview(value)
        except TypeError:
            raise TypeError("a bytes-like object is required, not {!r}".format(type(value).__name__))
        buf.writeI32(len(value))
        buf.write(value)



class AuthorId:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_iroh_fn_free_authorid, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_string(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_authorid_to_string,self._pointer,)
        )






class FfiConverterTypeAuthorId:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, AuthorId):
            raise TypeError("Expected AuthorId instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return AuthorId._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Doc:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_iroh_fn_free_doc, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def id(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_doc_id,self._pointer,)
        )






    def share_write(self, ) -> "DocTicket":
        return FfiConverterTypeDocTicket.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_doc_share_write,self._pointer,)
        )






    def share_read(self, ) -> "DocTicket":
        return FfiConverterTypeDocTicket.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_doc_share_read,self._pointer,)
        )






    def set_bytes(self, author: "AuthorId",key: "bytes",value: "bytes") -> "Hash":
        
        
        
        return FfiConverterTypeHash.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_doc_set_bytes,self._pointer,
        FfiConverterTypeAuthorId.lower(author),
        FfiConverterBytes.lower(key),
        FfiConverterBytes.lower(value))
        )






    def get_content_bytes(self, entry: "Entry") -> "bytes":
        
        return FfiConverterBytes.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_doc_get_content_bytes,self._pointer,
        FfiConverterTypeEntry.lower(entry))
        )






    def keys(self, ) -> "typing.List[Entry]":
        return FfiConverterSequenceTypeEntry.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_doc_keys,self._pointer,)
        )






    def subscribe(self, cb: "SubscribeCallback"):
        
        rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_doc_subscribe,self._pointer,
        FfiConverterCallbackInterfaceSubscribeCallback.lower(cb))







    def stop_sync(self, ):
        rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_doc_stop_sync,self._pointer,)







    def status(self, ) -> "LiveStatus":
        return FfiConverterTypeLiveStatus.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_doc_status,self._pointer,)
        )






class FfiConverterTypeDoc:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Doc):
            raise TypeError("Expected Doc instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Doc._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class DocTicket:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_iroh_fn_free_docticket, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst

    @classmethod
    def from_string(cls, content: "str"):
        
        # Call the (fallible) function before creating any half-baked object instances.
        pointer = rust_call_with_error(FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_constructor_docticket_from_string,
        FfiConverterString.lower(content))
        return cls._make_instance_(pointer)



    def to_string(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_docticket_to_string,self._pointer,)
        )






class FfiConverterTypeDocTicket:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, DocTicket):
            raise TypeError("Expected DocTicket instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return DocTicket._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Entry:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_iroh_fn_free_entry, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def author(self, ) -> "AuthorId":
        return FfiConverterTypeAuthorId.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_entry_author,self._pointer,)
        )






    def key(self, ) -> "bytes":
        return FfiConverterBytes.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_entry_key,self._pointer,)
        )






    def hash(self, ) -> "Hash":
        return FfiConverterTypeHash.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_entry_hash,self._pointer,)
        )






class FfiConverterTypeEntry:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Entry):
            raise TypeError("Expected Entry instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Entry._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class Hash:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_iroh_fn_free_hash, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_string(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_hash_to_string,self._pointer,)
        )






    def to_bytes(self, ) -> "bytes":
        return FfiConverterBytes.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_hash_to_bytes,self._pointer,)
        )






class FfiConverterTypeHash:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, Hash):
            raise TypeError("Expected Hash instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return Hash._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class IrohNode:
    _pointer: ctypes.c_void_p
    def __init__(self, path: "str"):
        
        self._pointer = rust_call_with_error(FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_constructor_irohnode_new,
        FfiConverterString.lower(path))

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_iroh_fn_free_irohnode, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def node_id(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_irohnode_node_id,self._pointer,)
        )






    def doc_new(self, ) -> "Doc":
        return FfiConverterTypeDoc.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_irohnode_doc_new,self._pointer,)
        )






    def doc_join(self, ticket: "DocTicket") -> "Doc":
        
        return FfiConverterTypeDoc.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_irohnode_doc_join,self._pointer,
        FfiConverterTypeDocTicket.lower(ticket))
        )






    def author_new(self, ) -> "AuthorId":
        return FfiConverterTypeAuthorId.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_irohnode_author_new,self._pointer,)
        )






    def author_list(self, ) -> "typing.List[AuthorId]":
        return FfiConverterSequenceTypeAuthorId.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_irohnode_author_list,self._pointer,)
        )






    def stats(self, ) -> "dict":
        return FfiConverterMapStringTypeCounterStats.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_irohnode_stats,self._pointer,)
        )






    def connections(self, ) -> "typing.List[ConnectionInfo]":
        return FfiConverterSequenceTypeConnectionInfo.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_irohnode_connections,self._pointer,)
        )






    def connection_info(self, node_id: "PublicKey") -> "typing.Optional[ConnectionInfo]":
        
        return FfiConverterOptionalTypeConnectionInfo.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_irohnode_connection_info,self._pointer,
        FfiConverterTypePublicKey.lower(node_id))
        )






    def blob_list_blobs(self, ) -> "typing.List[Hash]":
        return FfiConverterSequenceTypeHash.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_irohnode_blob_list_blobs,self._pointer,)
        )






    def blob_get(self, hash: "Hash") -> "bytes":
        
        return FfiConverterBytes.lift(
            rust_call_with_error(
    FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_method_irohnode_blob_get,self._pointer,
        FfiConverterTypeHash.lower(hash))
        )






class FfiConverterTypeIrohNode:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, IrohNode):
            raise TypeError("Expected IrohNode instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return IrohNode._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class LiveEvent:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_iroh_fn_free_liveevent, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def type(self, ) -> "LiveEventType":
        return FfiConverterTypeLiveEventType.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_liveevent_type,self._pointer,)
        )






    def as_insert_local(self, ) -> "Entry":
        return FfiConverterTypeEntry.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_liveevent_as_insert_local,self._pointer,)
        )






    def as_insert_remote(self, ) -> "InsertRemoteEvent":
        return FfiConverterTypeInsertRemoteEvent.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_liveevent_as_insert_remote,self._pointer,)
        )






    def as_content_ready(self, ) -> "Hash":
        return FfiConverterTypeHash.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_liveevent_as_content_ready,self._pointer,)
        )






    def as_neighbor_up(self, ) -> "PublicKey":
        return FfiConverterTypePublicKey.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_liveevent_as_neighbor_up,self._pointer,)
        )






    def as_neighbor_down(self, ) -> "PublicKey":
        return FfiConverterTypePublicKey.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_liveevent_as_neighbor_down,self._pointer,)
        )






    def as_sync_finished(self, ) -> "SyncEvent":
        return FfiConverterTypeSyncEvent.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_liveevent_as_sync_finished,self._pointer,)
        )






class FfiConverterTypeLiveEvent:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, LiveEvent):
            raise TypeError("Expected LiveEvent instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return LiveEvent._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class NamespaceId:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_iroh_fn_free_namespaceid, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_string(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_namespaceid_to_string,self._pointer,)
        )






class FfiConverterTypeNamespaceId:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, NamespaceId):
            raise TypeError("Expected NamespaceId instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return NamespaceId._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer



class PublicKey:
    _pointer: ctypes.c_void_p

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            rust_call(_UniFFILib.uniffi_iroh_fn_free_publickey, pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def to_string(self, ) -> "str":
        return FfiConverterString.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_publickey_to_string,self._pointer,)
        )






    def to_bytes(self, ) -> "bytes":
        return FfiConverterBytes.lift(
            rust_call(_UniFFILib.uniffi_iroh_fn_method_publickey_to_bytes,self._pointer,)
        )






class FfiConverterTypePublicKey:
    @classmethod
    def read(cls, buf):
        ptr = buf.readU64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value, buf):
        if not isinstance(value, PublicKey):
            raise TypeError("Expected PublicKey instance, {} found".format(value.__class__.__name__))
        buf.writeU64(cls.lower(value))

    @staticmethod
    def lift(value):
        return PublicKey._make_instance_(value)

    @staticmethod
    def lower(value):
        return value._pointer


class ConnectionInfo:

    def __init__(self, id, public_key, derp_region, addrs, latencies, conn_type, latency):
        self.id = id
        self.public_key = public_key
        self.derp_region = derp_region
        self.addrs = addrs
        self.latencies = latencies
        self.conn_type = conn_type
        self.latency = latency

    def __str__(self):
        return "ConnectionInfo(id={}, public_key={}, derp_region={}, addrs={}, latencies={}, conn_type={}, latency={})".format(self.id, self.public_key, self.derp_region, self.addrs, self.latencies, self.conn_type, self.latency)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.public_key != other.public_key:
            return False
        if self.derp_region != other.derp_region:
            return False
        if self.addrs != other.addrs:
            return False
        if self.latencies != other.latencies:
            return False
        if self.conn_type != other.conn_type:
            return False
        if self.latency != other.latency:
            return False
        return True

class FfiConverterTypeConnectionInfo(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return ConnectionInfo(
            id=FfiConverterUInt64.read(buf),
            public_key=FfiConverterTypePublicKey.read(buf),
            derp_region=FfiConverterOptionalUInt16.read(buf),
            addrs=FfiConverterSequenceTypeSocketAddr.read(buf),
            latencies=FfiConverterSequenceOptionalDouble.read(buf),
            conn_type=FfiConverterTypeConnectionType.read(buf),
            latency=FfiConverterOptionalDouble.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterUInt64.write(value.id, buf)
        FfiConverterTypePublicKey.write(value.public_key, buf)
        FfiConverterOptionalUInt16.write(value.derp_region, buf)
        FfiConverterSequenceTypeSocketAddr.write(value.addrs, buf)
        FfiConverterSequenceOptionalDouble.write(value.latencies, buf)
        FfiConverterTypeConnectionType.write(value.conn_type, buf)
        FfiConverterOptionalDouble.write(value.latency, buf)


class CounterStats:

    def __init__(self, value, description):
        self.value = value
        self.description = description

    def __str__(self):
        return "CounterStats(value={}, description={})".format(self.value, self.description)

    def __eq__(self, other):
        if self.value != other.value:
            return False
        if self.description != other.description:
            return False
        return True

class FfiConverterTypeCounterStats(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return CounterStats(
            value=FfiConverterUInt64.read(buf),
            description=FfiConverterString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterUInt64.write(value.value, buf)
        FfiConverterString.write(value.description, buf)


class InsertRemoteEvent:

    def __init__(self, _from, entry, content_status):
        self._from = _from
        self.entry = entry
        self.content_status = content_status

    def __str__(self):
        return "InsertRemoteEvent(_from={}, entry={}, content_status={})".format(self._from, self.entry, self.content_status)

    def __eq__(self, other):
        if self._from != other._from:
            return False
        if self.entry != other.entry:
            return False
        if self.content_status != other.content_status:
            return False
        return True

class FfiConverterTypeInsertRemoteEvent(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return InsertRemoteEvent(
            _from=FfiConverterTypePublicKey.read(buf),
            entry=FfiConverterTypeEntry.read(buf),
            content_status=FfiConverterTypeContentStatus.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterTypePublicKey.write(value._from, buf)
        FfiConverterTypeEntry.write(value.entry, buf)
        FfiConverterTypeContentStatus.write(value.content_status, buf)


class LiveStatus:

    def __init__(self, active, subscriptions):
        self.active = active
        self.subscriptions = subscriptions

    def __str__(self):
        return "LiveStatus(active={}, subscriptions={})".format(self.active, self.subscriptions)

    def __eq__(self, other):
        if self.active != other.active:
            return False
        if self.subscriptions != other.subscriptions:
            return False
        return True

class FfiConverterTypeLiveStatus(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return LiveStatus(
            active=FfiConverterBool.read(buf),
            subscriptions=FfiConverterUInt64.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterBool.write(value.active, buf)
        FfiConverterUInt64.write(value.subscriptions, buf)


class SyncEvent:

    def __init__(self, namespace, peer, origin, finished, result):
        self.namespace = namespace
        self.peer = peer
        self.origin = origin
        self.finished = finished
        self.result = result

    def __str__(self):
        return "SyncEvent(namespace={}, peer={}, origin={}, finished={}, result={})".format(self.namespace, self.peer, self.origin, self.finished, self.result)

    def __eq__(self, other):
        if self.namespace != other.namespace:
            return False
        if self.peer != other.peer:
            return False
        if self.origin != other.origin:
            return False
        if self.finished != other.finished:
            return False
        if self.result != other.result:
            return False
        return True

class FfiConverterTypeSyncEvent(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SyncEvent(
            namespace=FfiConverterTypeNamespaceId.read(buf),
            peer=FfiConverterTypePublicKey.read(buf),
            origin=FfiConverterTypeOrigin.read(buf),
            finished=FfiConverterDouble.read(buf),
            result=FfiConverterOptionalString.read(buf),
        )

    @staticmethod
    def write(value, buf):
        FfiConverterTypeNamespaceId.write(value.namespace, buf)
        FfiConverterTypePublicKey.write(value.peer, buf)
        FfiConverterTypeOrigin.write(value.origin, buf)
        FfiConverterDouble.write(value.finished, buf)
        FfiConverterOptionalString.write(value.result, buf)





class ConnectionType:
    def __init__(self):
        raise RuntimeError("ConnectionType cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class DIRECT:
        def __init__(self,addr):
            
            self.addr = addr
            

        def __str__(self):
            return "ConnectionType.DIRECT(addr={})".format(self.addr)

        def __eq__(self, other):
            if not other.is_direct():
                return False
            if self.addr != other.addr:
                return False
            return True
    class RELAY:
        def __init__(self,port):
            
            self.port = port
            

        def __str__(self):
            return "ConnectionType.RELAY(port={})".format(self.port)

        def __eq__(self, other):
            if not other.is_relay():
                return False
            if self.port != other.port:
                return False
            return True
    class NONE:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "ConnectionType.NONE()".format()

        def __eq__(self, other):
            if not other.is_none():
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_direct(self) -> bool:
        return isinstance(self, ConnectionType.DIRECT)
    def is_relay(self) -> bool:
        return isinstance(self, ConnectionType.RELAY)
    def is_none(self) -> bool:
        return isinstance(self, ConnectionType.NONE)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ConnectionType.DIRECT = type("ConnectionType.DIRECT", (ConnectionType.DIRECT, ConnectionType,), {})  # type: ignore
ConnectionType.RELAY = type("ConnectionType.RELAY", (ConnectionType.RELAY, ConnectionType,), {})  # type: ignore
ConnectionType.NONE = type("ConnectionType.NONE", (ConnectionType.NONE, ConnectionType,), {})  # type: ignore




class FfiConverterTypeConnectionType(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return ConnectionType.DIRECT(
                FfiConverterTypeSocketAddr.read(buf),
            )
        if variant == 2:
            return ConnectionType.RELAY(
                FfiConverterUInt16.read(buf),
            )
        if variant == 3:
            return ConnectionType.NONE(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_direct():
            buf.writeI32(1)
            FfiConverterTypeSocketAddr.write(value.addr, buf)
        if value.is_relay():
            buf.writeI32(2)
            FfiConverterUInt16.write(value.port, buf)
        if value.is_none():
            buf.writeI32(3)






class ContentStatus:
    def __init__(self):
        raise RuntimeError("ContentStatus cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class COMPLETE:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "ContentStatus.COMPLETE()".format()

        def __eq__(self, other):
            if not other.is_complete():
                return False
            return True
    class INCOMPLETE:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "ContentStatus.INCOMPLETE()".format()

        def __eq__(self, other):
            if not other.is_incomplete():
                return False
            return True
    class MISSING:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "ContentStatus.MISSING()".format()

        def __eq__(self, other):
            if not other.is_missing():
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_complete(self) -> bool:
        return isinstance(self, ContentStatus.COMPLETE)
    def is_incomplete(self) -> bool:
        return isinstance(self, ContentStatus.INCOMPLETE)
    def is_missing(self) -> bool:
        return isinstance(self, ContentStatus.MISSING)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
ContentStatus.COMPLETE = type("ContentStatus.COMPLETE", (ContentStatus.COMPLETE, ContentStatus,), {})  # type: ignore
ContentStatus.INCOMPLETE = type("ContentStatus.INCOMPLETE", (ContentStatus.INCOMPLETE, ContentStatus,), {})  # type: ignore
ContentStatus.MISSING = type("ContentStatus.MISSING", (ContentStatus.MISSING, ContentStatus,), {})  # type: ignore




class FfiConverterTypeContentStatus(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return ContentStatus.COMPLETE(
            )
        if variant == 2:
            return ContentStatus.INCOMPLETE(
            )
        if variant == 3:
            return ContentStatus.MISSING(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_complete():
            buf.writeI32(1)
        if value.is_incomplete():
            buf.writeI32(2)
        if value.is_missing():
            buf.writeI32(3)



# IrohError
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class IrohError(Exception):
    pass

UniFFITempIrohError = IrohError

class IrohError:  # type: ignore
    class Runtime(UniFFITempIrohError):
        def __init__(self, description):
            super().__init__(", ".join([
                "description={!r}".format(description),
            ]))
            self.description = description
        def __repr__(self):
            return "IrohError.Runtime({})".format(str(self))
    UniFFITempIrohError.Runtime = Runtime  # type: ignore
    class NodeCreate(UniFFITempIrohError):
        def __init__(self, description):
            super().__init__(", ".join([
                "description={!r}".format(description),
            ]))
            self.description = description
        def __repr__(self):
            return "IrohError.NodeCreate({})".format(str(self))
    UniFFITempIrohError.NodeCreate = NodeCreate  # type: ignore
    class Doc(UniFFITempIrohError):
        def __init__(self, description):
            super().__init__(", ".join([
                "description={!r}".format(description),
            ]))
            self.description = description
        def __repr__(self):
            return "IrohError.Doc({})".format(str(self))
    UniFFITempIrohError.Doc = Doc  # type: ignore
    class Author(UniFFITempIrohError):
        def __init__(self, description):
            super().__init__(", ".join([
                "description={!r}".format(description),
            ]))
            self.description = description
        def __repr__(self):
            return "IrohError.Author({})".format(str(self))
    UniFFITempIrohError.Author = Author  # type: ignore
    class DocTicket(UniFFITempIrohError):
        def __init__(self, description):
            super().__init__(", ".join([
                "description={!r}".format(description),
            ]))
            self.description = description
        def __repr__(self):
            return "IrohError.DocTicket({})".format(str(self))
    UniFFITempIrohError.DocTicket = DocTicket  # type: ignore
    class Uniffi(UniFFITempIrohError):
        def __init__(self, description):
            super().__init__(", ".join([
                "description={!r}".format(description),
            ]))
            self.description = description
        def __repr__(self):
            return "IrohError.Uniffi({})".format(str(self))
    UniFFITempIrohError.Uniffi = Uniffi  # type: ignore
    class Connection(UniFFITempIrohError):
        def __init__(self, description):
            super().__init__(", ".join([
                "description={!r}".format(description),
            ]))
            self.description = description
        def __repr__(self):
            return "IrohError.Connection({})".format(str(self))
    UniFFITempIrohError.Connection = Connection  # type: ignore
    class Blob(UniFFITempIrohError):
        def __init__(self, description):
            super().__init__(", ".join([
                "description={!r}".format(description),
            ]))
            self.description = description
        def __repr__(self):
            return "IrohError.Blob({})".format(str(self))
    UniFFITempIrohError.Blob = Blob  # type: ignore

IrohError = UniFFITempIrohError  # type: ignore
del UniFFITempIrohError


class FfiConverterTypeIrohError(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return IrohError.Runtime(
                description=FfiConverterString.read(buf),
            )
        if variant == 2:
            return IrohError.NodeCreate(
                description=FfiConverterString.read(buf),
            )
        if variant == 3:
            return IrohError.Doc(
                description=FfiConverterString.read(buf),
            )
        if variant == 4:
            return IrohError.Author(
                description=FfiConverterString.read(buf),
            )
        if variant == 5:
            return IrohError.DocTicket(
                description=FfiConverterString.read(buf),
            )
        if variant == 6:
            return IrohError.Uniffi(
                description=FfiConverterString.read(buf),
            )
        if variant == 7:
            return IrohError.Connection(
                description=FfiConverterString.read(buf),
            )
        if variant == 8:
            return IrohError.Blob(
                description=FfiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def write(value, buf):
        if isinstance(value, IrohError.Runtime):
            buf.writeI32(1)
            FfiConverterString.write(value.description, buf)
        if isinstance(value, IrohError.NodeCreate):
            buf.writeI32(2)
            FfiConverterString.write(value.description, buf)
        if isinstance(value, IrohError.Doc):
            buf.writeI32(3)
            FfiConverterString.write(value.description, buf)
        if isinstance(value, IrohError.Author):
            buf.writeI32(4)
            FfiConverterString.write(value.description, buf)
        if isinstance(value, IrohError.DocTicket):
            buf.writeI32(5)
            FfiConverterString.write(value.description, buf)
        if isinstance(value, IrohError.Uniffi):
            buf.writeI32(6)
            FfiConverterString.write(value.description, buf)
        if isinstance(value, IrohError.Connection):
            buf.writeI32(7)
            FfiConverterString.write(value.description, buf)
        if isinstance(value, IrohError.Blob):
            buf.writeI32(8)
            FfiConverterString.write(value.description, buf)





class LiveEventType:
    def __init__(self):
        raise RuntimeError("LiveEventType cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class INSERT_LOCAL:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "LiveEventType.INSERT_LOCAL()".format()

        def __eq__(self, other):
            if not other.is_insert_local():
                return False
            return True
    class INSERT_REMOTE:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "LiveEventType.INSERT_REMOTE()".format()

        def __eq__(self, other):
            if not other.is_insert_remote():
                return False
            return True
    class CONTENT_READY:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "LiveEventType.CONTENT_READY()".format()

        def __eq__(self, other):
            if not other.is_content_ready():
                return False
            return True
    class NEIGHBOR_UP:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "LiveEventType.NEIGHBOR_UP()".format()

        def __eq__(self, other):
            if not other.is_neighbor_up():
                return False
            return True
    class NEIGHBOR_DOWN:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "LiveEventType.NEIGHBOR_DOWN()".format()

        def __eq__(self, other):
            if not other.is_neighbor_down():
                return False
            return True
    class SYNC_FINISHED:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "LiveEventType.SYNC_FINISHED()".format()

        def __eq__(self, other):
            if not other.is_sync_finished():
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_insert_local(self) -> bool:
        return isinstance(self, LiveEventType.INSERT_LOCAL)
    def is_insert_remote(self) -> bool:
        return isinstance(self, LiveEventType.INSERT_REMOTE)
    def is_content_ready(self) -> bool:
        return isinstance(self, LiveEventType.CONTENT_READY)
    def is_neighbor_up(self) -> bool:
        return isinstance(self, LiveEventType.NEIGHBOR_UP)
    def is_neighbor_down(self) -> bool:
        return isinstance(self, LiveEventType.NEIGHBOR_DOWN)
    def is_sync_finished(self) -> bool:
        return isinstance(self, LiveEventType.SYNC_FINISHED)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
LiveEventType.INSERT_LOCAL = type("LiveEventType.INSERT_LOCAL", (LiveEventType.INSERT_LOCAL, LiveEventType,), {})  # type: ignore
LiveEventType.INSERT_REMOTE = type("LiveEventType.INSERT_REMOTE", (LiveEventType.INSERT_REMOTE, LiveEventType,), {})  # type: ignore
LiveEventType.CONTENT_READY = type("LiveEventType.CONTENT_READY", (LiveEventType.CONTENT_READY, LiveEventType,), {})  # type: ignore
LiveEventType.NEIGHBOR_UP = type("LiveEventType.NEIGHBOR_UP", (LiveEventType.NEIGHBOR_UP, LiveEventType,), {})  # type: ignore
LiveEventType.NEIGHBOR_DOWN = type("LiveEventType.NEIGHBOR_DOWN", (LiveEventType.NEIGHBOR_DOWN, LiveEventType,), {})  # type: ignore
LiveEventType.SYNC_FINISHED = type("LiveEventType.SYNC_FINISHED", (LiveEventType.SYNC_FINISHED, LiveEventType,), {})  # type: ignore




class FfiConverterTypeLiveEventType(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return LiveEventType.INSERT_LOCAL(
            )
        if variant == 2:
            return LiveEventType.INSERT_REMOTE(
            )
        if variant == 3:
            return LiveEventType.CONTENT_READY(
            )
        if variant == 4:
            return LiveEventType.NEIGHBOR_UP(
            )
        if variant == 5:
            return LiveEventType.NEIGHBOR_DOWN(
            )
        if variant == 6:
            return LiveEventType.SYNC_FINISHED(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_insert_local():
            buf.writeI32(1)
        if value.is_insert_remote():
            buf.writeI32(2)
        if value.is_content_ready():
            buf.writeI32(3)
        if value.is_neighbor_up():
            buf.writeI32(4)
        if value.is_neighbor_down():
            buf.writeI32(5)
        if value.is_sync_finished():
            buf.writeI32(6)






class LogLevel(enum.Enum):
    TRACE = 1
    DEBUG = 2
    INFO = 3
    WARN = 4
    ERROR = 5
    OFF = 6
    


class FfiConverterTypeLogLevel(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return LogLevel.TRACE
        if variant == 2:
            return LogLevel.DEBUG
        if variant == 3:
            return LogLevel.INFO
        if variant == 4:
            return LogLevel.WARN
        if variant == 5:
            return LogLevel.ERROR
        if variant == 6:
            return LogLevel.OFF
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value == LogLevel.TRACE:
            buf.writeI32(1)
        if value == LogLevel.DEBUG:
            buf.writeI32(2)
        if value == LogLevel.INFO:
            buf.writeI32(3)
        if value == LogLevel.WARN:
            buf.writeI32(4)
        if value == LogLevel.ERROR:
            buf.writeI32(5)
        if value == LogLevel.OFF:
            buf.writeI32(6)






class Origin:
    def __init__(self):
        raise RuntimeError("Origin cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class CONNECT:
        def __init__(self,reason):
            
            self.reason = reason
            

        def __str__(self):
            return "Origin.CONNECT(reason={})".format(self.reason)

        def __eq__(self, other):
            if not other.is_connect():
                return False
            if self.reason != other.reason:
                return False
            return True
    class ACCEPT:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "Origin.ACCEPT()".format()

        def __eq__(self, other):
            if not other.is_accept():
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_connect(self) -> bool:
        return isinstance(self, Origin.CONNECT)
    def is_accept(self) -> bool:
        return isinstance(self, Origin.ACCEPT)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
Origin.CONNECT = type("Origin.CONNECT", (Origin.CONNECT, Origin,), {})  # type: ignore
Origin.ACCEPT = type("Origin.ACCEPT", (Origin.ACCEPT, Origin,), {})  # type: ignore




class FfiConverterTypeOrigin(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return Origin.CONNECT(
                FfiConverterTypeSyncReason.read(buf),
            )
        if variant == 2:
            return Origin.ACCEPT(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_connect():
            buf.writeI32(1)
            FfiConverterTypeSyncReason.write(value.reason, buf)
        if value.is_accept():
            buf.writeI32(2)






class SocketAddr:
    def __init__(self):
        raise RuntimeError("SocketAddr cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class V4:
        def __init__(self,a, b, c, d):
            
            self.a = a
            self.b = b
            self.c = c
            self.d = d
            

        def __str__(self):
            return "SocketAddr.V4(a={}, b={}, c={}, d={})".format(self.a, self.b, self.c, self.d)

        def __eq__(self, other):
            if not other.is_v4():
                return False
            if self.a != other.a:
                return False
            if self.b != other.b:
                return False
            if self.c != other.c:
                return False
            if self.d != other.d:
                return False
            return True
    class V6:
        def __init__(self,addr):
            
            self.addr = addr
            

        def __str__(self):
            return "SocketAddr.V6(addr={})".format(self.addr)

        def __eq__(self, other):
            if not other.is_v6():
                return False
            if self.addr != other.addr:
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_v4(self) -> bool:
        return isinstance(self, SocketAddr.V4)
    def is_v6(self) -> bool:
        return isinstance(self, SocketAddr.V6)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
SocketAddr.V4 = type("SocketAddr.V4", (SocketAddr.V4, SocketAddr,), {})  # type: ignore
SocketAddr.V6 = type("SocketAddr.V6", (SocketAddr.V6, SocketAddr,), {})  # type: ignore




class FfiConverterTypeSocketAddr(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return SocketAddr.V4(
                FfiConverterUInt8.read(buf),
                FfiConverterUInt8.read(buf),
                FfiConverterUInt8.read(buf),
                FfiConverterUInt8.read(buf),
            )
        if variant == 2:
            return SocketAddr.V6(
                FfiConverterBytes.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_v4():
            buf.writeI32(1)
            FfiConverterUInt8.write(value.a, buf)
            FfiConverterUInt8.write(value.b, buf)
            FfiConverterUInt8.write(value.c, buf)
            FfiConverterUInt8.write(value.d, buf)
        if value.is_v6():
            buf.writeI32(2)
            FfiConverterBytes.write(value.addr, buf)






class SyncReason:
    def __init__(self):
        raise RuntimeError("SyncReason cannot be instantiated directly")

    # Each enum variant is a nested class of the enum itself.
    class DIRECT_JOIN:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "SyncReason.DIRECT_JOIN()".format()

        def __eq__(self, other):
            if not other.is_direct_join():
                return False
            return True
    class NEW_NEIGHBOR:
        def __init__(self,):
            
            pass
            

        def __str__(self):
            return "SyncReason.NEW_NEIGHBOR()".format()

        def __eq__(self, other):
            if not other.is_new_neighbor():
                return False
            return True
    

    # For each variant, we have an `is_NAME` method for easily checking
    # whether an instance is that variant.
    def is_direct_join(self) -> bool:
        return isinstance(self, SyncReason.DIRECT_JOIN)
    def is_new_neighbor(self) -> bool:
        return isinstance(self, SyncReason.NEW_NEIGHBOR)
    

# Now, a little trick - we make each nested variant class be a subclass of the main
# enum class, so that method calls and instance checks etc will work intuitively.
# We might be able to do this a little more neatly with a metaclass, but this'll do.
SyncReason.DIRECT_JOIN = type("SyncReason.DIRECT_JOIN", (SyncReason.DIRECT_JOIN, SyncReason,), {})  # type: ignore
SyncReason.NEW_NEIGHBOR = type("SyncReason.NEW_NEIGHBOR", (SyncReason.NEW_NEIGHBOR, SyncReason,), {})  # type: ignore




class FfiConverterTypeSyncReason(FfiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.readI32()
        if variant == 1:
            return SyncReason.DIRECT_JOIN(
            )
        if variant == 2:
            return SyncReason.NEW_NEIGHBOR(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    def write(value, buf):
        if value.is_direct_join():
            buf.writeI32(1)
        if value.is_new_neighbor():
            buf.writeI32(2)




import threading

class ConcurrentHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._left_map = {}  # type: Dict[Handle, Any]
        self._right_map = {}  # type: Dict[Any, Handle]

        self._lock = threading.Lock()
        self._current_handle = 0
        self._stride = 1


    def insert(self, obj):
        with self._lock:
            if obj in self._right_map:
                return self._right_map[obj]
            else:
                handle = self._current_handle
                self._current_handle += self._stride
                self._left_map[handle] = obj
                self._right_map[obj] = handle
                return handle

    def get(self, handle):
        with self._lock:
            return self._left_map.get(handle)

    def remove(self, handle):
        with self._lock:
            if handle in self._left_map:
                obj = self._left_map.pop(handle)
                del self._right_map[obj]
                return obj

# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
IDX_CALLBACK_FREE = 0
# Return codes for callback calls
UNIFFI_CALLBACK_SUCCESS = 0
UNIFFI_CALLBACK_ERROR = 1
UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class FfiConverterCallbackInterface:
    _handle_map = ConcurrentHandleMap()

    def __init__(self, cb):
        self._foreign_callback = cb

    def drop(self, handle):
        self.__class__._handle_map.remove(handle)

    @classmethod
    def lift(cls, handle):
        obj = cls._handle_map.get(handle)
        if not obj:
            raise InternalError("The object in the handle map has been dropped already")

        return obj

    @classmethod
    def read(cls, buf):
        handle = buf.readU64()
        cls.lift(handle)

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.writeU64(cls.lower(cb))

# Declaration and FfiConverters for SubscribeCallback Callback Interface

class SubscribeCallback:
    def event(self, event: "LiveEvent"):
        raise NotImplementedError

    

def py_foreignCallbackCallbackInterfaceSubscribeCallback(handle, method, args_data, args_len, buf_ptr):
    
    def invoke_event(python_callback, args_stream, buf_ptr):
        def makeCall():return python_callback.event(
                FfiConverterTypeLiveEvent.read(args_stream)
                )

        def makeCallAndHandleReturn():
            makeCall()
            return UNIFFI_CALLBACK_SUCCESS
        try:
            return makeCallAndHandleReturn()
        except IrohError as e:
            # Catch errors declared in the UDL file
            with RustBuffer.allocWithBuilder() as builder:
                FfiConverterTypeIrohError.write(e, builder)
                buf_ptr[0] = builder.finalize()
            return UNIFFI_CALLBACK_ERROR

    

    cb = FfiConverterCallbackInterfaceSubscribeCallback.lift(handle)
    if not cb:
        raise InternalError("No callback in handlemap; this is a Uniffi bug")

    if method == IDX_CALLBACK_FREE:
        FfiConverterCallbackInterfaceSubscribeCallback.drop(handle)
        # Successfull return
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
        return UNIFFI_CALLBACK_SUCCESS

    if method == 1:
        # Call the method and handle any errors
        # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs` for details
        try:
            return invoke_event(cb, RustBufferStream(args_data, args_len), buf_ptr)
        except BaseException as e:
            # Catch unexpected errors
            try:
                # Try to serialize the exception into a String
                buf_ptr[0] = FfiConverterString.lower(repr(e))
            except:
                # If that fails, just give up
                pass
            return UNIFFI_CALLBACK_UNEXPECTED_ERROR
    

    # This should never happen, because an out of bounds method index won't
    # ever be used. Once we can catch errors, we should return an InternalException.
    # https://github.com/mozilla/uniffi-rs/issues/351

    # An unexpected error happened.
    # See docs of ForeignCallback in `uniffi_core/src/ffi/foreigncallbacks.rs`
    return UNIFFI_CALLBACK_UNEXPECTED_ERROR

# We need to keep this function reference alive:
# if they get GC'd while in use then UniFFI internals could attempt to call a function
# that is in freed memory.
# That would be...uh...bad. Yeah, that's the word. Bad.
foreignCallbackCallbackInterfaceSubscribeCallback = FOREIGN_CALLBACK_T(py_foreignCallbackCallbackInterfaceSubscribeCallback)
rust_call(lambda err: _UniFFILib.uniffi_iroh_fn_init_callback_subscribecallback(foreignCallbackCallbackInterfaceSubscribeCallback, err))

# The FfiConverter which transforms the Callbacks in to Handles to pass to Rust.
FfiConverterCallbackInterfaceSubscribeCallback = FfiConverterCallbackInterface(foreignCallbackCallbackInterfaceSubscribeCallback)



class FfiConverterOptionalUInt16(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterUInt16.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterUInt16.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalDouble(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterDouble.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterDouble.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalString(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterString.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterString.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterOptionalTypeConnectionInfo(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        if value is None:
            buf.writeU8(0)
            return

        buf.writeU8(1)
        FfiConverterTypeConnectionInfo.write(value, buf)

    @classmethod
    def read(cls, buf):
        flag = buf.readU8()
        if flag == 0:
            return None
        elif flag == 1:
            return FfiConverterTypeConnectionInfo.read(buf)
        else:
            raise InternalError("Unexpected flag byte for optional type")



class FfiConverterSequenceTypeAuthorId(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeAuthorId.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeAuthorId.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeEntry(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeEntry.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeEntry.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeHash(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeHash.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeHash.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeConnectionInfo(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeConnectionInfo.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeConnectionInfo.read(buf) for i in range(count)
        ]



class FfiConverterSequenceTypeSocketAddr(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterTypeSocketAddr.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterTypeSocketAddr.read(buf) for i in range(count)
        ]



class FfiConverterSequenceOptionalDouble(FfiConverterRustBuffer):
    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.writeI32(items)
        for item in value:
            FfiConverterOptionalDouble.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            FfiConverterOptionalDouble.read(buf) for i in range(count)
        ]



class FfiConverterMapStringTypeCounterStats(FfiConverterRustBuffer):
    @classmethod
    def write(cls, items, buf):
        buf.writeI32(len(items))
        for (key, value) in items.items():
            FfiConverterString.write(key, buf)
            FfiConverterTypeCounterStats.write(value, buf)

    @classmethod
    def read(cls, buf):
        count = buf.readI32()
        if count < 0:
            raise InternalError("Unexpected negative map size")

        # It would be nice to use a dict comprehension,
        # but in Python 3.7 and before the evaluation order is not according to spec,
        # so we we're reading the value before the key.
        # This loop makes the order explicit: first reading the key, then the value.
        d = {}
        for i in range(count):
            key = FfiConverterString.read(buf)
            val = FfiConverterTypeCounterStats.read(buf)
            d[key] = val
        return d

def set_log_level(level: "LogLevel"):
    
    rust_call(_UniFFILib.uniffi_iroh_fn_func_set_log_level,
        FfiConverterTypeLogLevel.lower(level))


def start_metrics_collection():
    rust_call_with_error(FfiConverterTypeIrohError,_UniFFILib.uniffi_iroh_fn_func_start_metrics_collection,)


__all__ = [
    "InternalError",
    "ConnectionType",
    "ContentStatus",
    "IrohError",
    "LiveEventType",
    "LogLevel",
    "Origin",
    "SocketAddr",
    "SyncReason",
    "ConnectionInfo",
    "CounterStats",
    "InsertRemoteEvent",
    "LiveStatus",
    "SyncEvent",
    "set_log_level",
    "start_metrics_collection",
    "IrohNode",
    "Doc",
    "AuthorId",
    "Entry",
    "Hash",
    "DocTicket",
    "LiveEvent",
    "NamespaceId",
    "PublicKey",
    "SubscribeCallback",
]

