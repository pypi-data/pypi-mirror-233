import json
import os
import argparse
from typing import Optional, Any
from requests import post, put, patch, Response

class Constants:
    JSON_HEADER_CONTENT_TYPE = "application/json"
    MULTIPART_HEADER_CONTENT_TYPE = "multipart/form-data"
    REPORT_SCAN_RESULT_FILENAME = "container-sbom.json"

class SOOSSbomAnalysis:
    def __init__(self, args):
        self.api_key = args.api_key
        self.client_id = args.client_id
        self.project_name = args.project_name
        self.container_image = args.container_image
        self.base_uri = args.api_url

    def __generate_upload_results_url__(self, project_id: str, analysis_id: str) -> str:
        return f"{self.base_uri}/api/projects/{project_id}/analysis/{analysis_id}"

    def start_soos_analysis_request(self) -> Any:
    # Open the SBOM file generated by the 'docker sbom' command.
        with open(Constants.REPORT_SCAN_RESULT_FILENAME, 'rb') as f:
            files = {'file': ('{Constants.REPORT_SCAN_RESULT_FILENAME}', f, 'application/json')}

            # Construct headers
            headers = {
                'authorization': f"Bearer {self.api_key}",
                'accept': '*/*',
                'accept-language': 'es-419,es;q=0.9,en;q=0.8',
                'cache-control': 'no-cache',
                'content-type': 'multipart/form-data',
                'origin': 'https://dev-app.soos.io',
                'pragma': 'no-cache',
                'referer': 'https://dev-app.soos.io/sbom-scan/',
                'sec-ch-ua': '"Chromium";v="116", "Not)A;Brand";v="24", "Google Chrome";v="116"',
                'sec-ch-ua-mobile': '?0',
                'sec-ch-ua-platform': '"Windows"',
                'sec-fetch-dest': 'empty',
                'sec-fetch-mode': 'cors',
                'sec-fetch-site': 'same-site',
                'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36',
                'x-soos-ga': 'undefined',
            }

            # Endpoint URL for the scan
            api_url = f"{self.base_uri}/api/clients/{self.client_id}/quickscans/sbom"

            # Make the multipart/form-data POST request
            response = post(api_url, headers=headers, files=files)

            if response.ok:
                return response.json()
            else:
                raise Exception(f"Failed to start analysis: {response.text}")


    def upload_sbom_results_request(self, project_id: str, analysis_id: str) -> bool:
        try:
            sbom_report = self.open_results_file()
            sbom_report_encoded = sbom_report.encode('base64')
            api_url = self.__generate_upload_results_url__(project_id, analysis_id)
            files = {"base64Manifest": sbom_report_encoded}
            
            response = put(api_url, files=files, headers={"x-soos-apikey": self.api_key})
            
            if response.ok:
                return True
            else:
                raise Exception(f"Failed to upload results: {response.text}")

        except Exception as error:
            raise Exception(f"Error: {error}")

    def open_results_file(self) -> str:
        with open(Constants.REPORT_SCAN_RESULT_FILENAME, 'r') as file:
            return file.read()

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="SOOS Container Analysis")
    parser.add_argument("--api_key", required=True, help="API Key for authentication")
    parser.add_argument("--client_id", required=True, help="Client ID")
    parser.add_argument("--project_name", required=True, help="Project Name")
    parser.add_argument("--container_image", required=True, help="Container Image to scan")
    parser.add_argument("--api_url", required=True, help="API URL")

    args = parser.parse_args()

    analysis = SOOSSbomAnalysis(args)
    
    # Start Analysis
    analysis_response = analysis.start_soos_analysis_request()
    analysis_id = analysis_response.get('id')

    # Generate SBOM using Docker
    docker_command = f"docker sbom {analysis.container_image} > {Constants.REPORT_SCAN_RESULT_FILENAME}"
    os.system(docker_command)

    # Presumed project_id can be derived from project_name and client_id
    project_id = f"{analysis.client_id}/{analysis.project_name}"

    # Upload SBOM
    analysis.upload_sbom_results_request(project_id, analysis_id)
