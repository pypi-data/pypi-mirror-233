MkNodes contains an expansive Jinja2 Environment. It is comparable to
the `MkDocs` macros plugin. It has less settings (you can modify the environment
via code of course though), but has a much larger built-in set of macros and filters.

The main features of the environment are 2 things:

* All MkNodes can be used as a filter, as well as a macro:

    * Example for use as a filter: `{ { "classifiers" | MkMetadataBadges } }`
    * Example for use as a macro: `{ { mk.MkHeader("some header") } }`

    Nodes used as macro / filter know about the context, so they can get their information
    from the project.
    The requirements (CSS / JS / ...) from all rendered nodes are also collected and injected into the
    config / HTMLs.



* Project metadata is also available in the Jinja environment namespace.
  You can see all available info in the subsections of this page.

    * Example: `{ { metadata.license_name } }`


/// details
MkNodes cannot just re-use the MkDocs jinja environment
because at that stage of the build process, our nodes already became text and we need
the nodes for context (mainly to attach a parent to the MkNodes used as macros / filters)
///

### These are the available namespaces:
{{ namespaces | MkDefinitionList }}